// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MPSQ_areWedgeSuperPointsEqual (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        patches_superpoints_0_address0,
        patches_superpoints_0_ce0,
        patches_superpoints_0_q0,
        patches_superpoints_0_address1,
        patches_superpoints_0_ce1,
        patches_superpoints_0_q1,
        wsp1,
        wsp11,
        wsp2,
        wsp22,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] patches_superpoints_0_address0;
output   patches_superpoints_0_ce0;
input  [63:0] patches_superpoints_0_q0;
output  [7:0] patches_superpoints_0_address1;
output   patches_superpoints_0_ce1;
input  [63:0] patches_superpoints_0_q1;
input  [7:0] wsp1;
input  [2:0] wsp11;
input  [7:0] wsp2;
input  [2:0] wsp22;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] patches_superpoints_0_address0;
reg patches_superpoints_0_ce0;
reg[7:0] patches_superpoints_0_address1;
reg patches_superpoints_0_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
wire    ap_block_state10_pp0_stage1_iter4;
wire    ap_block_state12_pp0_stage1_iter5;
wire    ap_block_state14_pp0_stage1_iter6;
wire    ap_block_state16_pp0_stage1_iter7;
wire    ap_block_state18_pp0_stage1_iter8;
wire    ap_block_state20_pp0_stage1_iter9;
wire    ap_block_state22_pp0_stage1_iter10;
wire    ap_block_pp0_stage1_11001;
reg   [63:0] reg_142;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state11_pp0_stage0_iter5;
wire    ap_block_state13_pp0_stage0_iter6;
wire    ap_block_state15_pp0_stage0_iter7;
wire    ap_block_state17_pp0_stage0_iter8;
wire    ap_block_state19_pp0_stage0_iter9;
wire    ap_block_state21_pp0_stage0_iter10;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln870_reg_505;
reg   [0:0] icmp_ln870_reg_505_pp0_iter9_reg;
reg   [63:0] reg_146;
reg   [2:0] wsp22_read_reg_473;
reg   [2:0] wsp22_read_reg_473_pp0_iter1_reg;
reg   [7:0] wsp2_read_reg_478;
reg   [7:0] wsp2_read_reg_478_pp0_iter1_reg;
reg   [2:0] wsp11_read_reg_484;
reg   [7:0] wsp1_read_reg_489;
reg   [7:0] wsp1_read_reg_489_pp0_iter1_reg;
wire   [0:0] grp_fu_150_p2;
reg   [0:0] icmp_ln870_reg_505_pp0_iter2_reg;
reg   [0:0] icmp_ln870_reg_505_pp0_iter3_reg;
reg   [0:0] icmp_ln870_reg_505_pp0_iter4_reg;
reg   [0:0] icmp_ln870_reg_505_pp0_iter5_reg;
reg   [0:0] icmp_ln870_reg_505_pp0_iter6_reg;
reg   [0:0] icmp_ln870_reg_505_pp0_iter7_reg;
reg   [0:0] icmp_ln870_reg_505_pp0_iter8_reg;
reg   [0:0] icmp_ln870_reg_505_pp0_iter10_reg;
wire   [7:0] add_ln870_2_fu_222_p2;
reg   [7:0] add_ln870_2_reg_509;
wire   [13:0] add_ln870_1_fu_259_p2;
reg   [13:0] add_ln870_1_reg_514;
reg   [13:0] add_ln870_1_reg_514_pp0_iter2_reg;
reg   [13:0] add_ln870_1_reg_514_pp0_iter3_reg;
reg   [13:0] add_ln870_1_reg_514_pp0_iter4_reg;
reg   [13:0] add_ln870_1_reg_514_pp0_iter5_reg;
reg   [13:0] add_ln870_1_reg_514_pp0_iter6_reg;
wire   [7:0] add_ln870_5_fu_292_p2;
reg   [7:0] add_ln870_5_reg_524;
wire   [13:0] add_ln870_3_fu_329_p2;
reg   [13:0] add_ln870_3_reg_529;
reg   [13:0] add_ln870_3_reg_529_pp0_iter3_reg;
reg   [13:0] add_ln870_3_reg_529_pp0_iter4_reg;
reg   [13:0] add_ln870_3_reg_529_pp0_iter5_reg;
reg   [13:0] add_ln870_3_reg_529_pp0_iter6_reg;
reg   [13:0] add_ln870_3_reg_529_pp0_iter7_reg;
wire   [7:0] add_ln870_11_fu_397_p2;
reg   [7:0] add_ln870_11_reg_549;
wire   [7:0] add_ln870_13_fu_443_p2;
reg   [7:0] add_ln870_13_reg_554;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] ap_phi_mux_empty_phi_fu_135_p4;
reg   [0:0] ap_phi_reg_pp0_iter10_empty_reg_131;
wire   [0:0] ap_phi_reg_pp0_iter0_empty_reg_131;
reg   [0:0] ap_phi_reg_pp0_iter1_empty_reg_131;
reg   [0:0] ap_phi_reg_pp0_iter2_empty_reg_131;
reg   [0:0] ap_phi_reg_pp0_iter3_empty_reg_131;
reg   [0:0] ap_phi_reg_pp0_iter4_empty_reg_131;
reg   [0:0] ap_phi_reg_pp0_iter5_empty_reg_131;
reg   [0:0] ap_phi_reg_pp0_iter6_empty_reg_131;
reg   [0:0] ap_phi_reg_pp0_iter7_empty_reg_131;
reg   [0:0] ap_phi_reg_pp0_iter8_empty_reg_131;
reg   [0:0] ap_phi_reg_pp0_iter9_empty_reg_131;
wire   [63:0] zext_ln870_4_fu_179_p1;
wire   [63:0] zext_ln870_5_fu_206_p1;
wire   [63:0] zext_ln870_12_fu_449_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln870_15_fu_453_p1;
wire   [7:0] shl_ln870_fu_161_p2;
wire   [7:0] add_ln870_6_fu_167_p2;
wire   [7:0] wsp22_cast_fu_157_p1;
wire   [7:0] add_ln870_7_fu_173_p2;
wire   [7:0] shl_ln870_6_fu_188_p2;
wire   [7:0] add_ln870_8_fu_194_p2;
wire   [7:0] wsp11_cast_fu_184_p1;
wire   [7:0] add_ln870_9_fu_200_p2;
wire   [5:0] shl_ln_fu_211_p3;
wire   [7:0] zext_ln870_2_fu_218_p1;
wire   [12:0] shl_ln870_2_fu_228_p3;
wire   [10:0] shl_ln870_3_fu_239_p3;
wire   [13:0] zext_ln870_1_fu_246_p1;
wire   [13:0] zext_ln870_fu_235_p1;
wire   [13:0] zext_ln870_3_fu_256_p1;
wire   [13:0] add_ln870_fu_250_p2;
wire   [10:0] grp_fu_275_p0;
wire   [3:0] grp_fu_275_p1;
wire   [5:0] shl_ln870_1_fu_281_p3;
wire   [7:0] zext_ln870_8_fu_288_p1;
wire   [12:0] shl_ln870_4_fu_298_p3;
wire   [10:0] shl_ln870_5_fu_309_p3;
wire   [13:0] zext_ln870_7_fu_316_p1;
wire   [13:0] zext_ln870_6_fu_305_p1;
wire   [13:0] zext_ln870_9_fu_326_p1;
wire   [13:0] add_ln870_4_fu_320_p2;
wire   [10:0] grp_fu_345_p0;
wire   [3:0] grp_fu_345_p1;
wire   [28:0] grp_fu_457_p2;
wire   [5:0] tmp_fu_366_p4;
wire   [7:0] tmp_121_cast_fu_375_p3;
wire   [7:0] udiv_ln_cast_fu_357_p4;
wire   [2:0] grp_fu_275_p2;
wire   [2:0] trunc_ln870_fu_389_p1;
wire   [7:0] add_ln870_10_fu_383_p2;
wire   [7:0] zext_ln870_11_fu_393_p1;
wire   [28:0] grp_fu_465_p2;
wire   [5:0] tmp_35_fu_412_p4;
wire   [7:0] tmp_123_cast_fu_421_p3;
wire   [7:0] udiv_ln870_1_cast_fu_403_p4;
wire   [2:0] grp_fu_345_p2;
wire   [2:0] trunc_ln870_2_fu_435_p1;
wire   [7:0] add_ln870_12_fu_429_p2;
wire   [7:0] zext_ln870_14_fu_439_p1;
wire   [13:0] grp_fu_457_p0;
wire   [15:0] grp_fu_457_p1;
wire   [13:0] grp_fu_465_p0;
wire   [15:0] grp_fu_465_p1;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to10;
reg    ap_idle_pp0_0to9;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [28:0] grp_fu_457_p00;
wire   [28:0] grp_fu_465_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

MPSQ_urem_11ns_4ns_3_15_1 #(
    .ID( 1 ),
    .NUM_STAGE( 15 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 3 ))
urem_11ns_4ns_3_15_1_U6386(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_275_p0),
    .din1(grp_fu_275_p1),
    .ce(1'b1),
    .dout(grp_fu_275_p2)
);

MPSQ_urem_11ns_4ns_3_15_1 #(
    .ID( 1 ),
    .NUM_STAGE( 15 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 3 ))
urem_11ns_4ns_3_15_1_U6387(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_345_p0),
    .din1(grp_fu_345_p1),
    .ce(1'b1),
    .dout(grp_fu_345_p2)
);

MPSQ_mul_mul_14ns_16ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
mul_mul_14ns_16ns_29_4_1_U6388(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_457_p0),
    .din1(grp_fu_457_p1),
    .ce(1'b1),
    .dout(grp_fu_457_p2)
);

MPSQ_mul_mul_14ns_16ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
mul_mul_14ns_16ns_29_4_1_U6389(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_465_p0),
    .din1(grp_fu_465_p1),
    .ce(1'b1),
    .dout(grp_fu_465_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (grp_fu_150_p2 == 1'd0))) begin
        ap_phi_reg_pp0_iter1_empty_reg_131 <= 1'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_empty_reg_131 <= ap_phi_reg_pp0_iter0_empty_reg_131;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln870_reg_505_pp0_iter8_reg == 1'd1))) begin
        add_ln870_11_reg_549 <= add_ln870_11_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln870_reg_505_pp0_iter8_reg == 1'd1))) begin
        add_ln870_13_reg_554 <= add_ln870_13_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln870_reg_505 == 1'd1))) begin
        add_ln870_1_reg_514[13 : 3] <= add_ln870_1_fu_259_p2[13 : 3];
        add_ln870_5_reg_524[7 : 3] <= add_ln870_5_fu_292_p2[7 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln870_1_reg_514_pp0_iter2_reg[13 : 3] <= add_ln870_1_reg_514[13 : 3];
        add_ln870_1_reg_514_pp0_iter3_reg[13 : 3] <= add_ln870_1_reg_514_pp0_iter2_reg[13 : 3];
        add_ln870_1_reg_514_pp0_iter4_reg[13 : 3] <= add_ln870_1_reg_514_pp0_iter3_reg[13 : 3];
        add_ln870_1_reg_514_pp0_iter5_reg[13 : 3] <= add_ln870_1_reg_514_pp0_iter4_reg[13 : 3];
        add_ln870_1_reg_514_pp0_iter6_reg[13 : 3] <= add_ln870_1_reg_514_pp0_iter5_reg[13 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (grp_fu_150_p2 == 1'd1))) begin
        add_ln870_2_reg_509[7 : 3] <= add_ln870_2_fu_222_p2[7 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln870_reg_505 == 1'd1))) begin
        add_ln870_3_reg_529[13 : 3] <= add_ln870_3_fu_329_p2[13 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln870_3_reg_529_pp0_iter3_reg[13 : 3] <= add_ln870_3_reg_529[13 : 3];
        add_ln870_3_reg_529_pp0_iter4_reg[13 : 3] <= add_ln870_3_reg_529_pp0_iter3_reg[13 : 3];
        add_ln870_3_reg_529_pp0_iter5_reg[13 : 3] <= add_ln870_3_reg_529_pp0_iter4_reg[13 : 3];
        add_ln870_3_reg_529_pp0_iter6_reg[13 : 3] <= add_ln870_3_reg_529_pp0_iter5_reg[13 : 3];
        add_ln870_3_reg_529_pp0_iter7_reg[13 : 3] <= add_ln870_3_reg_529_pp0_iter6_reg[13 : 3];
        icmp_ln870_reg_505_pp0_iter10_reg <= icmp_ln870_reg_505_pp0_iter9_reg;
        icmp_ln870_reg_505_pp0_iter2_reg <= icmp_ln870_reg_505;
        icmp_ln870_reg_505_pp0_iter3_reg <= icmp_ln870_reg_505_pp0_iter2_reg;
        icmp_ln870_reg_505_pp0_iter4_reg <= icmp_ln870_reg_505_pp0_iter3_reg;
        icmp_ln870_reg_505_pp0_iter5_reg <= icmp_ln870_reg_505_pp0_iter4_reg;
        icmp_ln870_reg_505_pp0_iter6_reg <= icmp_ln870_reg_505_pp0_iter5_reg;
        icmp_ln870_reg_505_pp0_iter7_reg <= icmp_ln870_reg_505_pp0_iter6_reg;
        icmp_ln870_reg_505_pp0_iter8_reg <= icmp_ln870_reg_505_pp0_iter7_reg;
        icmp_ln870_reg_505_pp0_iter9_reg <= icmp_ln870_reg_505_pp0_iter8_reg;
        wsp11_read_reg_484 <= wsp11;
        wsp1_read_reg_489 <= wsp1;
        wsp1_read_reg_489_pp0_iter1_reg <= wsp1_read_reg_489;
        wsp22_read_reg_473 <= wsp22;
        wsp22_read_reg_473_pp0_iter1_reg <= wsp22_read_reg_473;
        wsp2_read_reg_478 <= wsp2;
        wsp2_read_reg_478_pp0_iter1_reg <= wsp2_read_reg_478;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter10_empty_reg_131 <= ap_phi_reg_pp0_iter9_empty_reg_131;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter2_empty_reg_131 <= ap_phi_reg_pp0_iter1_empty_reg_131;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter3_empty_reg_131 <= ap_phi_reg_pp0_iter2_empty_reg_131;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter4_empty_reg_131 <= ap_phi_reg_pp0_iter3_empty_reg_131;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter5_empty_reg_131 <= ap_phi_reg_pp0_iter4_empty_reg_131;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter6_empty_reg_131 <= ap_phi_reg_pp0_iter5_empty_reg_131;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter7_empty_reg_131 <= ap_phi_reg_pp0_iter6_empty_reg_131;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter8_empty_reg_131 <= ap_phi_reg_pp0_iter7_empty_reg_131;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter9_empty_reg_131 <= ap_phi_reg_pp0_iter8_empty_reg_131;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln870_reg_505 <= grp_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln870_reg_505_pp0_iter9_reg == 1'd1)))) begin
        reg_142 <= patches_superpoints_0_q1;
        reg_146 <= patches_superpoints_0_q0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to9 = 1'b1;
    end else begin
        ap_idle_pp0_0to9 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to10 = 1'b1;
    end else begin
        ap_idle_pp0_1to10 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln870_reg_505_pp0_iter10_reg == 1'd1)) begin
        ap_phi_mux_empty_phi_fu_135_p4 = grp_fu_150_p2;
    end else begin
        ap_phi_mux_empty_phi_fu_135_p4 = ap_phi_reg_pp0_iter10_empty_reg_131;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to9 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        patches_superpoints_0_address0 = zext_ln870_15_fu_453_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        patches_superpoints_0_address0 = zext_ln870_4_fu_179_p1;
    end else begin
        patches_superpoints_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        patches_superpoints_0_address1 = zext_ln870_12_fu_449_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        patches_superpoints_0_address1 = zext_ln870_5_fu_206_p1;
    end else begin
        patches_superpoints_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        patches_superpoints_0_ce0 = 1'b1;
    end else begin
        patches_superpoints_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        patches_superpoints_0_ce1 = 1'b1;
    end else begin
        patches_superpoints_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to10 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln870_10_fu_383_p2 = (tmp_121_cast_fu_375_p3 + udiv_ln_cast_fu_357_p4);

assign add_ln870_11_fu_397_p2 = (add_ln870_10_fu_383_p2 + zext_ln870_11_fu_393_p1);

assign add_ln870_12_fu_429_p2 = (tmp_123_cast_fu_421_p3 + udiv_ln870_1_cast_fu_403_p4);

assign add_ln870_13_fu_443_p2 = (add_ln870_12_fu_429_p2 + zext_ln870_14_fu_439_p1);

assign add_ln870_1_fu_259_p2 = (zext_ln870_3_fu_256_p1 + add_ln870_fu_250_p2);

assign add_ln870_2_fu_222_p2 = (zext_ln870_2_fu_218_p1 + 8'd120);

assign add_ln870_3_fu_329_p2 = (zext_ln870_9_fu_326_p1 + add_ln870_4_fu_320_p2);

assign add_ln870_4_fu_320_p2 = (zext_ln870_7_fu_316_p1 + zext_ln870_6_fu_305_p1);

assign add_ln870_5_fu_292_p2 = (zext_ln870_8_fu_288_p1 + 8'd120);

assign add_ln870_6_fu_167_p2 = (shl_ln870_fu_161_p2 + wsp2);

assign add_ln870_7_fu_173_p2 = (add_ln870_6_fu_167_p2 + wsp22_cast_fu_157_p1);

assign add_ln870_8_fu_194_p2 = (shl_ln870_6_fu_188_p2 + wsp1);

assign add_ln870_9_fu_200_p2 = (add_ln870_8_fu_194_p2 + wsp11_cast_fu_184_p1);

assign add_ln870_fu_250_p2 = (zext_ln870_1_fu_246_p1 + zext_ln870_fu_235_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_empty_reg_131 = 'bx;

assign ap_return = ap_phi_mux_empty_phi_fu_135_p4;

assign grp_fu_150_p2 = ((reg_142 == reg_146) ? 1'b1 : 1'b0);

assign grp_fu_275_p0 = {{add_ln870_1_fu_259_p2[13:3]}};

assign grp_fu_275_p1 = 11'd5;

assign grp_fu_345_p0 = {{add_ln870_3_fu_329_p2[13:3]}};

assign grp_fu_345_p1 = 11'd5;

assign grp_fu_457_p0 = grp_fu_457_p00;

assign grp_fu_457_p00 = add_ln870_1_reg_514_pp0_iter6_reg;

assign grp_fu_457_p1 = 29'd26215;

assign grp_fu_465_p0 = grp_fu_465_p00;

assign grp_fu_465_p00 = add_ln870_3_reg_529_pp0_iter7_reg;

assign grp_fu_465_p1 = 29'd26215;

assign shl_ln870_1_fu_281_p3 = {{wsp22_read_reg_473_pp0_iter1_reg}, {3'd0}};

assign shl_ln870_2_fu_228_p3 = {{wsp1_read_reg_489_pp0_iter1_reg}, {5'd0}};

assign shl_ln870_3_fu_239_p3 = {{wsp1_read_reg_489_pp0_iter1_reg}, {3'd0}};

assign shl_ln870_4_fu_298_p3 = {{wsp2_read_reg_478_pp0_iter1_reg}, {5'd0}};

assign shl_ln870_5_fu_309_p3 = {{wsp2_read_reg_478_pp0_iter1_reg}, {3'd0}};

assign shl_ln870_6_fu_188_p2 = wsp1 << 8'd2;

assign shl_ln870_fu_161_p2 = wsp2 << 8'd2;

assign shl_ln_fu_211_p3 = {{wsp11_read_reg_484}, {3'd0}};

assign tmp_121_cast_fu_375_p3 = {{tmp_fu_366_p4}, {2'd0}};

assign tmp_123_cast_fu_421_p3 = {{tmp_35_fu_412_p4}, {2'd0}};

assign tmp_35_fu_412_p4 = {{grp_fu_465_p2[25:20]}};

assign tmp_fu_366_p4 = {{grp_fu_457_p2[25:20]}};

assign trunc_ln870_2_fu_435_p1 = grp_fu_345_p2[2:0];

assign trunc_ln870_fu_389_p1 = grp_fu_275_p2[2:0];

assign udiv_ln870_1_cast_fu_403_p4 = {{grp_fu_465_p2[27:20]}};

assign udiv_ln_cast_fu_357_p4 = {{grp_fu_457_p2[27:20]}};

assign wsp11_cast_fu_184_p1 = wsp11;

assign wsp22_cast_fu_157_p1 = wsp22;

assign zext_ln870_11_fu_393_p1 = trunc_ln870_fu_389_p1;

assign zext_ln870_12_fu_449_p1 = add_ln870_11_reg_549;

assign zext_ln870_14_fu_439_p1 = trunc_ln870_2_fu_435_p1;

assign zext_ln870_15_fu_453_p1 = add_ln870_13_reg_554;

assign zext_ln870_1_fu_246_p1 = shl_ln870_3_fu_239_p3;

assign zext_ln870_2_fu_218_p1 = shl_ln_fu_211_p3;

assign zext_ln870_3_fu_256_p1 = add_ln870_2_reg_509;

assign zext_ln870_4_fu_179_p1 = add_ln870_7_fu_173_p2;

assign zext_ln870_5_fu_206_p1 = add_ln870_9_fu_200_p2;

assign zext_ln870_6_fu_305_p1 = shl_ln870_4_fu_298_p3;

assign zext_ln870_7_fu_316_p1 = shl_ln870_5_fu_309_p3;

assign zext_ln870_8_fu_288_p1 = shl_ln870_1_fu_281_p3;

assign zext_ln870_9_fu_326_p1 = add_ln870_5_reg_524;

assign zext_ln870_fu_235_p1 = shl_ln870_2_fu_228_p3;

always @ (posedge ap_clk) begin
    add_ln870_2_reg_509[2:0] <= 3'b000;
    add_ln870_1_reg_514[2:0] <= 3'b000;
    add_ln870_1_reg_514_pp0_iter2_reg[2:0] <= 3'b000;
    add_ln870_1_reg_514_pp0_iter3_reg[2:0] <= 3'b000;
    add_ln870_1_reg_514_pp0_iter4_reg[2:0] <= 3'b000;
    add_ln870_1_reg_514_pp0_iter5_reg[2:0] <= 3'b000;
    add_ln870_1_reg_514_pp0_iter6_reg[2:0] <= 3'b000;
    add_ln870_5_reg_524[2:0] <= 3'b000;
    add_ln870_3_reg_529[2:0] <= 3'b000;
    add_ln870_3_reg_529_pp0_iter3_reg[2:0] <= 3'b000;
    add_ln870_3_reg_529_pp0_iter4_reg[2:0] <= 3'b000;
    add_ln870_3_reg_529_pp0_iter5_reg[2:0] <= 3'b000;
    add_ln870_3_reg_529_pp0_iter6_reg[2:0] <= 3'b000;
    add_ln870_3_reg_529_pp0_iter7_reg[2:0] <= 3'b000;
end

endmodule //MPSQ_areWedgeSuperPointsEqual
