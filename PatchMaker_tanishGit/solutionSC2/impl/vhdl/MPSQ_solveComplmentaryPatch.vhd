-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_solveComplmentaryPatch is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n_patches_i : IN STD_LOGIC_VECTOR (7 downto 0);
    n_patches_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    n_patches_o_ap_vld : OUT STD_LOGIC;
    GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    GDn_points_ce0 : OUT STD_LOGIC;
    GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_we0 : OUT STD_LOGIC;
    patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce1 : OUT STD_LOGIC;
    patches_superpoints_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    ppl : IN STD_LOGIC_VECTOR (31 downto 0);
    nPatchesAtOriginal : IN STD_LOGIC_VECTOR (7 downto 0);
    previous_z_top_min_read : IN STD_LOGIC_VECTOR (31 downto 0);
    complementary_apexZ0 : IN STD_LOGIC_VECTOR (31 downto 0);
    white_space_height_read : IN STD_LOGIC_VECTOR (63 downto 0);
    original_c : IN STD_LOGIC_VECTOR (31 downto 0);
    original_d : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (31 downto 0);
    z_top_min_read : IN STD_LOGIC_VECTOR (31 downto 0);
    GDarrayDecoded_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    GDarrayDecoded_ce0 : OUT STD_LOGIC;
    GDarrayDecoded_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_ce1 : OUT STD_LOGIC;
    patches_parameters_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_613_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_613_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_613_p_din3 : OUT STD_LOGIC_VECTOR (2 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_613_p_din4 : OUT STD_LOGIC_VECTOR (2 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_613_p_din5 : OUT STD_LOGIC_VECTOR (2 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_613_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_613_p_ce : OUT STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_613_p_start : OUT STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_613_p_ready : IN STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_613_p_done : IN STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_613_p_idle : IN STD_LOGIC;
    grp_fu_1631_p_din0 : OUT STD_LOGIC_VECTOR (32 downto 0);
    grp_fu_1631_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1631_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1631_p_ce : OUT STD_LOGIC );
end;


architecture behav of MPSQ_solveComplmentaryPatch is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (76 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (76 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (76 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (76 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (76 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (76 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (76 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (76 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (76 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (76 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (76 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv64_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv12_801 : STD_LOGIC_VECTOR (11 downto 0) := "100000000001";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv12_601 : STD_LOGIC_VECTOR (11 downto 0) := "011000000001";
    constant ap_const_lv12_401 : STD_LOGIC_VECTOR (11 downto 0) := "010000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv12_30 : STD_LOGIC_VECTOR (11 downto 0) := "000000110000";
    constant ap_const_lv12_37 : STD_LOGIC_VECTOR (11 downto 0) := "000000110111";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_2_reg_514 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_reg_534 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_545 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_5_reg_585 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_6_reg_596 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_607 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_8_reg_619 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_630 : STD_LOGIC_VECTOR (2 downto 0);
    signal layerSMin_reg_641 : STD_LOGIC_VECTOR (63 downto 0);
    signal layerWithSmallestShift_reg_653 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_808 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln1104_fu_813_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1104_reg_1858 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1110_fu_817_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1110_reg_1864 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln1108_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1108_reg_1870 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1108_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_fu_833_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_reg_1879 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1115_fu_837_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1115_reg_1883 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_760_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_tmp7_reg_1888 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln1117_fu_842_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1117_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1117_reg_1898 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_cast_fu_854_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_1902 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_859_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1912 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln1137_fu_866_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1137_reg_1916 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1140_fu_877_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1140_reg_1921 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1127_fu_881_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1127_reg_1926 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1130_fu_892_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1130_reg_1931 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1140_fu_896_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state12_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln1140_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1140_reg_1941 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_cast_fu_908_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_1945 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln1130_fu_913_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state15_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln1130_fu_919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1130_reg_1965 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_cast_fu_925_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1969 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1146_fu_947_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1146_reg_1979 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln1149_fu_955_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state18_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state19_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln1149_fu_961_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1149_reg_1992 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_z_i_index_addr_3_reg_1996 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1155_fu_1002_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal ap_block_state21_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state23_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state24_pp4_stage0_iter3 : BOOLEAN;
    signal ap_block_state25_pp4_stage0_iter4 : BOOLEAN;
    signal ap_block_state26_pp4_stage0_iter5 : BOOLEAN;
    signal ap_block_state27_pp4_stage0_iter6 : BOOLEAN;
    signal ap_block_state28_pp4_stage0_iter7 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal icmp_ln1155_fu_1008_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1155_reg_2012 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1155_reg_2012_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1155_reg_2012_pp4_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1155_reg_2012_pp4_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1155_reg_2012_pp4_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1155_reg_2012_pp4_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1155_reg_2012_pp4_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal new_z_i_index_addr_4_reg_2016 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_4_reg_2016_pp4_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_4_reg_2016_pp4_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_4_reg_2016_pp4_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_4_reg_2016_pp4_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_4_reg_2016_pp4_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_4_reg_2016_pp4_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_z_i_index_load_1_reg_2022 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal grp_fu_775_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_2032 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_2032_pp4_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_2038 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_1086_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_24_reg_2044 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1162_fu_1188_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1162_reg_2049 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal ap_block_state30_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state31_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state32_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal icmp_ln1162_fu_1194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1162_reg_2054 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1162_reg_2054_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_cast_fu_1200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_7_cast_reg_2058 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_7_cast_reg_2058_pp5_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1170_fu_1230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1170_reg_2103 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_block_state34_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state35_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state36_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_state37_pp6_stage0_iter3 : BOOLEAN;
    signal ap_block_state38_pp6_stage0_iter4 : BOOLEAN;
    signal ap_block_state39_pp6_stage0_iter5 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal icmp_ln1170_reg_2103_pp6_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1175_fu_1236_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1175_reg_2107 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal add_ln1175_reg_2107_pp6_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1172_fu_1247_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1172_reg_2118 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1172_reg_2118_pp6_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1172_reg_2118_pp6_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1172_reg_2118_pp6_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1172_reg_2118_pp6_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal new_z_i_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_V_load_reg_2122 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal sext_ln1183_fu_1276_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1183_reg_2127 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal add_ln1183_fu_1279_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal ap_block_state41_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state42_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal icmp_ln1183_fu_1285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1183_reg_2141 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln534_fu_1291_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln534_reg_2145 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_1295_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_2150 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerWithSmallestShift_1_fu_1352_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal layerSMin_1_fu_1360_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1192_fu_1368_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1192_reg_2165 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_21_cast_fu_1375_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_21_cast_reg_2170 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_fu_1394_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_reg_2181 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal lhs_2_fu_1454_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_2_reg_2192 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal lhs_3_fu_1508_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_3_reg_2203 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_4_fu_1551_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_4_reg_2209 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ret_6_fu_1561_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_6_reg_2215 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal sext_ln534_fu_1566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal tmp_19_reg_2225 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1237_fu_1582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1237_reg_2230 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1220_fu_1590_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1220_reg_2234 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal zext_ln1256_fu_1602_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1256_reg_2241 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_makePatch_alignedToLine_fu_699_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ppl_assign2_reg_2246 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal lastPatchIdx_fu_1607_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lastPatchIdx_reg_2251 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1268_fu_1613_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1268_reg_2259 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1290_fu_1627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1290_reg_2264 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal sext_ln534_1_fu_1725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln534_1_reg_2278 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal zext_ln1293_fu_1729_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1293_reg_2283 : STD_LOGIC_VECTOR (8 downto 0);
    signal thirdLastPatchIdx_fu_1732_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal thirdLastPatchIdx_reg_2288 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1300_fu_1738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1300_reg_2293 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal add_ln1300_fu_1744_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1300_reg_2297 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1320_fu_1794_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state15 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state18 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state21 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter7 : STD_LOGIC := '0';
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state30 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state34 : STD_LOGIC;
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter5 : STD_LOGIC := '0';
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_exit_iter0_state41 : STD_LOGIC;
    signal current_z_i_index_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal current_z_i_index_ce0 : STD_LOGIC;
    signal current_z_i_index_we0 : STD_LOGIC;
    signal current_z_i_index_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_z_i_index_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_ce0 : STD_LOGIC;
    signal new_z_i_index_we0 : STD_LOGIC;
    signal new_z_i_index_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_z_i_index_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_ce1 : STD_LOGIC;
    signal new_z_i_index_we1 : STD_LOGIC;
    signal new_z_i_index_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_z_i_index_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_z_i_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_V_ce0 : STD_LOGIC;
    signal new_z_i_V_we0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_699_ap_start : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_699_ap_done : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_699_ap_idle : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_699_ap_ready : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_699_n_patches_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_makePatch_alignedToLine_fu_699_n_patches_o_ap_vld : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_699_GDn_points_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_makePatch_alignedToLine_fu_699_GDn_points_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_699_patches_superpoints_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_makePatch_alignedToLine_fu_699_patches_superpoints_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_699_patches_superpoints_we0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_699_patches_superpoints_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_makePatch_alignedToLine_fu_699_z_top : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_makePatch_alignedToLine_fu_699_p_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_makePatch_alignedToLine_fu_699_GDarrayDecoded_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_makePatch_alignedToLine_fu_699_GDarrayDecoded_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_699_patches_parameters_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_makePatch_alignedToLine_fu_699_patches_parameters_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_699_patches_parameters_we0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_699_patches_parameters_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_areWedgeSuperPointsEqual_fu_722_ap_start : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_722_ap_done : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_722_ap_idle : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_722_ap_ready : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_722_wsp1_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_areWedgeSuperPointsEqual_fu_722_wsp1_2_ce0 : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_722_wsp1_2_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_areWedgeSuperPointsEqual_fu_722_wsp1_2_ce1 : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_722_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_delete_patch_fu_734_ap_start : STD_LOGIC;
    signal grp_delete_patch_fu_734_ap_done : STD_LOGIC;
    signal grp_delete_patch_fu_734_ap_idle : STD_LOGIC;
    signal grp_delete_patch_fu_734_ap_ready : STD_LOGIC;
    signal grp_delete_patch_fu_734_n_patches : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_delete_patch_fu_734_n_patches_ap_vld : STD_LOGIC;
    signal grp_delete_patch_fu_734_patches_superpoints_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_delete_patch_fu_734_patches_superpoints_ce0 : STD_LOGIC;
    signal grp_delete_patch_fu_734_patches_superpoints_we0 : STD_LOGIC;
    signal grp_delete_patch_fu_734_patches_superpoints_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_delete_patch_fu_734_patches_superpoints_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_delete_patch_fu_734_patches_superpoints_ce1 : STD_LOGIC;
    signal grp_delete_patch_fu_734_index : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_delete_patch_fu_734_patches_parameters_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_delete_patch_fu_734_patches_parameters_V_ce0 : STD_LOGIC;
    signal grp_delete_patch_fu_734_patches_parameters_V_we0 : STD_LOGIC;
    signal grp_delete_patch_fu_734_patches_parameters_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_delete_patch_fu_734_patches_parameters_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_delete_patch_fu_734_patches_parameters_V_ce1 : STD_LOGIC;
    signal grp_get_index_from_z_fu_746_ap_start : STD_LOGIC;
    signal grp_get_index_from_z_fu_746_ap_done : STD_LOGIC;
    signal grp_get_index_from_z_fu_746_ap_idle : STD_LOGIC;
    signal grp_get_index_from_z_fu_746_ap_ready : STD_LOGIC;
    signal grp_get_index_from_z_fu_746_GDn_points_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_get_index_from_z_fu_746_GDn_points_ce0 : STD_LOGIC;
    signal grp_get_index_from_z_fu_746_layer : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_get_index_from_z_fu_746_z_value : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_get_index_from_z_fu_746_GDarrayDecoded_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_get_index_from_z_fu_746_GDarrayDecoded_ce0 : STD_LOGIC;
    signal grp_get_index_from_z_fu_746_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_760_ap_start : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_760_ap_done : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_760_ap_idle : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_760_ap_ready : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_760_ap_ce : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_760_z_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_760_z_j : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_760_i : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_760_j : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_760_k : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_502 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_phi_mux_empty_73_phi_fu_528_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_73_reg_525 : STD_LOGIC_VECTOR (8 downto 0);
    signal counter_0_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal counterUpshift_0_reg_566 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_76_reg_576 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_i_7_phi_fu_611_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal ap_phi_mux_i_8_phi_fu_623_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal i_10_reg_665 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_phi_mux_current_z_top_index_0_phi_fu_680_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_z_top_index_0_reg_677 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_phi_mux_z_top_min_4_phi_fu_691_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_top_min_4_reg_688 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_makePatch_alignedToLine_fu_699_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal grp_areWedgeSuperPointsEqual_fu_722_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (76 downto 0);
    signal ap_NS_fsm_state58 : STD_LOGIC;
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal grp_delete_patch_fu_734_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal grp_get_index_from_z_fu_746_ap_start_reg : STD_LOGIC := '0';
    signal grp_straightLineProjectorFromLayerIJtoK_fu_760_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm_state4 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal i_5_cast_fu_967_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal i_6_cast_fu_1014_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal tmp_15_fu_1221_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1175_cast_fu_1242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1207_fu_1389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1212_fu_1449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1217_fu_1467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1268_1_fu_1669_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1269_fu_1680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal new_z_i_atTop_V_3_fu_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_atTop_V_3_1_fu_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_atTop_V_3_2_fu_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_atTop_V_3_3_fu_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_atTop_V_3_4_fu_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_783_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1132_fu_930_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1151_fu_993_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_775_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln870_fu_833_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_859_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1138_fu_871_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1128_fu_886_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1146_fu_937_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_790_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1146_fu_941_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1151_fu_973_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1151_fu_977_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1151_fu_981_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1151_1_fu_987_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln1157_fu_1023_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1026_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1157_fu_1036_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln1157_1_fu_1046_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1157_fu_1040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1157_fu_1052_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1157_fu_1058_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln312_fu_1064_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal data_V_fu_1068_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal mantissa_fu_1090_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln341_fu_1103_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln341_fu_1106_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_1120_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_1112_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_1125_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_1129_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_fu_1137_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_fu_1099_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1141_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_fu_1145_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_13_fu_1157_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_1151_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal zext_ln662_fu_1165_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_1169_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_1205_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln1164_fu_1215_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1183_fu_1276_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1295_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln1185_fu_1309_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln1185_fu_1312_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_20_fu_1323_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln180_1_fu_1317_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln180_1_fu_1331_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1185_1_fu_1339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1185_fu_1343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1185_fu_1349_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1207_fu_1372_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1207_fu_1383_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln215_fu_1407_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_fu_1411_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_16_fu_1422_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln180_fu_1416_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln180_fu_1430_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln1212_fu_1444_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1205_fu_1438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1217_fu_1462_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln215_4_fu_1472_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_4_fu_1475_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_17_fu_1486_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln180_2_fu_1480_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln180_2_fu_1494_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln1210_fu_1502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln215_5_fu_1515_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_5_fu_1518_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_18_fu_1529_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln180_3_fu_1523_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln180_3_fu_1537_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln1215_fu_1545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln215_6_fu_1558_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1569_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1569_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1569_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1236_fu_1596_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_1617_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_21_fu_1640_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_22_cast_fu_1633_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1268_fu_1647_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1268_fu_1651_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1268_fu_1657_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln1268_fu_1663_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1269_fu_1674_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln215_7_fu_1685_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_8_fu_1688_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_9_fu_1698_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_10_fu_1701_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_7_fu_1692_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_8_fu_1705_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln878_fu_1711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1274_fu_1717_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_block_pp4_stage0_00001 : BOOLEAN;
    signal grp_fu_1569_ce : STD_LOGIC;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_state51_on_subcall_done : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component MPSQ_makePatch_alignedToLine IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        n_patches_i : IN STD_LOGIC_VECTOR (7 downto 0);
        n_patches_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        n_patches_o_ap_vld : OUT STD_LOGIC;
        GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        GDn_points_ce0 : OUT STD_LOGIC;
        GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_superpoints_ce0 : OUT STD_LOGIC;
        patches_superpoints_we0 : OUT STD_LOGIC;
        patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        patches_superpoints_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        apexZ0 : IN STD_LOGIC_VECTOR (31 downto 0);
        z_top : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        leftRight : IN STD_LOGIC_VECTOR (0 downto 0);
        GDarrayDecoded_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        GDarrayDecoded_ce0 : OUT STD_LOGIC;
        GDarrayDecoded_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_parameters_ce0 : OUT STD_LOGIC;
        patches_parameters_we0 : OUT STD_LOGIC;
        patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_areWedgeSuperPointsEqual IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        wsp1_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        wsp1_2_ce0 : OUT STD_LOGIC;
        wsp1_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        wsp1_2_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        wsp1_2_ce1 : OUT STD_LOGIC;
        wsp1_2_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        wsp1 : IN STD_LOGIC_VECTOR (7 downto 0);
        wsp11 : IN STD_LOGIC_VECTOR (2 downto 0);
        wsp2 : IN STD_LOGIC_VECTOR (7 downto 0);
        wsp23 : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component MPSQ_delete_patch IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        n_patches : OUT STD_LOGIC_VECTOR (7 downto 0);
        n_patches_ap_vld : OUT STD_LOGIC;
        n_patches_read : IN STD_LOGIC_VECTOR (7 downto 0);
        patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_superpoints_ce0 : OUT STD_LOGIC;
        patches_superpoints_we0 : OUT STD_LOGIC;
        patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        patches_superpoints_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_superpoints_ce1 : OUT STD_LOGIC;
        patches_superpoints_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        index : IN STD_LOGIC_VECTOR (8 downto 0);
        patches_parameters_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_parameters_V_ce0 : OUT STD_LOGIC;
        patches_parameters_V_we0 : OUT STD_LOGIC;
        patches_parameters_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_parameters_V_ce1 : OUT STD_LOGIC;
        patches_parameters_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_get_index_from_z IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        GDn_points_ce0 : OUT STD_LOGIC;
        GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        layer : IN STD_LOGIC_VECTOR (2 downto 0);
        z_value : IN STD_LOGIC_VECTOR (31 downto 0);
        GDarrayDecoded_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        GDarrayDecoded_ce0 : OUT STD_LOGIC;
        GDarrayDecoded_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component MPSQ_straightLineProjectorFromLayerIJtoK IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        z_i : IN STD_LOGIC_VECTOR (31 downto 0);
        z_j : IN STD_LOGIC_VECTOR (31 downto 0);
        i : IN STD_LOGIC_VECTOR (2 downto 0);
        j : IN STD_LOGIC_VECTOR (2 downto 0);
        k : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_sitofp_32ns_32_3_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component MPSQ_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_mul_33s_64s_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MPSQ_solveComplmentaryPatch_current_z_i_index IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component MPSQ_solveComplmentaryPatch_new_z_i_index IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component MPSQ_solveComplmentaryPatch_new_z_i_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    current_z_i_index_U : component MPSQ_solveComplmentaryPatch_current_z_i_index
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => current_z_i_index_address0,
        ce0 => current_z_i_index_ce0,
        we0 => current_z_i_index_we0,
        d0 => grp_get_index_from_z_fu_746_ap_return,
        q0 => current_z_i_index_q0);

    new_z_i_index_U : component MPSQ_solveComplmentaryPatch_new_z_i_index
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => new_z_i_index_address0,
        ce0 => new_z_i_index_ce0,
        we0 => new_z_i_index_we0,
        d0 => new_z_i_index_d0,
        q0 => new_z_i_index_q0,
        address1 => new_z_i_index_address1,
        ce1 => new_z_i_index_ce1,
        we1 => new_z_i_index_we1,
        d1 => new_z_i_index_d1,
        q1 => new_z_i_index_q1);

    new_z_i_V_U : component MPSQ_solveComplmentaryPatch_new_z_i_V
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => new_z_i_V_address0,
        ce0 => new_z_i_V_ce0,
        we0 => new_z_i_V_we0,
        d0 => GDarrayDecoded_q0,
        q0 => new_z_i_V_q0);

    grp_makePatch_alignedToLine_fu_699 : component MPSQ_makePatch_alignedToLine
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_makePatch_alignedToLine_fu_699_ap_start,
        ap_done => grp_makePatch_alignedToLine_fu_699_ap_done,
        ap_idle => grp_makePatch_alignedToLine_fu_699_ap_idle,
        ap_ready => grp_makePatch_alignedToLine_fu_699_ap_ready,
        n_patches_i => n_patches_i,
        n_patches_o => grp_makePatch_alignedToLine_fu_699_n_patches_o,
        n_patches_o_ap_vld => grp_makePatch_alignedToLine_fu_699_n_patches_o_ap_vld,
        GDn_points_address0 => grp_makePatch_alignedToLine_fu_699_GDn_points_address0,
        GDn_points_ce0 => grp_makePatch_alignedToLine_fu_699_GDn_points_ce0,
        GDn_points_q0 => GDn_points_q0,
        patches_superpoints_address0 => grp_makePatch_alignedToLine_fu_699_patches_superpoints_address0,
        patches_superpoints_ce0 => grp_makePatch_alignedToLine_fu_699_patches_superpoints_ce0,
        patches_superpoints_we0 => grp_makePatch_alignedToLine_fu_699_patches_superpoints_we0,
        patches_superpoints_d0 => grp_makePatch_alignedToLine_fu_699_patches_superpoints_d0,
        patches_superpoints_q0 => patches_superpoints_q0,
        apexZ0 => complementary_apexZ0,
        z_top => grp_makePatch_alignedToLine_fu_699_z_top,
        p_read => grp_makePatch_alignedToLine_fu_699_p_read,
        leftRight => ap_const_lv1_1,
        GDarrayDecoded_address0 => grp_makePatch_alignedToLine_fu_699_GDarrayDecoded_address0,
        GDarrayDecoded_ce0 => grp_makePatch_alignedToLine_fu_699_GDarrayDecoded_ce0,
        GDarrayDecoded_q0 => GDarrayDecoded_q0,
        patches_parameters_address0 => grp_makePatch_alignedToLine_fu_699_patches_parameters_address0,
        patches_parameters_ce0 => grp_makePatch_alignedToLine_fu_699_patches_parameters_ce0,
        patches_parameters_we0 => grp_makePatch_alignedToLine_fu_699_patches_parameters_we0,
        patches_parameters_d0 => grp_makePatch_alignedToLine_fu_699_patches_parameters_d0,
        patches_parameters_q0 => patches_parameters_q0,
        ap_return => grp_makePatch_alignedToLine_fu_699_ap_return);

    grp_areWedgeSuperPointsEqual_fu_722 : component MPSQ_areWedgeSuperPointsEqual
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_areWedgeSuperPointsEqual_fu_722_ap_start,
        ap_done => grp_areWedgeSuperPointsEqual_fu_722_ap_done,
        ap_idle => grp_areWedgeSuperPointsEqual_fu_722_ap_idle,
        ap_ready => grp_areWedgeSuperPointsEqual_fu_722_ap_ready,
        wsp1_2_address0 => grp_areWedgeSuperPointsEqual_fu_722_wsp1_2_address0,
        wsp1_2_ce0 => grp_areWedgeSuperPointsEqual_fu_722_wsp1_2_ce0,
        wsp1_2_q0 => patches_superpoints_q0,
        wsp1_2_address1 => grp_areWedgeSuperPointsEqual_fu_722_wsp1_2_address1,
        wsp1_2_ce1 => grp_areWedgeSuperPointsEqual_fu_722_wsp1_2_ce1,
        wsp1_2_q1 => patches_superpoints_q1,
        wsp1 => lastPatchIdx_reg_2251,
        wsp11 => i_10_reg_665,
        wsp2 => thirdLastPatchIdx_reg_2288,
        wsp23 => i_10_reg_665,
        ap_return => grp_areWedgeSuperPointsEqual_fu_722_ap_return);

    grp_delete_patch_fu_734 : component MPSQ_delete_patch
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_delete_patch_fu_734_ap_start,
        ap_done => grp_delete_patch_fu_734_ap_done,
        ap_idle => grp_delete_patch_fu_734_ap_idle,
        ap_ready => grp_delete_patch_fu_734_ap_ready,
        n_patches => grp_delete_patch_fu_734_n_patches,
        n_patches_ap_vld => grp_delete_patch_fu_734_n_patches_ap_vld,
        n_patches_read => reg_808,
        patches_superpoints_address0 => grp_delete_patch_fu_734_patches_superpoints_address0,
        patches_superpoints_ce0 => grp_delete_patch_fu_734_patches_superpoints_ce0,
        patches_superpoints_we0 => grp_delete_patch_fu_734_patches_superpoints_we0,
        patches_superpoints_d0 => grp_delete_patch_fu_734_patches_superpoints_d0,
        patches_superpoints_address1 => grp_delete_patch_fu_734_patches_superpoints_address1,
        patches_superpoints_ce1 => grp_delete_patch_fu_734_patches_superpoints_ce1,
        patches_superpoints_q1 => patches_superpoints_q1,
        index => grp_delete_patch_fu_734_index,
        patches_parameters_V_address0 => grp_delete_patch_fu_734_patches_parameters_V_address0,
        patches_parameters_V_ce0 => grp_delete_patch_fu_734_patches_parameters_V_ce0,
        patches_parameters_V_we0 => grp_delete_patch_fu_734_patches_parameters_V_we0,
        patches_parameters_V_d0 => grp_delete_patch_fu_734_patches_parameters_V_d0,
        patches_parameters_V_address1 => grp_delete_patch_fu_734_patches_parameters_V_address1,
        patches_parameters_V_ce1 => grp_delete_patch_fu_734_patches_parameters_V_ce1,
        patches_parameters_V_q1 => patches_parameters_q1);

    grp_get_index_from_z_fu_746 : component MPSQ_get_index_from_z
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_get_index_from_z_fu_746_ap_start,
        ap_done => grp_get_index_from_z_fu_746_ap_done,
        ap_idle => grp_get_index_from_z_fu_746_ap_idle,
        ap_ready => grp_get_index_from_z_fu_746_ap_ready,
        GDn_points_address0 => grp_get_index_from_z_fu_746_GDn_points_address0,
        GDn_points_ce0 => grp_get_index_from_z_fu_746_GDn_points_ce0,
        GDn_points_q0 => GDn_points_q0,
        layer => grp_get_index_from_z_fu_746_layer,
        z_value => grp_get_index_from_z_fu_746_z_value,
        GDarrayDecoded_address0 => grp_get_index_from_z_fu_746_GDarrayDecoded_address0,
        GDarrayDecoded_ce0 => grp_get_index_from_z_fu_746_GDarrayDecoded_ce0,
        GDarrayDecoded_q0 => GDarrayDecoded_q0,
        ap_return => grp_get_index_from_z_fu_746_ap_return);

    sitofp_32ns_32_3_no_dsp_1_U95 : component MPSQ_sitofp_32ns_32_3_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_775_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_775_p1);

    fcmp_32ns_32ns_1_2_no_dsp_1_U96 : component MPSQ_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_reg_2032,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_778_p2);

    mux_42_32_1_1_U97 : component MPSQ_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => new_z_i_atTop_V_3_1_fu_232,
        din1 => new_z_i_atTop_V_3_2_fu_236,
        din2 => new_z_i_atTop_V_3_3_fu_240,
        din3 => new_z_i_atTop_V_3_4_fu_244,
        din4 => tmp_8_fu_1295_p5,
        dout => tmp_8_fu_1295_p6);

    mux_42_32_1_1_U98 : component MPSQ_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => new_z_i_atTop_V_3_1_fu_232,
        din1 => new_z_i_atTop_V_3_2_fu_236,
        din2 => new_z_i_atTop_V_3_3_fu_240,
        din3 => new_z_i_atTop_V_3_4_fu_244,
        din4 => trunc_ln1192_reg_2165,
        dout => lhs_fu_1394_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln870_fu_833_p2 = ap_const_lv1_1) and (icmp_ln1108_fu_827_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln870_fu_833_p2 = ap_const_lv1_1) and (icmp_ln1108_fu_827_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state12) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((tmp_fu_859_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state12))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state12);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((tmp_fu_859_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state15) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((tmp_fu_859_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state15))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state15);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((tmp_fu_859_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state18) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state18))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state18);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state21) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state21)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state21);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter6 <= ap_enable_reg_pp4_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter7 <= ap_enable_reg_pp4_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp4_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state30) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state30)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state30);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                    ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state34) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state34)) then 
                        ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state34);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter3 <= ap_enable_reg_pp6_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter4 <= ap_enable_reg_pp6_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter5 <= ap_enable_reg_pp6_iter4;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                    ap_enable_reg_pp6_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp7_exit_iter0_state41) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp7_exit_iter0_state41))) then 
                    ap_enable_reg_pp7_iter1 <= (ap_const_logic_1 xor ap_condition_pp7_exit_iter0_state41);
                elsif ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                    ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                    ap_return_0_preg <= white_space_height_read;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                    ap_return_1_preg <= lastPatchIdx_reg_2251;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                    ap_return_2_preg <= ap_phi_mux_current_z_top_index_0_phi_fu_680_p6;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                    ap_return_3_preg <= counter_0_reg_556;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                    ap_return_4_preg <= counterUpshift_0_reg_566;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                    ap_return_5_preg <= z_top_min_read;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                    ap_return_6_preg <= sext_ln534_1_reg_2278;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                    ap_return_7_preg <= ap_phi_mux_z_top_min_4_phi_fu_691_p6;
                end if; 
            end if;
        end if;
    end process;


    grp_areWedgeSuperPointsEqual_fu_722_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_areWedgeSuperPointsEqual_fu_722_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln1300_fu_1738_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57) and (ap_const_logic_1 = ap_NS_fsm_state58))) then 
                    grp_areWedgeSuperPointsEqual_fu_722_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_areWedgeSuperPointsEqual_fu_722_ap_ready = ap_const_logic_1)) then 
                    grp_areWedgeSuperPointsEqual_fu_722_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_delete_patch_fu_734_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_delete_patch_fu_734_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state78) or ((icmp_ln1237_reg_2230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50)))) then 
                    grp_delete_patch_fu_734_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_delete_patch_fu_734_ap_ready = ap_const_logic_1)) then 
                    grp_delete_patch_fu_734_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_get_index_from_z_fu_746_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_get_index_from_z_fu_746_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_get_index_from_z_fu_746_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_get_index_from_z_fu_746_ap_ready = ap_const_logic_1)) then 
                    grp_get_index_from_z_fu_746_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_makePatch_alignedToLine_fu_699_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_makePatch_alignedToLine_fu_699_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                    grp_makePatch_alignedToLine_fu_699_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_makePatch_alignedToLine_fu_699_ap_ready = ap_const_logic_1)) then 
                    grp_makePatch_alignedToLine_fu_699_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_straightLineProjectorFromLayerIJtoK_fu_760_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_straightLineProjectorFromLayerIJtoK_fu_760_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (icmp_ln1170_reg_2103 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_NS_fsm_state4)))) then 
                    grp_straightLineProjectorFromLayerIJtoK_fu_760_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_straightLineProjectorFromLayerIJtoK_fu_760_ap_ready = ap_const_logic_1)) then 
                    grp_straightLineProjectorFromLayerIJtoK_fu_760_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    counterUpshift_0_reg_566_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                if ((tmp_reg_1912 = ap_const_lv1_1)) then 
                    counterUpshift_0_reg_566 <= p_read13;
                elsif ((tmp_reg_1912 = ap_const_lv1_0)) then 
                    counterUpshift_0_reg_566 <= add_ln1137_reg_1916;
                end if;
            end if; 
        end if;
    end process;

    counter_0_reg_556_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                if ((tmp_reg_1912 = ap_const_lv1_1)) then 
                    counter_0_reg_556 <= add_ln1127_reg_1926;
                elsif ((tmp_reg_1912 = ap_const_lv1_0)) then 
                    counter_0_reg_556 <= p_read12;
                end if;
            end if; 
        end if;
    end process;

    current_z_top_index_0_reg_677_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln1290_reg_2264 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((icmp_ln1300_reg_2293 = ap_const_lv1_1) and (icmp_ln1290_reg_2264 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state77)))) then 
                current_z_top_index_0_reg_677 <= select_ln1146_reg_1979;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
                current_z_top_index_0_reg_677 <= add_ln1320_fu_1794_p2;
            end if; 
        end if;
    end process;

    empty_73_reg_525_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln870_reg_1879 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                empty_73_reg_525 <= add_ln1115_reg_1883;
            elsif (((icmp_ln870_fu_833_p2 = ap_const_lv1_0) and (icmp_ln1108_fu_827_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                empty_73_reg_525 <= zext_ln1104_reg_1858;
            end if; 
        end if;
    end process;

    empty_76_reg_576_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                if ((tmp_reg_1912 = ap_const_lv1_1)) then 
                    empty_76_reg_576 <= sext_ln1130_reg_1931;
                elsif ((tmp_reg_1912 = ap_const_lv1_0)) then 
                    empty_76_reg_576 <= zext_ln1140_reg_1921;
                end if;
            end if; 
        end if;
    end process;

    i_10_reg_665_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_areWedgeSuperPointsEqual_fu_722_ap_return = ap_const_lv1_1) and (icmp_ln1300_reg_2293 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
                i_10_reg_665 <= add_ln1300_reg_2297;
            elsif (((icmp_ln1290_reg_2264 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state56))) then 
                i_10_reg_665 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_2_reg_514_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln870_fu_833_p2 = ap_const_lv1_1) and (icmp_ln1108_fu_827_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_2_reg_514 <= ap_const_lv3_0;
            elsif (((icmp_ln1117_fu_848_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_2_reg_514 <= add_ln1117_fu_842_p2;
            end if; 
        end if;
    end process;

    i_3_reg_545_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_859_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_3_reg_545 <= ap_const_lv3_0;
            elsif (((icmp_ln1130_fu_919_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_3_reg_545 <= add_ln1130_fu_913_p2;
            end if; 
        end if;
    end process;

    i_4_reg_534_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_859_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_4_reg_534 <= ap_const_lv3_0;
            elsif (((icmp_ln1140_fu_902_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_4_reg_534 <= add_ln1140_fu_896_p2;
            end if; 
        end if;
    end process;

    i_5_reg_585_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1149_fu_961_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                i_5_reg_585 <= add_ln1149_fu_955_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_5_reg_585 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_6_reg_596_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_6_reg_596 <= ap_const_lv3_0;
            elsif (((icmp_ln1155_fu_1008_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                i_6_reg_596 <= add_ln1155_fu_1002_p2;
            end if; 
        end if;
    end process;

    i_7_reg_607_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                i_7_reg_607 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln1162_reg_2054 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                i_7_reg_607 <= add_ln1162_reg_2049;
            end if; 
        end if;
    end process;

    i_8_reg_619_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                i_8_reg_619 <= ap_const_lv3_1;
            elsif (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (icmp_ln1170_reg_2103 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
                i_8_reg_619 <= add_ln1175_reg_2107;
            end if; 
        end if;
    end process;

    i_9_reg_630_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1183_fu_1285_p2 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                i_9_reg_630 <= add_ln1183_fu_1279_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                i_9_reg_630 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_502_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_get_index_from_z_fu_746_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    i_reg_502 <= add_ln1110_reg_1864;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    i_reg_502 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    layerSMin_reg_641_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (icmp_ln1183_reg_2141 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                layerSMin_reg_641 <= layerSMin_1_fu_1360_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                layerSMin_reg_641 <= ap_const_lv64_7FFFFFFFFFFFFFFF;
            end if; 
        end if;
    end process;

    layerWithSmallestShift_reg_653_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (icmp_ln1183_reg_2141 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                layerWithSmallestShift_reg_653 <= layerWithSmallestShift_1_fu_1352_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                layerWithSmallestShift_reg_653 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    z_top_min_4_reg_688_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln1290_reg_2264 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((icmp_ln1300_reg_2293 = ap_const_lv1_1) and (icmp_ln1290_reg_2264 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state77)))) then 
                z_top_min_4_reg_688 <= select_ln1220_reg_2234;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
                z_top_min_4_reg_688 <= lhs_reg_2181;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln1110_reg_1864 <= add_ln1110_fu_817_p2;
                    zext_ln1108_reg_1870(2 downto 0) <= zext_ln1108_fu_823_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln870_fu_833_p2 = ap_const_lv1_1) and (icmp_ln1108_fu_827_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln1115_reg_1883 <= add_ln1115_fu_837_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_859_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                add_ln1127_reg_1926 <= add_ln1127_fu_881_p2;
                sext_ln1130_reg_1931 <= sext_ln1130_fu_892_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_859_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                add_ln1137_reg_1916 <= add_ln1137_fu_866_p2;
                    zext_ln1140_reg_1921(8 downto 0) <= zext_ln1140_fu_877_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                add_ln1162_reg_2049 <= add_ln1162_fu_1188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (icmp_ln1170_fu_1230_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                add_ln1175_reg_2107 <= add_ln1175_fu_1236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                add_ln1175_reg_2107_pp6_iter1_reg <= add_ln1175_reg_2107;
                icmp_ln1170_reg_2103 <= icmp_ln1170_fu_1230_p2;
                icmp_ln1170_reg_2103_pp6_iter1_reg <= icmp_ln1170_reg_2103;
                trunc_ln1172_reg_2118_pp6_iter1_reg <= trunc_ln1172_reg_2118;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                add_ln1300_reg_2297 <= add_ln1300_fu_1744_p2;
                icmp_ln1300_reg_2293 <= icmp_ln1300_fu_1738_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                agg_tmp7_reg_1888 <= grp_straightLineProjectorFromLayerIJtoK_fu_613_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1155_reg_2012_pp4_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                conv_reg_2032 <= grp_fu_775_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp4_stage0_11001)) then
                conv_reg_2032_pp4_iter5_reg <= conv_reg_2032;
                icmp_ln1155_reg_2012_pp4_iter2_reg <= icmp_ln1155_reg_2012_pp4_iter1_reg;
                icmp_ln1155_reg_2012_pp4_iter3_reg <= icmp_ln1155_reg_2012_pp4_iter2_reg;
                icmp_ln1155_reg_2012_pp4_iter4_reg <= icmp_ln1155_reg_2012_pp4_iter3_reg;
                icmp_ln1155_reg_2012_pp4_iter5_reg <= icmp_ln1155_reg_2012_pp4_iter4_reg;
                icmp_ln1155_reg_2012_pp4_iter6_reg <= icmp_ln1155_reg_2012_pp4_iter5_reg;
                new_z_i_index_addr_4_reg_2016_pp4_iter2_reg <= new_z_i_index_addr_4_reg_2016_pp4_iter1_reg;
                new_z_i_index_addr_4_reg_2016_pp4_iter3_reg <= new_z_i_index_addr_4_reg_2016_pp4_iter2_reg;
                new_z_i_index_addr_4_reg_2016_pp4_iter4_reg <= new_z_i_index_addr_4_reg_2016_pp4_iter3_reg;
                new_z_i_index_addr_4_reg_2016_pp4_iter5_reg <= new_z_i_index_addr_4_reg_2016_pp4_iter4_reg;
                new_z_i_index_addr_4_reg_2016_pp4_iter6_reg <= new_z_i_index_addr_4_reg_2016_pp4_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1117_fu_848_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    i_2_cast_reg_1902(2 downto 0) <= i_2_cast_fu_854_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1130_fu_919_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                    i_3_cast_reg_1969(2 downto 0) <= i_3_cast_fu_925_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1140_fu_902_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    i_4_cast_reg_1945(2 downto 0) <= i_4_cast_fu_908_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1162_fu_1194_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                    i_7_cast_reg_2058(2 downto 0) <= i_7_cast_fu_1200_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                    i_7_cast_reg_2058_pp5_iter1_reg(2 downto 0) <= i_7_cast_reg_2058(2 downto 0);
                icmp_ln1162_reg_2054 <= icmp_ln1162_fu_1194_p2;
                icmp_ln1162_reg_2054_pp5_iter1_reg <= icmp_ln1162_reg_2054;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1117_reg_1898 <= icmp_ln1117_fu_848_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln1130_reg_1965 <= icmp_ln1130_fu_919_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln1140_reg_1941 <= icmp_ln1140_fu_902_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln1149_reg_1992 <= icmp_ln1149_fu_961_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln1155_reg_2012 <= icmp_ln1155_fu_1008_p2;
                icmp_ln1155_reg_2012_pp4_iter1_reg <= icmp_ln1155_reg_2012;
                new_z_i_index_addr_4_reg_2016_pp4_iter1_reg <= new_z_i_index_addr_4_reg_2016;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                icmp_ln1183_reg_2141 <= icmp_ln1183_fu_1285_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                icmp_ln1237_reg_2230 <= icmp_ln1237_fu_1582_p2;
                tmp_19_reg_2225 <= grp_fu_1631_p_dout0(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                icmp_ln1290_reg_2264 <= icmp_ln1290_fu_1627_p2;
                lastPatchIdx_reg_2251 <= lastPatchIdx_fu_1607_p2;
                trunc_ln1268_reg_2259 <= trunc_ln1268_fu_1613_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1108_fu_827_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                icmp_ln870_reg_1879 <= icmp_ln870_fu_833_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                lhs_2_reg_2192 <= lhs_2_fu_1454_p3;
                lhs_reg_2181 <= lhs_fu_1394_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                lhs_3_reg_2203 <= lhs_3_fu_1508_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                lhs_4_reg_2209 <= lhs_4_fu_1551_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (icmp_ln1170_reg_2103 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                new_z_i_V_load_reg_2122 <= new_z_i_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp6_iter5 = ap_const_logic_1) and (trunc_ln1172_reg_2118_pp6_iter4_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                new_z_i_atTop_V_3_1_fu_232 <= grp_straightLineProjectorFromLayerIJtoK_fu_613_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp6_iter5 = ap_const_logic_1) and (trunc_ln1172_reg_2118_pp6_iter4_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                new_z_i_atTop_V_3_2_fu_236 <= grp_straightLineProjectorFromLayerIJtoK_fu_613_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp6_iter5 = ap_const_logic_1) and (trunc_ln1172_reg_2118_pp6_iter4_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                new_z_i_atTop_V_3_3_fu_240 <= grp_straightLineProjectorFromLayerIJtoK_fu_613_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp6_iter5 = ap_const_logic_1) and (trunc_ln1172_reg_2118_pp6_iter4_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                new_z_i_atTop_V_3_4_fu_244 <= grp_straightLineProjectorFromLayerIJtoK_fu_613_p_dout0;
                new_z_i_atTop_V_3_fu_228 <= grp_straightLineProjectorFromLayerIJtoK_fu_613_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1149_fu_961_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                new_z_i_index_addr_3_reg_1996 <= i_5_cast_fu_967_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1155_fu_1008_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                new_z_i_index_addr_4_reg_2016 <= i_6_cast_fu_1014_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln1155_reg_2012 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                new_z_i_index_load_1_reg_2022 <= new_z_i_index_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                ppl_assign2_reg_2246 <= grp_makePatch_alignedToLine_fu_699_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state49))) then
                reg_808 <= n_patches_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                ret_6_reg_2215 <= ret_6_fu_1561_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                select_ln1146_reg_1979 <= select_ln1146_fu_947_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                select_ln1220_reg_2234 <= select_ln1220_fu_1590_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                sext_ln1183_reg_2127 <= sext_ln1183_fu_1276_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                sext_ln534_1_reg_2278 <= sext_ln534_1_fu_1725_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1290_reg_2264 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                thirdLastPatchIdx_reg_2288 <= thirdLastPatchIdx_fu_1732_p2;
                    zext_ln1293_reg_2283(7 downto 0) <= zext_ln1293_fu_1729_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                    tmp_21_cast_reg_2170(11 downto 1) <= tmp_21_cast_fu_1375_p3(11 downto 1);
                trunc_ln1192_reg_2165 <= trunc_ln1192_fu_1368_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1155_reg_2012_pp4_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                tmp_23_reg_2038 <= data_V_fu_1068_p3(30 downto 23);
                tmp_24_reg_2044 <= tmp_24_fu_1086_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1183_fu_1285_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                tmp_8_reg_2150 <= tmp_8_fu_1295_p6;
                trunc_ln534_reg_2145 <= trunc_ln534_fu_1291_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_reg_1912 <= tmp_fu_859_p1(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1170_fu_1230_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                trunc_ln1172_reg_2118 <= trunc_ln1172_fu_1247_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp6_stage0_11001)) then
                trunc_ln1172_reg_2118_pp6_iter2_reg <= trunc_ln1172_reg_2118_pp6_iter1_reg;
                trunc_ln1172_reg_2118_pp6_iter3_reg <= trunc_ln1172_reg_2118_pp6_iter2_reg;
                trunc_ln1172_reg_2118_pp6_iter4_reg <= trunc_ln1172_reg_2118_pp6_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    zext_ln1104_reg_1858(7 downto 0) <= zext_ln1104_fu_813_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1237_reg_2230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    zext_ln1256_reg_2241(7 downto 0) <= zext_ln1256_fu_1602_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln1104_reg_1858(8) <= '0';
    zext_ln1108_reg_1870(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_1902(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln1140_reg_1921(9) <= '0';
    i_4_cast_reg_1945(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_1969(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_7_cast_reg_2058(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_7_cast_reg_2058_pp5_iter1_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    tmp_21_cast_reg_2170(0) <= '0';
    zext_ln1256_reg_2241(8) <= '0';
    zext_ln1293_reg_2283(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln1108_fu_827_p2, icmp_ln870_fu_833_p2, ap_enable_reg_pp0_iter0, icmp_ln1117_fu_848_p2, tmp_fu_859_p3, ap_CS_fsm_state11, ap_enable_reg_pp1_iter0, icmp_ln1140_fu_902_p2, ap_enable_reg_pp2_iter0, icmp_ln1130_fu_919_p2, ap_enable_reg_pp3_iter0, icmp_ln1149_fu_961_p2, ap_enable_reg_pp4_iter0, icmp_ln1155_fu_1008_p2, ap_enable_reg_pp4_iter1, ap_enable_reg_pp5_iter0, icmp_ln1162_fu_1194_p2, icmp_ln1170_fu_1230_p2, ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter1, ap_enable_reg_pp7_iter0, icmp_ln1183_fu_1285_p2, ap_CS_fsm_state53, icmp_ln1290_reg_2264, ap_CS_fsm_state56, icmp_ln1300_reg_2293, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter6, ap_enable_reg_pp4_iter7, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2, ap_block_pp6_stage0_subdone, ap_enable_reg_pp6_iter4, ap_enable_reg_pp6_iter5, ap_block_pp7_stage0_subdone, grp_makePatch_alignedToLine_fu_699_ap_done, grp_areWedgeSuperPointsEqual_fu_722_ap_return, grp_delete_patch_fu_734_ap_done, grp_get_index_from_z_fu_746_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state76, ap_CS_fsm_state81, ap_CS_fsm_state51, ap_CS_fsm_state79, ap_block_state51_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_get_index_from_z_fu_746_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln870_fu_833_p2 = ap_const_lv1_1) and (icmp_ln1108_fu_827_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln870_fu_833_p2 = ap_const_lv1_0) and (icmp_ln1108_fu_827_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_get_index_from_z_fu_746_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln1117_fu_848_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln1117_fu_848_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                if (((tmp_fu_859_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln1140_fu_902_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln1140_fu_902_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((icmp_ln1130_fu_919_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln1130_fu_919_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((icmp_ln1149_fu_961_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((icmp_ln1149_fu_961_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (icmp_ln1155_fu_1008_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) and not(((ap_enable_reg_pp4_iter7 = ap_const_logic_1) and (ap_enable_reg_pp4_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (icmp_ln1155_fu_1008_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) or ((ap_enable_reg_pp4_iter7 = ap_const_logic_1) and (ap_enable_reg_pp4_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (icmp_ln1162_fu_1194_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) and not(((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (icmp_ln1162_fu_1194_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) or ((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
            when ap_ST_fsm_pp6_stage0 => 
                if ((not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (icmp_ln1170_fu_1230_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) and not(((ap_enable_reg_pp6_iter5 = ap_const_logic_1) and (ap_enable_reg_pp6_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif ((((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (icmp_ln1170_fu_1230_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) or ((ap_enable_reg_pp6_iter5 = ap_const_logic_1) and (ap_enable_reg_pp6_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
            when ap_ST_fsm_pp7_stage0 => 
                if (not(((icmp_ln1183_fu_1285_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif (((icmp_ln1183_fu_1285_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (((ap_const_boolean_0 = ap_block_state51_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((grp_makePatch_alignedToLine_fu_699_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                if (((icmp_ln1290_reg_2264 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (((grp_areWedgeSuperPointsEqual_fu_722_ap_return = ap_const_lv1_1) and (icmp_ln1300_reg_2293 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                elsif (((icmp_ln1300_reg_2293 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                if (((grp_delete_patch_fu_734_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                if (((grp_makePatch_alignedToLine_fu_699_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    GDarrayDecoded_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp5_stage0, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state53, ap_enable_reg_pp5_iter1, grp_makePatch_alignedToLine_fu_699_GDarrayDecoded_address0, grp_get_index_from_z_fu_746_GDarrayDecoded_address0, ap_CS_fsm_state8, ap_block_pp5_stage0, ap_CS_fsm_state81, tmp_15_fu_1221_p3, zext_ln1207_fu_1389_p1, zext_ln1212_fu_1449_p1, zext_ln1217_fu_1467_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            GDarrayDecoded_address0 <= zext_ln1217_fu_1467_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            GDarrayDecoded_address0 <= zext_ln1212_fu_1449_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            GDarrayDecoded_address0 <= zext_ln1207_fu_1389_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            GDarrayDecoded_address0 <= tmp_15_fu_1221_p3(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            GDarrayDecoded_address0 <= grp_get_index_from_z_fu_746_GDarrayDecoded_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            GDarrayDecoded_address0 <= grp_makePatch_alignedToLine_fu_699_GDarrayDecoded_address0;
        else 
            GDarrayDecoded_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    GDarrayDecoded_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state53, ap_enable_reg_pp5_iter1, grp_makePatch_alignedToLine_fu_699_GDarrayDecoded_ce0, grp_get_index_from_z_fu_746_GDarrayDecoded_ce0, ap_CS_fsm_state8, ap_CS_fsm_state81)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or ((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)))) then 
            GDarrayDecoded_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            GDarrayDecoded_ce0 <= grp_get_index_from_z_fu_746_GDarrayDecoded_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            GDarrayDecoded_ce0 <= grp_makePatch_alignedToLine_fu_699_GDarrayDecoded_ce0;
        else 
            GDarrayDecoded_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    GDn_points_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state14, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_state53, grp_makePatch_alignedToLine_fu_699_GDn_points_address0, grp_get_index_from_z_fu_746_GDn_points_address0, ap_CS_fsm_state8, ap_CS_fsm_state81, i_5_cast_fu_967_p1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            GDn_points_address0 <= i_5_cast_fu_967_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            GDn_points_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            GDn_points_address0 <= grp_get_index_from_z_fu_746_GDn_points_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            GDn_points_address0 <= grp_makePatch_alignedToLine_fu_699_GDn_points_address0;
        else 
            GDn_points_address0 <= "XXX";
        end if; 
    end process;


    GDn_points_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state14, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001, ap_CS_fsm_state53, grp_makePatch_alignedToLine_fu_699_GDn_points_ce0, grp_get_index_from_z_fu_746_GDn_points_ce0, ap_CS_fsm_state8, ap_CS_fsm_state81)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            GDn_points_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            GDn_points_ce0 <= grp_get_index_from_z_fu_746_GDn_points_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            GDn_points_ce0 <= grp_makePatch_alignedToLine_fu_699_GDn_points_ce0;
        else 
            GDn_points_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1110_fu_817_p2 <= std_logic_vector(unsigned(i_reg_502) + unsigned(ap_const_lv3_1));
    add_ln1115_fu_837_p2 <= std_logic_vector(unsigned(zext_ln1104_reg_1858) + unsigned(ap_const_lv9_1));
    add_ln1117_fu_842_p2 <= std_logic_vector(unsigned(i_2_reg_514) + unsigned(ap_const_lv3_1));
    add_ln1127_fu_881_p2 <= std_logic_vector(unsigned(p_read12) + unsigned(ap_const_lv32_1));
    add_ln1128_fu_886_p2 <= std_logic_vector(unsigned(ap_phi_mux_empty_73_phi_fu_528_p4) + unsigned(ap_const_lv9_1FF));
    add_ln1130_fu_913_p2 <= std_logic_vector(unsigned(i_3_reg_545) + unsigned(ap_const_lv3_1));
    add_ln1132_fu_930_p2 <= std_logic_vector(unsigned(current_z_i_index_q0) + unsigned(ap_const_lv8_FF));
    add_ln1137_fu_866_p2 <= std_logic_vector(unsigned(p_read13) + unsigned(ap_const_lv32_1));
    add_ln1138_fu_871_p2 <= std_logic_vector(unsigned(ap_phi_mux_empty_73_phi_fu_528_p4) + unsigned(ap_const_lv9_1));
    add_ln1140_fu_896_p2 <= std_logic_vector(unsigned(i_4_reg_534) + unsigned(ap_const_lv3_1));
    add_ln1149_fu_955_p2 <= std_logic_vector(unsigned(i_5_reg_585) + unsigned(ap_const_lv3_1));
    add_ln1151_1_fu_987_p2 <= std_logic_vector(unsigned(trunc_ln1151_fu_977_p1) + unsigned(ap_const_lv8_FF));
    add_ln1155_fu_1002_p2 <= std_logic_vector(unsigned(i_6_reg_596) + unsigned(ap_const_lv3_1));
    add_ln1162_fu_1188_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_7_phi_fu_611_p4) + unsigned(ap_const_lv3_1));
    add_ln1175_fu_1236_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_8_phi_fu_623_p4) + unsigned(ap_const_lv3_1));
    add_ln1183_fu_1279_p2 <= std_logic_vector(unsigned(i_9_reg_630) + unsigned(ap_const_lv3_1));
    add_ln1207_fu_1383_p2 <= std_logic_vector(unsigned(tmp_21_cast_fu_1375_p3) + unsigned(ap_const_lv12_801));
    add_ln1212_fu_1444_p2 <= std_logic_vector(unsigned(tmp_21_cast_reg_2170) + unsigned(ap_const_lv12_601));
    add_ln1217_fu_1462_p2 <= std_logic_vector(unsigned(tmp_21_cast_reg_2170) + unsigned(ap_const_lv12_401));
    add_ln1236_fu_1596_p2 <= std_logic_vector(unsigned(reg_808) + unsigned(ap_const_lv8_FF));
    add_ln1268_fu_1657_p2 <= std_logic_vector(unsigned(sub_ln1268_fu_1651_p2) + unsigned(ap_const_lv12_30));
    add_ln1269_fu_1674_p2 <= std_logic_vector(unsigned(sub_ln1268_fu_1651_p2) + unsigned(ap_const_lv12_37));
    add_ln1300_fu_1744_p2 <= std_logic_vector(unsigned(i_10_reg_665) + unsigned(ap_const_lv3_1));
    add_ln1320_fu_1794_p2 <= std_logic_vector(unsigned(select_ln1146_reg_1979) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln341_fu_1106_p2 <= std_logic_vector(unsigned(zext_ln341_fu_1103_p1) + unsigned(ap_const_lv9_181));
    and_ln1157_fu_1058_p2 <= (or_ln1157_fu_1052_p2 and grp_fu_778_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(14);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(20);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(22);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state17 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(15);
    ap_CS_fsm_state29 <= ap_CS_fsm(17);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state33 <= ap_CS_fsm(19);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(21);
    ap_CS_fsm_state43 <= ap_CS_fsm(23);
    ap_CS_fsm_state44 <= ap_CS_fsm(24);
    ap_CS_fsm_state45 <= ap_CS_fsm(25);
    ap_CS_fsm_state46 <= ap_CS_fsm(26);
    ap_CS_fsm_state47 <= ap_CS_fsm(27);
    ap_CS_fsm_state48 <= ap_CS_fsm(28);
    ap_CS_fsm_state49 <= ap_CS_fsm(29);
    ap_CS_fsm_state50 <= ap_CS_fsm(30);
    ap_CS_fsm_state51 <= ap_CS_fsm(31);
    ap_CS_fsm_state52 <= ap_CS_fsm(32);
    ap_CS_fsm_state53 <= ap_CS_fsm(33);
    ap_CS_fsm_state54 <= ap_CS_fsm(34);
    ap_CS_fsm_state55 <= ap_CS_fsm(35);
    ap_CS_fsm_state56 <= ap_CS_fsm(36);
    ap_CS_fsm_state57 <= ap_CS_fsm(37);
    ap_CS_fsm_state58 <= ap_CS_fsm(38);
    ap_CS_fsm_state59 <= ap_CS_fsm(39);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state75 <= ap_CS_fsm(55);
    ap_CS_fsm_state76 <= ap_CS_fsm(56);
    ap_CS_fsm_state77 <= ap_CS_fsm(57);
    ap_CS_fsm_state78 <= ap_CS_fsm(58);
    ap_CS_fsm_state79 <= ap_CS_fsm(59);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(60);
    ap_CS_fsm_state81 <= ap_CS_fsm(61);
    ap_CS_fsm_state96 <= ap_CS_fsm(76);
    ap_NS_fsm_state4 <= ap_NS_fsm(3);
    ap_NS_fsm_state58 <= ap_NS_fsm(38);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp4_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp4_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp4_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp4_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp4_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp6_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp6_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp6_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp7_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state51_on_subcall_done_assign_proc : process(icmp_ln1237_reg_2230, grp_delete_patch_fu_734_ap_done)
    begin
                ap_block_state51_on_subcall_done <= ((grp_delete_patch_fu_734_ap_done = ap_const_logic_0) and (icmp_ln1237_reg_2230 = ap_const_lv1_1));
    end process;

        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln1117_fu_848_p2)
    begin
        if ((icmp_ln1117_fu_848_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state12_assign_proc : process(icmp_ln1140_fu_902_p2)
    begin
        if ((icmp_ln1140_fu_902_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state15_assign_proc : process(icmp_ln1130_fu_919_p2)
    begin
        if ((icmp_ln1130_fu_919_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state15 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state18_assign_proc : process(icmp_ln1149_fu_961_p2)
    begin
        if ((icmp_ln1149_fu_961_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state18 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state21_assign_proc : process(icmp_ln1155_fu_1008_p2)
    begin
        if ((icmp_ln1155_fu_1008_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state30_assign_proc : process(icmp_ln1162_fu_1194_p2)
    begin
        if ((icmp_ln1162_fu_1194_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state30 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state34_assign_proc : process(icmp_ln1170_fu_1230_p2)
    begin
        if ((icmp_ln1170_fu_1230_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state34 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state34 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_exit_iter0_state41_assign_proc : process(icmp_ln1183_fu_1285_p2)
    begin
        if ((icmp_ln1183_fu_1285_p2 = ap_const_lv1_1)) then 
            ap_condition_pp7_exit_iter0_state41 <= ap_const_logic_1;
        else 
            ap_condition_pp7_exit_iter0_state41 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state77)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter3, ap_enable_reg_pp4_iter4, ap_enable_reg_pp4_iter5, ap_enable_reg_pp4_iter6, ap_enable_reg_pp4_iter7)
    begin
        if (((ap_enable_reg_pp4_iter7 = ap_const_logic_0) and (ap_enable_reg_pp4_iter6 = ap_const_logic_0) and (ap_enable_reg_pp4_iter5 = ap_const_logic_0) and (ap_enable_reg_pp4_iter4 = ap_const_logic_0) and (ap_enable_reg_pp4_iter3 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2)
    begin
        if (((ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter2, ap_enable_reg_pp6_iter3, ap_enable_reg_pp6_iter4, ap_enable_reg_pp6_iter5)
    begin
        if (((ap_enable_reg_pp6_iter5 = ap_const_logic_0) and (ap_enable_reg_pp6_iter4 = ap_const_logic_0) and (ap_enable_reg_pp6_iter3 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter1)
    begin
        if (((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_current_z_top_index_0_phi_fu_680_p6_assign_proc : process(select_ln1146_reg_1979, icmp_ln1290_reg_2264, icmp_ln1300_reg_2293, current_z_top_index_0_reg_677, ap_CS_fsm_state77)
    begin
        if (((icmp_ln1300_reg_2293 = ap_const_lv1_1) and (icmp_ln1290_reg_2264 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state77))) then 
            ap_phi_mux_current_z_top_index_0_phi_fu_680_p6 <= select_ln1146_reg_1979;
        else 
            ap_phi_mux_current_z_top_index_0_phi_fu_680_p6 <= current_z_top_index_0_reg_677;
        end if; 
    end process;


    ap_phi_mux_empty_73_phi_fu_528_p4_assign_proc : process(icmp_ln870_reg_1879, add_ln1115_reg_1883, ap_CS_fsm_state11, empty_73_reg_525)
    begin
        if (((icmp_ln870_reg_1879 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_phi_mux_empty_73_phi_fu_528_p4 <= add_ln1115_reg_1883;
        else 
            ap_phi_mux_empty_73_phi_fu_528_p4 <= empty_73_reg_525;
        end if; 
    end process;


    ap_phi_mux_i_7_phi_fu_611_p4_assign_proc : process(i_7_reg_607, add_ln1162_reg_2049, ap_CS_fsm_pp5_stage0, icmp_ln1162_reg_2054, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln1162_reg_2054 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            ap_phi_mux_i_7_phi_fu_611_p4 <= add_ln1162_reg_2049;
        else 
            ap_phi_mux_i_7_phi_fu_611_p4 <= i_7_reg_607;
        end if; 
    end process;


    ap_phi_mux_i_8_phi_fu_623_p4_assign_proc : process(i_8_reg_619, icmp_ln1170_reg_2103, ap_CS_fsm_pp6_stage0, add_ln1175_reg_2107, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0)
    begin
        if (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (icmp_ln1170_reg_2103 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            ap_phi_mux_i_8_phi_fu_623_p4 <= add_ln1175_reg_2107;
        else 
            ap_phi_mux_i_8_phi_fu_623_p4 <= i_8_reg_619;
        end if; 
    end process;


    ap_phi_mux_z_top_min_4_phi_fu_691_p6_assign_proc : process(select_ln1220_reg_2234, icmp_ln1290_reg_2264, icmp_ln1300_reg_2293, ap_CS_fsm_state77, z_top_min_4_reg_688)
    begin
        if (((icmp_ln1300_reg_2293 = ap_const_lv1_1) and (icmp_ln1290_reg_2264 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state77))) then 
            ap_phi_mux_z_top_min_4_phi_fu_691_p6 <= select_ln1220_reg_2234;
        else 
            ap_phi_mux_z_top_min_4_phi_fu_691_p6 <= z_top_min_4_reg_688;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(white_space_height_read, ap_CS_fsm_state77, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            ap_return_0 <= white_space_height_read;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(lastPatchIdx_reg_2251, ap_CS_fsm_state77, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            ap_return_1 <= lastPatchIdx_reg_2251;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_phi_mux_current_z_top_index_0_phi_fu_680_p6, ap_CS_fsm_state77, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            ap_return_2 <= ap_phi_mux_current_z_top_index_0_phi_fu_680_p6;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(counter_0_reg_556, ap_CS_fsm_state77, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            ap_return_3 <= counter_0_reg_556;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(counterUpshift_0_reg_566, ap_CS_fsm_state77, ap_return_4_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            ap_return_4 <= counterUpshift_0_reg_566;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(z_top_min_read, ap_CS_fsm_state77, ap_return_5_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            ap_return_5 <= z_top_min_read;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(sext_ln534_1_reg_2278, ap_CS_fsm_state77, ap_return_6_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            ap_return_6 <= sext_ln534_1_reg_2278;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(ap_CS_fsm_state77, ap_phi_mux_z_top_min_4_phi_fu_691_p6, ap_return_7_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            ap_return_7 <= ap_phi_mux_z_top_min_4_phi_fu_691_p6;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;

    bitcast_ln1157_fu_1023_p1 <= conv_reg_2032_pp4_iter5_reg;

    current_z_i_index_address0_assign_proc : process(zext_ln1108_reg_1870, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, i_2_cast_fu_854_p1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, i_4_cast_fu_908_p1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, i_3_cast_fu_925_p1, ap_CS_fsm_state8, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            current_z_i_index_address0 <= i_3_cast_fu_925_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            current_z_i_index_address0 <= i_4_cast_fu_908_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            current_z_i_index_address0 <= i_2_cast_fu_854_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            current_z_i_index_address0 <= zext_ln1108_reg_1870(3 - 1 downto 0);
        else 
            current_z_i_index_address0 <= "XXX";
        end if; 
    end process;


    current_z_i_index_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, grp_get_index_from_z_fu_746_ap_done, ap_CS_fsm_state8)
    begin
        if ((((grp_get_index_from_z_fu_746_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            current_z_i_index_ce0 <= ap_const_logic_1;
        else 
            current_z_i_index_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    current_z_i_index_we0_assign_proc : process(grp_get_index_from_z_fu_746_ap_done, ap_CS_fsm_state8)
    begin
        if (((grp_get_index_from_z_fu_746_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            current_z_i_index_we0 <= ap_const_logic_1;
        else 
            current_z_i_index_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_V_fu_1068_p3 <= 
        ap_const_lv31_0 when (and_ln1157_fu_1058_p2(0) = '1') else 
        trunc_ln312_fu_1064_p1;
    grp_areWedgeSuperPointsEqual_fu_722_ap_start <= grp_areWedgeSuperPointsEqual_fu_722_ap_start_reg;
    grp_delete_patch_fu_734_ap_start <= grp_delete_patch_fu_734_ap_start_reg;

    grp_delete_patch_fu_734_index_assign_proc : process(icmp_ln1237_reg_2230, zext_ln1256_reg_2241, zext_ln1293_reg_2283, ap_CS_fsm_state51, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_delete_patch_fu_734_index <= zext_ln1293_reg_2283;
        elsif (((icmp_ln1237_reg_2230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            grp_delete_patch_fu_734_index <= zext_ln1256_reg_2241;
        else 
            grp_delete_patch_fu_734_index <= "XXXXXXXXX";
        end if; 
    end process;

    grp_fu_1569_ce <= ap_const_logic_1;
    grp_fu_1569_p0 <= sext_ln534_fu_1566_p1(33 - 1 downto 0);
    grp_fu_1569_p1 <= white_space_height_read;
    grp_fu_1569_p2 <= grp_fu_1631_p_dout0;
    grp_fu_1631_p_ce <= ap_const_logic_1;
    grp_fu_1631_p_din0 <= sext_ln534_fu_1566_p1(33 - 1 downto 0);
    grp_fu_1631_p_din1 <= white_space_height_read;
    grp_fu_775_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_z_i_index_load_1_reg_2022),32));
    grp_fu_783_p2 <= std_logic_vector(unsigned(current_z_i_index_q0) + unsigned(ap_const_lv8_1));
    grp_fu_790_p2 <= std_logic_vector(unsigned(GDn_points_q0) + unsigned(ap_const_lv32_FFFFFFFF));
    grp_get_index_from_z_fu_746_ap_start <= grp_get_index_from_z_fu_746_ap_start_reg;

    grp_get_index_from_z_fu_746_layer_assign_proc : process(ap_CS_fsm_state2, i_reg_502, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_get_index_from_z_fu_746_layer <= i_reg_502;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_get_index_from_z_fu_746_layer <= ap_const_lv3_4;
        else 
            grp_get_index_from_z_fu_746_layer <= "XXX";
        end if; 
    end process;


    grp_get_index_from_z_fu_746_z_value_assign_proc : process(z_top_min_read, ap_CS_fsm_state2, agg_tmp7_reg_1888, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_get_index_from_z_fu_746_z_value <= agg_tmp7_reg_1888;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_get_index_from_z_fu_746_z_value <= z_top_min_read;
        else 
            grp_get_index_from_z_fu_746_z_value <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_makePatch_alignedToLine_fu_699_ap_start <= grp_makePatch_alignedToLine_fu_699_ap_start_reg;

    grp_makePatch_alignedToLine_fu_699_p_read_assign_proc : process(ppl, ppl_assign2_reg_2246, ap_CS_fsm_state53, ap_CS_fsm_state81)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            grp_makePatch_alignedToLine_fu_699_p_read <= ppl_assign2_reg_2246;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            grp_makePatch_alignedToLine_fu_699_p_read <= ppl;
        else 
            grp_makePatch_alignedToLine_fu_699_p_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_makePatch_alignedToLine_fu_699_z_top_assign_proc : process(lhs_reg_2181, select_ln1220_reg_2234, ap_CS_fsm_state53, ap_CS_fsm_state81)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            grp_makePatch_alignedToLine_fu_699_z_top <= lhs_reg_2181;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            grp_makePatch_alignedToLine_fu_699_z_top <= select_ln1220_reg_2234;
        else 
            grp_makePatch_alignedToLine_fu_699_z_top <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_straightLineProjectorFromLayerIJtoK_fu_613_p_ce <= ap_const_logic_1;
    grp_straightLineProjectorFromLayerIJtoK_fu_613_p_din1 <= complementary_apexZ0;
    grp_straightLineProjectorFromLayerIJtoK_fu_613_p_din2 <= grp_straightLineProjectorFromLayerIJtoK_fu_760_z_j;
    grp_straightLineProjectorFromLayerIJtoK_fu_613_p_din3 <= ap_const_lv3_1;
    grp_straightLineProjectorFromLayerIJtoK_fu_613_p_din4 <= grp_straightLineProjectorFromLayerIJtoK_fu_760_j;
    grp_straightLineProjectorFromLayerIJtoK_fu_613_p_din5 <= grp_straightLineProjectorFromLayerIJtoK_fu_760_k;
    grp_straightLineProjectorFromLayerIJtoK_fu_613_p_start <= grp_straightLineProjectorFromLayerIJtoK_fu_760_ap_start_reg;
    grp_straightLineProjectorFromLayerIJtoK_fu_760_ap_ce <= ap_const_logic_1;
    grp_straightLineProjectorFromLayerIJtoK_fu_760_ap_done <= grp_straightLineProjectorFromLayerIJtoK_fu_613_p_done;
    grp_straightLineProjectorFromLayerIJtoK_fu_760_ap_idle <= grp_straightLineProjectorFromLayerIJtoK_fu_613_p_idle;
    grp_straightLineProjectorFromLayerIJtoK_fu_760_ap_ready <= grp_straightLineProjectorFromLayerIJtoK_fu_613_p_ready;
    grp_straightLineProjectorFromLayerIJtoK_fu_760_ap_return <= grp_straightLineProjectorFromLayerIJtoK_fu_613_p_dout0;
    grp_straightLineProjectorFromLayerIJtoK_fu_760_ap_start <= grp_straightLineProjectorFromLayerIJtoK_fu_760_ap_start_reg;
    grp_straightLineProjectorFromLayerIJtoK_fu_760_i <= ap_const_lv3_1;

    grp_straightLineProjectorFromLayerIJtoK_fu_760_j_assign_proc : process(icmp_ln1170_reg_2103_pp6_iter1_reg, add_ln1175_reg_2107_pp6_iter1_reg, ap_enable_reg_pp6_iter2, ap_block_pp6_stage0, ap_CS_fsm_state4)
    begin
        if (((ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (icmp_ln1170_reg_2103_pp6_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_760_j <= add_ln1175_reg_2107_pp6_iter1_reg;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_760_j <= ap_const_lv3_5;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_760_j <= "XXX";
        end if; 
    end process;


    grp_straightLineProjectorFromLayerIJtoK_fu_760_k_assign_proc : process(add_ln1110_reg_1864, icmp_ln1170_reg_2103_pp6_iter1_reg, ap_enable_reg_pp6_iter2, ap_block_pp6_stage0, ap_CS_fsm_state4)
    begin
        if (((ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (icmp_ln1170_reg_2103_pp6_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_760_k <= ap_const_lv3_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_760_k <= add_ln1110_reg_1864;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_760_k <= "XXX";
        end if; 
    end process;

    grp_straightLineProjectorFromLayerIJtoK_fu_760_z_i <= complementary_apexZ0;

    grp_straightLineProjectorFromLayerIJtoK_fu_760_z_j_assign_proc : process(z_top_min_read, icmp_ln1170_reg_2103_pp6_iter1_reg, new_z_i_V_load_reg_2122, ap_enable_reg_pp6_iter2, ap_block_pp6_stage0, ap_CS_fsm_state4)
    begin
        if (((ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (icmp_ln1170_reg_2103_pp6_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_760_z_j <= new_z_i_V_load_reg_2122;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_760_z_j <= z_top_min_read;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_760_z_j <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_2_cast_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_514),64));
    i_3_cast_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_545),64));
    i_4_cast_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_534),64));
    i_5_cast_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_585),64));
    i_6_cast_fu_1014_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_596),64));
    i_7_cast_fu_1200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_7_phi_fu_611_p4),64));
    icmp_ln1108_fu_827_p2 <= "1" when (i_reg_502 = ap_const_lv3_5) else "0";
    icmp_ln1117_fu_848_p2 <= "1" when (i_2_reg_514 = ap_const_lv3_5) else "0";
    icmp_ln1130_fu_919_p2 <= "1" when (i_3_reg_545 = ap_const_lv3_5) else "0";
    icmp_ln1140_fu_902_p2 <= "1" when (i_4_reg_534 = ap_const_lv3_5) else "0";
    icmp_ln1146_fu_941_p2 <= "1" when (signed(sext_ln1146_fu_937_p1) < signed(grp_fu_790_p2)) else "0";
    icmp_ln1149_fu_961_p2 <= "1" when (i_5_reg_585 = ap_const_lv3_5) else "0";
    icmp_ln1151_fu_981_p2 <= "1" when (signed(zext_ln1151_fu_973_p1) < signed(grp_fu_790_p2)) else "0";
    icmp_ln1155_fu_1008_p2 <= "1" when (i_6_reg_596 = ap_const_lv3_5) else "0";
    icmp_ln1157_1_fu_1046_p2 <= "1" when (trunc_ln1157_fu_1036_p1 = ap_const_lv23_0) else "0";
    icmp_ln1157_fu_1040_p2 <= "0" when (tmp_1_fu_1026_p4 = ap_const_lv8_FF) else "1";
    icmp_ln1162_fu_1194_p2 <= "1" when (ap_phi_mux_i_7_phi_fu_611_p4 = ap_const_lv3_5) else "0";
    icmp_ln1170_fu_1230_p2 <= "1" when (ap_phi_mux_i_8_phi_fu_623_p4 = ap_const_lv3_5) else "0";
    icmp_ln1183_fu_1285_p2 <= "1" when (i_9_reg_630 = ap_const_lv3_4) else "0";
    icmp_ln1185_fu_1343_p2 <= "1" when (signed(sext_ln1185_1_fu_1339_p1) < signed(layerSMin_reg_641)) else "0";
    icmp_ln1205_fu_1438_p2 <= "1" when (signed(select_ln180_fu_1430_p3) < signed(ap_const_lv33_1)) else "0";
    icmp_ln1210_fu_1502_p2 <= "1" when (signed(select_ln180_2_fu_1494_p3) < signed(ap_const_lv33_1)) else "0";
    icmp_ln1215_fu_1545_p2 <= "1" when (signed(select_ln180_3_fu_1537_p3) < signed(ap_const_lv33_1)) else "0";
    icmp_ln1237_fu_1582_p2 <= "1" when (unsigned(n_patches_i) > unsigned(nPatchesAtOriginal)) else "0";
    icmp_ln1290_fu_1627_p2 <= "1" when (tmp_22_fu_1617_p4 = ap_const_lv6_0) else "0";
    icmp_ln1300_fu_1738_p2 <= "1" when (unsigned(i_10_reg_665) < unsigned(ap_const_lv3_5)) else "0";
    icmp_ln870_fu_833_p0 <= z_top_min_read;
    icmp_ln870_fu_833_p2 <= "1" when (icmp_ln870_fu_833_p0 = previous_z_top_min_read) else "0";
    icmp_ln878_fu_1711_p2 <= "1" when (signed(ret_7_fu_1692_p2) < signed(ret_8_fu_1705_p2)) else "0";
    isNeg_fu_1112_p3 <= add_ln341_fu_1106_p2(8 downto 8);
    lastPatchIdx_fu_1607_p2 <= std_logic_vector(unsigned(n_patches_i) + unsigned(ap_const_lv8_FF));
    layerSMin_1_fu_1360_p3 <= 
        sext_ln1185_1_fu_1339_p1 when (icmp_ln1185_fu_1343_p2(0) = '1') else 
        layerSMin_reg_641;
    layerWithSmallestShift_1_fu_1352_p3 <= 
        zext_ln1185_fu_1349_p1 when (icmp_ln1185_fu_1343_p2(0) = '1') else 
        layerWithSmallestShift_reg_653;
    lhs_2_fu_1454_p3 <= 
        GDarrayDecoded_q0 when (icmp_ln1205_fu_1438_p2(0) = '1') else 
        lhs_fu_1394_p6;
    lhs_3_fu_1508_p3 <= 
        GDarrayDecoded_q0 when (icmp_ln1210_fu_1502_p2(0) = '1') else 
        lhs_2_reg_2192;
    lhs_4_fu_1551_p3 <= 
        GDarrayDecoded_q0 when (icmp_ln1215_fu_1545_p2(0) = '1') else 
        lhs_3_reg_2203;
    mantissa_fu_1090_p4 <= ((ap_const_lv1_1 & tmp_24_reg_2044) & ap_const_lv1_0);

    n_patches_o_assign_proc : process(n_patches_i, icmp_ln1237_reg_2230, ap_CS_fsm_state53, grp_makePatch_alignedToLine_fu_699_n_patches_o, grp_makePatch_alignedToLine_fu_699_n_patches_o_ap_vld, grp_delete_patch_fu_734_n_patches, grp_delete_patch_fu_734_n_patches_ap_vld, ap_CS_fsm_state81, ap_CS_fsm_state51, ap_CS_fsm_state79)
    begin
        if ((((grp_delete_patch_fu_734_n_patches_ap_vld = ap_const_logic_1) and (icmp_ln1237_reg_2230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((grp_delete_patch_fu_734_n_patches_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79)))) then 
            n_patches_o <= grp_delete_patch_fu_734_n_patches;
        elsif ((((grp_makePatch_alignedToLine_fu_699_n_patches_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((grp_makePatch_alignedToLine_fu_699_n_patches_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81)))) then 
            n_patches_o <= grp_makePatch_alignedToLine_fu_699_n_patches_o;
        else 
            n_patches_o <= n_patches_i;
        end if; 
    end process;


    n_patches_o_ap_vld_assign_proc : process(icmp_ln1237_reg_2230, ap_CS_fsm_state53, grp_makePatch_alignedToLine_fu_699_n_patches_o_ap_vld, grp_delete_patch_fu_734_n_patches_ap_vld, ap_CS_fsm_state81, ap_CS_fsm_state51, ap_CS_fsm_state79)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or ((icmp_ln1237_reg_2230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            n_patches_o_ap_vld <= grp_delete_patch_fu_734_n_patches_ap_vld;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            n_patches_o_ap_vld <= grp_makePatch_alignedToLine_fu_699_n_patches_o_ap_vld;
        else 
            n_patches_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_V_address0_assign_proc : process(i_7_cast_reg_2058_pp5_iter1_reg, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, ap_enable_reg_pp5_iter2, ap_block_pp5_stage0, ap_block_pp6_stage0, trunc_ln1175_cast_fu_1242_p1)
    begin
        if (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            new_z_i_V_address0 <= trunc_ln1175_cast_fu_1242_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            new_z_i_V_address0 <= i_7_cast_reg_2058_pp5_iter1_reg(3 - 1 downto 0);
        else 
            new_z_i_V_address0 <= "XXX";
        end if; 
    end process;


    new_z_i_V_ce0_assign_proc : process(ap_block_pp5_stage0_11001, ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, ap_enable_reg_pp6_iter0, ap_enable_reg_pp5_iter2)
    begin
        if ((((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)) or ((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)))) then 
            new_z_i_V_ce0 <= ap_const_logic_1;
        else 
            new_z_i_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_V_we0_assign_proc : process(ap_block_pp5_stage0_11001, icmp_ln1162_reg_2054_pp5_iter1_reg, ap_enable_reg_pp5_iter2)
    begin
        if (((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (icmp_ln1162_reg_2054_pp5_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
            new_z_i_V_we0 <= ap_const_logic_1;
        else 
            new_z_i_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_2_cast_reg_1902, ap_CS_fsm_pp1_stage0, i_4_cast_reg_1945, ap_CS_fsm_pp2_stage0, i_3_cast_reg_1969, ap_CS_fsm_pp3_stage0, new_z_i_index_addr_3_reg_1996, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp3_stage0, i_6_cast_fu_1014_p1, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            new_z_i_index_address0 <= i_6_cast_fu_1014_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            new_z_i_index_address0 <= new_z_i_index_addr_3_reg_1996;
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            new_z_i_index_address0 <= i_3_cast_reg_1969(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            new_z_i_index_address0 <= i_4_cast_reg_1945(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            new_z_i_index_address0 <= i_2_cast_reg_1902(3 - 1 downto 0);
        else 
            new_z_i_index_address0 <= "XXX";
        end if; 
    end process;


    new_z_i_index_address1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, new_z_i_index_addr_4_reg_2016_pp4_iter6_reg, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, i_7_cast_fu_1200_p1, ap_enable_reg_pp4_iter7, ap_block_pp5_stage0, i_5_cast_fu_967_p1, ap_block_pp3_stage0, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            new_z_i_index_address1 <= i_7_cast_fu_1200_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            new_z_i_index_address1 <= new_z_i_index_addr_4_reg_2016_pp4_iter6_reg;
        elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            new_z_i_index_address1 <= i_5_cast_fu_967_p1(3 - 1 downto 0);
        else 
            new_z_i_index_address1 <= "XXX";
        end if; 
    end process;


    new_z_i_index_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp4_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1)
    begin
        if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            new_z_i_index_ce0 <= ap_const_logic_1;
        else 
            new_z_i_index_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_ce1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_block_pp5_stage0_11001, ap_enable_reg_pp4_iter7)
    begin
        if ((((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp4_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)))) then 
            new_z_i_index_ce1 <= ap_const_logic_1;
        else 
            new_z_i_index_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp3_stage0, grp_fu_783_p2, add_ln1132_fu_930_p2, select_ln1151_fu_993_p3)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            new_z_i_index_d0 <= select_ln1151_fu_993_p3;
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            new_z_i_index_d0 <= add_ln1132_fu_930_p2;
        elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            new_z_i_index_d0 <= grp_fu_783_p2;
        else 
            new_z_i_index_d0 <= "XXXXXXXX";
        end if; 
    end process;

    new_z_i_index_d1 <= 
        zext_ln662_fu_1165_p1 when (isNeg_fu_1112_p3(0) = '1') else 
        tmp_12_fu_1169_p4;

    new_z_i_index_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln1117_reg_1898, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln1140_reg_1941, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln1130_reg_1965, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, icmp_ln1149_reg_1992, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1)
    begin
        if ((((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln1149_reg_1992 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln1130_reg_1965 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln1140_reg_1941 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1117_reg_1898 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            new_z_i_index_we0 <= ap_const_logic_1;
        else 
            new_z_i_index_we0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_we1_assign_proc : process(ap_block_pp4_stage0_11001, icmp_ln1155_reg_2012_pp4_iter6_reg, ap_enable_reg_pp4_iter7)
    begin
        if (((ap_enable_reg_pp4_iter7 = ap_const_logic_1) and (icmp_ln1155_reg_2012_pp4_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
            new_z_i_index_we1 <= ap_const_logic_1;
        else 
            new_z_i_index_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1157_fu_1052_p2 <= (icmp_ln1157_fu_1040_p2 or icmp_ln1157_1_fu_1046_p2);
    or_ln1164_fu_1215_p2 <= (tmp_14_fu_1205_p4 or ap_const_lv12_1);
    or_ln1268_fu_1663_p2 <= (ap_const_lv12_1 or add_ln1268_fu_1657_p2);

    patches_parameters_address0_assign_proc : process(icmp_ln1237_reg_2230, ap_CS_fsm_state53, ap_CS_fsm_state55, grp_makePatch_alignedToLine_fu_699_patches_parameters_address0, grp_delete_patch_fu_734_patches_parameters_V_address0, ap_CS_fsm_state81, ap_CS_fsm_state51, ap_CS_fsm_state79, zext_ln1269_fu_1680_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            patches_parameters_address0 <= zext_ln1269_fu_1680_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state79) or ((icmp_ln1237_reg_2230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            patches_parameters_address0 <= grp_delete_patch_fu_734_patches_parameters_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            patches_parameters_address0 <= grp_makePatch_alignedToLine_fu_699_patches_parameters_address0;
        else 
            patches_parameters_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_address1_assign_proc : process(icmp_ln1237_reg_2230, ap_CS_fsm_state55, grp_delete_patch_fu_734_patches_parameters_V_address1, ap_CS_fsm_state51, ap_CS_fsm_state79, zext_ln1268_1_fu_1669_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            patches_parameters_address1 <= zext_ln1268_1_fu_1669_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state79) or ((icmp_ln1237_reg_2230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            patches_parameters_address1 <= grp_delete_patch_fu_734_patches_parameters_V_address1;
        else 
            patches_parameters_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_ce0_assign_proc : process(icmp_ln1237_reg_2230, ap_CS_fsm_state53, ap_CS_fsm_state55, grp_makePatch_alignedToLine_fu_699_patches_parameters_ce0, grp_delete_patch_fu_734_patches_parameters_V_ce0, ap_CS_fsm_state81, ap_CS_fsm_state51, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            patches_parameters_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state79) or ((icmp_ln1237_reg_2230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            patches_parameters_ce0 <= grp_delete_patch_fu_734_patches_parameters_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            patches_parameters_ce0 <= grp_makePatch_alignedToLine_fu_699_patches_parameters_ce0;
        else 
            patches_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_ce1_assign_proc : process(icmp_ln1237_reg_2230, ap_CS_fsm_state55, grp_delete_patch_fu_734_patches_parameters_V_ce1, ap_CS_fsm_state51, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            patches_parameters_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state79) or ((icmp_ln1237_reg_2230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            patches_parameters_ce1 <= grp_delete_patch_fu_734_patches_parameters_V_ce1;
        else 
            patches_parameters_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_d0_assign_proc : process(icmp_ln1237_reg_2230, ap_CS_fsm_state53, grp_makePatch_alignedToLine_fu_699_patches_parameters_d0, grp_delete_patch_fu_734_patches_parameters_V_d0, ap_CS_fsm_state81, ap_CS_fsm_state51, ap_CS_fsm_state79)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or ((icmp_ln1237_reg_2230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            patches_parameters_d0 <= grp_delete_patch_fu_734_patches_parameters_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            patches_parameters_d0 <= grp_makePatch_alignedToLine_fu_699_patches_parameters_d0;
        else 
            patches_parameters_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_we0_assign_proc : process(icmp_ln1237_reg_2230, ap_CS_fsm_state53, grp_makePatch_alignedToLine_fu_699_patches_parameters_we0, grp_delete_patch_fu_734_patches_parameters_V_we0, ap_CS_fsm_state81, ap_CS_fsm_state51, ap_CS_fsm_state79)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or ((icmp_ln1237_reg_2230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            patches_parameters_we0 <= grp_delete_patch_fu_734_patches_parameters_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            patches_parameters_we0 <= grp_makePatch_alignedToLine_fu_699_patches_parameters_we0;
        else 
            patches_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_address0_assign_proc : process(icmp_ln1237_reg_2230, ap_CS_fsm_state53, icmp_ln1300_reg_2293, grp_makePatch_alignedToLine_fu_699_patches_superpoints_address0, grp_areWedgeSuperPointsEqual_fu_722_wsp1_2_address0, grp_delete_patch_fu_734_patches_superpoints_address0, ap_CS_fsm_state76, ap_CS_fsm_state81, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state75, ap_CS_fsm_state51, ap_CS_fsm_state79)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or ((icmp_ln1237_reg_2230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            patches_superpoints_address0 <= grp_delete_patch_fu_734_patches_superpoints_address0;
        elsif ((((icmp_ln1300_reg_2293 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75)) or ((icmp_ln1300_reg_2293 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((icmp_ln1300_reg_2293 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((icmp_ln1300_reg_2293 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            patches_superpoints_address0 <= grp_areWedgeSuperPointsEqual_fu_722_wsp1_2_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            patches_superpoints_address0 <= grp_makePatch_alignedToLine_fu_699_patches_superpoints_address0;
        else 
            patches_superpoints_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_address1_assign_proc : process(icmp_ln1237_reg_2230, icmp_ln1300_reg_2293, grp_areWedgeSuperPointsEqual_fu_722_wsp1_2_address1, grp_delete_patch_fu_734_patches_superpoints_address1, ap_CS_fsm_state76, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state75, ap_CS_fsm_state51, ap_CS_fsm_state79)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or ((icmp_ln1237_reg_2230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            patches_superpoints_address1 <= grp_delete_patch_fu_734_patches_superpoints_address1;
        elsif ((((icmp_ln1300_reg_2293 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75)) or ((icmp_ln1300_reg_2293 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((icmp_ln1300_reg_2293 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((icmp_ln1300_reg_2293 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            patches_superpoints_address1 <= grp_areWedgeSuperPointsEqual_fu_722_wsp1_2_address1;
        else 
            patches_superpoints_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_ce0_assign_proc : process(icmp_ln1237_reg_2230, ap_CS_fsm_state53, icmp_ln1300_reg_2293, grp_makePatch_alignedToLine_fu_699_patches_superpoints_ce0, grp_areWedgeSuperPointsEqual_fu_722_wsp1_2_ce0, grp_delete_patch_fu_734_patches_superpoints_ce0, ap_CS_fsm_state76, ap_CS_fsm_state81, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state75, ap_CS_fsm_state51, ap_CS_fsm_state79)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or ((icmp_ln1237_reg_2230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            patches_superpoints_ce0 <= grp_delete_patch_fu_734_patches_superpoints_ce0;
        elsif ((((icmp_ln1300_reg_2293 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75)) or ((icmp_ln1300_reg_2293 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((icmp_ln1300_reg_2293 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((icmp_ln1300_reg_2293 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            patches_superpoints_ce0 <= grp_areWedgeSuperPointsEqual_fu_722_wsp1_2_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            patches_superpoints_ce0 <= grp_makePatch_alignedToLine_fu_699_patches_superpoints_ce0;
        else 
            patches_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_ce1_assign_proc : process(icmp_ln1237_reg_2230, icmp_ln1300_reg_2293, grp_areWedgeSuperPointsEqual_fu_722_wsp1_2_ce1, grp_delete_patch_fu_734_patches_superpoints_ce1, ap_CS_fsm_state76, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state75, ap_CS_fsm_state51, ap_CS_fsm_state79)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or ((icmp_ln1237_reg_2230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            patches_superpoints_ce1 <= grp_delete_patch_fu_734_patches_superpoints_ce1;
        elsif ((((icmp_ln1300_reg_2293 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75)) or ((icmp_ln1300_reg_2293 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((icmp_ln1300_reg_2293 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58)) or ((icmp_ln1300_reg_2293 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            patches_superpoints_ce1 <= grp_areWedgeSuperPointsEqual_fu_722_wsp1_2_ce1;
        else 
            patches_superpoints_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_d0_assign_proc : process(icmp_ln1237_reg_2230, ap_CS_fsm_state53, grp_makePatch_alignedToLine_fu_699_patches_superpoints_d0, grp_delete_patch_fu_734_patches_superpoints_d0, ap_CS_fsm_state81, ap_CS_fsm_state51, ap_CS_fsm_state79)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or ((icmp_ln1237_reg_2230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            patches_superpoints_d0 <= grp_delete_patch_fu_734_patches_superpoints_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            patches_superpoints_d0 <= grp_makePatch_alignedToLine_fu_699_patches_superpoints_d0;
        else 
            patches_superpoints_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_we0_assign_proc : process(icmp_ln1237_reg_2230, ap_CS_fsm_state53, grp_makePatch_alignedToLine_fu_699_patches_superpoints_we0, grp_delete_patch_fu_734_patches_superpoints_we0, ap_CS_fsm_state81, ap_CS_fsm_state51, ap_CS_fsm_state79)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or ((icmp_ln1237_reg_2230 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            patches_superpoints_we0 <= grp_delete_patch_fu_734_patches_superpoints_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            patches_superpoints_we0 <= grp_makePatch_alignedToLine_fu_699_patches_superpoints_we0;
        else 
            patches_superpoints_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_1_fu_1151_p2 <= std_logic_vector(shift_left(unsigned(zext_ln68_fu_1099_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1141_p1(31-1 downto 0)))));
    r_V_fu_1145_p2 <= std_logic_vector(shift_right(unsigned(zext_ln68_fu_1099_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1141_p1(31-1 downto 0)))));
    ret_4_fu_1475_p2 <= std_logic_vector(signed(sext_ln215_4_fu_1472_p1) - signed(sext_ln1183_reg_2127));
    ret_5_fu_1518_p2 <= std_logic_vector(signed(sext_ln215_5_fu_1515_p1) - signed(sext_ln1183_reg_2127));
    ret_6_fu_1561_p2 <= std_logic_vector(signed(sext_ln215_6_fu_1558_p1) - signed(sext_ln1183_reg_2127));
    ret_7_fu_1692_p2 <= std_logic_vector(signed(sext_ln215_7_fu_1685_p1) - signed(sext_ln215_8_fu_1688_p1));
    ret_8_fu_1705_p2 <= std_logic_vector(signed(sext_ln215_9_fu_1698_p1) - signed(sext_ln215_10_fu_1701_p1));
    ret_fu_1411_p2 <= std_logic_vector(signed(sext_ln215_fu_1407_p1) - signed(sext_ln1183_reg_2127));
    select_ln1146_fu_947_p3 <= 
        sext_ln1146_fu_937_p1 when (icmp_ln1146_fu_941_p2(0) = '1') else 
        grp_fu_790_p2;
    select_ln1151_fu_993_p3 <= 
        new_z_i_index_q1 when (icmp_ln1151_fu_981_p2(0) = '1') else 
        add_ln1151_1_fu_987_p2;
    select_ln1220_fu_1590_p3 <= 
        new_z_i_atTop_V_3_fu_228 when (tmp_19_reg_2225(0) = '1') else 
        lhs_4_reg_2209;
    select_ln1274_fu_1717_p3 <= 
        ret_8_fu_1705_p2 when (icmp_ln878_fu_1711_p2(0) = '1') else 
        ret_7_fu_1692_p2;
    select_ln180_1_fu_1331_p3 <= 
        sub_ln180_1_fu_1317_p2 when (tmp_20_fu_1323_p3(0) = '1') else 
        sub_ln1185_fu_1312_p2;
    select_ln180_2_fu_1494_p3 <= 
        sub_ln180_2_fu_1480_p2 when (tmp_17_fu_1486_p3(0) = '1') else 
        ret_4_fu_1475_p2;
    select_ln180_3_fu_1537_p3 <= 
        sub_ln180_3_fu_1523_p2 when (tmp_18_fu_1529_p3(0) = '1') else 
        ret_5_fu_1518_p2;
    select_ln180_fu_1430_p3 <= 
        sub_ln180_fu_1416_p2 when (tmp_16_fu_1422_p3(0) = '1') else 
        ret_fu_1411_p2;
        sext_ln1130_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1128_fu_886_p2),10));

        sext_ln1146_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_76_reg_576),32));

    sext_ln1183_fu_1276_p0 <= z_top_min_read;
        sext_ln1183_fu_1276_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1183_fu_1276_p0),33));

        sext_ln1185_1_fu_1339_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln180_1_fu_1331_p3),64));

        sext_ln1185_fu_1309_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_reg_2150),33));

        sext_ln1311_fu_1125_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_1120_p2),9));

        sext_ln215_10_fu_1701_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(patches_parameters_q0),33));

        sext_ln215_4_fu_1472_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_2_reg_2192),33));

        sext_ln215_5_fu_1515_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_3_reg_2203),33));

        sext_ln215_6_fu_1558_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_4_reg_2209),33));

        sext_ln215_7_fu_1685_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(original_c),33));

        sext_ln215_8_fu_1688_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(patches_parameters_q1),33));

        sext_ln215_9_fu_1698_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(original_d),33));

        sext_ln215_fu_1407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_fu_1394_p6),33));

        sext_ln534_1_fu_1725_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln1274_fu_1717_p3),64));

        sext_ln534_fu_1566_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_6_reg_2215),64));

    sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_1137_p1),55));
        sh_prom_i_i_i_i_i_cast_cast_cast_fu_1137_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_1129_p3),32));

    sub_ln1185_fu_1312_p2 <= std_logic_vector(signed(sext_ln1185_fu_1309_p1) - signed(sext_ln1183_reg_2127));
    sub_ln1268_fu_1651_p2 <= std_logic_vector(unsigned(tmp_22_cast_fu_1633_p3) - unsigned(zext_ln1268_fu_1647_p1));
    sub_ln1311_fu_1120_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_23_reg_2038));
    sub_ln180_1_fu_1317_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(sub_ln1185_fu_1312_p2));
    sub_ln180_2_fu_1480_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(ret_4_fu_1475_p2));
    sub_ln180_3_fu_1523_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(ret_5_fu_1518_p2));
    sub_ln180_fu_1416_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(ret_fu_1411_p2));
    thirdLastPatchIdx_fu_1732_p2 <= std_logic_vector(unsigned(reg_808) + unsigned(ap_const_lv8_FD));
    tmp_12_fu_1169_p4 <= r_V_1_fu_1151_p2(31 downto 24);
    tmp_13_fu_1157_p3 <= r_V_fu_1145_p2(24 downto 24);
    tmp_14_fu_1205_p4 <= ((i_7_reg_607 & new_z_i_index_q1) & ap_const_lv1_0);
    tmp_15_fu_1221_p3 <= (ap_const_lv52_0 & or_ln1164_fu_1215_p2);
    tmp_16_fu_1422_p3 <= ret_fu_1411_p2(32 downto 32);
    tmp_17_fu_1486_p3 <= ret_4_fu_1475_p2(32 downto 32);
    tmp_18_fu_1529_p3 <= ret_5_fu_1518_p2(32 downto 32);
    tmp_1_fu_1026_p4 <= bitcast_ln1157_fu_1023_p1(30 downto 23);
    tmp_20_fu_1323_p3 <= sub_ln1185_fu_1312_p2(32 downto 32);
    tmp_21_cast_fu_1375_p3 <= (trunc_ln1207_fu_1372_p1 & ap_const_lv1_0);
    tmp_21_fu_1640_p3 <= (lastPatchIdx_reg_2251 & ap_const_lv3_0);
    tmp_22_cast_fu_1633_p3 <= (trunc_ln1268_reg_2259 & ap_const_lv7_0);
    tmp_22_fu_1617_p4 <= n_patches_i(7 downto 2);
    tmp_24_fu_1086_p1 <= data_V_fu_1068_p3(23 - 1 downto 0);
    tmp_8_fu_1295_p5 <= i_9_reg_630(2 - 1 downto 0);
    tmp_fu_859_p1 <= white_space_height_read;
    tmp_fu_859_p3 <= tmp_fu_859_p1(63 downto 63);
    trunc_ln1151_fu_977_p1 <= GDn_points_q0(8 - 1 downto 0);
    trunc_ln1157_fu_1036_p1 <= bitcast_ln1157_fu_1023_p1(23 - 1 downto 0);
    trunc_ln1172_fu_1247_p1 <= ap_phi_mux_i_8_phi_fu_623_p4(2 - 1 downto 0);
    trunc_ln1175_cast_fu_1242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_8_phi_fu_623_p4),64));
    trunc_ln1192_fu_1368_p1 <= layerWithSmallestShift_reg_653(2 - 1 downto 0);
    trunc_ln1207_fu_1372_p1 <= select_ln1146_reg_1979(11 - 1 downto 0);
    trunc_ln1268_fu_1613_p1 <= lastPatchIdx_fu_1607_p2(5 - 1 downto 0);
    trunc_ln312_fu_1064_p1 <= bitcast_ln1157_fu_1023_p1(31 - 1 downto 0);
    trunc_ln534_fu_1291_p1 <= i_9_reg_630(2 - 1 downto 0);
    ush_fu_1129_p3 <= 
        sext_ln1311_fu_1125_p1 when (isNeg_fu_1112_p3(0) = '1') else 
        add_ln341_fu_1106_p2;
    zext_ln1104_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_get_index_from_z_fu_746_ap_return),9));
    zext_ln1108_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_502),64));
    zext_ln1140_fu_877_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1138_fu_871_p2),10));
    zext_ln1151_fu_973_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_z_i_index_q1),32));
    zext_ln1185_fu_1349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln534_reg_2145),8));
    zext_ln1207_fu_1389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1207_fu_1383_p2),64));
    zext_ln1212_fu_1449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1212_fu_1444_p2),64));
    zext_ln1217_fu_1467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1217_fu_1462_p2),64));
    zext_ln1256_fu_1602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1236_fu_1596_p2),9));
    zext_ln1268_1_fu_1669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1268_fu_1663_p2),64));
    zext_ln1268_fu_1647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_1640_p3),12));
    zext_ln1269_fu_1680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1269_fu_1674_p2),64));
    zext_ln1293_fu_1729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lastPatchIdx_reg_2251),9));
    zext_ln341_fu_1103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_reg_2038),9));
    zext_ln662_fu_1165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_1157_p3),8));
    zext_ln68_fu_1099_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_1090_p4),55));
end behav;
