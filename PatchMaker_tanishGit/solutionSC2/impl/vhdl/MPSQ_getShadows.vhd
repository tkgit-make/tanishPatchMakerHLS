-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_getShadows is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    patches_superpoints_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    patches_superpoints_0_ce0 : OUT STD_LOGIC;
    patches_superpoints_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_15_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    patches_superpoints_15_ce0 : OUT STD_LOGIC;
    patches_superpoints_15_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    wp_superpoints_0 : IN STD_LOGIC_VECTOR (8 downto 0);
    wp_superpoints_15 : IN STD_LOGIC_VECTOR (8 downto 0);
    wp_parameters14_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    wp_parameters14_ce0 : OUT STD_LOGIC;
    wp_parameters14_we0 : OUT STD_LOGIC;
    wp_parameters14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters15_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    wp_parameters15_ce0 : OUT STD_LOGIC;
    wp_parameters15_we0 : OUT STD_LOGIC;
    wp_parameters15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters1634_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    wp_parameters1634_ce0 : OUT STD_LOGIC;
    wp_parameters1634_we0 : OUT STD_LOGIC;
    wp_parameters1634_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters1634_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters1740_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    wp_parameters1740_ce0 : OUT STD_LOGIC;
    wp_parameters1740_we0 : OUT STD_LOGIC;
    wp_parameters1740_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters1740_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters_offset : IN STD_LOGIC_VECTOR (4 downto 0);
    zTopMin : IN STD_LOGIC_VECTOR (31 downto 0);
    zTopMax : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_getShadows is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (102 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (102 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (102 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (102 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (102 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (102 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (102 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (102 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (102 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (102 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_FD050F1C : STD_LOGIC_VECTOR (31 downto 0) := "11111101000001010000111100011100";
    constant ap_const_lv32_2FAF0E4 : STD_LOGIC_VECTOR (31 downto 0) := "00000010111110101111000011100100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv129_lc_2 : STD_LOGIC_VECTOR (128 downto 0) := "000000000000000000000000000000000000000000000000000000000000000011001100110011001100110011001100110011001100110011001100110011010";
    constant ap_const_lv61_5 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal wp_parameters_offset_cast_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal wp_parameters_offset_cast_reg_968 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln185_fu_326_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln185_reg_976 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln186_fu_340_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln186_reg_981 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln196_fu_356_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln196_reg_986 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln196_1_fu_368_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln196_1_reg_991 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln196_2_fu_380_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln196_2_reg_996 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln194_fu_392_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln194_reg_1001 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln199_fu_396_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln199_reg_1006 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln196_fu_408_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln196_reg_1014 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln194_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln196_fu_433_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln196_reg_1019 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln196_1_fu_447_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln196_1_reg_1024 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln_reg_1029 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1_reg_1034 : STD_LOGIC_VECTOR (11 downto 0);
    signal wp_parameters14_addr_reg_1039 : STD_LOGIC_VECTOR (4 downto 0);
    signal wp_parameters15_addr_reg_1044 : STD_LOGIC_VECTOR (4 downto 0);
    signal wp_parameters1634_addr_reg_1049 : STD_LOGIC_VECTOR (4 downto 0);
    signal wp_parameters1740_addr_reg_1054 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal udiv_ln_cast_reg_1079 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_reg_1084 : STD_LOGIC_VECTOR (5 downto 0);
    signal udiv_ln2_cast_reg_1089 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_reg_1094 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln196_5_fu_592_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln196_5_reg_1099 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal add_ln197_1_fu_618_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln197_1_reg_1104 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal z_j_min_V_fu_628_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_j_min_V_reg_1114 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal add_ln199_1_fu_635_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln199_1_reg_1119 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal z_j_max_V_fu_645_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_j_max_V_reg_1129 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal wp_parameters14_load_reg_1137 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal trunc_ln886_fu_744_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln886_reg_1142 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal phi_ln_fu_791_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln_reg_1152 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal icmp_ln878_12_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_12_reg_1157 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln886_1_fu_819_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln886_1_reg_1161 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal icmp_ln886_10_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_10_reg_1166 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln878_1_fu_847_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln878_1_reg_1170 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal icmp_ln878_13_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_13_reg_1175 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln212_fu_866_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_start : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_done : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_idle : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_ready : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_303_z_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_303_z_j : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_280 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal i_11_reg_291 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (102 downto 0);
    signal ap_NS_fsm_state70 : STD_LOGIC;
    signal ap_NS_fsm_state76 : STD_LOGIC;
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_NS_fsm_state82 : STD_LOGIC;
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_NS_fsm_state88 : STD_LOGIC;
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal zext_ln196_3_fu_624_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln197_2_fu_641_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal topL_jL_V_3_1_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal topL_jL_V_3_2_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal topL_jL_V_3_4_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal topL_jL_V_3_5_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal topL_jR_V_3_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal topL_jR_V_3_1_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal topL_jR_V_3_2_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal topL_jR_V_3_3_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jL_V_3_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jL_V_3_1_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jL_V_3_2_fu_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jL_V_3_3_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jR_V_3_fu_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jR_V_3_1_fu_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jR_V_3_2_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jR_V_3_3_fu_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal icmp_ln886_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal topL_jL_V_3_7_fu_768_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal icmp_ln878_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_11_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln196_1_fu_348_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln196_2_fu_360_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln196_3_fu_372_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln196_4_fu_384_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_412_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln196_fu_420_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln196_2_fu_424_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln196_3_fu_429_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln196_3_fu_438_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln196_4_fu_443_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln196_5_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_495_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_495_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal grp_fu_504_p0 : STD_LOGIC_VECTOR (60 downto 0);
    signal grp_fu_504_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln197_1_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_517_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_517_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal grp_fu_526_p0 : STD_LOGIC_VECTOR (60 downto 0);
    signal grp_fu_526_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_495_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal grp_fu_517_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal p_shl1_cast_fu_572_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_504_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln196_1_fu_584_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln196_4_fu_579_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln196_2_fu_588_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_598_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_526_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln197_fu_610_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln197_fu_605_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln197_1_fu_614_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln199_fu_632_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln886_9_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_11_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal topL_jL_V_3_fu_754_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_504_ap_start : STD_LOGIC;
    signal grp_fu_504_ap_done : STD_LOGIC;
    signal grp_fu_526_ap_start : STD_LOGIC;
    signal grp_fu_526_ap_done : STD_LOGIC;
    signal icmp_ln212_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_495_p00 : STD_LOGIC_VECTOR (128 downto 0);
    signal grp_fu_517_p00 : STD_LOGIC_VECTOR (128 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component MPSQ_straightLineProjectorFromLayerIJtoK IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        z_i : IN STD_LOGIC_VECTOR (31 downto 0);
        z_j : IN STD_LOGIC_VECTOR (31 downto 0);
        i : IN STD_LOGIC_VECTOR (2 downto 0);
        j : IN STD_LOGIC_VECTOR (2 downto 0);
        k : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_mul_64ns_66ns_129_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (65 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (128 downto 0) );
    end component;


    component MPSQ_urem_61s_4ns_3_65_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (60 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component MPSQ_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_straightLineProjectorFromLayerIJtoK_fu_303 : component MPSQ_straightLineProjectorFromLayerIJtoK
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_start,
        ap_done => grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_done,
        ap_idle => grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_idle,
        ap_ready => grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_ready,
        ap_ce => ap_const_logic_1,
        z_i => grp_straightLineProjectorFromLayerIJtoK_fu_303_z_i,
        z_j => grp_straightLineProjectorFromLayerIJtoK_fu_303_z_j,
        i => ap_const_lv3_5,
        j => add_ln199_1_reg_1119,
        k => ap_const_lv3_1,
        ap_return => grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_return);

    mul_64ns_66ns_129_5_1_U22499 : component MPSQ_mul_64ns_66ns_129_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 66,
        dout_WIDTH => 129)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_495_p0,
        din1 => grp_fu_495_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_495_p2);

    urem_61s_4ns_3_65_seq_1_U22500 : component MPSQ_urem_61s_4ns_3_65_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 65,
        din0_WIDTH => 61,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_504_ap_start,
        done => grp_fu_504_ap_done,
        din0 => grp_fu_504_p0,
        din1 => grp_fu_504_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_504_p2);

    mul_64ns_66ns_129_5_1_U22501 : component MPSQ_mul_64ns_66ns_129_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 66,
        dout_WIDTH => 129)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_517_p0,
        din1 => grp_fu_517_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_517_p2);

    urem_61s_4ns_3_65_seq_1_U22502 : component MPSQ_urem_61s_4ns_3_65_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 65,
        din0_WIDTH => 61,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_526_ap_start,
        done => grp_fu_526_ap_done,
        din0 => grp_fu_526_p0,
        din1 => grp_fu_526_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_526_p2);

    mux_42_32_1_1_U22503 : component MPSQ_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => topL_jR_V_3_3_fu_136,
        din1 => topL_jR_V_3_1_fu_128,
        din2 => topL_jR_V_3_2_fu_132,
        din3 => topL_jR_V_3_3_fu_136,
        din4 => trunc_ln886_reg_1142,
        dout => phi_ln_fu_791_p6);

    mux_42_32_1_1_U22504 : component MPSQ_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => topR_jL_V_3_3_fu_152,
        din1 => topR_jL_V_3_1_fu_144,
        din2 => topR_jL_V_3_2_fu_148,
        din3 => topR_jL_V_3_3_fu_152,
        din4 => trunc_ln886_reg_1142,
        dout => phi_ln886_1_fu_819_p6);

    mux_42_32_1_1_U22505 : component MPSQ_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => topR_jR_V_3_3_fu_168,
        din1 => topR_jR_V_3_1_fu_160,
        din2 => topR_jR_V_3_2_fu_164,
        din3 => topR_jR_V_3_3_fu_168,
        din4 => trunc_ln886_reg_1142,
        dout => phi_ln878_1_fu_847_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_NS_fsm_state88) and (ap_const_logic_1 = ap_CS_fsm_state87)) or ((ap_const_logic_1 = ap_NS_fsm_state82) and (ap_const_logic_1 = ap_CS_fsm_state81)) or ((ap_const_logic_1 = ap_NS_fsm_state76) and (ap_const_logic_1 = ap_CS_fsm_state75)) or ((ap_const_logic_1 = ap_NS_fsm_state70) and (ap_const_logic_1 = ap_CS_fsm_state69)))) then 
                    grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_ready = ap_const_logic_1)) then 
                    grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_11_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
                i_11_reg_291 <= add_ln212_fu_866_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln194_fu_402_p2 = ap_const_lv1_1))) then 
                i_11_reg_291 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;

    i_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
                i_reg_280 <= add_ln199_reg_1006;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_280 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln194_fu_402_p2 = ap_const_lv1_0))) then
                    add_ln196_1_reg_1024(14 downto 3) <= add_ln196_1_fu_447_p2(14 downto 3);
                    add_ln196_reg_1019(14 downto 3) <= add_ln196_fu_433_p2(14 downto 3);
                trunc_ln196_reg_1014 <= trunc_ln196_fu_408_p1;
                trunc_ln1_reg_1034 <= add_ln196_1_fu_447_p2(14 downto 3);
                trunc_ln_reg_1029 <= add_ln196_fu_433_p2(14 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then
                add_ln196_5_reg_1099 <= add_ln196_5_fu_592_p2;
                add_ln197_1_reg_1104 <= add_ln197_1_fu_618_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                add_ln199_1_reg_1119 <= add_ln199_1_fu_635_p2;
                z_j_min_V_reg_1114 <= z_j_min_V_fu_628_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln199_reg_1006 <= add_ln199_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state98)) then
                icmp_ln878_12_reg_1157 <= icmp_ln878_12_fu_804_p2;
                phi_ln_reg_1152 <= phi_ln_fu_791_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state102)) then
                icmp_ln878_13_reg_1175 <= icmp_ln878_13_fu_860_p2;
                phi_ln878_1_reg_1170 <= phi_ln878_1_fu_847_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state100)) then
                icmp_ln886_10_reg_1166 <= icmp_ln886_10_fu_832_p2;
                phi_ln886_1_reg_1161 <= phi_ln886_1_fu_819_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                select_ln185_reg_976 <= select_ln185_fu_326_p3;
                select_ln186_reg_981 <= select_ln186_fu_340_p3;
                    sext_ln194_reg_1001(12 downto 3) <= sext_ln194_fu_392_p1(12 downto 3);
                    sext_ln196_1_reg_991(12 downto 3) <= sext_ln196_1_fu_368_p1(12 downto 3);
                    sext_ln196_2_reg_996(14 downto 5) <= sext_ln196_2_fu_380_p1(14 downto 5);
                    sext_ln196_reg_986(14 downto 5) <= sext_ln196_fu_356_p1(14 downto 5);
                    wp_parameters_offset_cast_reg_968(4 downto 0) <= wp_parameters_offset_cast_fu_316_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_33_reg_1094 <= grp_fu_517_p2(75 downto 70);
                tmp_reg_1084 <= grp_fu_495_p2(75 downto 70);
                udiv_ln2_cast_reg_1089 <= grp_fu_517_p2(77 downto 70);
                udiv_ln_cast_reg_1079 <= grp_fu_495_p2(77 downto 70);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state76) and (trunc_ln196_reg_1014 = ap_const_lv2_0))) then
                topL_jL_V_3_1_fu_108 <= grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state76) and (trunc_ln196_reg_1014 = ap_const_lv2_1))) then
                topL_jL_V_3_2_fu_112 <= grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state76) and (trunc_ln196_reg_1014 = ap_const_lv2_2))) then
                topL_jL_V_3_4_fu_116 <= grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state76) and (trunc_ln196_reg_1014 = ap_const_lv2_3))) then
                topL_jL_V_3_5_fu_120 <= grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln196_reg_1014 = ap_const_lv2_1))) then
                topL_jR_V_3_1_fu_128 <= grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln196_reg_1014 = ap_const_lv2_2))) then
                topL_jR_V_3_2_fu_132 <= grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln196_reg_1014 = ap_const_lv2_3))) then
                topL_jR_V_3_3_fu_136 <= grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln196_reg_1014 = ap_const_lv2_0))) then
                topL_jR_V_3_fu_124 <= grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state88) and (trunc_ln196_reg_1014 = ap_const_lv2_1))) then
                topR_jL_V_3_1_fu_144 <= grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state88) and (trunc_ln196_reg_1014 = ap_const_lv2_2))) then
                topR_jL_V_3_2_fu_148 <= grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state88) and (trunc_ln196_reg_1014 = ap_const_lv2_3))) then
                topR_jL_V_3_3_fu_152 <= grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state88) and (trunc_ln196_reg_1014 = ap_const_lv2_0))) then
                topR_jL_V_3_fu_140 <= grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state94) and (trunc_ln196_reg_1014 = ap_const_lv2_1))) then
                topR_jR_V_3_1_fu_160 <= grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state94) and (trunc_ln196_reg_1014 = ap_const_lv2_2))) then
                topR_jR_V_3_2_fu_164 <= grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state94) and (trunc_ln196_reg_1014 = ap_const_lv2_3))) then
                topR_jR_V_3_3_fu_168 <= grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state94) and (trunc_ln196_reg_1014 = ap_const_lv2_0))) then
                topR_jR_V_3_fu_156 <= grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state97)) then
                trunc_ln886_reg_1142 <= trunc_ln886_fu_744_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln194_fu_402_p2 = ap_const_lv1_1))) then
                wp_parameters14_addr_reg_1039 <= wp_parameters_offset_cast_reg_968(5 - 1 downto 0);
                wp_parameters15_addr_reg_1044 <= wp_parameters_offset_cast_reg_968(5 - 1 downto 0);
                wp_parameters1634_addr_reg_1049 <= wp_parameters_offset_cast_reg_968(5 - 1 downto 0);
                wp_parameters1740_addr_reg_1054 <= wp_parameters_offset_cast_reg_968(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state96)) then
                wp_parameters14_load_reg_1137 <= wp_parameters14_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                z_j_max_V_reg_1129 <= z_j_max_V_fu_645_p1;
            end if;
        end if;
    end process;
    wp_parameters_offset_cast_reg_968(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    sext_ln196_reg_986(4 downto 0) <= "00000";
    sext_ln196_1_reg_991(2 downto 0) <= "000";
    sext_ln196_2_reg_996(4 downto 0) <= "00000";
    sext_ln194_reg_1001(2 downto 0) <= "000";
    add_ln196_reg_1019(2 downto 0) <= "000";
    add_ln196_1_reg_1024(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln194_fu_402_p2, ap_CS_fsm_state95, icmp_ln212_fu_729_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln194_fu_402_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state95 => 
                if (((icmp_ln212_fu_729_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state95))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state96;
                end if;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln196_1_fu_447_p2 <= std_logic_vector(signed(sext_ln196_4_fu_443_p1) + signed(sext_ln196_2_reg_996));
    add_ln196_2_fu_424_p2 <= std_logic_vector(signed(sext_ln196_1_reg_991) + signed(zext_ln196_fu_420_p1));
    add_ln196_3_fu_438_p2 <= std_logic_vector(signed(sext_ln194_reg_1001) + signed(zext_ln196_fu_420_p1));
    add_ln196_4_fu_579_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_572_p3) + unsigned(udiv_ln_cast_reg_1079));
    add_ln196_5_fu_592_p2 <= std_logic_vector(unsigned(add_ln196_4_fu_579_p2) + unsigned(zext_ln196_2_fu_588_p1));
    add_ln196_fu_433_p2 <= std_logic_vector(signed(sext_ln196_3_fu_429_p1) + signed(sext_ln196_reg_986));
    add_ln197_1_fu_618_p2 <= std_logic_vector(unsigned(add_ln197_fu_605_p2) + unsigned(zext_ln197_1_fu_614_p1));
    add_ln197_fu_605_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_598_p3) + unsigned(udiv_ln2_cast_reg_1089));
    add_ln199_1_fu_635_p2 <= std_logic_vector(unsigned(zext_ln199_fu_632_p1) + unsigned(ap_const_lv3_1));
    add_ln199_fu_396_p2 <= std_logic_vector(unsigned(i_reg_280) + unsigned(ap_const_lv3_1));
    add_ln212_fu_866_p2 <= std_logic_vector(unsigned(i_11_reg_291) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);
    ap_NS_fsm_state70 <= ap_NS_fsm(69);
    ap_NS_fsm_state76 <= ap_NS_fsm(75);
    ap_NS_fsm_state82 <= ap_NS_fsm(81);
    ap_NS_fsm_state88 <= ap_NS_fsm(87);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state95, icmp_ln212_fu_729_p2)
    begin
        if ((((icmp_ln212_fu_729_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state95)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state95, icmp_ln212_fu_729_p2)
    begin
        if (((icmp_ln212_fu_729_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_495_p0 <= grp_fu_495_p00(64 - 1 downto 0);
    grp_fu_495_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln196_5_fu_488_p1),129));
    grp_fu_495_p1 <= ap_const_lv129_lc_2(66 - 1 downto 0);

    grp_fu_504_ap_start_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_504_ap_start <= ap_const_logic_1;
        else 
            grp_fu_504_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_504_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_1029),61));

    grp_fu_504_p1 <= ap_const_lv61_5(4 - 1 downto 0);
    grp_fu_517_p0 <= grp_fu_517_p00(64 - 1 downto 0);
    grp_fu_517_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln197_1_fu_510_p1),129));
    grp_fu_517_p1 <= ap_const_lv129_lc_2(66 - 1 downto 0);

    grp_fu_526_ap_start_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_526_ap_start <= ap_const_logic_1;
        else 
            grp_fu_526_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_526_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_reg_1034),61));

    grp_fu_526_p1 <= ap_const_lv61_5(4 - 1 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_start <= grp_straightLineProjectorFromLayerIJtoK_fu_303_ap_start_reg;

    grp_straightLineProjectorFromLayerIJtoK_fu_303_z_i_assign_proc : process(select_ln185_reg_976, select_ln186_reg_981, ap_CS_fsm_state70, ap_CS_fsm_state76, ap_CS_fsm_state82, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state82))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_303_z_i <= select_ln186_reg_981;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_303_z_i <= select_ln185_reg_976;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_303_z_i <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_straightLineProjectorFromLayerIJtoK_fu_303_z_j_assign_proc : process(z_j_min_V_reg_1114, z_j_max_V_reg_1129, ap_CS_fsm_state70, ap_CS_fsm_state76, ap_CS_fsm_state82, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_303_z_j <= z_j_max_V_reg_1129;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_303_z_j <= z_j_min_V_reg_1114;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_303_z_j <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln194_fu_402_p2 <= "1" when (i_reg_280 = ap_const_lv3_4) else "0";
    icmp_ln212_fu_729_p2 <= "1" when (i_11_reg_291 = ap_const_lv3_4) else "0";
    icmp_ln878_11_fu_334_p2 <= "1" when (signed(zTopMax) < signed(ap_const_lv32_2FAF0E4)) else "0";
    icmp_ln878_12_fu_804_p2 <= "1" when (signed(phi_ln_fu_791_p6) < signed(wp_parameters15_q0)) else "0";
    icmp_ln878_13_fu_860_p2 <= "1" when (signed(phi_ln878_1_fu_847_p6) < signed(wp_parameters1740_q0)) else "0";
    icmp_ln878_fu_320_p2 <= "1" when (signed(zTopMin) < signed(ap_const_lv32_FD050F1C)) else "0";
    icmp_ln886_10_fu_832_p2 <= "1" when (signed(phi_ln886_1_fu_819_p6) > signed(wp_parameters1634_q0)) else "0";
    icmp_ln886_11_fu_762_p2 <= "1" when (trunc_ln886_fu_744_p1 = ap_const_lv2_1) else "0";
    icmp_ln886_9_fu_748_p2 <= "1" when (trunc_ln886_fu_744_p1 = ap_const_lv2_2) else "0";
    icmp_ln886_fu_777_p2 <= "1" when (signed(topL_jL_V_3_7_fu_768_p3) > signed(wp_parameters14_load_reg_1137)) else "0";
    p_shl1_cast_fu_572_p3 <= (tmp_reg_1084 & ap_const_lv2_0);
    p_shl_cast_fu_598_p3 <= (tmp_33_reg_1094 & ap_const_lv2_0);
    patches_superpoints_0_address0 <= zext_ln196_3_fu_624_p1(8 - 1 downto 0);

    patches_superpoints_0_ce0_assign_proc : process(ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            patches_superpoints_0_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_superpoints_15_address0 <= zext_ln197_2_fu_641_p1(8 - 1 downto 0);

    patches_superpoints_15_ce0_assign_proc : process(ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            patches_superpoints_15_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln185_fu_326_p3 <= 
        ap_const_lv32_FD050F1C when (icmp_ln878_fu_320_p2(0) = '1') else 
        zTopMin;
    select_ln186_fu_340_p3 <= 
        zTopMax when (icmp_ln878_11_fu_334_p2(0) = '1') else 
        ap_const_lv32_2FAF0E4;
        sext_ln194_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln196_4_fu_384_p3),13));

        sext_ln196_1_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln196_2_fu_360_p3),13));

        sext_ln196_2_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln196_3_fu_372_p3),15));

        sext_ln196_3_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln196_2_fu_424_p2),15));

        sext_ln196_4_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln196_3_fu_438_p2),15));

        sext_ln196_5_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln196_reg_1019),64));

        sext_ln196_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln196_1_fu_348_p3),15));

        sext_ln197_1_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln196_1_reg_1024),64));

    shl_ln196_1_fu_348_p3 <= (wp_superpoints_0 & ap_const_lv5_0);
    shl_ln196_2_fu_360_p3 <= (wp_superpoints_0 & ap_const_lv3_0);
    shl_ln196_3_fu_372_p3 <= (wp_superpoints_15 & ap_const_lv5_0);
    shl_ln196_4_fu_384_p3 <= (wp_superpoints_15 & ap_const_lv3_0);
    shl_ln_fu_412_p3 <= (trunc_ln196_fu_408_p1 & ap_const_lv3_0);
    topL_jL_V_3_7_fu_768_p3 <= 
        topL_jL_V_3_2_fu_112 when (icmp_ln886_11_fu_762_p2(0) = '1') else 
        topL_jL_V_3_fu_754_p3;
    topL_jL_V_3_fu_754_p3 <= 
        topL_jL_V_3_4_fu_116 when (icmp_ln886_9_fu_748_p2(0) = '1') else 
        topL_jL_V_3_5_fu_120;
    trunc_ln196_1_fu_584_p1 <= grp_fu_504_p2(3 - 1 downto 0);
    trunc_ln196_fu_408_p1 <= i_reg_280(2 - 1 downto 0);
    trunc_ln197_fu_610_p1 <= grp_fu_526_p2(3 - 1 downto 0);
    trunc_ln886_fu_744_p1 <= i_11_reg_291(2 - 1 downto 0);

    wp_parameters14_address0_assign_proc : process(wp_parameters_offset_cast_reg_968, ap_CS_fsm_state2, wp_parameters14_addr_reg_1039, ap_CS_fsm_state97, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            wp_parameters14_address0 <= wp_parameters14_addr_reg_1039;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_parameters14_address0 <= wp_parameters_offset_cast_reg_968(5 - 1 downto 0);
        else 
            wp_parameters14_address0 <= "XXXXX";
        end if; 
    end process;


    wp_parameters14_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state97, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            wp_parameters14_ce0 <= ap_const_logic_1;
        else 
            wp_parameters14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_parameters14_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state97, topL_jL_V_3_1_fu_108, topL_jL_V_3_7_fu_768_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            wp_parameters14_d0 <= topL_jL_V_3_7_fu_768_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_parameters14_d0 <= topL_jL_V_3_1_fu_108;
        else 
            wp_parameters14_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wp_parameters14_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln194_fu_402_p2, ap_CS_fsm_state97, icmp_ln886_fu_777_p2)
    begin
        if ((((icmp_ln886_fu_777_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state97)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln194_fu_402_p2 = ap_const_lv1_1)))) then 
            wp_parameters14_we0 <= ap_const_logic_1;
        else 
            wp_parameters14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_parameters15_address0_assign_proc : process(wp_parameters_offset_cast_reg_968, ap_CS_fsm_state2, wp_parameters15_addr_reg_1044, ap_CS_fsm_state97, ap_CS_fsm_state99)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            wp_parameters15_address0 <= wp_parameters15_addr_reg_1044;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_parameters15_address0 <= wp_parameters_offset_cast_reg_968(5 - 1 downto 0);
        else 
            wp_parameters15_address0 <= "XXXXX";
        end if; 
    end process;


    wp_parameters15_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state97, ap_CS_fsm_state99)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            wp_parameters15_ce0 <= ap_const_logic_1;
        else 
            wp_parameters15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_parameters15_d0_assign_proc : process(ap_CS_fsm_state2, phi_ln_reg_1152, topL_jR_V_3_fu_124, ap_CS_fsm_state99)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            wp_parameters15_d0 <= phi_ln_reg_1152;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_parameters15_d0 <= topL_jR_V_3_fu_124;
        else 
            wp_parameters15_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wp_parameters15_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln194_fu_402_p2, icmp_ln878_12_reg_1157, ap_CS_fsm_state99)
    begin
        if ((((icmp_ln878_12_reg_1157 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state99)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln194_fu_402_p2 = ap_const_lv1_1)))) then 
            wp_parameters15_we0 <= ap_const_logic_1;
        else 
            wp_parameters15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_parameters1634_address0_assign_proc : process(wp_parameters_offset_cast_reg_968, ap_CS_fsm_state2, wp_parameters1634_addr_reg_1049, ap_CS_fsm_state99, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state99))) then 
            wp_parameters1634_address0 <= wp_parameters1634_addr_reg_1049;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_parameters1634_address0 <= wp_parameters_offset_cast_reg_968(5 - 1 downto 0);
        else 
            wp_parameters1634_address0 <= "XXXXX";
        end if; 
    end process;


    wp_parameters1634_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state99, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            wp_parameters1634_ce0 <= ap_const_logic_1;
        else 
            wp_parameters1634_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_parameters1634_d0_assign_proc : process(ap_CS_fsm_state2, phi_ln886_1_reg_1161, topR_jL_V_3_fu_140, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            wp_parameters1634_d0 <= phi_ln886_1_reg_1161;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_parameters1634_d0 <= topR_jL_V_3_fu_140;
        else 
            wp_parameters1634_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wp_parameters1634_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln194_fu_402_p2, icmp_ln886_10_reg_1166, ap_CS_fsm_state101)
    begin
        if ((((icmp_ln886_10_reg_1166 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state101)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln194_fu_402_p2 = ap_const_lv1_1)))) then 
            wp_parameters1634_we0 <= ap_const_logic_1;
        else 
            wp_parameters1634_we0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_parameters1740_address0_assign_proc : process(wp_parameters_offset_cast_reg_968, ap_CS_fsm_state2, wp_parameters1740_addr_reg_1054, ap_CS_fsm_state103, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state103))) then 
            wp_parameters1740_address0 <= wp_parameters1740_addr_reg_1054;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_parameters1740_address0 <= wp_parameters_offset_cast_reg_968(5 - 1 downto 0);
        else 
            wp_parameters1740_address0 <= "XXXXX";
        end if; 
    end process;


    wp_parameters1740_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state103, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            wp_parameters1740_ce0 <= ap_const_logic_1;
        else 
            wp_parameters1740_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_parameters1740_d0_assign_proc : process(ap_CS_fsm_state2, phi_ln878_1_reg_1170, ap_CS_fsm_state103, topR_jR_V_3_fu_156)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            wp_parameters1740_d0 <= phi_ln878_1_reg_1170;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_parameters1740_d0 <= topR_jR_V_3_fu_156;
        else 
            wp_parameters1740_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wp_parameters1740_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln194_fu_402_p2, icmp_ln878_13_reg_1175, ap_CS_fsm_state103)
    begin
        if ((((icmp_ln878_13_reg_1175 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state103)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln194_fu_402_p2 = ap_const_lv1_1)))) then 
            wp_parameters1740_we0 <= ap_const_logic_1;
        else 
            wp_parameters1740_we0 <= ap_const_logic_0;
        end if; 
    end process;

    wp_parameters_offset_cast_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wp_parameters_offset),64));
    z_j_max_V_fu_645_p1 <= patches_superpoints_15_q0(32 - 1 downto 0);
    z_j_min_V_fu_628_p1 <= patches_superpoints_0_q0(32 - 1 downto 0);
    zext_ln196_2_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln196_1_fu_584_p1),8));
    zext_ln196_3_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln196_5_reg_1099),64));
    zext_ln196_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_412_p3),13));
    zext_ln197_1_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln197_fu_610_p1),8));
    zext_ln197_2_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln197_1_reg_1104),64));
    zext_ln199_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln196_reg_1014),3));
end behav;
