-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_areWedgeSuperPointsEqual is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    patches_superpoints_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    patches_superpoints_0_ce0 : OUT STD_LOGIC;
    patches_superpoints_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    patches_superpoints_0_ce1 : OUT STD_LOGIC;
    patches_superpoints_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    wsp1 : IN STD_LOGIC_VECTOR (7 downto 0);
    wsp11 : IN STD_LOGIC_VECTOR (2 downto 0);
    wsp2 : IN STD_LOGIC_VECTOR (7 downto 0);
    wsp22 : IN STD_LOGIC_VECTOR (2 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of MPSQ_areWedgeSuperPointsEqual is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv29_6667 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000110011001100111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal reg_142 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln870_reg_505 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_reg_505_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_146 : STD_LOGIC_VECTOR (63 downto 0);
    signal wsp22_read_reg_473 : STD_LOGIC_VECTOR (2 downto 0);
    signal wsp22_read_reg_473_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal wsp2_read_reg_478 : STD_LOGIC_VECTOR (7 downto 0);
    signal wsp2_read_reg_478_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal wsp11_read_reg_484 : STD_LOGIC_VECTOR (2 downto 0);
    signal wsp1_read_reg_489 : STD_LOGIC_VECTOR (7 downto 0);
    signal wsp1_read_reg_489_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_reg_505_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_reg_505_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_reg_505_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_reg_505_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_reg_505_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_reg_505_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_reg_505_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_reg_505_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln870_2_fu_222_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln870_2_reg_509 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln870_1_fu_259_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln870_1_reg_514 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln870_1_reg_514_pp0_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln870_1_reg_514_pp0_iter3_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln870_1_reg_514_pp0_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln870_1_reg_514_pp0_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln870_1_reg_514_pp0_iter6_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln870_5_fu_292_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln870_5_reg_524 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln870_3_fu_329_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln870_3_reg_529 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln870_3_reg_529_pp0_iter3_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln870_3_reg_529_pp0_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln870_3_reg_529_pp0_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln870_3_reg_529_pp0_iter6_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln870_3_reg_529_pp0_iter7_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln870_11_fu_397_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln870_11_reg_549 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln870_13_fu_443_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln870_13_reg_554 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_empty_phi_fu_135_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter10_empty_reg_131 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_reg_131 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_reg_131 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_reg_131 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter3_empty_reg_131 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter4_empty_reg_131 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter5_empty_reg_131 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter6_empty_reg_131 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter7_empty_reg_131 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter8_empty_reg_131 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter9_empty_reg_131 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln870_4_fu_179_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln870_5_fu_206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln870_12_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln870_15_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln870_fu_161_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln870_6_fu_167_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal wsp22_cast_fu_157_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln870_7_fu_173_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln870_6_fu_188_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln870_8_fu_194_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal wsp11_cast_fu_184_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln870_9_fu_200_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_211_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln870_2_fu_218_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln870_2_fu_228_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln870_3_fu_239_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln870_1_fu_246_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln870_fu_235_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln870_3_fu_256_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln870_fu_250_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_275_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_275_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln870_1_fu_281_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln870_8_fu_288_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln870_4_fu_298_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln870_5_fu_309_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln870_7_fu_316_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln870_6_fu_305_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln870_9_fu_326_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln870_4_fu_320_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_345_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_345_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_457_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_fu_366_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_121_cast_fu_375_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal udiv_ln_cast_fu_357_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln870_fu_389_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln870_10_fu_383_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln870_11_fu_393_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_465_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_35_fu_412_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_123_cast_fu_421_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal udiv_ln870_1_cast_fu_403_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_345_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln870_2_fu_435_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln870_12_fu_429_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln870_14_fu_439_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_457_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_457_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_465_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_465_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to10 : STD_LOGIC;
    signal ap_idle_pp0_0to9 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_457_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_465_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component MPSQ_urem_11ns_4ns_3_15_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component MPSQ_mul_mul_14ns_16ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;



begin
    urem_11ns_4ns_3_15_1_U6386 : component MPSQ_urem_11ns_4ns_3_15_1
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_275_p0,
        din1 => grp_fu_275_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_275_p2);

    urem_11ns_4ns_3_15_1_U6387 : component MPSQ_urem_11ns_4ns_3_15_1
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_345_p0,
        din1 => grp_fu_345_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_345_p2);

    mul_mul_14ns_16ns_29_4_1_U6388 : component MPSQ_mul_mul_14ns_16ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_457_p0,
        din1 => grp_fu_457_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_457_p2);

    mul_mul_14ns_16ns_29_4_1_U6389 : component MPSQ_mul_mul_14ns_16ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_465_p0,
        din1 => grp_fu_465_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_465_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_empty_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (grp_fu_150_p2 = ap_const_lv1_0))) then 
                ap_phi_reg_pp0_iter1_empty_reg_131 <= ap_const_lv1_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                ap_phi_reg_pp0_iter1_empty_reg_131 <= ap_phi_reg_pp0_iter0_empty_reg_131;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln870_reg_505_pp0_iter8_reg = ap_const_lv1_1))) then
                add_ln870_11_reg_549 <= add_ln870_11_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln870_reg_505_pp0_iter8_reg = ap_const_lv1_1))) then
                add_ln870_13_reg_554 <= add_ln870_13_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln870_reg_505 = ap_const_lv1_1))) then
                    add_ln870_1_reg_514(13 downto 3) <= add_ln870_1_fu_259_p2(13 downto 3);
                    add_ln870_5_reg_524(7 downto 3) <= add_ln870_5_fu_292_p2(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    add_ln870_1_reg_514_pp0_iter2_reg(13 downto 3) <= add_ln870_1_reg_514(13 downto 3);
                    add_ln870_1_reg_514_pp0_iter3_reg(13 downto 3) <= add_ln870_1_reg_514_pp0_iter2_reg(13 downto 3);
                    add_ln870_1_reg_514_pp0_iter4_reg(13 downto 3) <= add_ln870_1_reg_514_pp0_iter3_reg(13 downto 3);
                    add_ln870_1_reg_514_pp0_iter5_reg(13 downto 3) <= add_ln870_1_reg_514_pp0_iter4_reg(13 downto 3);
                    add_ln870_1_reg_514_pp0_iter6_reg(13 downto 3) <= add_ln870_1_reg_514_pp0_iter5_reg(13 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (grp_fu_150_p2 = ap_const_lv1_1))) then
                    add_ln870_2_reg_509(7 downto 3) <= add_ln870_2_fu_222_p2(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln870_reg_505 = ap_const_lv1_1))) then
                    add_ln870_3_reg_529(13 downto 3) <= add_ln870_3_fu_329_p2(13 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    add_ln870_3_reg_529_pp0_iter3_reg(13 downto 3) <= add_ln870_3_reg_529(13 downto 3);
                    add_ln870_3_reg_529_pp0_iter4_reg(13 downto 3) <= add_ln870_3_reg_529_pp0_iter3_reg(13 downto 3);
                    add_ln870_3_reg_529_pp0_iter5_reg(13 downto 3) <= add_ln870_3_reg_529_pp0_iter4_reg(13 downto 3);
                    add_ln870_3_reg_529_pp0_iter6_reg(13 downto 3) <= add_ln870_3_reg_529_pp0_iter5_reg(13 downto 3);
                    add_ln870_3_reg_529_pp0_iter7_reg(13 downto 3) <= add_ln870_3_reg_529_pp0_iter6_reg(13 downto 3);
                icmp_ln870_reg_505_pp0_iter10_reg <= icmp_ln870_reg_505_pp0_iter9_reg;
                icmp_ln870_reg_505_pp0_iter2_reg <= icmp_ln870_reg_505;
                icmp_ln870_reg_505_pp0_iter3_reg <= icmp_ln870_reg_505_pp0_iter2_reg;
                icmp_ln870_reg_505_pp0_iter4_reg <= icmp_ln870_reg_505_pp0_iter3_reg;
                icmp_ln870_reg_505_pp0_iter5_reg <= icmp_ln870_reg_505_pp0_iter4_reg;
                icmp_ln870_reg_505_pp0_iter6_reg <= icmp_ln870_reg_505_pp0_iter5_reg;
                icmp_ln870_reg_505_pp0_iter7_reg <= icmp_ln870_reg_505_pp0_iter6_reg;
                icmp_ln870_reg_505_pp0_iter8_reg <= icmp_ln870_reg_505_pp0_iter7_reg;
                icmp_ln870_reg_505_pp0_iter9_reg <= icmp_ln870_reg_505_pp0_iter8_reg;
                wsp11_read_reg_484 <= wsp11;
                wsp1_read_reg_489 <= wsp1;
                wsp1_read_reg_489_pp0_iter1_reg <= wsp1_read_reg_489;
                wsp22_read_reg_473 <= wsp22;
                wsp22_read_reg_473_pp0_iter1_reg <= wsp22_read_reg_473;
                wsp2_read_reg_478 <= wsp2;
                wsp2_read_reg_478_pp0_iter1_reg <= wsp2_read_reg_478;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter10_empty_reg_131 <= ap_phi_reg_pp0_iter9_empty_reg_131;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter2_empty_reg_131 <= ap_phi_reg_pp0_iter1_empty_reg_131;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter3_empty_reg_131 <= ap_phi_reg_pp0_iter2_empty_reg_131;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter4_empty_reg_131 <= ap_phi_reg_pp0_iter3_empty_reg_131;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter5_empty_reg_131 <= ap_phi_reg_pp0_iter4_empty_reg_131;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter6_empty_reg_131 <= ap_phi_reg_pp0_iter5_empty_reg_131;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter7_empty_reg_131 <= ap_phi_reg_pp0_iter6_empty_reg_131;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter8_empty_reg_131 <= ap_phi_reg_pp0_iter7_empty_reg_131;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter9_empty_reg_131 <= ap_phi_reg_pp0_iter8_empty_reg_131;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln870_reg_505 <= grp_fu_150_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln870_reg_505_pp0_iter9_reg = ap_const_lv1_1)))) then
                reg_142 <= patches_superpoints_0_q1;
                reg_146 <= patches_superpoints_0_q0;
            end if;
        end if;
    end process;
    add_ln870_2_reg_509(2 downto 0) <= "000";
    add_ln870_1_reg_514(2 downto 0) <= "000";
    add_ln870_1_reg_514_pp0_iter2_reg(2 downto 0) <= "000";
    add_ln870_1_reg_514_pp0_iter3_reg(2 downto 0) <= "000";
    add_ln870_1_reg_514_pp0_iter4_reg(2 downto 0) <= "000";
    add_ln870_1_reg_514_pp0_iter5_reg(2 downto 0) <= "000";
    add_ln870_1_reg_514_pp0_iter6_reg(2 downto 0) <= "000";
    add_ln870_5_reg_524(2 downto 0) <= "000";
    add_ln870_3_reg_529(2 downto 0) <= "000";
    add_ln870_3_reg_529_pp0_iter3_reg(2 downto 0) <= "000";
    add_ln870_3_reg_529_pp0_iter4_reg(2 downto 0) <= "000";
    add_ln870_3_reg_529_pp0_iter5_reg(2 downto 0) <= "000";
    add_ln870_3_reg_529_pp0_iter6_reg(2 downto 0) <= "000";
    add_ln870_3_reg_529_pp0_iter7_reg(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to10, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to10 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln870_10_fu_383_p2 <= std_logic_vector(unsigned(tmp_121_cast_fu_375_p3) + unsigned(udiv_ln_cast_fu_357_p4));
    add_ln870_11_fu_397_p2 <= std_logic_vector(unsigned(add_ln870_10_fu_383_p2) + unsigned(zext_ln870_11_fu_393_p1));
    add_ln870_12_fu_429_p2 <= std_logic_vector(unsigned(tmp_123_cast_fu_421_p3) + unsigned(udiv_ln870_1_cast_fu_403_p4));
    add_ln870_13_fu_443_p2 <= std_logic_vector(unsigned(add_ln870_12_fu_429_p2) + unsigned(zext_ln870_14_fu_439_p1));
    add_ln870_1_fu_259_p2 <= std_logic_vector(unsigned(zext_ln870_3_fu_256_p1) + unsigned(add_ln870_fu_250_p2));
    add_ln870_2_fu_222_p2 <= std_logic_vector(unsigned(zext_ln870_2_fu_218_p1) + unsigned(ap_const_lv8_78));
    add_ln870_3_fu_329_p2 <= std_logic_vector(unsigned(zext_ln870_9_fu_326_p1) + unsigned(add_ln870_4_fu_320_p2));
    add_ln870_4_fu_320_p2 <= std_logic_vector(unsigned(zext_ln870_7_fu_316_p1) + unsigned(zext_ln870_6_fu_305_p1));
    add_ln870_5_fu_292_p2 <= std_logic_vector(unsigned(zext_ln870_8_fu_288_p1) + unsigned(ap_const_lv8_78));
    add_ln870_6_fu_167_p2 <= std_logic_vector(unsigned(shl_ln870_fu_161_p2) + unsigned(wsp2));
    add_ln870_7_fu_173_p2 <= std_logic_vector(unsigned(add_ln870_6_fu_167_p2) + unsigned(wsp22_cast_fu_157_p1));
    add_ln870_8_fu_194_p2 <= std_logic_vector(unsigned(shl_ln870_6_fu_188_p2) + unsigned(wsp1));
    add_ln870_9_fu_200_p2 <= std_logic_vector(unsigned(add_ln870_8_fu_194_p2) + unsigned(wsp11_cast_fu_184_p1));
    add_ln870_fu_250_p2 <= std_logic_vector(unsigned(zext_ln870_1_fu_246_p1) + unsigned(zext_ln870_fu_235_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to9_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to9 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to10_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to10 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_empty_phi_fu_135_p4_assign_proc : process(grp_fu_150_p2, icmp_ln870_reg_505_pp0_iter10_reg, ap_phi_reg_pp0_iter10_empty_reg_131)
    begin
        if ((icmp_ln870_reg_505_pp0_iter10_reg = ap_const_lv1_1)) then 
            ap_phi_mux_empty_phi_fu_135_p4 <= grp_fu_150_p2;
        else 
            ap_phi_mux_empty_phi_fu_135_p4 <= ap_phi_reg_pp0_iter10_empty_reg_131;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_empty_reg_131 <= "X";

    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to9)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to9 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_phi_mux_empty_phi_fu_135_p4;
    grp_fu_150_p2 <= "1" when (reg_142 = reg_146) else "0";
    grp_fu_275_p0 <= add_ln870_1_fu_259_p2(13 downto 3);
    grp_fu_275_p1 <= ap_const_lv11_5(4 - 1 downto 0);
    grp_fu_345_p0 <= add_ln870_3_fu_329_p2(13 downto 3);
    grp_fu_345_p1 <= ap_const_lv11_5(4 - 1 downto 0);
    grp_fu_457_p0 <= grp_fu_457_p00(14 - 1 downto 0);
    grp_fu_457_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln870_1_reg_514_pp0_iter6_reg),29));
    grp_fu_457_p1 <= ap_const_lv29_6667(16 - 1 downto 0);
    grp_fu_465_p0 <= grp_fu_465_p00(14 - 1 downto 0);
    grp_fu_465_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln870_3_reg_529_pp0_iter7_reg),29));
    grp_fu_465_p1 <= ap_const_lv29_6667(16 - 1 downto 0);

    patches_superpoints_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, zext_ln870_4_fu_179_p1, ap_block_pp0_stage1, zext_ln870_15_fu_453_p1)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            patches_superpoints_0_address0 <= zext_ln870_15_fu_453_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            patches_superpoints_0_address0 <= zext_ln870_4_fu_179_p1(8 - 1 downto 0);
        else 
            patches_superpoints_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    patches_superpoints_0_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, zext_ln870_5_fu_206_p1, zext_ln870_12_fu_449_p1, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            patches_superpoints_0_address1 <= zext_ln870_12_fu_449_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            patches_superpoints_0_address1 <= zext_ln870_5_fu_206_p1(8 - 1 downto 0);
        else 
            patches_superpoints_0_address1 <= "XXXXXXXX";
        end if; 
    end process;


    patches_superpoints_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            patches_superpoints_0_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            patches_superpoints_0_ce1 <= ap_const_logic_1;
        else 
            patches_superpoints_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln870_1_fu_281_p3 <= (wsp22_read_reg_473_pp0_iter1_reg & ap_const_lv3_0);
    shl_ln870_2_fu_228_p3 <= (wsp1_read_reg_489_pp0_iter1_reg & ap_const_lv5_0);
    shl_ln870_3_fu_239_p3 <= (wsp1_read_reg_489_pp0_iter1_reg & ap_const_lv3_0);
    shl_ln870_4_fu_298_p3 <= (wsp2_read_reg_478_pp0_iter1_reg & ap_const_lv5_0);
    shl_ln870_5_fu_309_p3 <= (wsp2_read_reg_478_pp0_iter1_reg & ap_const_lv3_0);
    shl_ln870_6_fu_188_p2 <= std_logic_vector(shift_left(unsigned(wsp1),to_integer(unsigned('0' & ap_const_lv8_2(8-1 downto 0)))));
    shl_ln870_fu_161_p2 <= std_logic_vector(shift_left(unsigned(wsp2),to_integer(unsigned('0' & ap_const_lv8_2(8-1 downto 0)))));
    shl_ln_fu_211_p3 <= (wsp11_read_reg_484 & ap_const_lv3_0);
    tmp_121_cast_fu_375_p3 <= (tmp_fu_366_p4 & ap_const_lv2_0);
    tmp_123_cast_fu_421_p3 <= (tmp_35_fu_412_p4 & ap_const_lv2_0);
    tmp_35_fu_412_p4 <= grp_fu_465_p2(25 downto 20);
    tmp_fu_366_p4 <= grp_fu_457_p2(25 downto 20);
    trunc_ln870_2_fu_435_p1 <= grp_fu_345_p2(3 - 1 downto 0);
    trunc_ln870_fu_389_p1 <= grp_fu_275_p2(3 - 1 downto 0);
    udiv_ln870_1_cast_fu_403_p4 <= grp_fu_465_p2(27 downto 20);
    udiv_ln_cast_fu_357_p4 <= grp_fu_457_p2(27 downto 20);
    wsp11_cast_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wsp11),8));
    wsp22_cast_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wsp22),8));
    zext_ln870_11_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln870_fu_389_p1),8));
    zext_ln870_12_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln870_11_reg_549),64));
    zext_ln870_14_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln870_2_fu_435_p1),8));
    zext_ln870_15_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln870_13_reg_554),64));
    zext_ln870_1_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln870_3_fu_239_p3),14));
    zext_ln870_2_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_211_p3),8));
    zext_ln870_3_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln870_2_reg_509),14));
    zext_ln870_4_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln870_7_fu_173_p2),64));
    zext_ln870_5_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln870_9_fu_200_p2),64));
    zext_ln870_6_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln870_4_fu_298_p3),14));
    zext_ln870_7_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln870_5_fu_309_p3),14));
    zext_ln870_8_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln870_1_fu_281_p3),8));
    zext_ln870_9_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln870_5_reg_524),14));
    zext_ln870_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln870_2_fu_228_p3),14));
end behav;
