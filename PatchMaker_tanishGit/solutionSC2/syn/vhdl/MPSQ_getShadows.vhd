-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_getShadows is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    wp_superpoints : IN STD_LOGIC_VECTOR (8 downto 0);
    wp_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    wp_parameters_ce0 : OUT STD_LOGIC;
    wp_parameters_we0 : OUT STD_LOGIC;
    wp_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    wp_parameters_ce1 : OUT STD_LOGIC;
    wp_parameters_we1 : OUT STD_LOGIC;
    wp_parameters_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters_offset : IN STD_LOGIC_VECTOR (4 downto 0);
    zTopMin : IN STD_LOGIC_VECTOR (31 downto 0);
    zTopMax : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_getShadows is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (86 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (86 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (86 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (86 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (86 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (86 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (86 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (86 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (86 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (86 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (86 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (86 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv12_18 : STD_LOGIC_VECTOR (11 downto 0) := "000000011000";
    constant ap_const_lv12_1E : STD_LOGIC_VECTOR (11 downto 0) := "000000011110";
    constant ap_const_lv12_24 : STD_LOGIC_VECTOR (11 downto 0) := "000000100100";
    constant ap_const_lv12_2A : STD_LOGIC_VECTOR (11 downto 0) := "000000101010";
    constant ap_const_lv32_FD050F1C : STD_LOGIC_VECTOR (31 downto 0) := "11111101000001010000111100011100";
    constant ap_const_lv32_2FAF0E4 : STD_LOGIC_VECTOR (31 downto 0) := "00000010111110101111000011100100";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv57_5 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv129_lc_1 : STD_LOGIC_VECTOR (128 downto 0) := "000000000000000000000000000000000000000000000000000000000000000011001100110011001100110011001100110011001100110011001100110011010";
    constant ap_const_lv19_78 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001111000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv12_F : STD_LOGIC_VECTOR (11 downto 0) := "000000001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal wp_parameters_addr_reg_986 : STD_LOGIC_VECTOR (11 downto 0);
    signal wp_parameters_addr_28_reg_992 : STD_LOGIC_VECTOR (11 downto 0);
    signal wp_parameters_addr_29_reg_998 : STD_LOGIC_VECTOR (11 downto 0);
    signal wp_parameters_addr_30_reg_1004 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln185_fu_386_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln185_reg_1010 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln186_fu_400_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln186_reg_1015 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln196_fu_416_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln196_reg_1020 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln194_fu_428_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln194_reg_1025 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln199_fu_432_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln199_reg_1030 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln196_fu_444_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln196_reg_1038 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln194_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln196_fu_469_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln196_reg_1043 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal tmp_38_reg_1064 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal udiv_ln2_cast_reg_1070 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_40_reg_1075 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln196_3_fu_588_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal add_ln196_3_reg_1080 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal add_ln197_1_fu_610_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln197_1_reg_1085 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal z_j_min_V_fu_624_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_j_min_V_reg_1095 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal add_ln199_1_fu_631_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln199_1_reg_1100 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal z_j_max_V_fu_655_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_j_max_V_reg_1110 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal wp_parameters_load_reg_1118 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal trunc_ln886_fu_762_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln886_reg_1123 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal phi_ln_fu_809_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln_reg_1133 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal icmp_ln878_12_fu_822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_12_reg_1138 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln886_1_fu_837_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln886_1_reg_1142 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal icmp_ln886_10_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_10_reg_1147 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln878_1_fu_865_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln878_1_reg_1151 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal icmp_ln878_13_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_13_reg_1156 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln212_fu_884_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_start : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_done : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_idle : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_ready : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_297_z_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_297_z_j : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_274 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal i_11_reg_285 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (86 downto 0);
    signal ap_NS_fsm_state65 : STD_LOGIC;
    signal ap_NS_fsm_state68 : STD_LOGIC;
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_NS_fsm_state71 : STD_LOGIC;
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_NS_fsm_state74 : STD_LOGIC;
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal zext_ln205_1_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln206_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln207_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln208_fu_375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_616_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln197_1_fu_650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal topL_jL_V_3_1_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal topL_jL_V_3_2_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal topL_jL_V_3_4_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal topL_jL_V_3_5_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal topL_jR_V_3_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal topL_jR_V_3_1_fu_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal topL_jR_V_3_2_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal topL_jR_V_3_3_fu_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jL_V_3_fu_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jL_V_3_1_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jL_V_3_2_fu_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jL_V_3_3_fu_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jR_V_3_fu_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jR_V_3_1_fu_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jR_V_3_2_fu_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal topR_jR_V_3_3_fu_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal icmp_ln886_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal topL_jL_V_3_7_fu_786_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal tmp_s_fu_318_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_310_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln205_fu_326_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln205_fu_330_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln205_fu_336_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln206_fu_347_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln207_fu_358_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln208_fu_369_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln878_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_11_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln196_1_fu_408_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln196_2_fu_420_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_448_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln196_fu_456_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln196_1_fu_460_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln196_1_fu_465_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln_fu_474_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_488_p0 : STD_LOGIC_VECTOR (56 downto 0);
    signal grp_fu_488_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln196_2_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_509_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_509_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal or_ln197_fu_515_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln197_fu_520_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_528_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_528_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal grp_fu_509_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal grp_fu_528_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal tmp_39_fu_567_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal zext_ln196_3_fu_574_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal zext_ln196_2_fu_564_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal grp_fu_488_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal add_ln196_2_fu_578_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal zext_ln196_4_fu_584_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_shl2_cast_fu_594_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln197_fu_601_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln197_fu_606_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln199_fu_628_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_69_cast_fu_637_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln197_1_fu_644_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln886_9_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_11_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal topL_jL_V_3_fu_772_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_488_ap_start : STD_LOGIC;
    signal grp_fu_488_ap_done : STD_LOGIC;
    signal icmp_ln212_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_509_p00 : STD_LOGIC_VECTOR (128 downto 0);
    signal grp_fu_528_p00 : STD_LOGIC_VECTOR (128 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component MPSQ_straightLineProjectorFromLayerIJtoK IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        z_i : IN STD_LOGIC_VECTOR (31 downto 0);
        z_j : IN STD_LOGIC_VECTOR (31 downto 0);
        i : IN STD_LOGIC_VECTOR (2 downto 0);
        j : IN STD_LOGIC_VECTOR (2 downto 0);
        k : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_urem_57s_4ns_57_61_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (56 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (56 downto 0) );
    end component;


    component MPSQ_mul_64ns_66ns_129_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (65 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (128 downto 0) );
    end component;


    component MPSQ_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_straightLineProjectorFromLayerIJtoK_fu_297 : component MPSQ_straightLineProjectorFromLayerIJtoK
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_start,
        ap_done => grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_done,
        ap_idle => grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_idle,
        ap_ready => grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_ready,
        ap_ce => ap_const_logic_1,
        z_i => grp_straightLineProjectorFromLayerIJtoK_fu_297_z_i,
        z_j => grp_straightLineProjectorFromLayerIJtoK_fu_297_z_j,
        i => ap_const_lv3_5,
        j => add_ln199_1_reg_1100,
        k => ap_const_lv3_1,
        ap_return => grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_return);

    urem_57s_4ns_57_61_seq_1_U122 : component MPSQ_urem_57s_4ns_57_61_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 61,
        din0_WIDTH => 57,
        din1_WIDTH => 4,
        dout_WIDTH => 57)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_488_ap_start,
        done => grp_fu_488_ap_done,
        din0 => grp_fu_488_p0,
        din1 => grp_fu_488_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_488_p2);

    mul_64ns_66ns_129_2_1_U123 : component MPSQ_mul_64ns_66ns_129_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 66,
        dout_WIDTH => 129)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_509_p0,
        din1 => grp_fu_509_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_509_p2);

    mul_64ns_66ns_129_2_1_U124 : component MPSQ_mul_64ns_66ns_129_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 66,
        dout_WIDTH => 129)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_528_p0,
        din1 => grp_fu_528_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_528_p2);

    mux_42_32_1_1_U125 : component MPSQ_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => topL_jR_V_3_3_fu_156,
        din1 => topL_jR_V_3_1_fu_148,
        din2 => topL_jR_V_3_2_fu_152,
        din3 => topL_jR_V_3_3_fu_156,
        din4 => trunc_ln886_reg_1123,
        dout => phi_ln_fu_809_p6);

    mux_42_32_1_1_U126 : component MPSQ_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => topR_jL_V_3_3_fu_172,
        din1 => topR_jL_V_3_1_fu_164,
        din2 => topR_jL_V_3_2_fu_168,
        din3 => topR_jL_V_3_3_fu_172,
        din4 => trunc_ln886_reg_1123,
        dout => phi_ln886_1_fu_837_p6);

    mux_42_32_1_1_U127 : component MPSQ_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => topR_jR_V_3_3_fu_188,
        din1 => topR_jR_V_3_1_fu_180,
        din2 => topR_jR_V_3_2_fu_184,
        din3 => topR_jR_V_3_3_fu_188,
        din4 => trunc_ln886_reg_1123,
        dout => phi_ln878_1_fu_865_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_NS_fsm_state74) and (ap_const_logic_1 = ap_CS_fsm_state73)) or ((ap_const_logic_1 = ap_NS_fsm_state71) and (ap_const_logic_1 = ap_CS_fsm_state70)) or ((ap_const_logic_1 = ap_NS_fsm_state68) and (ap_const_logic_1 = ap_CS_fsm_state67)) or ((ap_const_logic_1 = ap_NS_fsm_state65) and (ap_const_logic_1 = ap_CS_fsm_state64)))) then 
                    grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_ready = ap_const_logic_1)) then 
                    grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_11_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                i_11_reg_285 <= add_ln212_fu_884_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
                i_11_reg_285 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;

    i_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                i_reg_274 <= add_ln199_reg_1030;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_274 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                add_ln196_3_reg_1080 <= add_ln196_3_fu_588_p2;
                add_ln197_1_reg_1085 <= add_ln197_1_fu_610_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln194_fu_438_p2 = ap_const_lv1_0))) then
                    add_ln196_reg_1043(18 downto 7) <= add_ln196_fu_469_p2(18 downto 7);
                trunc_ln196_reg_1038 <= trunc_ln196_fu_444_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                add_ln199_1_reg_1100 <= add_ln199_1_fu_631_p2;
                z_j_min_V_reg_1095 <= z_j_min_V_fu_624_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln199_reg_1030 <= add_ln199_fu_432_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state82)) then
                icmp_ln878_12_reg_1138 <= icmp_ln878_12_fu_822_p2;
                phi_ln_reg_1133 <= phi_ln_fu_809_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then
                icmp_ln878_13_reg_1156 <= icmp_ln878_13_fu_878_p2;
                phi_ln878_1_reg_1151 <= phi_ln878_1_fu_865_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                icmp_ln886_10_reg_1147 <= icmp_ln886_10_fu_850_p2;
                phi_ln886_1_reg_1142 <= phi_ln886_1_fu_837_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                select_ln185_reg_1010 <= select_ln185_fu_386_p3;
                select_ln186_reg_1015 <= select_ln186_fu_400_p3;
                    sext_ln194_reg_1025(16 downto 7) <= sext_ln194_fu_428_p1(16 downto 7);
                    sext_ln196_reg_1020(18 downto 9) <= sext_ln196_fu_416_p1(18 downto 9);
                    wp_parameters_addr_28_reg_992(11 downto 3) <= zext_ln206_fu_353_p1(12 - 1 downto 0)(11 downto 3);
                    wp_parameters_addr_29_reg_998(11 downto 3) <= zext_ln207_fu_364_p1(12 - 1 downto 0)(11 downto 3);
                    wp_parameters_addr_30_reg_1004(11 downto 3) <= zext_ln208_fu_375_p1(12 - 1 downto 0)(11 downto 3);
                    wp_parameters_addr_reg_986(11 downto 3) <= zext_ln205_1_fu_342_p1(12 - 1 downto 0)(11 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                tmp_38_reg_1064 <= grp_fu_509_p2(128 downto 74);
                tmp_40_reg_1075 <= grp_fu_528_p2(79 downto 74);
                udiv_ln2_cast_reg_1070 <= grp_fu_528_p2(81 downto 74);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state68) and (trunc_ln196_reg_1038 = ap_const_lv2_0))) then
                topL_jL_V_3_1_fu_128 <= grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state68) and (trunc_ln196_reg_1038 = ap_const_lv2_1))) then
                topL_jL_V_3_2_fu_132 <= grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state68) and (trunc_ln196_reg_1038 = ap_const_lv2_2))) then
                topL_jL_V_3_4_fu_136 <= grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state68) and (trunc_ln196_reg_1038 = ap_const_lv2_3))) then
                topL_jL_V_3_5_fu_140 <= grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state71) and (trunc_ln196_reg_1038 = ap_const_lv2_1))) then
                topL_jR_V_3_1_fu_148 <= grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state71) and (trunc_ln196_reg_1038 = ap_const_lv2_2))) then
                topL_jR_V_3_2_fu_152 <= grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state71) and (trunc_ln196_reg_1038 = ap_const_lv2_3))) then
                topL_jR_V_3_3_fu_156 <= grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state71) and (trunc_ln196_reg_1038 = ap_const_lv2_0))) then
                topL_jR_V_3_fu_144 <= grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state74) and (trunc_ln196_reg_1038 = ap_const_lv2_1))) then
                topR_jL_V_3_1_fu_164 <= grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state74) and (trunc_ln196_reg_1038 = ap_const_lv2_2))) then
                topR_jL_V_3_2_fu_168 <= grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state74) and (trunc_ln196_reg_1038 = ap_const_lv2_3))) then
                topR_jL_V_3_3_fu_172 <= grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state74) and (trunc_ln196_reg_1038 = ap_const_lv2_0))) then
                topR_jL_V_3_fu_160 <= grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state77) and (trunc_ln196_reg_1038 = ap_const_lv2_1))) then
                topR_jR_V_3_1_fu_180 <= grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state77) and (trunc_ln196_reg_1038 = ap_const_lv2_2))) then
                topR_jR_V_3_2_fu_184 <= grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state77) and (trunc_ln196_reg_1038 = ap_const_lv2_3))) then
                topR_jR_V_3_3_fu_188 <= grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state77) and (trunc_ln196_reg_1038 = ap_const_lv2_0))) then
                topR_jR_V_3_fu_176 <= grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                trunc_ln886_reg_1123 <= trunc_ln886_fu_762_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then
                wp_parameters_load_reg_1118 <= wp_parameters_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then
                z_j_max_V_reg_1110 <= z_j_max_V_fu_655_p1;
            end if;
        end if;
    end process;
    wp_parameters_addr_reg_986(2 downto 0) <= "000";
    wp_parameters_addr_28_reg_992(2 downto 0) <= "110";
    wp_parameters_addr_29_reg_998(2 downto 0) <= "100";
    wp_parameters_addr_30_reg_1004(2 downto 0) <= "010";
    sext_ln196_reg_1020(8 downto 0) <= "000000000";
    sext_ln194_reg_1025(6 downto 0) <= "0000000";
    add_ln196_reg_1043(6 downto 0) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln194_fu_438_p2, ap_CS_fsm_state79, icmp_ln212_fu_747_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln194_fu_438_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                if (((icmp_ln212_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln196_1_fu_460_p2 <= std_logic_vector(signed(sext_ln194_reg_1025) + signed(zext_ln196_fu_456_p1));
    add_ln196_2_fu_578_p2 <= std_logic_vector(unsigned(zext_ln196_3_fu_574_p1) + unsigned(zext_ln196_2_fu_564_p1));
    add_ln196_3_fu_588_p2 <= std_logic_vector(unsigned(add_ln196_2_fu_578_p2) + unsigned(zext_ln196_4_fu_584_p1));
    add_ln196_fu_469_p2 <= std_logic_vector(signed(sext_ln196_1_fu_465_p1) + signed(sext_ln196_reg_1020));
    add_ln197_1_fu_610_p2 <= std_logic_vector(unsigned(add_ln197_fu_601_p2) + unsigned(trunc_ln197_fu_606_p1));
    add_ln197_fu_601_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_594_p3) + unsigned(udiv_ln2_cast_reg_1070));
    add_ln199_1_fu_631_p2 <= std_logic_vector(unsigned(zext_ln199_fu_628_p1) + unsigned(ap_const_lv3_1));
    add_ln199_fu_432_p2 <= std_logic_vector(unsigned(i_reg_274) + unsigned(ap_const_lv3_1));
    add_ln205_fu_336_p2 <= std_logic_vector(unsigned(sub_ln205_fu_330_p2) + unsigned(ap_const_lv12_18));
    add_ln206_fu_347_p2 <= std_logic_vector(unsigned(sub_ln205_fu_330_p2) + unsigned(ap_const_lv12_1E));
    add_ln207_fu_358_p2 <= std_logic_vector(unsigned(sub_ln205_fu_330_p2) + unsigned(ap_const_lv12_24));
    add_ln208_fu_369_p2 <= std_logic_vector(unsigned(sub_ln205_fu_330_p2) + unsigned(ap_const_lv12_2A));
    add_ln212_fu_884_p2 <= std_logic_vector(unsigned(i_11_reg_285) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_NS_fsm_state65 <= ap_NS_fsm(64);
    ap_NS_fsm_state68 <= ap_NS_fsm(67);
    ap_NS_fsm_state71 <= ap_NS_fsm(70);
    ap_NS_fsm_state74 <= ap_NS_fsm(73);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state79, icmp_ln212_fu_747_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln212_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state79)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state79, icmp_ln212_fu_747_p2)
    begin
        if (((icmp_ln212_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_488_ap_start_assign_proc : process(ap_CS_fsm_state2, icmp_ln194_fu_438_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln194_fu_438_p2 = ap_const_lv1_0))) then 
            grp_fu_488_ap_start <= ap_const_logic_1;
        else 
            grp_fu_488_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_488_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_474_p4),57));

    grp_fu_488_p1 <= ap_const_lv57_5(4 - 1 downto 0);
    grp_fu_509_p0 <= grp_fu_509_p00(64 - 1 downto 0);
    grp_fu_509_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln196_2_fu_502_p1),129));
    grp_fu_509_p1 <= ap_const_lv129_lc_1(66 - 1 downto 0);
    grp_fu_528_p0 <= grp_fu_528_p00(64 - 1 downto 0);
    grp_fu_528_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln197_fu_520_p1),129));
    grp_fu_528_p1 <= ap_const_lv129_lc_1(66 - 1 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_start <= grp_straightLineProjectorFromLayerIJtoK_fu_297_ap_start_reg;

    grp_straightLineProjectorFromLayerIJtoK_fu_297_z_i_assign_proc : process(select_ln185_reg_1010, select_ln186_reg_1015, ap_CS_fsm_state65, ap_CS_fsm_state68, ap_CS_fsm_state71, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_297_z_i <= select_ln186_reg_1015;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_297_z_i <= select_ln185_reg_1010;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_297_z_i <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_straightLineProjectorFromLayerIJtoK_fu_297_z_j_assign_proc : process(z_j_min_V_reg_1095, z_j_max_V_reg_1110, ap_CS_fsm_state65, ap_CS_fsm_state68, ap_CS_fsm_state71, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_297_z_j <= z_j_max_V_reg_1110;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_297_z_j <= z_j_min_V_reg_1095;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_297_z_j <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln194_fu_438_p2 <= "1" when (i_reg_274 = ap_const_lv3_4) else "0";
    icmp_ln212_fu_747_p2 <= "1" when (i_11_reg_285 = ap_const_lv3_4) else "0";
    icmp_ln878_11_fu_394_p2 <= "1" when (signed(zTopMax) < signed(ap_const_lv32_2FAF0E4)) else "0";
    icmp_ln878_12_fu_822_p2 <= "1" when (signed(phi_ln_fu_809_p6) < signed(wp_parameters_q0)) else "0";
    icmp_ln878_13_fu_878_p2 <= "1" when (signed(phi_ln878_1_fu_865_p6) < signed(wp_parameters_q0)) else "0";
    icmp_ln878_fu_380_p2 <= "1" when (signed(zTopMin) < signed(ap_const_lv32_FD050F1C)) else "0";
    icmp_ln886_10_fu_850_p2 <= "1" when (signed(phi_ln886_1_fu_837_p6) > signed(wp_parameters_q0)) else "0";
    icmp_ln886_11_fu_780_p2 <= "1" when (trunc_ln886_fu_762_p1 = ap_const_lv2_1) else "0";
    icmp_ln886_9_fu_766_p2 <= "1" when (trunc_ln886_fu_762_p1 = ap_const_lv2_2) else "0";
    icmp_ln886_fu_795_p2 <= "1" when (signed(topL_jL_V_3_7_fu_786_p3) > signed(wp_parameters_load_reg_1118)) else "0";
    or_ln197_1_fu_644_p2 <= (tmp_69_cast_fu_637_p3 or ap_const_lv12_F);
    or_ln197_fu_515_p2 <= (ap_const_lv19_78 or add_ln196_reg_1043);
    p_shl2_cast_fu_594_p3 <= (tmp_40_reg_1075 & ap_const_lv2_0);

    patches_superpoints_address0_assign_proc : process(ap_CS_fsm_state63, ap_CS_fsm_state66, tmp_27_fu_616_p3, zext_ln197_1_fu_650_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            patches_superpoints_address0 <= zext_ln197_1_fu_650_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            patches_superpoints_address0 <= tmp_27_fu_616_p3(12 - 1 downto 0);
        else 
            patches_superpoints_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_ce0_assign_proc : process(ap_CS_fsm_state63, ap_CS_fsm_state66)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state63))) then 
            patches_superpoints_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln185_fu_386_p3 <= 
        ap_const_lv32_FD050F1C when (icmp_ln878_fu_380_p2(0) = '1') else 
        zTopMin;
    select_ln186_fu_400_p3 <= 
        zTopMax when (icmp_ln878_11_fu_394_p2(0) = '1') else 
        ap_const_lv32_2FAF0E4;
        sext_ln194_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln196_2_fu_420_p3),17));

        sext_ln196_1_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln196_1_fu_460_p2),19));

        sext_ln196_2_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln196_reg_1043),64));

        sext_ln196_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln196_1_fu_408_p3),19));

        sext_ln197_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln197_fu_515_p2),64));

    shl_ln196_1_fu_408_p3 <= (wp_superpoints & ap_const_lv9_0);
    shl_ln196_2_fu_420_p3 <= (wp_superpoints & ap_const_lv7_0);
    shl_ln_fu_448_p3 <= (trunc_ln196_fu_444_p1 & ap_const_lv7_0);
    sub_ln205_fu_330_p2 <= std_logic_vector(unsigned(tmp_fu_310_p3) - unsigned(zext_ln205_fu_326_p1));
    tmp_27_fu_616_p3 <= (add_ln196_3_reg_1080 & ap_const_lv4_0);
    tmp_39_fu_567_p3 <= (tmp_38_reg_1064 & ap_const_lv2_0);
    tmp_69_cast_fu_637_p3 <= (add_ln197_1_reg_1085 & ap_const_lv4_0);
    tmp_fu_310_p3 <= (wp_parameters_offset & ap_const_lv7_0);
    tmp_s_fu_318_p3 <= (wp_parameters_offset & ap_const_lv3_0);
    topL_jL_V_3_7_fu_786_p3 <= 
        topL_jL_V_3_2_fu_132 when (icmp_ln886_11_fu_780_p2(0) = '1') else 
        topL_jL_V_3_fu_772_p3;
    topL_jL_V_3_fu_772_p3 <= 
        topL_jL_V_3_4_fu_136 when (icmp_ln886_9_fu_766_p2(0) = '1') else 
        topL_jL_V_3_5_fu_140;
    trunc_ln196_fu_444_p1 <= i_reg_274(2 - 1 downto 0);
    trunc_ln197_fu_606_p1 <= grp_fu_488_p2(8 - 1 downto 0);
    trunc_ln886_fu_762_p1 <= i_11_reg_285(2 - 1 downto 0);
    trunc_ln_fu_474_p4 <= add_ln196_fu_469_p2(18 downto 7);

    wp_parameters_address0_assign_proc : process(wp_parameters_addr_reg_986, wp_parameters_addr_28_reg_992, wp_parameters_addr_29_reg_998, wp_parameters_addr_30_reg_1004, ap_CS_fsm_state2, ap_CS_fsm_state81, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state83, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            wp_parameters_address0 <= wp_parameters_addr_29_reg_998;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            wp_parameters_address0 <= wp_parameters_addr_reg_986;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            wp_parameters_address0 <= wp_parameters_addr_30_reg_1004;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            wp_parameters_address0 <= wp_parameters_addr_28_reg_992;
        else 
            wp_parameters_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    wp_parameters_address1_assign_proc : process(wp_parameters_addr_reg_986, wp_parameters_addr_28_reg_992, wp_parameters_addr_29_reg_998, wp_parameters_addr_30_reg_1004, ap_CS_fsm_state2, ap_CS_fsm_state81, ap_CS_fsm_state87, ap_CS_fsm_state78, ap_CS_fsm_state83, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            wp_parameters_address1 <= wp_parameters_addr_30_reg_1004;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            wp_parameters_address1 <= wp_parameters_addr_28_reg_992;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            wp_parameters_address1 <= wp_parameters_addr_29_reg_998;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            wp_parameters_address1 <= wp_parameters_addr_reg_986;
        else 
            wp_parameters_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    wp_parameters_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state81, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state83, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            wp_parameters_ce0 <= ap_const_logic_1;
        else 
            wp_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_parameters_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state81, ap_CS_fsm_state87, ap_CS_fsm_state78, ap_CS_fsm_state83, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            wp_parameters_ce1 <= ap_const_logic_1;
        else 
            wp_parameters_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    wp_parameters_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state78, topL_jR_V_3_fu_144, topR_jR_V_3_fu_176)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            wp_parameters_d0 <= topR_jR_V_3_fu_176;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_parameters_d0 <= topL_jR_V_3_fu_144;
        else 
            wp_parameters_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wp_parameters_d1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state81, phi_ln_reg_1133, phi_ln886_1_reg_1142, phi_ln878_1_reg_1151, ap_CS_fsm_state87, ap_CS_fsm_state78, topL_jL_V_3_1_fu_128, topR_jL_V_3_fu_160, topL_jL_V_3_7_fu_786_p3, ap_CS_fsm_state83, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            wp_parameters_d1 <= phi_ln878_1_reg_1151;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            wp_parameters_d1 <= phi_ln886_1_reg_1142;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            wp_parameters_d1 <= phi_ln_reg_1133;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            wp_parameters_d1 <= topL_jL_V_3_7_fu_786_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            wp_parameters_d1 <= topR_jL_V_3_fu_160;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_parameters_d1 <= topL_jL_V_3_1_fu_128;
        else 
            wp_parameters_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wp_parameters_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln194_fu_438_p2, ap_CS_fsm_state78)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln194_fu_438_p2 = ap_const_lv1_1)))) then 
            wp_parameters_we0 <= ap_const_logic_1;
        else 
            wp_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_parameters_we1_assign_proc : process(ap_CS_fsm_state2, icmp_ln194_fu_438_p2, ap_CS_fsm_state81, icmp_ln878_12_reg_1138, icmp_ln886_10_reg_1147, icmp_ln878_13_reg_1156, ap_CS_fsm_state87, ap_CS_fsm_state78, icmp_ln886_fu_795_p2, ap_CS_fsm_state83, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) or ((icmp_ln878_13_reg_1156 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87)) or ((icmp_ln886_10_reg_1147 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state85)) or ((icmp_ln878_12_reg_1138 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83)) or ((icmp_ln886_fu_795_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state81)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln194_fu_438_p2 = ap_const_lv1_1)))) then 
            wp_parameters_we1 <= ap_const_logic_1;
        else 
            wp_parameters_we1 <= ap_const_logic_0;
        end if; 
    end process;

    z_j_max_V_fu_655_p1 <= patches_superpoints_q0(32 - 1 downto 0);
    z_j_min_V_fu_624_p1 <= patches_superpoints_q0(32 - 1 downto 0);
    zext_ln196_2_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_reg_1064),60));
    zext_ln196_3_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_567_p3),60));
    zext_ln196_4_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_488_p2),60));
    zext_ln196_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_448_p3),17));
    zext_ln197_1_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln197_1_fu_644_p2),64));
    zext_ln199_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln196_reg_1038),3));
    zext_ln205_1_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln205_fu_336_p2),64));
    zext_ln205_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_318_p3),12));
    zext_ln206_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln206_fu_347_p2),64));
    zext_ln207_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln207_fu_358_p2),64));
    zext_ln208_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln208_fu_369_p2),64));
end behav;
