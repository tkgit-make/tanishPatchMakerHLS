// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="makePatches_ShadowQuilt_fromEdges_makePatches_ShadowQuilt_fromEdges,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu19p-fsvb3824-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0,HLS_VERSION=2020_2}" *)

module makePatches_ShadowQuilt_fromEdges (
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stop,
        ppl,
        leftRight,
        n_patches,
        n_patches_ap_vld,
        GDarray_address0,
        GDarray_ce0,
        GDarray_we0,
        GDarray_d0,
        GDarray_q0,
        GDarray_address1,
        GDarray_ce1,
        GDarray_we1,
        GDarray_d1,
        GDarray_q1,
        GDn_points_address0,
        GDn_points_ce0,
        GDn_points_we0,
        GDn_points_d0,
        GDn_points_q0,
        GDn_points_address1,
        GDn_points_ce1,
        GDn_points_we1,
        GDn_points_d1,
        GDn_points_q1,
        patches_superpoints_address0,
        patches_superpoints_ce0,
        patches_superpoints_we0,
        patches_superpoints_d0,
        patches_superpoints_q0,
        patches_superpoints_address1,
        patches_superpoints_ce1,
        patches_superpoints_we1,
        patches_superpoints_d1,
        patches_superpoints_q1
);


input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] stop;
input  [31:0] ppl;
input   leftRight;
output  [7:0] n_patches;
output   n_patches_ap_vld;
output  [9:0] GDarray_address0;
output   GDarray_ce0;
output   GDarray_we0;
output  [63:0] GDarray_d0;
input  [63:0] GDarray_q0;
output  [9:0] GDarray_address1;
output   GDarray_ce1;
output   GDarray_we1;
output  [63:0] GDarray_d1;
input  [63:0] GDarray_q1;
output  [2:0] GDn_points_address0;
output   GDn_points_ce0;
output   GDn_points_we0;
output  [31:0] GDn_points_d0;
input  [31:0] GDn_points_q0;
output  [2:0] GDn_points_address1;
output   GDn_points_ce1;
output   GDn_points_we1;
output  [31:0] GDn_points_d1;
input  [31:0] GDn_points_q1;
output  [7:0] patches_superpoints_address0;
output   patches_superpoints_ce0;
output   patches_superpoints_we0;
output  [1023:0] patches_superpoints_d0;
input  [1023:0] patches_superpoints_q0;
output  [7:0] patches_superpoints_address1;
output   patches_superpoints_ce1;
output   patches_superpoints_we1;
output  [1023:0] patches_superpoints_d1;
input  [1023:0] patches_superpoints_q1;

reg n_patches_ap_vld;

wire    ap_ce_reg;

always @ (*) begin
    if ((ap_start == 1'b1)) begin
        n_patches_ap_vld = 1'b1;
    end else begin
        n_patches_ap_vld = 1'b0;
    end
end

assign GDarray_address0 = 10'd0;

assign GDarray_address1 = 10'd0;

assign GDarray_ce0 = 1'b0;

assign GDarray_ce1 = 1'b0;

assign GDarray_d0 = 64'd0;

assign GDarray_d1 = 64'd0;

assign GDarray_we0 = 1'b0;

assign GDarray_we1 = 1'b0;

assign GDn_points_address0 = 3'd0;

assign GDn_points_address1 = 3'd0;

assign GDn_points_ce0 = 1'b0;

assign GDn_points_ce1 = 1'b0;

assign GDn_points_d0 = 32'd0;

assign GDn_points_d1 = 32'd0;

assign GDn_points_we0 = 1'b0;

assign GDn_points_we1 = 1'b0;

assign ap_done = ap_start;

assign ap_idle = 1'b1;

assign ap_ready = ap_start;

assign n_patches = 8'd1;

assign patches_superpoints_address0 = 8'd0;

assign patches_superpoints_address1 = 8'd0;

assign patches_superpoints_ce0 = 1'b0;

assign patches_superpoints_ce1 = 1'b0;

assign patches_superpoints_d0 = 1024'd0;

assign patches_superpoints_d1 = 1024'd0;

assign patches_superpoints_we0 = 1'b0;

assign patches_superpoints_we1 = 1'b0;

endmodule //makePatches_ShadowQuilt_fromEdges
