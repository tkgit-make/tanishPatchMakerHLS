-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity makePatches_ShadowQuilt_fromEdges_makeSuperPoint_alignedToLine is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    GDarray_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    GDarray_ce0 : OUT STD_LOGIC;
    GDarray_q0 : IN STD_LOGIC_VECTOR (191 downto 0);
    GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    GDn_points_ce0 : OUT STD_LOGIC;
    GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    i : IN STD_LOGIC_VECTOR (2 downto 0);
    z_top : IN STD_LOGIC_VECTOR (63 downto 0);
    apexZ0 : IN STD_LOGIC_VECTOR (63 downto 0);
    original_ppl : IN STD_LOGIC_VECTOR (31 downto 0);
    leftRight_offset : IN STD_LOGIC_VECTOR (0 downto 0);
    init_patch_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    init_patch_ce0 : OUT STD_LOGIC;
    init_patch_we0 : OUT STD_LOGIC;
    init_patch_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    init_patch_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    init_patch_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    init_patch_ce1 : OUT STD_LOGIC;
    init_patch_we1 : OUT STD_LOGIC;
    init_patch_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    init_patch_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    init_patch1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    init_patch1_ce0 : OUT STD_LOGIC;
    init_patch1_we0 : OUT STD_LOGIC;
    init_patch1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    init_patch1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    init_patch1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    init_patch1_ce1 : OUT STD_LOGIC;
    init_patch1_we1 : OUT STD_LOGIC;
    init_patch1_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    init_patch1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    init_patch2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    init_patch2_ce0 : OUT STD_LOGIC;
    init_patch2_we0 : OUT STD_LOGIC;
    init_patch2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    init_patch2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    init_patch2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    init_patch2_ce1 : OUT STD_LOGIC;
    init_patch2_we1 : OUT STD_LOGIC;
    init_patch2_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    init_patch2_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    init_patch3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    init_patch3_ce0 : OUT STD_LOGIC;
    init_patch3_we0 : OUT STD_LOGIC;
    init_patch3_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    init_patch3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    init_patch3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    init_patch3_ce1 : OUT STD_LOGIC;
    init_patch3_we1 : OUT STD_LOGIC;
    init_patch3_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    init_patch3_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    init_patch4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    init_patch4_ce0 : OUT STD_LOGIC;
    init_patch4_we0 : OUT STD_LOGIC;
    init_patch4_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    init_patch4_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    init_patch4_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    init_patch4_ce1 : OUT STD_LOGIC;
    init_patch4_we1 : OUT STD_LOGIC;
    init_patch4_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    init_patch4_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    temp_ce0 : OUT STD_LOGIC;
    temp_we0 : OUT STD_LOGIC;
    temp_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    temp_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    temp_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    temp_ce1 : OUT STD_LOGIC;
    temp_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of makePatches_ShadowQuilt_fromEdges_makeSuperPoint_alignedToLine is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000010000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000100000000000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000001000000000000000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000001000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000010000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000100000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000001000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000010000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000100000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000001000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000100000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (38 downto 0) := "000000001000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (38 downto 0) := "000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (38 downto 0) := "000000100000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (38 downto 0) := "000001000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (38 downto 0) := "000010000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (38 downto 0) := "000100000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (38 downto 0) := "001000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (38 downto 0) := "010000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (38 downto 0) := "100000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv66_0 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv64_60 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001100000";
    constant ap_const_lv64_63 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001100011";
    constant ap_const_lv64_66 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001100110";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_4B989680 : STD_LOGIC_VECTOR (31 downto 0) := "01001011100110001001011010000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv17_10 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv129_lc_1 : STD_LOGIC_VECTOR (128 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010110";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv25_1B3B4C0 : STD_LOGIC_VECTOR (24 downto 0) := "1101100111011010011000000";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFF6 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111110110";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv34_1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_const_lv66_3 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv66_1 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv8_30 : STD_LOGIC_VECTOR (7 downto 0) := "00110000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal radii_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal radii_ce0 : STD_LOGIC;
    signal radii_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal trapezoid_edges_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal trapezoid_edges_ce0 : STD_LOGIC;
    signal trapezoid_edges_q0 : STD_LOGIC_VECTOR (25 downto 0);
    signal row_list_size_reg_818 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_list_size_reg_818_pp0_iter1_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal start_index_reg_842 : STD_LOGIC_VECTOR (31 downto 0);
    signal start_value_reg_854 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_reg_866 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_866_pp1_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state20_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal p_x_assign_7_reg_878 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_9_reg_890 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_bound_reg_902 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_reg_914 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_reg_914_pp2_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state27_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state28_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state29_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state30_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal j_2_reg_914_pp2_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal rbVal_reg_926 : STD_LOGIC_VECTOR (63 downto 0);
    signal lbVal_reg_938 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten23_reg_950 : STD_LOGIC_VECTOR (65 downto 0);
    signal temp_size_3_reg_961 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_8_reg_972 : STD_LOGIC_VECTOR (63 downto 0);
    signal z_3_reg_981 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten15_reg_1019 : STD_LOGIC_VECTOR (32 downto 0);
    signal temp_size_2_reg_1030 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_7_reg_1041 : STD_LOGIC_VECTOR (32 downto 0);
    signal z_2_reg_1050 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten7_reg_1061 : STD_LOGIC_VECTOR (32 downto 0);
    signal temp_size_1_reg_1072 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_6_reg_1083 : STD_LOGIC_VECTOR (32 downto 0);
    signal z_1_reg_1092 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_1103 : STD_LOGIC_VECTOR (65 downto 0);
    signal temp_size_reg_1114 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_5_reg_1125 : STD_LOGIC_VECTOR (63 downto 0);
    signal z_reg_1134 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln1141_fu_1194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1141_reg_3683 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal leftRight_offset_read_read_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_reg_3813 : STD_LOGIC_VECTOR (24 downto 0);
    signal GDn_points_load_reg_3818 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1145_fu_1200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1145_reg_3823 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln54_fu_1206_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln54_reg_3827 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1145_fu_1244_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1145_reg_3832 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln1147_1_fu_1248_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln1147_1_reg_3837 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln1145_1_fu_1254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1145_1_reg_3842 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1145_1_reg_3842_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln54_fu_1293_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln54_reg_3846 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln1147_fu_1362_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1147_reg_3856 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_1169_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv9_reg_3871 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_1172_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_3876 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv6_reg_3881 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1164_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_reg_3886 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_1160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_3891 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_1156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_reg_3896 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal result_V_fu_1541_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_V_reg_3901 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln1275_fu_1549_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1275_reg_3906 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln1275_fu_1555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1275_reg_3911 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1275_reg_3911_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1277_fu_1566_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1277_reg_3920 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state21_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state24_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal grp_fu_1182_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_9_reg_3927 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state22_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal icmp_ln1277_fu_1641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1277_reg_3942 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1277_1_fu_1647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1277_1_reg_3947 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1277_2_fu_1653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1277_2_reg_3952 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1277_3_fu_1659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1277_3_reg_3957 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1277_fu_1685_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal select_ln1277_1_fu_1693_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1277_2_fu_1700_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal zext_ln1254_fu_1707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1254_reg_3982 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal add_ln1254_fu_1711_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1254_reg_3988 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln1254_fu_1717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1254_reg_3993 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1254_reg_3993_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1254_reg_3993_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1256_fu_1728_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_138_reg_4012 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_139_fu_1754_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_139_reg_4018 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_140_reg_4023 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_141_fu_1772_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_141_reg_4029 : STD_LOGIC_VECTOR (51 downto 0);
    signal select_ln1256_fu_1879_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal lbVal_2_fu_1887_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1262_fu_1998_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_11_fu_2006_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1205_fu_2044_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1205_reg_4054 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal icmp_ln1220_fu_2063_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1220_reg_4060 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1234_fu_2069_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1234_reg_4064 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1222_fu_2075_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln54_8_fu_2104_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln54_8_reg_4077 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1222_fu_2122_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln1222_reg_4082 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln1179_fu_2171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1179_reg_4087 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1193_fu_2177_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln54_7_fu_2206_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln54_7_reg_4100 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_fu_2224_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln1193_reg_4105 : STD_LOGIC_VECTOR (32 downto 0);
    signal j_3_fu_2230_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_reg_4110 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1181_fu_2235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1181_reg_4117 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1234_fu_2251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal sub_ln1234_fu_2276_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln1234_reg_4126 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln54_9_fu_2318_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln54_9_reg_4131 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1234_fu_2332_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal mul_ln1234_reg_4136 : STD_LOGIC_VECTOR (65 downto 0);
    signal add_ln1234_3_fu_2338_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state33_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state34_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state35_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln1234_2_fu_2362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1234_2_reg_4146 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1234_2_reg_4146_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1234_1_fu_2419_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1234_1_reg_4150 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1234_2_fu_2449_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1238_1_fu_2461_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1238_1_reg_4160 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1238_1_reg_4160_pp3_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_7_fu_2490_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln54_7_reg_4165 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1236_fu_2496_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln1238_fu_2562_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1238_reg_4181 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1245_fu_2601_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1245_reg_4186 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal trunc_ln5_fu_2615_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln5_reg_4191 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1222_1_fu_2618_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal ap_block_state37_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state38_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state39_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal icmp_ln1222_1_fu_2654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1222_1_reg_4202 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1222_1_reg_4202_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1222_1_fu_2685_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln1222_1_reg_4206 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln1222_3_fu_2753_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln1226_1_fu_2765_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1226_1_reg_4216 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1226_1_reg_4216_pp4_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_6_fu_2794_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal add_ln54_6_reg_4221 : STD_LOGIC_VECTOR (38 downto 0);
    signal add_ln1224_fu_2800_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln1226_fu_2870_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1226_reg_4236 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1193_1_fu_2902_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal ap_block_state41_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state42_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state43_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal icmp_ln1193_1_fu_2938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1193_1_reg_4246 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1193_1_reg_4246_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1193_1_fu_2969_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln1193_1_reg_4250 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln1193_3_fu_3037_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln1197_1_fu_3049_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1197_1_reg_4260 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1197_1_reg_4260_pp5_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_5_fu_3078_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal add_ln54_5_reg_4265 : STD_LOGIC_VECTOR (38 downto 0);
    signal add_ln1195_fu_3084_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln1197_fu_3154_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1197_reg_4280 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1181_fu_3186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal sub_ln1181_fu_3209_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln1181_reg_4290 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln54_6_fu_3251_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln54_6_reg_4295 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1181_fu_3265_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal mul_ln1181_reg_4300 : STD_LOGIC_VECTOR (65 downto 0);
    signal add_ln1181_2_fu_3271_p2 : STD_LOGIC_VECTOR (65 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal ap_block_state46_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state47_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state48_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal icmp_ln1181_2_fu_3295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1181_2_reg_4310 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1181_2_reg_4310_pp6_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1181_1_fu_3352_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1181_1_reg_4314 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1181_2_fu_3382_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1185_1_fu_3394_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1185_1_reg_4324 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1185_1_reg_4324_pp6_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_4_fu_3423_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln54_4_reg_4329 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1183_fu_3429_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln1185_fu_3495_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1185_reg_4345 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln13_fu_3526_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln13_reg_4350 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal icmp_ln13_fu_3536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_4355 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln17_fu_3554_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln17_reg_4359 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln17_fu_3570_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln17_reg_4364 : STD_LOGIC_VECTOR (7 downto 0);
    signal init_patch_addr_3_reg_4379 : STD_LOGIC_VECTOR (7 downto 0);
    signal init_patch_addr_4_reg_4384 : STD_LOGIC_VECTOR (7 downto 0);
    signal init_patch1_addr_3_reg_4389 : STD_LOGIC_VECTOR (7 downto 0);
    signal init_patch1_addr_4_reg_4394 : STD_LOGIC_VECTOR (7 downto 0);
    signal init_patch2_addr_3_reg_4399 : STD_LOGIC_VECTOR (7 downto 0);
    signal init_patch2_addr_4_reg_4404 : STD_LOGIC_VECTOR (7 downto 0);
    signal init_patch3_addr_3_reg_4409 : STD_LOGIC_VECTOR (7 downto 0);
    signal init_patch3_addr_4_reg_4414 : STD_LOGIC_VECTOR (7 downto 0);
    signal init_patch4_addr_3_reg_4419 : STD_LOGIC_VECTOR (7 downto 0);
    signal init_patch4_addr_4_reg_4424 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal init_patch_addr_5_reg_4434 : STD_LOGIC_VECTOR (7 downto 0);
    signal init_patch1_addr_5_reg_4439 : STD_LOGIC_VECTOR (7 downto 0);
    signal init_patch2_addr_5_reg_4444 : STD_LOGIC_VECTOR (7 downto 0);
    signal init_patch3_addr_5_reg_4449 : STD_LOGIC_VECTOR (7 downto 0);
    signal init_patch4_addr_5_reg_4454 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_116_fu_3605_p7 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_116_reg_4459 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_fu_3620_p7 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_reg_4464 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_load_2_reg_4469 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal icmp_ln22_fu_3649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_4483 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_fu_3654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_4487 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state20 : STD_LOGIC;
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state27 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state33 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state37 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state41 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state46 : STD_LOGIC;
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal row_list_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_list_ce0 : STD_LOGIC;
    signal row_list_we0 : STD_LOGIC;
    signal row_list_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal row_list_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_row_list_size_phi_fu_822_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal row_list_size_assign_reg_830 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_j_1_phi_fu_870_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_j_2_phi_fu_918_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_temp_size_3_phi_fu_965_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal trunc_ln1245_fu_2597_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_temp_size_4_phi_fu_996_p16 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_size_4_reg_992 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1245_1_fu_2593_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_phi_mux_temp_size_2_phi_fu_1034_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal ap_phi_mux_temp_size_1_phi_fu_1076_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal ap_phi_mux_temp_size_phi_fu_1118_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal i_10_reg_1145 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal zext_ln1147_3_fu_1321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal row_list_size_cast9_fu_1368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1279_cast_fu_1561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1258_cast_fu_1723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1238_5_fu_2521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1238_3_fu_2567_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1226_5_fu_2829_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1226_2_fu_2876_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1197_5_fu_3113_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1197_2_fu_3160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1185_5_fu_3454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1185_3_fu_3500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_1_fu_3560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_2_fu_3580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_3_fu_3595_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_fu_3640_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1238_2_fu_2588_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1226_2_fu_2897_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1197_2_fu_3181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1185_2_fu_3521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln5_fu_2606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_1169_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1172_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1178_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1178_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1182_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal grp_fu_1186_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln54_s_fu_1210_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln54_1_fu_1221_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln54_fu_1217_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln54_2_fu_1228_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln54_fu_1232_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln54_fu_1238_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln54_2_fu_1259_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln54_3_fu_1271_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln54_3_fu_1267_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal zext_ln54_4_fu_1279_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal sub_ln54_5_fu_1283_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln54_fu_1289_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1147_fu_1298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1147_fu_1305_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1147_fu_1305_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal mul_ln1147_fu_1305_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal tmp_118_fu_1311_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_106_fu_1326_p4 : STD_LOGIC_VECTOR (58 downto 0);
    signal shl_ln1147_2_fu_1344_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1147_1_fu_1352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1147_1_fu_1336_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1147_fu_1356_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_1373_p3 : STD_LOGIC_VECTOR (66 downto 0);
    signal zext_ln1147_2_fu_1380_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal lshr_ln1147_fu_1384_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal add_ln1151_fu_1400_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal data_V_fu_1410_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_137_fu_1431_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_fu_1435_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_136_fu_1421_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln341_fu_1449_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln341_fu_1453_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_1467_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_1459_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_1473_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_1477_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_fu_1485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_1445_p1 : STD_LOGIC_VECTOR (110 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1489_p1 : STD_LOGIC_VECTOR (110 downto 0);
    signal r_V_fu_1493_p2 : STD_LOGIC_VECTOR (110 downto 0);
    signal tmp_123_fu_1505_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_9_fu_1499_p2 : STD_LOGIC_VECTOR (110 downto 0);
    signal zext_ln662_fu_1513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_110_fu_1517_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_fu_1527_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_1413_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_15_fu_1535_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_10_fu_1572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln368_fu_1575_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_9_fu_1583_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_11_fu_1596_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln368_1_fu_1600_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_10_fu_1608_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_107_fu_1621_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1277_fu_1579_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_108_fu_1631_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1277_1_fu_1604_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln1277_fu_1665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1277_1_fu_1669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1277_fu_1673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1277_1_fu_1679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_12_fu_1740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_13_fu_1758_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mantissa_4_fu_1776_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln510_fu_1789_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_fu_1792_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_4_fu_1806_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_4_fu_1798_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_4_fu_1811_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_4_fu_1815_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i_i_cast_cast_cast_fu_1823_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_4_fu_1785_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal sh_prom_i_i_i_i_i_i_cast_cast_cast_cast_fu_1827_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal r_V_10_fu_1831_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_127_fu_1843_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_11_fu_1837_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln662_4_fu_1851_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_119_fu_1855_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_4_fu_1865_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1256_fu_1873_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mantissa_5_fu_1895_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln510_1_fu_1908_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_1_fu_1911_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_5_fu_1925_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_5_fu_1917_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_5_fu_1930_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_5_fu_1934_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i59_i_cast_cast_cast_fu_1942_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_5_fu_1904_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal sh_prom_i_i_i_i_i59_i_cast_cast_cast_cast_fu_1946_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal r_V_12_fu_1950_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_131_fu_1962_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_13_fu_1956_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln662_5_fu_1970_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_121_fu_1974_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_5_fu_1984_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1262_fu_1992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1205_fu_2014_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1205_fu_2020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1210_fu_2026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1205_fu_2032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal start_index_2_fu_2038_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1220_fu_2052_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_10_fu_2057_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln54_8_fu_2082_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln54_9_fu_2093_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln54_9_fu_2089_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln54_10_fu_2100_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln1222_fu_2079_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_shl_fu_2114_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln1222_fu_2110_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln1174_fu_2128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1174_1_fu_2134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1174_fu_2140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal start_index_1_fu_2146_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_4_fu_2152_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1179_fu_2160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1179_1_fu_2165_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln54_6_fu_2184_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln54_7_fu_2195_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln54_7_fu_2191_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln54_8_fu_2202_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln1193_fu_2181_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_shl6_fu_2216_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln1193_fu_2212_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln1234_1_fu_2241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1234_fu_2246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1234_3_fu_2263_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln1234_1_fu_2266_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1234_4_fu_2272_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln1234_2_fu_2259_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln1234_1_fu_2255_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln1234_1_fu_2282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln54_10_fu_2296_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln54_11_fu_2307_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln54_11_fu_2303_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln54_12_fu_2314_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln1234_fu_2288_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln1234_5_fu_2324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1234_fu_2332_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1234_fu_2332_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln54_17_fu_2344_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln54_18_fu_2350_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1236_fu_2379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1234_2_fu_2373_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln54_21_fu_2393_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln54_22_fu_2399_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln54_17_fu_2405_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln54_13_fu_2356_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1240_fu_2367_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1238_1_fu_2431_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl16_cast_fu_2435_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1238_fu_2427_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln1170_2_fu_2385_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln1238_1_fu_2443_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1238_fu_2457_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_115_fu_2467_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp3_fu_2476_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln54_18_fu_2486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1170_3_fu_2411_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1238_fu_2505_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1238_fu_2505_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal mul_ln1238_fu_2505_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal tmp_135_fu_2511_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_126_fu_2526_p4 : STD_LOGIC_VECTOR (58 downto 0);
    signal shl_ln1238_2_fu_2544_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1238_1_fu_2552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1238_1_fu_2536_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1238_fu_2556_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln8_fu_2571_p3 : STD_LOGIC_VECTOR (66 downto 0);
    signal zext_ln1238_2_fu_2578_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal lshr_ln1238_fu_2582_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal shl_ln54_15_fu_2624_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal shl_ln54_16_fu_2636_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln54_11_fu_2632_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal sext_ln54_12_fu_2644_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal icmp_ln1224_fu_2671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1228_fu_2659_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1226_1_fu_2697_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_151_cast_fu_2701_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1226_fu_2693_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1222_fu_2665_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal shl_ln54_26_mid1_fu_2715_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal shl_ln54_27_mid1_fu_2727_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln54_19_fu_2723_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal sext_ln54_20_fu_2735_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal sub_ln54_16_fu_2739_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal sub_ln54_12_fu_2648_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal select_ln1222_fu_2677_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln1226_1_fu_2709_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1226_fu_2761_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_114_fu_2771_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_fu_2780_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln54_17_fu_2790_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal select_ln1222_2_fu_2745_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal sext_ln1226_fu_2806_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1226_fu_2813_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1226_fu_2813_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal mul_ln1226_fu_2813_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal tmp_134_fu_2819_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_125_fu_2834_p4 : STD_LOGIC_VECTOR (58 downto 0);
    signal shl_ln1226_2_fu_2852_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1226_1_fu_2860_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1226_1_fu_2844_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1226_fu_2864_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln7_fu_2880_p3 : STD_LOGIC_VECTOR (66 downto 0);
    signal zext_ln1226_3_fu_2887_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal lshr_ln1226_fu_2891_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal shl_ln54_13_fu_2908_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal shl_ln54_14_fu_2920_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln54_9_fu_2916_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal sext_ln54_10_fu_2928_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal icmp_ln1195_fu_2955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1199_fu_2943_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1197_1_fu_2981_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_148_cast_fu_2985_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1197_fu_2977_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1193_fu_2949_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal shl_ln54_24_mid1_fu_2999_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal shl_ln54_25_mid1_fu_3011_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln54_14_fu_3007_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal sext_ln54_15_fu_3019_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal sub_ln54_15_fu_3023_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal sub_ln54_11_fu_2932_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal select_ln1193_fu_2961_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln1197_1_fu_2993_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1197_fu_3045_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_113_fu_3055_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_fu_3064_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln54_16_fu_3074_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal select_ln1193_2_fu_3029_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal sext_ln1197_fu_3090_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1197_fu_3097_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1197_fu_3097_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal mul_ln1197_fu_3097_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal tmp_133_fu_3103_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_124_fu_3118_p4 : STD_LOGIC_VECTOR (58 downto 0);
    signal shl_ln1197_2_fu_3136_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1197_1_fu_3144_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1197_1_fu_3128_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1197_fu_3148_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln6_fu_3164_p3 : STD_LOGIC_VECTOR (66 downto 0);
    signal zext_ln1197_3_fu_3171_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal lshr_ln1197_fu_3175_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal sext_ln1181_3_fu_3195_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln1181_fu_3199_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1181_4_fu_3205_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln1181_2_fu_3192_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln1181_1_fu_3189_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln1181_1_fu_3215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln54_4_fu_3229_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln54_5_fu_3240_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln54_5_fu_3236_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln54_6_fu_3247_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln1181_fu_3221_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln1181_5_fu_3257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1181_fu_3265_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1181_fu_3265_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln54_fu_3277_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln54_12_fu_3283_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1183_fu_3312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1181_1_fu_3306_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln54_19_fu_3326_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln54_20_fu_3332_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln54_14_fu_3338_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln54_10_fu_3289_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1187_fu_3300_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1185_1_fu_3364_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_3368_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1185_fu_3360_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln1170_fu_3318_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln1185_1_fu_3376_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1185_fu_3390_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_112_fu_3400_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_3409_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln54_13_fu_3419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1170_1_fu_3344_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1185_fu_3438_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1185_fu_3438_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal mul_ln1185_fu_3438_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal tmp_132_fu_3444_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_122_fu_3459_p4 : STD_LOGIC_VECTOR (58 downto 0);
    signal shl_ln1185_2_fu_3477_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1185_1_fu_3485_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1185_1_fu_3469_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1185_fu_3489_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln5_fu_3504_p3 : STD_LOGIC_VECTOR (66 downto 0);
    signal zext_ln1185_2_fu_3511_p1 : STD_LOGIC_VECTOR (191 downto 0);
    signal lshr_ln1185_fu_3515_p2 : STD_LOGIC_VECTOR (191 downto 0);
    signal i_10_cast_fu_3532_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_fu_3546_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln17_fu_3542_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln17_fu_3574_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln17_1_fu_3590_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln20_fu_3635_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_block_pp1_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal mul_ln1147_fu_1305_p00 : STD_LOGIC_VECTOR (128 downto 0);
    signal mul_ln1181_fu_3265_p00 : STD_LOGIC_VECTOR (65 downto 0);
    signal mul_ln1185_fu_3438_p00 : STD_LOGIC_VECTOR (128 downto 0);
    signal mul_ln1197_fu_3097_p00 : STD_LOGIC_VECTOR (128 downto 0);
    signal mul_ln1226_fu_2813_p00 : STD_LOGIC_VECTOR (128 downto 0);
    signal mul_ln1234_fu_2332_p00 : STD_LOGIC_VECTOR (65 downto 0);
    signal mul_ln1238_fu_2505_p00 : STD_LOGIC_VECTOR (128 downto 0);
    signal ap_condition_1046 : BOOLEAN;
    signal ap_condition_1052 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component makePatches_ShadowQuilt_fromEdges_fadd_32ns_32ns_32_3_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_fdiv_32ns_32ns_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_sitofp_64ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_sitodp_64ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_mul_64ns_66ns_129_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (65 downto 0);
        dout : OUT STD_LOGIC_VECTOR (128 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_mul_64ns_3ns_66_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (65 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_mux_53_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_makeSuperPoint_alignedToLine_radii IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_makeSuperPoint_alignedToLine_trapezoid_edges IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_makeSuperPoint_alignedToLine_row_list IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    radii_U : component makePatches_ShadowQuilt_fromEdges_makeSuperPoint_alignedToLine_radii
    generic map (
        DataWidth => 25,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => radii_address0,
        ce0 => radii_ce0,
        q0 => radii_q0);

    trapezoid_edges_U : component makePatches_ShadowQuilt_fromEdges_makeSuperPoint_alignedToLine_trapezoid_edges
    generic map (
        DataWidth => 26,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => trapezoid_edges_address0,
        ce0 => trapezoid_edges_ce0,
        q0 => trapezoid_edges_q0);

    row_list_U : component makePatches_ShadowQuilt_fromEdges_makeSuperPoint_alignedToLine_row_list
    generic map (
        DataWidth => 64,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => row_list_address0,
        ce0 => row_list_ce0,
        we0 => row_list_we0,
        d0 => row_list_d0,
        q0 => row_list_q0);

    fadd_32ns_32ns_32_3_full_dsp_1_U1 : component makePatches_ShadowQuilt_fromEdges_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_reg_3891,
        din1 => conv6_reg_3881,
        ce => ap_const_logic_1,
        dout => grp_fu_1156_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U2 : component makePatches_ShadowQuilt_fromEdges_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv9_reg_3871,
        din1 => div_reg_3886,
        ce => ap_const_logic_1,
        dout => grp_fu_1160_p2);

    fdiv_32ns_32ns_32_6_no_dsp_1_U3 : component makePatches_ShadowQuilt_fromEdges_fdiv_32ns_32ns_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_reg_3876,
        din1 => ap_const_lv32_4B989680,
        ce => ap_const_logic_1,
        dout => grp_fu_1164_p2);

    sitofp_64ns_32_2_no_dsp_1_U4 : component makePatches_ShadowQuilt_fromEdges_sitofp_64ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1169_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_1169_p1);

    sitofp_64ns_32_2_no_dsp_1_U5 : component makePatches_ShadowQuilt_fromEdges_sitofp_64ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1172_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_1172_p1);

    sitofp_64ns_32_2_no_dsp_1_U6 : component makePatches_ShadowQuilt_fromEdges_sitofp_64ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => apexZ0,
        ce => ap_const_logic_1,
        dout => grp_fu_1175_p1);

    dcmp_64ns_64ns_1_2_no_dsp_1_U7 : component makePatches_ShadowQuilt_fromEdges_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1178_p0,
        din1 => grp_fu_1178_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_1178_p2);

    sitodp_64ns_64_2_no_dsp_1_U8 : component makePatches_ShadowQuilt_fromEdges_sitodp_64ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1182_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_1182_p1);

    sitodp_64ns_64_2_no_dsp_1_U9 : component makePatches_ShadowQuilt_fromEdges_sitodp_64ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1186_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_1186_p1);

    mul_64ns_66ns_129_1_1_U10 : component makePatches_ShadowQuilt_fromEdges_mul_64ns_66ns_129_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 66,
        dout_WIDTH => 129)
    port map (
        din0 => mul_ln1147_fu_1305_p0,
        din1 => mul_ln1147_fu_1305_p1,
        dout => mul_ln1147_fu_1305_p2);

    mul_64ns_3ns_66_1_1_U11 : component makePatches_ShadowQuilt_fromEdges_mul_64ns_3ns_66_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 3,
        dout_WIDTH => 66)
    port map (
        din0 => mul_ln1234_fu_2332_p0,
        din1 => mul_ln1234_fu_2332_p1,
        dout => mul_ln1234_fu_2332_p2);

    mul_64ns_66ns_129_1_1_U12 : component makePatches_ShadowQuilt_fromEdges_mul_64ns_66ns_129_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 66,
        dout_WIDTH => 129)
    port map (
        din0 => mul_ln1238_fu_2505_p0,
        din1 => mul_ln1238_fu_2505_p1,
        dout => mul_ln1238_fu_2505_p2);

    mul_64ns_66ns_129_1_1_U13 : component makePatches_ShadowQuilt_fromEdges_mul_64ns_66ns_129_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 66,
        dout_WIDTH => 129)
    port map (
        din0 => mul_ln1226_fu_2813_p0,
        din1 => mul_ln1226_fu_2813_p1,
        dout => mul_ln1226_fu_2813_p2);

    mul_64ns_66ns_129_1_1_U14 : component makePatches_ShadowQuilt_fromEdges_mul_64ns_66ns_129_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 66,
        dout_WIDTH => 129)
    port map (
        din0 => mul_ln1197_fu_3097_p0,
        din1 => mul_ln1197_fu_3097_p1,
        dout => mul_ln1197_fu_3097_p2);

    mul_64ns_3ns_66_1_1_U15 : component makePatches_ShadowQuilt_fromEdges_mul_64ns_3ns_66_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 3,
        dout_WIDTH => 66)
    port map (
        din0 => mul_ln1181_fu_3265_p0,
        din1 => mul_ln1181_fu_3265_p1,
        dout => mul_ln1181_fu_3265_p2);

    mul_64ns_66ns_129_1_1_U16 : component makePatches_ShadowQuilt_fromEdges_mul_64ns_66ns_129_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 66,
        dout_WIDTH => 129)
    port map (
        din0 => mul_ln1185_fu_3438_p0,
        din1 => mul_ln1185_fu_3438_p1,
        dout => mul_ln1185_fu_3438_p2);

    mux_53_64_1_1_U17 : component makePatches_ShadowQuilt_fromEdges_mux_53_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => init_patch_q0,
        din1 => init_patch1_q0,
        din2 => init_patch2_q0,
        din3 => init_patch3_q0,
        din4 => init_patch4_q0,
        din5 => trunc_ln5_reg_4191,
        dout => tmp_116_fu_3605_p7);

    mux_53_64_1_1_U18 : component makePatches_ShadowQuilt_fromEdges_mux_53_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => init_patch_q1,
        din1 => init_patch1_q1,
        din2 => init_patch2_q1,
        din3 => init_patch3_q1,
        din4 => init_patch4_q1,
        din5 => trunc_ln5_reg_4191,
        dout => tmp_117_fu_3620_p7);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln1145_fu_1200_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln1145_fu_1200_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state20) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_subdone)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state27) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state27)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state27);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state33) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state33)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state33);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state37) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((grp_fu_1189_p2 = ap_const_lv1_1) and (icmp_ln1220_fu_2063_p2 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state37)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state37);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                elsif (((grp_fu_1189_p2 = ap_const_lv1_1) and (icmp_ln1220_fu_2063_p2 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                    ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state41) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln1179_fu_2171_p2 = ap_const_lv1_0) and (grp_fu_1189_p2 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state41)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state41);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                elsif (((icmp_ln1179_fu_2171_p2 = ap_const_lv1_0) and (grp_fu_1189_p2 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                    ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state46) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state46)) then 
                        ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state46);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_10_reg_1145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                i_10_reg_1145 <= ap_const_lv8_0;
            elsif (((icmp_ln13_reg_4355 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                i_10_reg_1145 <= add_ln13_reg_4350;
            end if; 
        end if;
    end process;

    indvar_flatten15_reg_1019_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1222_1_fu_2654_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                indvar_flatten15_reg_1019 <= add_ln1222_1_fu_2618_p2;
            elsif (((grp_fu_1189_p2 = ap_const_lv1_1) and (icmp_ln1220_fu_2063_p2 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                indvar_flatten15_reg_1019 <= ap_const_lv33_0;
            end if; 
        end if;
    end process;

    indvar_flatten23_reg_950_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1234_2_fu_2362_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                indvar_flatten23_reg_950 <= add_ln1234_3_fu_2338_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                indvar_flatten23_reg_950 <= ap_const_lv66_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_1061_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1193_1_fu_2938_p2 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
                indvar_flatten7_reg_1061 <= add_ln1193_1_fu_2902_p2;
            elsif (((icmp_ln1179_fu_2171_p2 = ap_const_lv1_0) and (grp_fu_1189_p2 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                indvar_flatten7_reg_1061 <= ap_const_lv33_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_1103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1181_2_fu_3295_p2 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then 
                indvar_flatten_reg_1103 <= add_ln1181_2_fu_3271_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                indvar_flatten_reg_1103 <= ap_const_lv66_0;
            end if; 
        end if;
    end process;

    j_1_reg_866_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln1275_reg_3911 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                j_1_reg_866 <= add_ln1275_reg_3906;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                j_1_reg_866 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j_2_reg_914_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln1254_reg_3993 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                j_2_reg_914 <= add_ln1254_reg_3988;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                j_2_reg_914 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j_5_reg_1125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1181_2_fu_3295_p2 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then 
                j_5_reg_1125 <= select_ln1181_2_fu_3382_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                j_5_reg_1125 <= sext_ln1181_fu_3186_p1;
            end if; 
        end if;
    end process;

    j_6_reg_1083_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1193_1_fu_2938_p2 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
                j_6_reg_1083 <= select_ln1193_3_fu_3037_p3;
            elsif (((icmp_ln1179_fu_2171_p2 = ap_const_lv1_0) and (grp_fu_1189_p2 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                j_6_reg_1083 <= sext_ln1193_fu_2177_p1;
            end if; 
        end if;
    end process;

    j_7_reg_1041_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1222_1_fu_2654_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                j_7_reg_1041 <= select_ln1222_3_fu_2753_p3;
            elsif (((grp_fu_1189_p2 = ap_const_lv1_1) and (icmp_ln1220_fu_2063_p2 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                j_7_reg_1041 <= sext_ln1222_fu_2075_p1;
            end if; 
        end if;
    end process;

    j_8_reg_972_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1234_2_fu_2362_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                j_8_reg_972 <= select_ln1234_2_fu_2449_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                j_8_reg_972 <= sext_ln1234_fu_2251_p1;
            end if; 
        end if;
    end process;

    j_9_reg_890_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln1254_reg_3993_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                j_9_reg_890 <= select_ln1256_fu_1879_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                j_9_reg_890 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    lbVal_reg_938_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln1254_reg_3993_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                lbVal_reg_938 <= lbVal_2_fu_1887_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                lbVal_reg_938 <= ap_const_lv64_7FFFFFFFFFFFFFFF;
            end if; 
        end if;
    end process;

    p_x_assign_7_reg_878_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln1275_reg_3911_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then 
                p_x_assign_7_reg_878 <= select_ln1277_2_fu_1700_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                p_x_assign_7_reg_878 <= ap_const_lv64_7FFFFFFFFFFFFFFF;
            end if; 
        end if;
    end process;

    rbVal_reg_926_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln1254_reg_3993_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                rbVal_reg_926 <= p_Result_11_fu_2006_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                rbVal_reg_926 <= ap_const_lv64_7FFFFFFFFFFFFFFF;
            end if; 
        end if;
    end process;

    right_bound_reg_902_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln1254_reg_3993_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                right_bound_reg_902 <= select_ln1262_fu_1998_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                right_bound_reg_902 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    row_list_size_assign_reg_830_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1145_reg_3823 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                row_list_size_assign_reg_830 <= GDn_points_load_reg_3818;
            elsif (((icmp_ln1145_fu_1200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                row_list_size_assign_reg_830 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    row_list_size_reg_818_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1145_fu_1200_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                row_list_size_reg_818 <= ap_const_lv31_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1145_1_reg_3842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                row_list_size_reg_818 <= add_ln1147_1_reg_3837;
            end if; 
        end if;
    end process;

    start_index_reg_842_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln1275_reg_3911_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then 
                start_index_reg_842 <= select_ln1277_fu_1685_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                start_index_reg_842 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    start_value_reg_854_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln1275_reg_3911_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then 
                start_value_reg_854 <= select_ln1277_1_fu_1693_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                start_value_reg_854 <= ap_const_lv64_7FFFFFFFFFFFFFFF;
            end if; 
        end if;
    end process;

    temp_size_1_reg_1072_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln1193_1_reg_4246 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
                temp_size_1_reg_1072 <= select_ln1193_1_reg_4250;
            elsif (((icmp_ln1179_fu_2171_p2 = ap_const_lv1_0) and (grp_fu_1189_p2 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                temp_size_1_reg_1072 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    temp_size_2_reg_1030_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln1222_1_reg_4202 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                temp_size_2_reg_1030 <= select_ln1222_1_reg_4206;
            elsif (((grp_fu_1189_p2 = ap_const_lv1_1) and (icmp_ln1220_fu_2063_p2 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                temp_size_2_reg_1030 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    temp_size_3_reg_961_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln1234_2_reg_4146 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                temp_size_3_reg_961 <= select_ln1234_1_reg_4150;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                temp_size_3_reg_961 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    temp_size_4_reg_992_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                temp_size_4_reg_992 <= original_ppl;
            elsif ((((icmp_ln1179_fu_2171_p2 = ap_const_lv1_0) and (grp_fu_1189_p2 = ap_const_lv1_0) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((icmp_ln1234_fu_2069_p2 = ap_const_lv1_1) and (icmp_ln1220_fu_2063_p2 = ap_const_lv1_0) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((grp_fu_1189_p2 = ap_const_lv1_0) and (icmp_ln1220_fu_2063_p2 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((icmp_ln1181_fu_2235_p2 = ap_const_lv1_1) and (icmp_ln1179_fu_2171_p2 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31)))) then 
                temp_size_4_reg_992 <= ap_const_lv32_0;
            elsif (((icmp_ln1234_reg_4064 = ap_const_lv1_0) and (icmp_ln1220_reg_4060 = ap_const_lv1_0) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                temp_size_4_reg_992 <= trunc_ln1245_1_fu_2593_p1;
            elsif (((icmp_ln1181_reg_4117 = ap_const_lv1_0) and (icmp_ln1179_reg_4087 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                temp_size_4_reg_992 <= trunc_ln1245_fu_2597_p1;
            end if; 
        end if;
    end process;

    temp_size_reg_1114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (icmp_ln1181_2_reg_4310 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then 
                temp_size_reg_1114 <= select_ln1181_1_reg_4314;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                temp_size_reg_1114 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    z_1_reg_1092_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1193_1_fu_2938_p2 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
                z_1_reg_1092 <= add_ln1195_fu_3084_p2;
            elsif (((icmp_ln1179_fu_2171_p2 = ap_const_lv1_0) and (grp_fu_1189_p2 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                z_1_reg_1092 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    z_2_reg_1050_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1222_1_fu_2654_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                z_2_reg_1050 <= add_ln1224_fu_2800_p2;
            elsif (((grp_fu_1189_p2 = ap_const_lv1_1) and (icmp_ln1220_fu_2063_p2 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                z_2_reg_1050 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    z_3_reg_981_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1234_2_fu_2362_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                z_3_reg_981 <= add_ln1236_fu_2496_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                z_3_reg_981 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    z_reg_1134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1181_2_fu_3295_p2 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then 
                z_reg_1134 <= add_ln1183_fu_3429_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                z_reg_1134 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                GDn_points_load_reg_3818 <= GDn_points_q0;
                icmp_ln1145_reg_3823 <= icmp_ln1145_fu_1200_p2;
                y_reg_3813 <= radii_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln1147_1_reg_3837 <= add_ln1147_1_fu_1248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1145_1_reg_3842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    add_ln1147_reg_3856(63 downto 3) <= add_ln1147_fu_1362_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1181_2_fu_3295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                add_ln1185_1_reg_4324 <= add_ln1185_1_fu_3394_p2;
                    add_ln54_4_reg_4329(63 downto 3) <= add_ln54_4_fu_3423_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                add_ln1185_1_reg_4324_pp6_iter1_reg <= add_ln1185_1_reg_4324;
                icmp_ln1181_2_reg_4310 <= icmp_ln1181_2_fu_3295_p2;
                icmp_ln1181_2_reg_4310_pp6_iter1_reg <= icmp_ln1181_2_reg_4310;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1181_2_reg_4310 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                    add_ln1185_reg_4345(63 downto 3) <= add_ln1185_fu_3495_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1193_1_fu_2938_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                add_ln1197_1_reg_4260 <= add_ln1197_1_fu_3049_p2;
                    add_ln54_5_reg_4265(38 downto 3) <= add_ln54_5_fu_3078_p2(38 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                add_ln1197_1_reg_4260_pp5_iter1_reg <= add_ln1197_1_reg_4260;
                icmp_ln1193_1_reg_4246 <= icmp_ln1193_1_fu_2938_p2;
                icmp_ln1193_1_reg_4246_pp5_iter1_reg <= icmp_ln1193_1_reg_4246;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1193_1_reg_4246 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                    add_ln1197_reg_4280(63 downto 3) <= add_ln1197_fu_3154_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1222_1_fu_2654_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                add_ln1226_1_reg_4216 <= add_ln1226_1_fu_2765_p2;
                    add_ln54_6_reg_4221(38 downto 3) <= add_ln54_6_fu_2794_p2(38 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                add_ln1226_1_reg_4216_pp4_iter1_reg <= add_ln1226_1_reg_4216;
                icmp_ln1222_1_reg_4202 <= icmp_ln1222_1_fu_2654_p2;
                icmp_ln1222_1_reg_4202_pp4_iter1_reg <= icmp_ln1222_1_reg_4202;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1222_1_reg_4202 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                    add_ln1226_reg_4236(63 downto 3) <= add_ln1226_fu_2870_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1234_2_fu_2362_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                add_ln1238_1_reg_4160 <= add_ln1238_1_fu_2461_p2;
                    add_ln54_7_reg_4165(63 downto 3) <= add_ln54_7_fu_2490_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                add_ln1238_1_reg_4160_pp3_iter1_reg <= add_ln1238_1_reg_4160;
                icmp_ln1234_2_reg_4146 <= icmp_ln1234_2_fu_2362_p2;
                icmp_ln1234_2_reg_4146_pp3_iter1_reg <= icmp_ln1234_2_reg_4146;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1234_2_reg_4146 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                    add_ln1238_reg_4181(63 downto 3) <= add_ln1238_fu_2562_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                add_ln1245_reg_4186 <= add_ln1245_fu_2601_p2;
                trunc_ln5_reg_4191 <= trunc_ln5_fu_2615_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                add_ln1254_reg_3988 <= add_ln1254_fu_1711_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln1275_reg_3906 <= add_ln1275_fu_1549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                add_ln13_reg_4350 <= add_ln13_fu_3526_p2;
                icmp_ln13_reg_4355 <= icmp_ln13_fu_3536_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1145_1_fu_1254_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    add_ln54_reg_3846(37 downto 3) <= add_ln54_fu_1293_p2(37 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                conv6_reg_3881 <= grp_fu_1175_p1;
                conv9_reg_3871 <= grp_fu_1169_p1;
                conv_reg_3876 <= grp_fu_1172_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1275_reg_3911 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001))) then
                dc_9_reg_3927 <= grp_fu_1182_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                dc_reg_3896 <= grp_fu_1156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                div_reg_3886 <= grp_fu_1164_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1145_1_reg_3842 <= icmp_ln1145_1_fu_1254_p2;
                icmp_ln1145_1_reg_3842_pp0_iter1_reg <= icmp_ln1145_1_reg_3842;
                row_list_size_reg_818_pp0_iter1_reg <= row_list_size_reg_818;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                icmp_ln1179_reg_4087 <= icmp_ln1179_fu_2171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1179_fu_2171_p2 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                icmp_ln1181_reg_4117 <= icmp_ln1181_fu_2235_p2;
                j_3_reg_4110 <= j_3_fu_2230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                icmp_ln1220_reg_4060 <= icmp_ln1220_fu_2063_p2;
                select_ln1205_reg_4054 <= select_ln1205_fu_2044_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1220_fu_2063_p2 = ap_const_lv1_0) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                icmp_ln1234_reg_4064 <= icmp_ln1234_fu_2069_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln1254_reg_3993 <= icmp_ln1254_fu_1717_p2;
                icmp_ln1254_reg_3993_pp2_iter1_reg <= icmp_ln1254_reg_3993;
                j_2_reg_914_pp2_iter1_reg <= j_2_reg_914;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln1254_reg_3993_pp2_iter2_reg <= icmp_ln1254_reg_3993_pp2_iter1_reg;
                j_2_reg_914_pp2_iter2_reg <= j_2_reg_914_pp2_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln1275_reg_3911 <= icmp_ln1275_fu_1555_p2;
                icmp_ln1275_reg_3911_pp1_iter1_reg <= icmp_ln1275_reg_3911;
                j_1_reg_866_pp1_iter1_reg <= j_1_reg_866;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1275_reg_3911 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln1277_1_reg_3947 <= icmp_ln1277_1_fu_1647_p2;
                icmp_ln1277_2_reg_3952 <= icmp_ln1277_2_fu_1653_p2;
                icmp_ln1277_3_reg_3957 <= icmp_ln1277_3_fu_1659_p2;
                icmp_ln1277_reg_3942 <= icmp_ln1277_fu_1641_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                icmp_ln22_reg_4483 <= icmp_ln22_fu_3649_p2;
                icmp_ln24_reg_4487 <= icmp_ln24_fu_3654_p2;
                temp_load_2_reg_4469 <= temp_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_3536_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                init_patch1_addr_3_reg_4389 <= zext_ln17_1_fu_3560_p1(8 - 1 downto 0);
                init_patch1_addr_4_reg_4394 <= zext_ln17_2_fu_3580_p1(8 - 1 downto 0);
                init_patch2_addr_3_reg_4399 <= zext_ln17_1_fu_3560_p1(8 - 1 downto 0);
                init_patch2_addr_4_reg_4404 <= zext_ln17_2_fu_3580_p1(8 - 1 downto 0);
                init_patch3_addr_3_reg_4409 <= zext_ln17_1_fu_3560_p1(8 - 1 downto 0);
                init_patch3_addr_4_reg_4414 <= zext_ln17_2_fu_3580_p1(8 - 1 downto 0);
                init_patch4_addr_3_reg_4419 <= zext_ln17_1_fu_3560_p1(8 - 1 downto 0);
                init_patch4_addr_4_reg_4424 <= zext_ln17_2_fu_3580_p1(8 - 1 downto 0);
                init_patch_addr_3_reg_4379 <= zext_ln17_1_fu_3560_p1(8 - 1 downto 0);
                init_patch_addr_4_reg_4384 <= zext_ln17_2_fu_3580_p1(8 - 1 downto 0);
                sub_ln17_reg_4359 <= sub_ln17_fu_3554_p2;
                trunc_ln17_reg_4364 <= trunc_ln17_fu_3570_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                init_patch1_addr_5_reg_4439 <= zext_ln17_3_fu_3595_p1(8 - 1 downto 0);
                init_patch2_addr_5_reg_4444 <= zext_ln17_3_fu_3595_p1(8 - 1 downto 0);
                init_patch3_addr_5_reg_4449 <= zext_ln17_3_fu_3595_p1(8 - 1 downto 0);
                init_patch4_addr_5_reg_4454 <= zext_ln17_3_fu_3595_p1(8 - 1 downto 0);
                init_patch_addr_5_reg_4434 <= zext_ln17_3_fu_3595_p1(8 - 1 downto 0);
                tmp_116_reg_4459 <= tmp_116_fu_3605_p7;
                tmp_117_reg_4464 <= tmp_117_fu_3620_p7;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                mul_ln1181_reg_4300 <= mul_ln1181_fu_3265_p2;
                sub_ln1181_reg_4290 <= sub_ln1181_fu_3209_p2;
                    sub_ln54_6_reg_4295(16 downto 11) <= sub_ln54_6_fu_3251_p2(16 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                mul_ln1234_reg_4136 <= mul_ln1234_fu_2332_p2;
                sub_ln1234_reg_4126 <= sub_ln1234_fu_2276_p2;
                    sub_ln54_9_reg_4131(16 downto 11) <= sub_ln54_9_fu_2318_p2(16 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                mul_reg_3891 <= grp_fu_1160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                result_V_reg_3901 <= result_V_fu_1541_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1181_2_fu_3295_p2 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                select_ln1181_1_reg_4314 <= select_ln1181_1_fu_3352_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1193_1_fu_2938_p2 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                select_ln1193_1_reg_4250 <= select_ln1193_1_fu_2969_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1222_1_fu_2654_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                select_ln1222_1_reg_4206 <= select_ln1222_1_fu_2685_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1234_2_fu_2362_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                select_ln1234_1_reg_4150 <= select_ln1234_1_fu_2419_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1145_fu_1200_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sext_ln1145_reg_3832(37 downto 11) <= sext_ln1145_fu_1244_p1(37 downto 11);
                trunc_ln54_reg_3827 <= trunc_ln54_fu_1206_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1179_fu_2171_p2 = ap_const_lv1_0) and (grp_fu_1189_p2 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                sub_ln1193_reg_4105 <= sub_ln1193_fu_2224_p2;
                    sub_ln54_7_reg_4100(16 downto 11) <= sub_ln54_7_fu_2206_p2(16 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_1189_p2 = ap_const_lv1_1) and (icmp_ln1220_fu_2063_p2 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                sub_ln1222_reg_4082 <= sub_ln1222_fu_2122_p2;
                    sub_ln54_8_reg_4077(16 downto 11) <= sub_ln54_8_fu_2104_p2(16 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1275_reg_3911 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                sub_ln1277_reg_3920 <= sub_ln1277_fu_1566_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1254_reg_3993_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                tmp_138_reg_4012 <= data_V_12_fu_1740_p1(62 downto 52);
                tmp_139_reg_4018 <= tmp_139_fu_1754_p1;
                tmp_140_reg_4023 <= data_V_13_fu_1758_p1(62 downto 52);
                tmp_141_reg_4029 <= tmp_141_fu_1772_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    zext_ln1141_reg_3683(2 downto 0) <= zext_ln1141_fu_1194_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                    zext_ln1254_reg_3982(25 downto 0) <= zext_ln1254_fu_1707_p1(25 downto 0);
            end if;
        end if;
    end process;
    zext_ln1141_reg_3683(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    sext_ln1145_reg_3832(10 downto 0) <= "00000010000";
    add_ln54_reg_3846(2 downto 0) <= "000";
    add_ln1147_reg_3856(2 downto 0) <= "000";
    zext_ln1254_reg_3982(63 downto 26) <= "00000000000000000000000000000000000000";
    sub_ln54_8_reg_4077(10 downto 0) <= "00000000000";
    sub_ln54_7_reg_4100(10 downto 0) <= "00000000000";
    sub_ln54_9_reg_4131(10 downto 0) <= "00000000000";
    add_ln54_7_reg_4165(2 downto 0) <= "000";
    add_ln1238_reg_4181(2 downto 0) <= "000";
    add_ln54_6_reg_4221(2 downto 0) <= "000";
    add_ln1226_reg_4236(2 downto 0) <= "000";
    add_ln54_5_reg_4265(2 downto 0) <= "000";
    add_ln1197_reg_4280(2 downto 0) <= "000";
    sub_ln54_6_reg_4295(10 downto 0) <= "00000000000";
    add_ln54_4_reg_4329(2 downto 0) <= "000";
    add_ln1185_reg_4345(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, leftRight_offset_read_read_fu_284_p2, icmp_ln1145_fu_1200_p2, ap_enable_reg_pp0_iter0, icmp_ln1145_1_fu_1254_p2, ap_enable_reg_pp1_iter0, icmp_ln1275_fu_1555_p2, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter0, icmp_ln1254_fu_1717_p2, ap_enable_reg_pp2_iter3, ap_CS_fsm_state31, icmp_ln1220_fu_2063_p2, icmp_ln1234_fu_2069_p2, grp_fu_1189_p2, icmp_ln1179_fu_2171_p2, icmp_ln1181_fu_2235_p2, ap_enable_reg_pp3_iter0, icmp_ln1234_2_fu_2362_p2, ap_enable_reg_pp4_iter0, icmp_ln1222_1_fu_2654_p2, ap_enable_reg_pp5_iter0, icmp_ln1193_1_fu_2938_p2, ap_enable_reg_pp6_iter0, icmp_ln1181_2_fu_3295_p2, ap_CS_fsm_state50, icmp_ln13_fu_3536_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_block_pp1_stage2_subdone, ap_block_pp1_stage1_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter2, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2, ap_block_pp6_stage0_subdone, ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln1145_fu_1200_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln1145_1_fu_1254_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln1145_1_fu_1254_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln1275_fu_1555_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln1275_fu_1555_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln1254_fu_1717_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln1254_fu_1717_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state31 => 
                if (((icmp_ln1181_fu_2235_p2 = ap_const_lv1_0) and (icmp_ln1179_fu_2171_p2 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                elsif (((icmp_ln1179_fu_2171_p2 = ap_const_lv1_0) and (grp_fu_1189_p2 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif (((grp_fu_1189_p2 = ap_const_lv1_1) and (icmp_ln1220_fu_2063_p2 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state31) and (((((icmp_ln1179_fu_2171_p2 = ap_const_lv1_0) and (grp_fu_1189_p2 = ap_const_lv1_0) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_1)) or ((icmp_ln1181_fu_2235_p2 = ap_const_lv1_1) and (icmp_ln1179_fu_2171_p2 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_1))) or ((grp_fu_1189_p2 = ap_const_lv1_0) and (icmp_ln1220_fu_2063_p2 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_0))) or ((icmp_ln1234_fu_2069_p2 = ap_const_lv1_1) and (icmp_ln1220_fu_2063_p2 = ap_const_lv1_0) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln1234_2_fu_2362_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln1234_2_fu_2362_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (icmp_ln1222_1_fu_2654_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) and not(((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (icmp_ln1222_1_fu_2654_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) or ((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (icmp_ln1193_1_fu_2938_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) and not(((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (icmp_ln1193_1_fu_2938_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) or ((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
            when ap_ST_fsm_pp6_stage0 => 
                if ((not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (icmp_ln1181_2_fu_3295_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) and not(((ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif ((((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (icmp_ln1181_2_fu_3295_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) or ((ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((icmp_ln13_fu_3536_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    GDarray_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp5_stage0, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp3_iter1, ap_enable_reg_pp4_iter1, ap_enable_reg_pp5_iter1, ap_enable_reg_pp6_iter1, ap_block_pp0_stage0, ap_block_pp3_stage0, ap_block_pp4_stage0, ap_block_pp5_stage0, ap_block_pp6_stage0, zext_ln1147_3_fu_1321_p1, zext_ln1238_5_fu_2521_p1, zext_ln1226_5_fu_2829_p1, zext_ln1197_5_fu_3113_p1, zext_ln1185_5_fu_3454_p1)
    begin
        if (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            GDarray_address0 <= zext_ln1185_5_fu_3454_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            GDarray_address0 <= zext_ln1197_5_fu_3113_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            GDarray_address0 <= zext_ln1226_5_fu_2829_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            GDarray_address0 <= zext_ln1238_5_fu_2521_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            GDarray_address0 <= zext_ln1147_3_fu_1321_p1(11 - 1 downto 0);
        else 
            GDarray_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    GDarray_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp3_iter1, ap_enable_reg_pp4_iter1, ap_enable_reg_pp5_iter1, ap_enable_reg_pp6_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001)) or ((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            GDarray_ce0 <= ap_const_logic_1;
        else 
            GDarray_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    GDn_points_address0 <= zext_ln1141_fu_1194_p1(3 - 1 downto 0);

    GDn_points_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            GDn_points_ce0 <= ap_const_logic_1;
        else 
            GDn_points_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1147_1_fu_1248_p2 <= std_logic_vector(unsigned(ap_phi_mux_row_list_size_phi_fu_822_p4) + unsigned(ap_const_lv31_1));
    add_ln1147_fu_1362_p2 <= std_logic_vector(unsigned(sub_ln1147_fu_1356_p2) + unsigned(sext_ln1147_fu_1298_p1));
    add_ln1151_fu_1400_p2 <= std_logic_vector(unsigned(y_reg_3813) + unsigned(ap_const_lv25_1B3B4C0));
    add_ln1179_1_fu_2165_p2 <= std_logic_vector(signed(right_bound_reg_902) + signed(ap_const_lv32_1));
    add_ln1179_fu_2160_p2 <= std_logic_vector(signed(j_4_fu_2152_p3) + signed(original_ppl));
    add_ln1181_1_fu_3306_p2 <= std_logic_vector(unsigned(j_5_reg_1125) + unsigned(ap_const_lv64_1));
    add_ln1181_2_fu_3271_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_1103) + unsigned(ap_const_lv66_1));
    add_ln1181_fu_3199_p2 <= std_logic_vector(signed(sext_ln1181_3_fu_3195_p1) + signed(ap_const_lv33_1));
    add_ln1183_fu_3429_p2 <= std_logic_vector(unsigned(select_ln1170_fu_3318_p3) + unsigned(ap_const_lv2_1));
    add_ln1185_1_fu_3394_p2 <= std_logic_vector(unsigned(sub_ln1185_1_fu_3376_p2) + unsigned(zext_ln1185_fu_3390_p1));
    add_ln1185_fu_3495_p2 <= std_logic_vector(unsigned(sub_ln1185_fu_3489_p2) + unsigned(add_ln54_4_reg_4329));
    add_ln1187_fu_3300_p2 <= std_logic_vector(unsigned(ap_phi_mux_temp_size_phi_fu_1118_p4) + unsigned(ap_const_lv64_1));
    add_ln1193_1_fu_2902_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_1061) + unsigned(ap_const_lv33_1));
    add_ln1193_fu_2949_p2 <= std_logic_vector(unsigned(j_6_reg_1083) + unsigned(ap_const_lv33_1));
    add_ln1195_fu_3084_p2 <= std_logic_vector(unsigned(select_ln1193_fu_2961_p3) + unsigned(ap_const_lv2_1));
    add_ln1197_1_fu_3049_p2 <= std_logic_vector(unsigned(sub_ln1197_1_fu_2993_p2) + unsigned(zext_ln1197_fu_3045_p1));
    add_ln1197_fu_3154_p2 <= std_logic_vector(unsigned(sub_ln1197_fu_3148_p2) + unsigned(sext_ln1197_fu_3090_p1));
    add_ln1199_fu_2943_p2 <= std_logic_vector(unsigned(ap_phi_mux_temp_size_1_phi_fu_1076_p4) + unsigned(ap_const_lv31_1));
    add_ln1205_fu_2014_p2 <= std_logic_vector(unsigned(row_list_size_assign_reg_830) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln1222_1_fu_2618_p2 <= std_logic_vector(unsigned(indvar_flatten15_reg_1019) + unsigned(ap_const_lv33_1));
    add_ln1222_fu_2665_p2 <= std_logic_vector(unsigned(j_7_reg_1041) + unsigned(ap_const_lv33_1));
    add_ln1224_fu_2800_p2 <= std_logic_vector(unsigned(select_ln1222_fu_2677_p3) + unsigned(ap_const_lv2_1));
    add_ln1226_1_fu_2765_p2 <= std_logic_vector(unsigned(sub_ln1226_1_fu_2709_p2) + unsigned(zext_ln1226_fu_2761_p1));
    add_ln1226_fu_2870_p2 <= std_logic_vector(unsigned(sub_ln1226_fu_2864_p2) + unsigned(sext_ln1226_fu_2806_p1));
    add_ln1228_fu_2659_p2 <= std_logic_vector(unsigned(ap_phi_mux_temp_size_2_phi_fu_1034_p4) + unsigned(ap_const_lv31_1));
    add_ln1234_1_fu_2266_p2 <= std_logic_vector(signed(sext_ln1234_3_fu_2263_p1) + signed(ap_const_lv33_1));
    add_ln1234_2_fu_2373_p2 <= std_logic_vector(unsigned(j_8_reg_972) + unsigned(ap_const_lv64_1));
    add_ln1234_3_fu_2338_p2 <= std_logic_vector(unsigned(indvar_flatten23_reg_950) + unsigned(ap_const_lv66_1));
    add_ln1234_fu_2246_p2 <= std_logic_vector(unsigned(sub_ln1234_1_fu_2241_p2) + unsigned(select_ln1205_reg_4054));
    add_ln1236_fu_2496_p2 <= std_logic_vector(unsigned(select_ln1170_2_fu_2385_p3) + unsigned(ap_const_lv2_1));
    add_ln1238_1_fu_2461_p2 <= std_logic_vector(unsigned(sub_ln1238_1_fu_2443_p2) + unsigned(zext_ln1238_fu_2457_p1));
    add_ln1238_fu_2562_p2 <= std_logic_vector(unsigned(sub_ln1238_fu_2556_p2) + unsigned(add_ln54_7_reg_4165));
    add_ln1240_fu_2367_p2 <= std_logic_vector(unsigned(ap_phi_mux_temp_size_3_phi_fu_965_p4) + unsigned(ap_const_lv64_1));
    add_ln1245_fu_2601_p2 <= std_logic_vector(unsigned(p_read1) + unsigned(ap_const_lv32_1));
    add_ln1254_fu_1711_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_2_phi_fu_918_p4) + unsigned(ap_const_lv32_1));
    add_ln1256_fu_1728_p2 <= std_logic_vector(unsigned(row_list_q0) + unsigned(zext_ln1254_reg_3982));
    add_ln1275_fu_1549_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_1_phi_fu_870_p4) + unsigned(ap_const_lv32_1));
    add_ln13_fu_3526_p2 <= std_logic_vector(unsigned(i_10_reg_1145) + unsigned(ap_const_lv8_1));
    add_ln17_1_fu_3590_p2 <= std_logic_vector(unsigned(sub_ln17_reg_4359) + unsigned(ap_const_lv10_2));
    add_ln17_fu_3574_p2 <= std_logic_vector(unsigned(sub_ln17_fu_3554_p2) + unsigned(ap_const_lv10_1));
    add_ln20_fu_3635_p2 <= std_logic_vector(unsigned(trunc_ln17_reg_4364) + unsigned(ap_const_lv8_30));
    add_ln341_fu_1453_p2 <= std_logic_vector(unsigned(zext_ln341_fu_1449_p1) + unsigned(ap_const_lv9_181));
    add_ln510_1_fu_1911_p2 <= std_logic_vector(unsigned(zext_ln510_1_fu_1908_p1) + unsigned(ap_const_lv12_C01));
    add_ln510_fu_1792_p2 <= std_logic_vector(unsigned(zext_ln510_fu_1789_p1) + unsigned(ap_const_lv12_C01));
    add_ln54_4_fu_3423_p2 <= std_logic_vector(signed(sext_ln54_13_fu_3419_p1) + signed(select_ln1170_1_fu_3344_p3));
    add_ln54_5_fu_3078_p2 <= std_logic_vector(signed(sext_ln54_16_fu_3074_p1) + signed(select_ln1193_2_fu_3029_p3));
    add_ln54_6_fu_2794_p2 <= std_logic_vector(signed(sext_ln54_17_fu_2790_p1) + signed(select_ln1222_2_fu_2745_p3));
    add_ln54_7_fu_2490_p2 <= std_logic_vector(signed(sext_ln54_18_fu_2486_p1) + signed(select_ln1170_3_fu_2411_p3));
    add_ln54_fu_1293_p2 <= std_logic_vector(signed(sext_ln54_fu_1289_p1) + signed(sext_ln1145_reg_3832));
    and_ln1174_fu_2140_p2 <= (icmp_ln1174_fu_2128_p2 and icmp_ln1174_1_fu_2134_p2);
    and_ln1205_fu_2032_p2 <= (icmp_ln1210_fu_2026_p2 and icmp_ln1205_fu_2020_p2);
    and_ln1277_1_fu_1679_p2 <= (grp_fu_1178_p2 and and_ln1277_fu_1673_p2);
    and_ln1277_fu_1673_p2 <= (or_ln1277_fu_1665_p2 and or_ln1277_1_fu_1669_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(17);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(18);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(19);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(22);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(25);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(27);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(29);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(32);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(20);
    ap_CS_fsm_state26 <= ap_CS_fsm(21);
    ap_CS_fsm_state31 <= ap_CS_fsm(23);
    ap_CS_fsm_state32 <= ap_CS_fsm(24);
    ap_CS_fsm_state36 <= ap_CS_fsm(26);
    ap_CS_fsm_state40 <= ap_CS_fsm(28);
    ap_CS_fsm_state44 <= ap_CS_fsm(30);
    ap_CS_fsm_state45 <= ap_CS_fsm(31);
    ap_CS_fsm_state49 <= ap_CS_fsm(33);
    ap_CS_fsm_state50 <= ap_CS_fsm(34);
    ap_CS_fsm_state51 <= ap_CS_fsm(35);
    ap_CS_fsm_state52 <= ap_CS_fsm(36);
    ap_CS_fsm_state53 <= ap_CS_fsm(37);
    ap_CS_fsm_state54 <= ap_CS_fsm(38);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1046_assign_proc : process(leftRight_offset_read_read_fu_284_p2, icmp_ln1179_reg_4087, icmp_ln1181_reg_4117)
    begin
                ap_condition_1046 <= ((icmp_ln1181_reg_4117 = ap_const_lv1_0) and (icmp_ln1179_reg_4087 = ap_const_lv1_1) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_1));
    end process;


    ap_condition_1052_assign_proc : process(leftRight_offset_read_read_fu_284_p2, icmp_ln1220_reg_4060, icmp_ln1234_reg_4064)
    begin
                ap_condition_1052 <= ((icmp_ln1234_reg_4064 = ap_const_lv1_0) and (icmp_ln1220_reg_4060 = ap_const_lv1_0) and (leftRight_offset_read_read_fu_284_p2 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln1145_1_fu_1254_p2)
    begin
        if ((icmp_ln1145_1_fu_1254_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state20_assign_proc : process(icmp_ln1275_fu_1555_p2)
    begin
        if ((icmp_ln1275_fu_1555_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state20 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state27_assign_proc : process(icmp_ln1254_fu_1717_p2)
    begin
        if ((icmp_ln1254_fu_1717_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state27 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state27 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state33_assign_proc : process(icmp_ln1234_2_fu_2362_p2)
    begin
        if ((icmp_ln1234_2_fu_2362_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state33 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state33 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state37_assign_proc : process(icmp_ln1222_1_fu_2654_p2)
    begin
        if ((icmp_ln1222_1_fu_2654_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state37 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state37 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state41_assign_proc : process(icmp_ln1193_1_fu_2938_p2)
    begin
        if ((icmp_ln1193_1_fu_2938_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state41 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state41 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state46_assign_proc : process(icmp_ln1181_2_fu_3295_p2)
    begin
        if ((icmp_ln1181_2_fu_3295_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state46 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state46 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state54)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state54) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2)
    begin
        if (((ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter2)
    begin
        if (((ap_enable_reg_pp6_iter2 = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_1_phi_fu_870_p4_assign_proc : process(j_1_reg_866, ap_CS_fsm_pp1_stage0, add_ln1275_reg_3906, icmp_ln1275_reg_3911, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln1275_reg_3911 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_j_1_phi_fu_870_p4 <= add_ln1275_reg_3906;
        else 
            ap_phi_mux_j_1_phi_fu_870_p4 <= j_1_reg_866;
        end if; 
    end process;


    ap_phi_mux_j_2_phi_fu_918_p4_assign_proc : process(j_2_reg_914, ap_CS_fsm_pp2_stage0, add_ln1254_reg_3988, icmp_ln1254_reg_3993, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln1254_reg_3993 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_j_2_phi_fu_918_p4 <= add_ln1254_reg_3988;
        else 
            ap_phi_mux_j_2_phi_fu_918_p4 <= j_2_reg_914;
        end if; 
    end process;


    ap_phi_mux_row_list_size_phi_fu_822_p4_assign_proc : process(row_list_size_reg_818, ap_CS_fsm_pp0_stage0, add_ln1147_1_reg_3837, icmp_ln1145_1_reg_3842, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1145_1_reg_3842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_row_list_size_phi_fu_822_p4 <= add_ln1147_1_reg_3837;
        else 
            ap_phi_mux_row_list_size_phi_fu_822_p4 <= row_list_size_reg_818;
        end if; 
    end process;


    ap_phi_mux_temp_size_1_phi_fu_1076_p4_assign_proc : process(temp_size_1_reg_1072, ap_CS_fsm_pp5_stage0, icmp_ln1193_1_reg_4246, select_ln1193_1_reg_4250, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln1193_1_reg_4246 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            ap_phi_mux_temp_size_1_phi_fu_1076_p4 <= select_ln1193_1_reg_4250;
        else 
            ap_phi_mux_temp_size_1_phi_fu_1076_p4 <= temp_size_1_reg_1072;
        end if; 
    end process;


    ap_phi_mux_temp_size_2_phi_fu_1034_p4_assign_proc : process(temp_size_2_reg_1030, ap_CS_fsm_pp4_stage0, icmp_ln1222_1_reg_4202, select_ln1222_1_reg_4206, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln1222_1_reg_4202 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            ap_phi_mux_temp_size_2_phi_fu_1034_p4 <= select_ln1222_1_reg_4206;
        else 
            ap_phi_mux_temp_size_2_phi_fu_1034_p4 <= temp_size_2_reg_1030;
        end if; 
    end process;


    ap_phi_mux_temp_size_3_phi_fu_965_p4_assign_proc : process(temp_size_3_reg_961, ap_CS_fsm_pp3_stage0, icmp_ln1234_2_reg_4146, select_ln1234_1_reg_4150, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln1234_2_reg_4146 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            ap_phi_mux_temp_size_3_phi_fu_965_p4 <= select_ln1234_1_reg_4150;
        else 
            ap_phi_mux_temp_size_3_phi_fu_965_p4 <= temp_size_3_reg_961;
        end if; 
    end process;


    ap_phi_mux_temp_size_4_phi_fu_996_p16_assign_proc : process(ap_CS_fsm_state36, trunc_ln1245_fu_2597_p1, temp_size_4_reg_992, trunc_ln1245_1_fu_2593_p1, ap_condition_1046, ap_condition_1052)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
            if ((ap_const_boolean_1 = ap_condition_1052)) then 
                ap_phi_mux_temp_size_4_phi_fu_996_p16 <= trunc_ln1245_1_fu_2593_p1;
            elsif ((ap_const_boolean_1 = ap_condition_1046)) then 
                ap_phi_mux_temp_size_4_phi_fu_996_p16 <= trunc_ln1245_fu_2597_p1;
            else 
                ap_phi_mux_temp_size_4_phi_fu_996_p16 <= temp_size_4_reg_992;
            end if;
        else 
            ap_phi_mux_temp_size_4_phi_fu_996_p16 <= temp_size_4_reg_992;
        end if; 
    end process;


    ap_phi_mux_temp_size_phi_fu_1118_p4_assign_proc : process(temp_size_reg_1114, ap_CS_fsm_pp6_stage0, icmp_ln1181_2_reg_4310, select_ln1181_1_reg_4314, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0)
    begin
        if (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (icmp_ln1181_2_reg_4310 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            ap_phi_mux_temp_size_phi_fu_1118_p4 <= select_ln1181_1_reg_4314;
        else 
            ap_phi_mux_temp_size_phi_fu_1118_p4 <= temp_size_reg_1114;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= original_ppl;
    ap_return_1 <= add_ln1245_reg_4186;
    data_V_10_fu_1572_p1 <= dc_9_reg_3927;
    data_V_11_fu_1596_p1 <= grp_fu_1182_p1;
    data_V_12_fu_1740_p1 <= grp_fu_1182_p1;
    data_V_13_fu_1758_p1 <= grp_fu_1186_p1;
    data_V_fu_1410_p1 <= dc_reg_3896;
    grp_fu_1169_p0 <= std_logic_vector(unsigned(z_top) - unsigned(apexZ0));
    grp_fu_1172_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1151_fu_1400_p2),64));
    grp_fu_1178_p0 <= p_Result_9_fu_1583_p3;
    grp_fu_1178_p1 <= p_Result_10_fu_1608_p3;

    grp_fu_1182_p0_assign_proc : process(p_x_assign_7_reg_878, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp1_iter0, sub_ln1277_fu_1566_p2, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage2, add_ln1256_fu_1728_p2, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, ap_block_pp1_stage1, ap_block_pp1_stage2)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_fu_1182_p0 <= add_ln1256_fu_1728_p2;
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2))) then 
            grp_fu_1182_p0 <= p_x_assign_7_reg_878;
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1))) then 
            grp_fu_1182_p0 <= sub_ln1277_fu_1566_p2;
        else 
            grp_fu_1182_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1186_p0 <= std_logic_vector(unsigned(row_list_q0) - unsigned(zext_ln1254_reg_3982));
    grp_fu_1189_p2 <= "1" when (signed(original_ppl) > signed(ap_const_lv32_0)) else "0";
    i_10_cast_fu_3532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_10_reg_1145),32));
    icmp_ln1145_1_fu_1254_p2 <= "1" when (ap_phi_mux_row_list_size_phi_fu_822_p4 = trunc_ln54_reg_3827) else "0";
    icmp_ln1145_fu_1200_p2 <= "1" when (signed(GDn_points_q0) > signed(ap_const_lv32_0)) else "0";
    icmp_ln1174_1_fu_2134_p2 <= "1" when (signed(start_value_reg_854) > signed(ap_const_lv64_A)) else "0";
    icmp_ln1174_fu_2128_p2 <= "0" when (start_index_reg_842 = ap_const_lv32_0) else "1";
    icmp_ln1179_fu_2171_p2 <= "1" when (signed(add_ln1179_fu_2160_p2) > signed(add_ln1179_1_fu_2165_p2)) else "0";
    icmp_ln1181_1_fu_3215_p2 <= "0" when (add_ln1181_fu_3199_p2 = sext_ln1181_1_fu_3189_p1) else "1";
    icmp_ln1181_2_fu_3295_p2 <= "1" when (indvar_flatten_reg_1103 = mul_ln1181_reg_4300) else "0";
    icmp_ln1181_fu_2235_p2 <= "1" when (signed(j_3_fu_2230_p2) > signed(right_bound_reg_902)) else "0";
    icmp_ln1183_fu_3312_p2 <= "1" when (z_reg_1134 = ap_const_lv2_3) else "0";
    icmp_ln1193_1_fu_2938_p2 <= "1" when (indvar_flatten7_reg_1061 = sub_ln1193_reg_4105) else "0";
    icmp_ln1195_fu_2955_p2 <= "1" when (z_1_reg_1092 = ap_const_lv2_3) else "0";
    icmp_ln1205_fu_2020_p2 <= "0" when (start_index_reg_842 = add_ln1205_fu_2014_p2) else "1";
    icmp_ln1210_fu_2026_p2 <= "1" when (signed(start_value_reg_854) < signed(ap_const_lv64_FFFFFFFFFFFFFFF6)) else "0";
    icmp_ln1220_fu_2063_p2 <= "1" when (signed(j_10_fu_2057_p2) < signed(j_9_reg_890)) else "0";
    icmp_ln1222_1_fu_2654_p2 <= "1" when (indvar_flatten15_reg_1019 = sub_ln1222_reg_4082) else "0";
    icmp_ln1224_fu_2671_p2 <= "1" when (z_2_reg_1050 = ap_const_lv2_3) else "0";
    icmp_ln1234_1_fu_2282_p2 <= "0" when (add_ln1234_1_fu_2266_p2 = sext_ln1234_1_fu_2255_p1) else "1";
    icmp_ln1234_2_fu_2362_p2 <= "1" when (indvar_flatten23_reg_950 = mul_ln1234_reg_4136) else "0";
    icmp_ln1234_fu_2069_p2 <= "1" when (signed(j_10_fu_2057_p2) > signed(select_ln1205_fu_2044_p3)) else "0";
    icmp_ln1236_fu_2379_p2 <= "1" when (z_3_reg_981 = ap_const_lv2_3) else "0";
    icmp_ln1254_fu_1717_p2 <= "1" when (ap_phi_mux_j_2_phi_fu_918_p4 = row_list_size_assign_reg_830) else "0";
    icmp_ln1256_fu_1873_p2 <= "1" when (signed(val_4_fu_1865_p3) < signed(lbVal_reg_938)) else "0";
    icmp_ln1262_fu_1992_p2 <= "1" when (signed(val_5_fu_1984_p3) < signed(rbVal_reg_926)) else "0";
    icmp_ln1275_fu_1555_p2 <= "1" when (ap_phi_mux_j_1_phi_fu_870_p4 = row_list_size_assign_reg_830) else "0";
    icmp_ln1277_1_fu_1647_p2 <= "1" when (trunc_ln1277_fu_1579_p1 = ap_const_lv52_0) else "0";
    icmp_ln1277_2_fu_1653_p2 <= "0" when (tmp_108_fu_1631_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln1277_3_fu_1659_p2 <= "1" when (trunc_ln1277_1_fu_1604_p1 = ap_const_lv52_0) else "0";
    icmp_ln1277_fu_1641_p2 <= "0" when (tmp_107_fu_1621_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln13_fu_3536_p2 <= "1" when (i_10_cast_fu_3532_p1 = temp_size_4_reg_992) else "0";
    icmp_ln22_fu_3649_p2 <= "1" when (signed(temp_q1) < signed(tmp_116_reg_4459)) else "0";
    icmp_ln24_fu_3654_p2 <= "1" when (signed(temp_q1) > signed(tmp_117_reg_4464)) else "0";

    init_patch1_address0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state50, init_patch1_addr_3_reg_4389, ap_CS_fsm_state51, init_patch1_addr_5_reg_4439, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            init_patch1_address0 <= init_patch1_addr_5_reg_4439;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            init_patch1_address0 <= init_patch1_addr_3_reg_4389;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            init_patch1_address0 <= ap_const_lv64_66(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            init_patch1_address0 <= ap_const_lv64_63(8 - 1 downto 0);
        else 
            init_patch1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    init_patch1_address1_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state50, init_patch1_addr_4_reg_4394, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, zext_ln20_fu_3640_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            init_patch1_address1 <= zext_ln20_fu_3640_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            init_patch1_address1 <= init_patch1_addr_4_reg_4394;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            init_patch1_address1 <= ap_const_lv64_66(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            init_patch1_address1 <= ap_const_lv64_60(8 - 1 downto 0);
        else 
            init_patch1_address1 <= "XXXXXXXX";
        end if; 
    end process;


    init_patch1_ce0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            init_patch1_ce0 <= ap_const_logic_1;
        else 
            init_patch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch1_ce1_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            init_patch1_ce1 <= ap_const_logic_1;
        else 
            init_patch1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch1_d0_assign_proc : process(temp_q1, ap_CS_fsm_state36, ap_CS_fsm_state51, temp_load_2_reg_4469, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            init_patch1_d0 <= temp_load_2_reg_4469;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            init_patch1_d0 <= temp_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            init_patch1_d0 <= ap_const_lv64_8000000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            init_patch1_d0 <= ap_const_lv64_7FFFFFFFFFFFFFFF;
        else 
            init_patch1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    init_patch1_d1_assign_proc : process(temp_q0, temp_q1, ap_CS_fsm_state36, ap_CS_fsm_state51, temp_load_2_reg_4469, ap_CS_fsm_state52, ap_CS_fsm_state53, sext_ln5_fu_2606_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            init_patch1_d1 <= temp_load_2_reg_4469;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            init_patch1_d1 <= temp_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            init_patch1_d1 <= temp_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            init_patch1_d1 <= sext_ln5_fu_2606_p1;
        else 
            init_patch1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    init_patch1_we0_assign_proc : process(ap_CS_fsm_state36, trunc_ln5_fu_2615_p1, trunc_ln5_reg_4191, icmp_ln13_reg_4355, ap_CS_fsm_state51, ap_CS_fsm_state52, icmp_ln22_reg_4483, ap_CS_fsm_state53, ap_CS_fsm_state49)
    begin
        if ((((trunc_ln5_reg_4191 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((trunc_ln5_reg_4191 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((trunc_ln5_reg_4191 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((trunc_ln5_fu_2615_p1 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((icmp_ln22_reg_4483 = ap_const_lv1_1) and (icmp_ln13_reg_4355 = ap_const_lv1_0) and (trunc_ln5_reg_4191 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state53)))) then 
            init_patch1_we0 <= ap_const_logic_1;
        else 
            init_patch1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch1_we1_assign_proc : process(ap_CS_fsm_state36, trunc_ln5_fu_2615_p1, trunc_ln5_reg_4191, icmp_ln13_reg_4355, ap_CS_fsm_state51, ap_CS_fsm_state52, icmp_ln24_reg_4487, ap_CS_fsm_state53)
    begin
        if ((((trunc_ln5_reg_4191 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((trunc_ln5_reg_4191 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((trunc_ln5_fu_2615_p1 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((icmp_ln24_reg_4487 = ap_const_lv1_1) and (icmp_ln13_reg_4355 = ap_const_lv1_0) and (trunc_ln5_reg_4191 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state53)))) then 
            init_patch1_we1 <= ap_const_logic_1;
        else 
            init_patch1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch2_address0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state50, init_patch2_addr_3_reg_4399, ap_CS_fsm_state51, init_patch2_addr_5_reg_4444, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            init_patch2_address0 <= init_patch2_addr_5_reg_4444;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            init_patch2_address0 <= init_patch2_addr_3_reg_4399;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            init_patch2_address0 <= ap_const_lv64_66(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            init_patch2_address0 <= ap_const_lv64_63(8 - 1 downto 0);
        else 
            init_patch2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    init_patch2_address1_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state50, init_patch2_addr_4_reg_4404, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, zext_ln20_fu_3640_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            init_patch2_address1 <= zext_ln20_fu_3640_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            init_patch2_address1 <= init_patch2_addr_4_reg_4404;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            init_patch2_address1 <= ap_const_lv64_66(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            init_patch2_address1 <= ap_const_lv64_60(8 - 1 downto 0);
        else 
            init_patch2_address1 <= "XXXXXXXX";
        end if; 
    end process;


    init_patch2_ce0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            init_patch2_ce0 <= ap_const_logic_1;
        else 
            init_patch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch2_ce1_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            init_patch2_ce1 <= ap_const_logic_1;
        else 
            init_patch2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch2_d0_assign_proc : process(temp_q1, ap_CS_fsm_state36, ap_CS_fsm_state51, temp_load_2_reg_4469, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            init_patch2_d0 <= temp_load_2_reg_4469;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            init_patch2_d0 <= temp_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            init_patch2_d0 <= ap_const_lv64_8000000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            init_patch2_d0 <= ap_const_lv64_7FFFFFFFFFFFFFFF;
        else 
            init_patch2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    init_patch2_d1_assign_proc : process(temp_q0, temp_q1, ap_CS_fsm_state36, ap_CS_fsm_state51, temp_load_2_reg_4469, ap_CS_fsm_state52, ap_CS_fsm_state53, sext_ln5_fu_2606_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            init_patch2_d1 <= temp_load_2_reg_4469;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            init_patch2_d1 <= temp_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            init_patch2_d1 <= temp_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            init_patch2_d1 <= sext_ln5_fu_2606_p1;
        else 
            init_patch2_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    init_patch2_we0_assign_proc : process(ap_CS_fsm_state36, trunc_ln5_fu_2615_p1, trunc_ln5_reg_4191, icmp_ln13_reg_4355, ap_CS_fsm_state51, ap_CS_fsm_state52, icmp_ln22_reg_4483, ap_CS_fsm_state53, ap_CS_fsm_state49)
    begin
        if ((((trunc_ln5_reg_4191 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((trunc_ln5_reg_4191 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((trunc_ln5_reg_4191 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((trunc_ln5_fu_2615_p1 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((icmp_ln22_reg_4483 = ap_const_lv1_1) and (icmp_ln13_reg_4355 = ap_const_lv1_0) and (trunc_ln5_reg_4191 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state53)))) then 
            init_patch2_we0 <= ap_const_logic_1;
        else 
            init_patch2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch2_we1_assign_proc : process(ap_CS_fsm_state36, trunc_ln5_fu_2615_p1, trunc_ln5_reg_4191, icmp_ln13_reg_4355, ap_CS_fsm_state51, ap_CS_fsm_state52, icmp_ln24_reg_4487, ap_CS_fsm_state53)
    begin
        if ((((trunc_ln5_reg_4191 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((trunc_ln5_reg_4191 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((trunc_ln5_fu_2615_p1 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((icmp_ln24_reg_4487 = ap_const_lv1_1) and (icmp_ln13_reg_4355 = ap_const_lv1_0) and (trunc_ln5_reg_4191 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state53)))) then 
            init_patch2_we1 <= ap_const_logic_1;
        else 
            init_patch2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch3_address0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state50, init_patch3_addr_3_reg_4409, ap_CS_fsm_state51, init_patch3_addr_5_reg_4449, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            init_patch3_address0 <= init_patch3_addr_5_reg_4449;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            init_patch3_address0 <= init_patch3_addr_3_reg_4409;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            init_patch3_address0 <= ap_const_lv64_66(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            init_patch3_address0 <= ap_const_lv64_63(8 - 1 downto 0);
        else 
            init_patch3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    init_patch3_address1_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state50, init_patch3_addr_4_reg_4414, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, zext_ln20_fu_3640_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            init_patch3_address1 <= zext_ln20_fu_3640_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            init_patch3_address1 <= init_patch3_addr_4_reg_4414;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            init_patch3_address1 <= ap_const_lv64_66(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            init_patch3_address1 <= ap_const_lv64_60(8 - 1 downto 0);
        else 
            init_patch3_address1 <= "XXXXXXXX";
        end if; 
    end process;


    init_patch3_ce0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            init_patch3_ce0 <= ap_const_logic_1;
        else 
            init_patch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch3_ce1_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            init_patch3_ce1 <= ap_const_logic_1;
        else 
            init_patch3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch3_d0_assign_proc : process(temp_q1, ap_CS_fsm_state36, ap_CS_fsm_state51, temp_load_2_reg_4469, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            init_patch3_d0 <= temp_load_2_reg_4469;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            init_patch3_d0 <= temp_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            init_patch3_d0 <= ap_const_lv64_8000000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            init_patch3_d0 <= ap_const_lv64_7FFFFFFFFFFFFFFF;
        else 
            init_patch3_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    init_patch3_d1_assign_proc : process(temp_q0, temp_q1, ap_CS_fsm_state36, ap_CS_fsm_state51, temp_load_2_reg_4469, ap_CS_fsm_state52, ap_CS_fsm_state53, sext_ln5_fu_2606_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            init_patch3_d1 <= temp_load_2_reg_4469;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            init_patch3_d1 <= temp_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            init_patch3_d1 <= temp_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            init_patch3_d1 <= sext_ln5_fu_2606_p1;
        else 
            init_patch3_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    init_patch3_we0_assign_proc : process(ap_CS_fsm_state36, trunc_ln5_fu_2615_p1, trunc_ln5_reg_4191, icmp_ln13_reg_4355, ap_CS_fsm_state51, ap_CS_fsm_state52, icmp_ln22_reg_4483, ap_CS_fsm_state53, ap_CS_fsm_state49)
    begin
        if ((((icmp_ln22_reg_4483 = ap_const_lv1_1) and (icmp_ln13_reg_4355 = ap_const_lv1_0) and (trunc_ln5_reg_4191 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((trunc_ln5_reg_4191 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((trunc_ln5_reg_4191 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((trunc_ln5_reg_4191 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((trunc_ln5_fu_2615_p1 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state36)))) then 
            init_patch3_we0 <= ap_const_logic_1;
        else 
            init_patch3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch3_we1_assign_proc : process(ap_CS_fsm_state36, trunc_ln5_fu_2615_p1, trunc_ln5_reg_4191, icmp_ln13_reg_4355, ap_CS_fsm_state51, ap_CS_fsm_state52, icmp_ln24_reg_4487, ap_CS_fsm_state53)
    begin
        if ((((icmp_ln24_reg_4487 = ap_const_lv1_1) and (icmp_ln13_reg_4355 = ap_const_lv1_0) and (trunc_ln5_reg_4191 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((trunc_ln5_reg_4191 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((trunc_ln5_reg_4191 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((trunc_ln5_fu_2615_p1 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state36)))) then 
            init_patch3_we1 <= ap_const_logic_1;
        else 
            init_patch3_we1 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch4_address0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state50, init_patch4_addr_3_reg_4419, ap_CS_fsm_state51, init_patch4_addr_5_reg_4454, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            init_patch4_address0 <= init_patch4_addr_5_reg_4454;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            init_patch4_address0 <= init_patch4_addr_3_reg_4419;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            init_patch4_address0 <= ap_const_lv64_66(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            init_patch4_address0 <= ap_const_lv64_63(8 - 1 downto 0);
        else 
            init_patch4_address0 <= "XXXXXXXX";
        end if; 
    end process;


    init_patch4_address1_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state50, init_patch4_addr_4_reg_4424, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, zext_ln20_fu_3640_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            init_patch4_address1 <= zext_ln20_fu_3640_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            init_patch4_address1 <= init_patch4_addr_4_reg_4424;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            init_patch4_address1 <= ap_const_lv64_66(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            init_patch4_address1 <= ap_const_lv64_60(8 - 1 downto 0);
        else 
            init_patch4_address1 <= "XXXXXXXX";
        end if; 
    end process;


    init_patch4_ce0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            init_patch4_ce0 <= ap_const_logic_1;
        else 
            init_patch4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch4_ce1_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            init_patch4_ce1 <= ap_const_logic_1;
        else 
            init_patch4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch4_d0_assign_proc : process(temp_q1, ap_CS_fsm_state36, ap_CS_fsm_state51, temp_load_2_reg_4469, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            init_patch4_d0 <= temp_load_2_reg_4469;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            init_patch4_d0 <= temp_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            init_patch4_d0 <= ap_const_lv64_8000000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            init_patch4_d0 <= ap_const_lv64_7FFFFFFFFFFFFFFF;
        else 
            init_patch4_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    init_patch4_d1_assign_proc : process(temp_q0, temp_q1, ap_CS_fsm_state36, ap_CS_fsm_state51, temp_load_2_reg_4469, ap_CS_fsm_state52, ap_CS_fsm_state53, sext_ln5_fu_2606_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            init_patch4_d1 <= temp_load_2_reg_4469;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            init_patch4_d1 <= temp_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            init_patch4_d1 <= temp_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            init_patch4_d1 <= sext_ln5_fu_2606_p1;
        else 
            init_patch4_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    init_patch4_we0_assign_proc : process(ap_CS_fsm_state36, trunc_ln5_fu_2615_p1, trunc_ln5_reg_4191, icmp_ln13_reg_4355, ap_CS_fsm_state51, ap_CS_fsm_state52, icmp_ln22_reg_4483, ap_CS_fsm_state53, ap_CS_fsm_state49)
    begin
        if (((not((trunc_ln5_reg_4191 = ap_const_lv3_0)) and not((trunc_ln5_reg_4191 = ap_const_lv3_1)) and not((trunc_ln5_reg_4191 = ap_const_lv3_2)) and not((trunc_ln5_reg_4191 = ap_const_lv3_3)) and (ap_const_logic_1 = ap_CS_fsm_state52)) or (not((trunc_ln5_reg_4191 = ap_const_lv3_0)) and not((trunc_ln5_reg_4191 = ap_const_lv3_1)) and not((trunc_ln5_reg_4191 = ap_const_lv3_2)) and not((trunc_ln5_reg_4191 = ap_const_lv3_3)) and (ap_const_logic_1 = ap_CS_fsm_state51)) or (not((trunc_ln5_reg_4191 = ap_const_lv3_0)) and not((trunc_ln5_reg_4191 = ap_const_lv3_1)) and not((trunc_ln5_reg_4191 = ap_const_lv3_2)) and not((trunc_ln5_reg_4191 = ap_const_lv3_3)) and (icmp_ln22_reg_4483 = ap_const_lv1_1) and (icmp_ln13_reg_4355 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state53)) or (not((trunc_ln5_reg_4191 = ap_const_lv3_0)) and not((trunc_ln5_reg_4191 = ap_const_lv3_1)) and not((trunc_ln5_reg_4191 = ap_const_lv3_2)) and not((trunc_ln5_reg_4191 = ap_const_lv3_3)) and (ap_const_logic_1 = ap_CS_fsm_state49)) or (not((trunc_ln5_fu_2615_p1 = ap_const_lv3_0)) and not((trunc_ln5_fu_2615_p1 = ap_const_lv3_1)) and not((trunc_ln5_fu_2615_p1 = ap_const_lv3_2)) and not((trunc_ln5_fu_2615_p1 = ap_const_lv3_3)) and (ap_const_logic_1 = ap_CS_fsm_state36)))) then 
            init_patch4_we0 <= ap_const_logic_1;
        else 
            init_patch4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch4_we1_assign_proc : process(ap_CS_fsm_state36, trunc_ln5_fu_2615_p1, trunc_ln5_reg_4191, icmp_ln13_reg_4355, ap_CS_fsm_state51, ap_CS_fsm_state52, icmp_ln24_reg_4487, ap_CS_fsm_state53)
    begin
        if (((not((trunc_ln5_reg_4191 = ap_const_lv3_0)) and not((trunc_ln5_reg_4191 = ap_const_lv3_1)) and not((trunc_ln5_reg_4191 = ap_const_lv3_2)) and not((trunc_ln5_reg_4191 = ap_const_lv3_3)) and (ap_const_logic_1 = ap_CS_fsm_state52)) or (not((trunc_ln5_reg_4191 = ap_const_lv3_0)) and not((trunc_ln5_reg_4191 = ap_const_lv3_1)) and not((trunc_ln5_reg_4191 = ap_const_lv3_2)) and not((trunc_ln5_reg_4191 = ap_const_lv3_3)) and (ap_const_logic_1 = ap_CS_fsm_state51)) or (not((trunc_ln5_reg_4191 = ap_const_lv3_0)) and not((trunc_ln5_reg_4191 = ap_const_lv3_1)) and not((trunc_ln5_reg_4191 = ap_const_lv3_2)) and not((trunc_ln5_reg_4191 = ap_const_lv3_3)) and (icmp_ln24_reg_4487 = ap_const_lv1_1) and (icmp_ln13_reg_4355 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state53)) or (not((trunc_ln5_fu_2615_p1 = ap_const_lv3_0)) and not((trunc_ln5_fu_2615_p1 = ap_const_lv3_1)) and not((trunc_ln5_fu_2615_p1 = ap_const_lv3_2)) and not((trunc_ln5_fu_2615_p1 = ap_const_lv3_3)) and (ap_const_logic_1 = ap_CS_fsm_state36)))) then 
            init_patch4_we1 <= ap_const_logic_1;
        else 
            init_patch4_we1 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch_address0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state50, init_patch_addr_3_reg_4379, ap_CS_fsm_state51, init_patch_addr_5_reg_4434, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            init_patch_address0 <= init_patch_addr_5_reg_4434;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            init_patch_address0 <= init_patch_addr_3_reg_4379;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            init_patch_address0 <= ap_const_lv64_66(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            init_patch_address0 <= ap_const_lv64_63(8 - 1 downto 0);
        else 
            init_patch_address0 <= "XXXXXXXX";
        end if; 
    end process;


    init_patch_address1_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state50, init_patch_addr_4_reg_4384, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, zext_ln20_fu_3640_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            init_patch_address1 <= zext_ln20_fu_3640_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            init_patch_address1 <= init_patch_addr_4_reg_4384;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            init_patch_address1 <= ap_const_lv64_66(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            init_patch_address1 <= ap_const_lv64_60(8 - 1 downto 0);
        else 
            init_patch_address1 <= "XXXXXXXX";
        end if; 
    end process;


    init_patch_ce0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            init_patch_ce0 <= ap_const_logic_1;
        else 
            init_patch_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch_ce1_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            init_patch_ce1 <= ap_const_logic_1;
        else 
            init_patch_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch_d0_assign_proc : process(temp_q1, ap_CS_fsm_state36, ap_CS_fsm_state51, temp_load_2_reg_4469, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            init_patch_d0 <= temp_load_2_reg_4469;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            init_patch_d0 <= temp_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            init_patch_d0 <= ap_const_lv64_8000000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            init_patch_d0 <= ap_const_lv64_7FFFFFFFFFFFFFFF;
        else 
            init_patch_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    init_patch_d1_assign_proc : process(temp_q0, temp_q1, ap_CS_fsm_state36, ap_CS_fsm_state51, temp_load_2_reg_4469, ap_CS_fsm_state52, ap_CS_fsm_state53, sext_ln5_fu_2606_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            init_patch_d1 <= temp_load_2_reg_4469;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            init_patch_d1 <= temp_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            init_patch_d1 <= temp_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            init_patch_d1 <= sext_ln5_fu_2606_p1;
        else 
            init_patch_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    init_patch_we0_assign_proc : process(ap_CS_fsm_state36, trunc_ln5_fu_2615_p1, trunc_ln5_reg_4191, icmp_ln13_reg_4355, ap_CS_fsm_state51, ap_CS_fsm_state52, icmp_ln22_reg_4483, ap_CS_fsm_state53, ap_CS_fsm_state49)
    begin
        if ((((trunc_ln5_reg_4191 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((trunc_ln5_reg_4191 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((trunc_ln5_reg_4191 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((trunc_ln5_fu_2615_p1 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((icmp_ln22_reg_4483 = ap_const_lv1_1) and (icmp_ln13_reg_4355 = ap_const_lv1_0) and (trunc_ln5_reg_4191 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state53)))) then 
            init_patch_we0 <= ap_const_logic_1;
        else 
            init_patch_we0 <= ap_const_logic_0;
        end if; 
    end process;


    init_patch_we1_assign_proc : process(ap_CS_fsm_state36, trunc_ln5_fu_2615_p1, trunc_ln5_reg_4191, icmp_ln13_reg_4355, ap_CS_fsm_state51, ap_CS_fsm_state52, icmp_ln24_reg_4487, ap_CS_fsm_state53)
    begin
        if ((((trunc_ln5_reg_4191 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state52)) or ((trunc_ln5_reg_4191 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((trunc_ln5_fu_2615_p1 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((icmp_ln24_reg_4487 = ap_const_lv1_1) and (icmp_ln13_reg_4355 = ap_const_lv1_0) and (trunc_ln5_reg_4191 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state53)))) then 
            init_patch_we1 <= ap_const_logic_1;
        else 
            init_patch_we1 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_4_fu_1798_p3 <= add_ln510_fu_1792_p2(11 downto 11);
    isNeg_5_fu_1917_p3 <= add_ln510_1_fu_1911_p2(11 downto 11);
    isNeg_fu_1459_p3 <= add_ln341_fu_1453_p2(8 downto 8);
    j_10_fu_2057_p2 <= std_logic_vector(unsigned(sub_ln1220_fu_2052_p2) + unsigned(ap_const_lv32_1));
    j_3_fu_2230_p2 <= std_logic_vector(unsigned(add_ln1179_1_fu_2165_p2) - unsigned(original_ppl));
    j_4_fu_2152_p3 <= 
        start_index_1_fu_2146_p2 when (and_ln1174_fu_2140_p2(0) = '1') else 
        start_index_reg_842;
    lbVal_2_fu_1887_p3 <= 
        val_4_fu_1865_p3 when (icmp_ln1256_fu_1873_p2(0) = '1') else 
        lbVal_reg_938;
    leftRight_offset_read_read_fu_284_p2 <= leftRight_offset;
    lshr_ln1147_fu_1384_p2 <= std_logic_vector(shift_right(unsigned(GDarray_q0),to_integer(unsigned('0' & zext_ln1147_2_fu_1380_p1(31-1 downto 0)))));
    lshr_ln1185_fu_3515_p2 <= std_logic_vector(shift_right(unsigned(GDarray_q0),to_integer(unsigned('0' & zext_ln1185_2_fu_3511_p1(31-1 downto 0)))));
    lshr_ln1197_fu_3175_p2 <= std_logic_vector(shift_right(unsigned(GDarray_q0),to_integer(unsigned('0' & zext_ln1197_3_fu_3171_p1(31-1 downto 0)))));
    lshr_ln1226_fu_2891_p2 <= std_logic_vector(shift_right(unsigned(GDarray_q0),to_integer(unsigned('0' & zext_ln1226_3_fu_2887_p1(31-1 downto 0)))));
    lshr_ln1238_fu_2582_p2 <= std_logic_vector(shift_right(unsigned(GDarray_q0),to_integer(unsigned('0' & zext_ln1238_2_fu_2578_p1(31-1 downto 0)))));
    mantissa_4_fu_1776_p4 <= ((ap_const_lv1_1 & tmp_139_reg_4018) & ap_const_lv1_0);
    mantissa_5_fu_1895_p4 <= ((ap_const_lv1_1 & tmp_141_reg_4029) & ap_const_lv1_0);
    mantissa_fu_1435_p4 <= ((ap_const_lv1_1 & tmp_137_fu_1431_p1) & ap_const_lv1_0);
    mul_ln1147_fu_1305_p0 <= mul_ln1147_fu_1305_p00(64 - 1 downto 0);
    mul_ln1147_fu_1305_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1147_fu_1298_p1),129));
    mul_ln1147_fu_1305_p1 <= ap_const_lv129_lc_1(66 - 1 downto 0);
    mul_ln1181_fu_3265_p0 <= mul_ln1181_fu_3265_p00(64 - 1 downto 0);
    mul_ln1181_fu_3265_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1181_5_fu_3257_p1),66));
    mul_ln1181_fu_3265_p1 <= ap_const_lv66_3(3 - 1 downto 0);
    mul_ln1185_fu_3438_p0 <= mul_ln1185_fu_3438_p00(64 - 1 downto 0);
    mul_ln1185_fu_3438_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_4_reg_4329),129));
    mul_ln1185_fu_3438_p1 <= ap_const_lv129_lc_1(66 - 1 downto 0);
    mul_ln1197_fu_3097_p0 <= mul_ln1197_fu_3097_p00(64 - 1 downto 0);
    mul_ln1197_fu_3097_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1197_fu_3090_p1),129));
    mul_ln1197_fu_3097_p1 <= ap_const_lv129_lc_1(66 - 1 downto 0);
    mul_ln1226_fu_2813_p0 <= mul_ln1226_fu_2813_p00(64 - 1 downto 0);
    mul_ln1226_fu_2813_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1226_fu_2806_p1),129));
    mul_ln1226_fu_2813_p1 <= ap_const_lv129_lc_1(66 - 1 downto 0);
    mul_ln1234_fu_2332_p0 <= mul_ln1234_fu_2332_p00(64 - 1 downto 0);
    mul_ln1234_fu_2332_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1234_5_fu_2324_p1),66));
    mul_ln1234_fu_2332_p1 <= ap_const_lv66_3(3 - 1 downto 0);
    mul_ln1238_fu_2505_p0 <= mul_ln1238_fu_2505_p00(64 - 1 downto 0);
    mul_ln1238_fu_2505_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_7_reg_4165),129));
    mul_ln1238_fu_2505_p1 <= ap_const_lv129_lc_1(66 - 1 downto 0);
    or_ln1277_1_fu_1669_p2 <= (icmp_ln1277_3_reg_3957 or icmp_ln1277_2_reg_3952);
    or_ln1277_fu_1665_p2 <= (icmp_ln1277_reg_3942 or icmp_ln1277_1_reg_3947);
    or_ln54_fu_1238_p2 <= (sub_ln54_fu_1232_p2 or ap_const_lv17_10);
    p_Result_10_fu_1608_p3 <= (ap_const_lv1_0 & trunc_ln368_1_fu_1600_p1);
    p_Result_11_fu_2006_p3 <= 
        val_5_fu_1984_p3 when (icmp_ln1262_fu_1992_p2(0) = '1') else 
        rbVal_reg_926;
    p_Result_9_fu_1583_p3 <= (ap_const_lv1_0 & trunc_ln368_fu_1575_p1);
    p_Result_s_fu_1413_p3 <= data_V_fu_1410_p1(31 downto 31);
    p_shl16_cast_fu_2435_p3 <= (trunc_ln1238_1_fu_2431_p1 & ap_const_lv2_0);
    p_shl6_fu_2216_p3 <= (trunc_ln1193_fu_2181_p1 & ap_const_lv2_0);
    p_shl_cast_fu_3368_p3 <= (trunc_ln1185_1_fu_3364_p1 & ap_const_lv2_0);
    p_shl_fu_2114_p3 <= (trunc_ln1222_fu_2079_p1 & ap_const_lv2_0);
    r_V_10_fu_1831_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_4_fu_1785_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_i_cast_cast_cast_cast_fu_1827_p1(31-1 downto 0)))));
    r_V_11_fu_1837_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_4_fu_1785_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_i_cast_cast_cast_cast_fu_1827_p1(31-1 downto 0)))));
    r_V_12_fu_1950_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_5_fu_1904_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i59_i_cast_cast_cast_cast_fu_1946_p1(31-1 downto 0)))));
    r_V_13_fu_1956_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_5_fu_1904_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i59_i_cast_cast_cast_cast_fu_1946_p1(31-1 downto 0)))));
    r_V_9_fu_1499_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_1445_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1489_p1(31-1 downto 0)))));
    r_V_fu_1493_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_1445_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1489_p1(31-1 downto 0)))));
    radii_address0 <= zext_ln1141_fu_1194_p1(3 - 1 downto 0);

    radii_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            radii_ce0 <= ap_const_logic_1;
        else 
            radii_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_V_15_fu_1535_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(val_fu_1527_p3));
    result_V_fu_1541_p3 <= 
        result_V_15_fu_1535_p2 when (p_Result_s_fu_1413_p3(0) = '1') else 
        val_fu_1527_p3;

    row_list_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, row_list_size_cast9_fu_1368_p1, trunc_ln1279_cast_fu_1561_p1, trunc_ln1258_cast_fu_1723_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            row_list_address0 <= trunc_ln1258_cast_fu_1723_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            row_list_address0 <= trunc_ln1279_cast_fu_1561_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            row_list_address0 <= row_list_size_cast9_fu_1368_p1(8 - 1 downto 0);
        else 
            row_list_address0 <= "XXXXXXXX";
        end if; 
    end process;


    row_list_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            row_list_ce0 <= ap_const_logic_1;
        else 
            row_list_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    row_list_d0 <= lshr_ln1147_fu_1384_p2(64 - 1 downto 0);
    row_list_size_cast9_fu_1368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_list_size_reg_818_pp0_iter1_reg),64));

    row_list_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1145_1_reg_3842_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1145_1_reg_3842_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            row_list_we0 <= ap_const_logic_1;
        else 
            row_list_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1170_1_fu_3344_p3 <= 
        sub_ln54_14_fu_3338_p2 when (icmp_ln1183_fu_3312_p2(0) = '1') else 
        sub_ln54_10_fu_3289_p2;
    select_ln1170_2_fu_2385_p3 <= 
        ap_const_lv2_0 when (icmp_ln1236_fu_2379_p2(0) = '1') else 
        z_3_reg_981;
    select_ln1170_3_fu_2411_p3 <= 
        sub_ln54_17_fu_2405_p2 when (icmp_ln1236_fu_2379_p2(0) = '1') else 
        sub_ln54_13_fu_2356_p2;
    select_ln1170_fu_3318_p3 <= 
        ap_const_lv2_0 when (icmp_ln1183_fu_3312_p2(0) = '1') else 
        z_reg_1134;
    select_ln1181_1_fu_3352_p3 <= 
        add_ln1187_fu_3300_p2 when (icmp_ln1183_fu_3312_p2(0) = '1') else 
        ap_phi_mux_temp_size_phi_fu_1118_p4;
    select_ln1181_2_fu_3382_p3 <= 
        add_ln1181_1_fu_3306_p2 when (icmp_ln1183_fu_3312_p2(0) = '1') else 
        j_5_reg_1125;
    select_ln1181_fu_3221_p3 <= 
        sub_ln1181_fu_3209_p2 when (icmp_ln1181_1_fu_3215_p2(0) = '1') else 
        ap_const_lv34_1;
    select_ln1193_1_fu_2969_p3 <= 
        add_ln1199_fu_2943_p2 when (icmp_ln1195_fu_2955_p2(0) = '1') else 
        ap_phi_mux_temp_size_1_phi_fu_1076_p4;
    select_ln1193_2_fu_3029_p3 <= 
        sub_ln54_15_fu_3023_p2 when (icmp_ln1195_fu_2955_p2(0) = '1') else 
        sub_ln54_11_fu_2932_p2;
    select_ln1193_3_fu_3037_p3 <= 
        add_ln1193_fu_2949_p2 when (icmp_ln1195_fu_2955_p2(0) = '1') else 
        j_6_reg_1083;
    select_ln1193_fu_2961_p3 <= 
        ap_const_lv2_0 when (icmp_ln1195_fu_2955_p2(0) = '1') else 
        z_1_reg_1092;
    select_ln1205_fu_2044_p3 <= 
        start_index_2_fu_2038_p2 when (and_ln1205_fu_2032_p2(0) = '1') else 
        start_index_reg_842;
    select_ln1222_1_fu_2685_p3 <= 
        add_ln1228_fu_2659_p2 when (icmp_ln1224_fu_2671_p2(0) = '1') else 
        ap_phi_mux_temp_size_2_phi_fu_1034_p4;
    select_ln1222_2_fu_2745_p3 <= 
        sub_ln54_16_fu_2739_p2 when (icmp_ln1224_fu_2671_p2(0) = '1') else 
        sub_ln54_12_fu_2648_p2;
    select_ln1222_3_fu_2753_p3 <= 
        add_ln1222_fu_2665_p2 when (icmp_ln1224_fu_2671_p2(0) = '1') else 
        j_7_reg_1041;
    select_ln1222_fu_2677_p3 <= 
        ap_const_lv2_0 when (icmp_ln1224_fu_2671_p2(0) = '1') else 
        z_2_reg_1050;
    select_ln1234_1_fu_2419_p3 <= 
        add_ln1240_fu_2367_p2 when (icmp_ln1236_fu_2379_p2(0) = '1') else 
        ap_phi_mux_temp_size_3_phi_fu_965_p4;
    select_ln1234_2_fu_2449_p3 <= 
        add_ln1234_2_fu_2373_p2 when (icmp_ln1236_fu_2379_p2(0) = '1') else 
        j_8_reg_972;
    select_ln1234_fu_2288_p3 <= 
        sub_ln1234_fu_2276_p2 when (icmp_ln1234_1_fu_2282_p2(0) = '1') else 
        ap_const_lv34_1;
    select_ln1256_fu_1879_p3 <= 
        j_2_reg_914_pp2_iter2_reg when (icmp_ln1256_fu_1873_p2(0) = '1') else 
        j_9_reg_890;
    select_ln1262_fu_1998_p3 <= 
        j_2_reg_914_pp2_iter2_reg when (icmp_ln1262_fu_1992_p2(0) = '1') else 
        right_bound_reg_902;
    select_ln1277_1_fu_1693_p3 <= 
        sub_ln1277_reg_3920 when (and_ln1277_1_fu_1679_p2(0) = '1') else 
        start_value_reg_854;
    select_ln1277_2_fu_1700_p3 <= 
        sub_ln1277_reg_3920 when (and_ln1277_1_fu_1679_p2(0) = '1') else 
        p_x_assign_7_reg_878;
    select_ln1277_fu_1685_p3 <= 
        j_1_reg_866_pp1_iter1_reg when (and_ln1277_1_fu_1679_p2(0) = '1') else 
        start_index_reg_842;
        sext_ln1145_fu_1244_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln54_fu_1238_p2),38));

        sext_ln1147_fu_1298_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln54_reg_3846),64));

        sext_ln1181_1_fu_3189_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_3_reg_4110),33));

        sext_ln1181_2_fu_3192_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_3_reg_4110),34));

        sext_ln1181_3_fu_3195_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(right_bound_reg_902),33));

        sext_ln1181_4_fu_3205_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1181_fu_3199_p2),34));

        sext_ln1181_5_fu_3257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln1181_fu_3221_p3),64));

        sext_ln1181_fu_3186_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_3_reg_4110),64));

        sext_ln1193_fu_2177_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_4_fu_2152_p3),33));

        sext_ln1197_fu_3090_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln54_5_reg_4265),64));

        sext_ln1222_fu_2075_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_9_reg_890),33));

        sext_ln1226_fu_2806_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln54_6_reg_4221),64));

        sext_ln1234_1_fu_2255_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1234_fu_2246_p2),33));

        sext_ln1234_2_fu_2259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1234_fu_2246_p2),34));

        sext_ln1234_3_fu_2263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln1205_reg_4054),33));

        sext_ln1234_4_fu_2272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1234_1_fu_2266_p2),34));

        sext_ln1234_5_fu_2324_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln1234_fu_2288_p3),64));

        sext_ln1234_fu_2251_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1234_fu_2246_p2),64));

        sext_ln1311_4_fu_1811_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_4_fu_1806_p2),12));

        sext_ln1311_5_fu_1930_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_5_fu_1925_p2),12));

        sext_ln1311_fu_1473_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_1467_p2),9));

        sext_ln54_10_fu_2928_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln54_14_fu_2920_p3),39));

        sext_ln54_11_fu_2632_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln54_15_fu_2624_p3),39));

        sext_ln54_12_fu_2644_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln54_16_fu_2636_p3),39));

        sext_ln54_13_fu_3419_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_3409_p4),64));

        sext_ln54_14_fu_3007_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln54_24_mid1_fu_2999_p3),39));

        sext_ln54_15_fu_3019_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln54_25_mid1_fu_3011_p3),39));

        sext_ln54_16_fu_3074_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_3064_p4),39));

        sext_ln54_17_fu_2790_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_2780_p4),39));

        sext_ln54_18_fu_2486_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_2476_p4),64));

        sext_ln54_19_fu_2723_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln54_26_mid1_fu_2715_p3),39));

        sext_ln54_20_fu_2735_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln54_27_mid1_fu_2727_p3),39));

        sext_ln54_9_fu_2916_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln54_13_fu_2908_p3),39));

        sext_ln54_fu_1289_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln54_5_fu_1283_p2),38));

        sext_ln5_fu_2606_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_temp_size_4_phi_fu_996_p16),64));

    sh_prom_i_i_i_i_i59_i_cast_cast_cast_cast_fu_1946_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i59_i_cast_cast_cast_fu_1942_p1),169));
        sh_prom_i_i_i_i_i59_i_cast_cast_cast_fu_1942_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_5_fu_1934_p3),32));

    sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_1485_p1),111));
        sh_prom_i_i_i_i_i_cast_cast_cast_fu_1485_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_1477_p3),32));

    sh_prom_i_i_i_i_i_i_cast_cast_cast_cast_fu_1827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_i_cast_cast_cast_fu_1823_p1),169));
        sh_prom_i_i_i_i_i_i_cast_cast_cast_fu_1823_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_4_fu_1815_p3),32));

    shl_ln1147_1_fu_1336_p3 <= (tmp_106_fu_1326_p4 & ap_const_lv5_0);
    shl_ln1147_2_fu_1344_p3 <= (tmp_118_fu_1311_p4 & ap_const_lv3_0);
    shl_ln1185_1_fu_3469_p3 <= (tmp_122_fu_3459_p4 & ap_const_lv5_0);
    shl_ln1185_2_fu_3477_p3 <= (tmp_132_fu_3444_p4 & ap_const_lv3_0);
    shl_ln1197_1_fu_3128_p3 <= (tmp_124_fu_3118_p4 & ap_const_lv5_0);
    shl_ln1197_2_fu_3136_p3 <= (tmp_133_fu_3103_p4 & ap_const_lv3_0);
    shl_ln1226_1_fu_2844_p3 <= (tmp_125_fu_2834_p4 & ap_const_lv5_0);
    shl_ln1226_2_fu_2852_p3 <= (tmp_134_fu_2819_p4 & ap_const_lv3_0);
    shl_ln1238_1_fu_2536_p3 <= (tmp_126_fu_2526_p4 & ap_const_lv5_0);
    shl_ln1238_2_fu_2544_p3 <= (tmp_135_fu_2511_p4 & ap_const_lv3_0);
    shl_ln54_10_fu_2296_p3 <= (i & ap_const_lv13_0);
    shl_ln54_11_fu_2307_p3 <= (i & ap_const_lv11_0);
    shl_ln54_12_fu_3283_p2 <= std_logic_vector(shift_left(unsigned(j_5_reg_1125),to_integer(unsigned('0' & ap_const_lv64_3(31-1 downto 0)))));
    shl_ln54_13_fu_2908_p3 <= (j_6_reg_1083 & ap_const_lv5_0);
    shl_ln54_14_fu_2920_p3 <= (j_6_reg_1083 & ap_const_lv3_0);
    shl_ln54_15_fu_2624_p3 <= (j_7_reg_1041 & ap_const_lv5_0);
    shl_ln54_16_fu_2636_p3 <= (j_7_reg_1041 & ap_const_lv3_0);
    shl_ln54_17_fu_2344_p2 <= std_logic_vector(shift_left(unsigned(j_8_reg_972),to_integer(unsigned('0' & ap_const_lv64_5(31-1 downto 0)))));
    shl_ln54_18_fu_2350_p2 <= std_logic_vector(shift_left(unsigned(j_8_reg_972),to_integer(unsigned('0' & ap_const_lv64_3(31-1 downto 0)))));
    shl_ln54_19_fu_3326_p2 <= std_logic_vector(shift_left(unsigned(add_ln1181_1_fu_3306_p2),to_integer(unsigned('0' & ap_const_lv64_5(31-1 downto 0)))));
    shl_ln54_1_fu_1221_p3 <= (i & ap_const_lv11_0);
    shl_ln54_20_fu_3332_p2 <= std_logic_vector(shift_left(unsigned(add_ln1181_1_fu_3306_p2),to_integer(unsigned('0' & ap_const_lv64_3(31-1 downto 0)))));
    shl_ln54_21_fu_2393_p2 <= std_logic_vector(shift_left(unsigned(add_ln1234_2_fu_2373_p2),to_integer(unsigned('0' & ap_const_lv64_5(31-1 downto 0)))));
    shl_ln54_22_fu_2399_p2 <= std_logic_vector(shift_left(unsigned(add_ln1234_2_fu_2373_p2),to_integer(unsigned('0' & ap_const_lv64_3(31-1 downto 0)))));
    shl_ln54_24_mid1_fu_2999_p3 <= (add_ln1193_fu_2949_p2 & ap_const_lv5_0);
    shl_ln54_25_mid1_fu_3011_p3 <= (add_ln1193_fu_2949_p2 & ap_const_lv3_0);
    shl_ln54_26_mid1_fu_2715_p3 <= (add_ln1222_fu_2665_p2 & ap_const_lv5_0);
    shl_ln54_27_mid1_fu_2727_p3 <= (add_ln1222_fu_2665_p2 & ap_const_lv3_0);
    shl_ln54_2_fu_1259_p3 <= (ap_phi_mux_row_list_size_phi_fu_822_p4 & ap_const_lv5_0);
    shl_ln54_3_fu_1271_p3 <= (ap_phi_mux_row_list_size_phi_fu_822_p4 & ap_const_lv3_0);
    shl_ln54_4_fu_3229_p3 <= (i & ap_const_lv13_0);
    shl_ln54_5_fu_3240_p3 <= (i & ap_const_lv11_0);
    shl_ln54_6_fu_2184_p3 <= (i & ap_const_lv13_0);
    shl_ln54_7_fu_2195_p3 <= (i & ap_const_lv11_0);
    shl_ln54_8_fu_2082_p3 <= (i & ap_const_lv13_0);
    shl_ln54_9_fu_2093_p3 <= (i & ap_const_lv11_0);
    shl_ln54_fu_3277_p2 <= std_logic_vector(shift_left(unsigned(j_5_reg_1125),to_integer(unsigned('0' & ap_const_lv64_5(31-1 downto 0)))));
    shl_ln54_s_fu_1210_p3 <= (i & ap_const_lv13_0);
    shl_ln5_fu_3504_p3 <= (add_ln1185_reg_4345 & ap_const_lv3_0);
    shl_ln6_fu_3164_p3 <= (add_ln1197_reg_4280 & ap_const_lv3_0);
    shl_ln7_fu_2880_p3 <= (add_ln1226_reg_4236 & ap_const_lv3_0);
    shl_ln8_fu_2571_p3 <= (add_ln1238_reg_4181 & ap_const_lv3_0);
    shl_ln_fu_1373_p3 <= (add_ln1147_reg_3856 & ap_const_lv3_0);
    start_index_1_fu_2146_p2 <= std_logic_vector(unsigned(start_index_reg_842) + unsigned(ap_const_lv32_FFFFFFFF));
    start_index_2_fu_2038_p2 <= std_logic_vector(unsigned(start_index_reg_842) + unsigned(ap_const_lv32_1));
    sub_ln1147_fu_1356_p2 <= std_logic_vector(unsigned(zext_ln1147_1_fu_1352_p1) - unsigned(shl_ln1147_1_fu_1336_p3));
    sub_ln1181_fu_3209_p2 <= std_logic_vector(signed(sext_ln1181_4_fu_3205_p1) - signed(sext_ln1181_2_fu_3192_p1));
    sub_ln1185_1_fu_3376_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_3368_p3) - unsigned(trunc_ln1185_fu_3360_p1));
    sub_ln1185_fu_3489_p2 <= std_logic_vector(unsigned(zext_ln1185_1_fu_3485_p1) - unsigned(shl_ln1185_1_fu_3469_p3));
    sub_ln1193_fu_2224_p2 <= std_logic_vector(unsigned(p_shl6_fu_2216_p3) - unsigned(zext_ln1193_fu_2212_p1));
    sub_ln1197_1_fu_2993_p2 <= std_logic_vector(unsigned(tmp_148_cast_fu_2985_p3) - unsigned(trunc_ln1197_fu_2977_p1));
    sub_ln1197_fu_3148_p2 <= std_logic_vector(unsigned(zext_ln1197_1_fu_3144_p1) - unsigned(shl_ln1197_1_fu_3128_p3));
    sub_ln1220_fu_2052_p2 <= std_logic_vector(signed(select_ln1205_fu_2044_p3) - signed(original_ppl));
    sub_ln1222_fu_2122_p2 <= std_logic_vector(unsigned(p_shl_fu_2114_p3) - unsigned(zext_ln1222_fu_2110_p1));
    sub_ln1226_1_fu_2709_p2 <= std_logic_vector(unsigned(tmp_151_cast_fu_2701_p3) - unsigned(trunc_ln1226_fu_2693_p1));
    sub_ln1226_fu_2864_p2 <= std_logic_vector(unsigned(zext_ln1226_1_fu_2860_p1) - unsigned(shl_ln1226_1_fu_2844_p3));
    sub_ln1234_1_fu_2241_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) - unsigned(original_ppl));
    sub_ln1234_fu_2276_p2 <= std_logic_vector(signed(sext_ln1234_4_fu_2272_p1) - signed(sext_ln1234_2_fu_2259_p1));
    sub_ln1238_1_fu_2443_p2 <= std_logic_vector(unsigned(p_shl16_cast_fu_2435_p3) - unsigned(trunc_ln1238_fu_2427_p1));
    sub_ln1238_fu_2556_p2 <= std_logic_vector(unsigned(zext_ln1238_1_fu_2552_p1) - unsigned(shl_ln1238_1_fu_2536_p3));
    sub_ln1277_fu_1566_p2 <= std_logic_vector(unsigned(row_list_q0) - unsigned(result_V_reg_3901));
    sub_ln1311_4_fu_1806_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_138_reg_4012));
    sub_ln1311_5_fu_1925_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_140_reg_4023));
    sub_ln1311_fu_1467_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_136_fu_1421_p4));
    sub_ln17_fu_3554_p2 <= std_logic_vector(unsigned(tmp_128_fu_3546_p3) - unsigned(zext_ln17_fu_3542_p1));
    sub_ln54_10_fu_3289_p2 <= std_logic_vector(unsigned(shl_ln54_fu_3277_p2) - unsigned(shl_ln54_12_fu_3283_p2));
    sub_ln54_11_fu_2932_p2 <= std_logic_vector(signed(sext_ln54_9_fu_2916_p1) - signed(sext_ln54_10_fu_2928_p1));
    sub_ln54_12_fu_2648_p2 <= std_logic_vector(signed(sext_ln54_11_fu_2632_p1) - signed(sext_ln54_12_fu_2644_p1));
    sub_ln54_13_fu_2356_p2 <= std_logic_vector(unsigned(shl_ln54_17_fu_2344_p2) - unsigned(shl_ln54_18_fu_2350_p2));
    sub_ln54_14_fu_3338_p2 <= std_logic_vector(unsigned(shl_ln54_19_fu_3326_p2) - unsigned(shl_ln54_20_fu_3332_p2));
    sub_ln54_15_fu_3023_p2 <= std_logic_vector(signed(sext_ln54_14_fu_3007_p1) - signed(sext_ln54_15_fu_3019_p1));
    sub_ln54_16_fu_2739_p2 <= std_logic_vector(signed(sext_ln54_19_fu_2723_p1) - signed(sext_ln54_20_fu_2735_p1));
    sub_ln54_17_fu_2405_p2 <= std_logic_vector(unsigned(shl_ln54_21_fu_2393_p2) - unsigned(shl_ln54_22_fu_2399_p2));
    sub_ln54_5_fu_1283_p2 <= std_logic_vector(unsigned(zext_ln54_3_fu_1267_p1) - unsigned(zext_ln54_4_fu_1279_p1));
    sub_ln54_6_fu_3251_p2 <= std_logic_vector(unsigned(zext_ln54_5_fu_3236_p1) - unsigned(zext_ln54_6_fu_3247_p1));
    sub_ln54_7_fu_2206_p2 <= std_logic_vector(unsigned(zext_ln54_7_fu_2191_p1) - unsigned(zext_ln54_8_fu_2202_p1));
    sub_ln54_8_fu_2104_p2 <= std_logic_vector(unsigned(zext_ln54_9_fu_2089_p1) - unsigned(zext_ln54_10_fu_2100_p1));
    sub_ln54_9_fu_2318_p2 <= std_logic_vector(unsigned(zext_ln54_11_fu_2303_p1) - unsigned(zext_ln54_12_fu_2314_p1));
    sub_ln54_fu_1232_p2 <= std_logic_vector(unsigned(zext_ln54_fu_1217_p1) - unsigned(zext_ln54_2_fu_1228_p1));

    temp_address0_assign_proc : process(ap_CS_fsm_state50, ap_enable_reg_pp3_iter2, ap_enable_reg_pp4_iter2, ap_enable_reg_pp5_iter2, ap_enable_reg_pp6_iter2, ap_block_pp3_stage0, ap_block_pp4_stage0, ap_block_pp5_stage0, ap_block_pp6_stage0, zext_ln1238_3_fu_2567_p1, zext_ln1226_2_fu_2876_p1, zext_ln1197_2_fu_3160_p1, zext_ln1185_3_fu_3500_p1, zext_ln17_2_fu_3580_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            temp_address0 <= zext_ln17_2_fu_3580_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            temp_address0 <= zext_ln1185_3_fu_3500_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            temp_address0 <= zext_ln1197_2_fu_3160_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            temp_address0 <= zext_ln1226_2_fu_2876_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            temp_address0 <= zext_ln1238_3_fu_2567_p1(10 - 1 downto 0);
        else 
            temp_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    temp_address1_assign_proc : process(ap_CS_fsm_state50, ap_CS_fsm_state51, zext_ln17_1_fu_3560_p1, zext_ln17_3_fu_3595_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            temp_address1 <= zext_ln17_3_fu_3595_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            temp_address1 <= zext_ln17_1_fu_3560_p1(10 - 1 downto 0);
        else 
            temp_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    temp_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001, ap_block_pp5_stage0_11001, ap_block_pp6_stage0_11001, ap_CS_fsm_state50, ap_enable_reg_pp3_iter2, ap_enable_reg_pp4_iter2, ap_enable_reg_pp5_iter2, ap_enable_reg_pp6_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or ((ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001)) or ((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)) or ((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            temp_ce0 <= ap_const_logic_1;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_ce1_assign_proc : process(ap_CS_fsm_state50, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            temp_ce1 <= ap_const_logic_1;
        else 
            temp_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_d0_assign_proc : process(ap_enable_reg_pp3_iter2, ap_enable_reg_pp4_iter2, ap_enable_reg_pp5_iter2, ap_enable_reg_pp6_iter2, ap_block_pp3_stage0, ap_block_pp4_stage0, ap_block_pp5_stage0, ap_block_pp6_stage0, trunc_ln1238_2_fu_2588_p1, trunc_ln1226_2_fu_2897_p1, trunc_ln1197_2_fu_3181_p1, trunc_ln1185_2_fu_3521_p1)
    begin
        if (((ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            temp_d0 <= trunc_ln1185_2_fu_3521_p1;
        elsif (((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            temp_d0 <= trunc_ln1197_2_fu_3181_p1;
        elsif (((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            temp_d0 <= trunc_ln1226_2_fu_2897_p1;
        elsif (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            temp_d0 <= trunc_ln1238_2_fu_2588_p1;
        else 
            temp_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_we0_assign_proc : process(ap_block_pp3_stage0_11001, icmp_ln1234_2_reg_4146_pp3_iter1_reg, ap_block_pp4_stage0_11001, icmp_ln1222_1_reg_4202_pp4_iter1_reg, ap_block_pp5_stage0_11001, icmp_ln1193_1_reg_4246_pp5_iter1_reg, ap_block_pp6_stage0_11001, icmp_ln1181_2_reg_4310_pp6_iter1_reg, ap_enable_reg_pp3_iter2, ap_enable_reg_pp4_iter2, ap_enable_reg_pp5_iter2, ap_enable_reg_pp6_iter2)
    begin
        if ((((ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (icmp_ln1181_2_reg_4310_pp6_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001)) or ((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (icmp_ln1193_1_reg_4246_pp5_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)) or ((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (icmp_ln1222_1_reg_4202_pp4_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (icmp_ln1234_2_reg_4146_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            temp_we0 <= ap_const_logic_1;
        else 
            temp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_3064_p4 <= ((tmp_113_fu_3055_p4 & select_ln1193_fu_2961_p3) & ap_const_lv3_0);
    tmp2_fu_2780_p4 <= ((tmp_114_fu_2771_p4 & select_ln1222_fu_2677_p3) & ap_const_lv3_0);
    tmp3_fu_2476_p4 <= ((tmp_115_fu_2467_p4 & select_ln1170_2_fu_2385_p3) & ap_const_lv3_0);
    tmp_106_fu_1326_p4 <= mul_ln1147_fu_1305_p2(127 downto 69);
    tmp_107_fu_1621_p4 <= data_V_10_fu_1572_p1(62 downto 52);
    tmp_108_fu_1631_p4 <= data_V_11_fu_1596_p1(62 downto 52);
    tmp_110_fu_1517_p4 <= r_V_9_fu_1499_p2(87 downto 24);
    tmp_112_fu_3400_p4 <= sub_ln54_6_reg_4295(16 downto 5);
    tmp_113_fu_3055_p4 <= sub_ln54_7_reg_4100(16 downto 5);
    tmp_114_fu_2771_p4 <= sub_ln54_8_reg_4077(16 downto 5);
    tmp_115_fu_2467_p4 <= sub_ln54_9_reg_4131(16 downto 5);
    tmp_118_fu_1311_p4 <= mul_ln1147_fu_1305_p2(128 downto 69);
    tmp_119_fu_1855_p4 <= r_V_11_fu_1837_p2(116 downto 53);
    tmp_121_fu_1974_p4 <= r_V_13_fu_1956_p2(116 downto 53);
    tmp_122_fu_3459_p4 <= mul_ln1185_fu_3438_p2(127 downto 69);
    tmp_123_fu_1505_p3 <= r_V_fu_1493_p2(24 downto 24);
    tmp_124_fu_3118_p4 <= mul_ln1197_fu_3097_p2(127 downto 69);
    tmp_125_fu_2834_p4 <= mul_ln1226_fu_2813_p2(127 downto 69);
    tmp_126_fu_2526_p4 <= mul_ln1238_fu_2505_p2(127 downto 69);
    tmp_127_fu_1843_p3 <= r_V_10_fu_1831_p2(53 downto 53);
    tmp_128_fu_3546_p3 <= (i_10_reg_1145 & ap_const_lv2_0);
    tmp_131_fu_1962_p3 <= r_V_12_fu_1950_p2(53 downto 53);
    tmp_132_fu_3444_p4 <= mul_ln1185_fu_3438_p2(128 downto 69);
    tmp_133_fu_3103_p4 <= mul_ln1197_fu_3097_p2(128 downto 69);
    tmp_134_fu_2819_p4 <= mul_ln1226_fu_2813_p2(128 downto 69);
    tmp_135_fu_2511_p4 <= mul_ln1238_fu_2505_p2(128 downto 69);
    tmp_136_fu_1421_p4 <= data_V_fu_1410_p1(30 downto 23);
    tmp_137_fu_1431_p1 <= data_V_fu_1410_p1(23 - 1 downto 0);
    tmp_139_fu_1754_p1 <= data_V_12_fu_1740_p1(52 - 1 downto 0);
    tmp_141_fu_1772_p1 <= data_V_13_fu_1758_p1(52 - 1 downto 0);
    tmp_148_cast_fu_2985_p3 <= (trunc_ln1197_1_fu_2981_p1 & ap_const_lv2_0);
    tmp_151_cast_fu_2701_p3 <= (trunc_ln1226_1_fu_2697_p1 & ap_const_lv2_0);
    tmp_fu_3409_p4 <= ((tmp_112_fu_3400_p4 & select_ln1170_fu_3318_p3) & ap_const_lv3_0);
    trapezoid_edges_address0 <= zext_ln1141_reg_3683(3 - 1 downto 0);

    trapezoid_edges_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            trapezoid_edges_ce0 <= ap_const_logic_1;
        else 
            trapezoid_edges_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln1185_1_fu_3364_p1 <= select_ln1181_1_fu_3352_p3(8 - 1 downto 0);
    trunc_ln1185_2_fu_3521_p1 <= lshr_ln1185_fu_3515_p2(64 - 1 downto 0);
    trunc_ln1185_fu_3360_p1 <= select_ln1181_1_fu_3352_p3(10 - 1 downto 0);
    trunc_ln1193_fu_2181_p1 <= original_ppl(31 - 1 downto 0);
    trunc_ln1197_1_fu_2981_p1 <= select_ln1193_1_fu_2969_p3(8 - 1 downto 0);
    trunc_ln1197_2_fu_3181_p1 <= lshr_ln1197_fu_3175_p2(64 - 1 downto 0);
    trunc_ln1197_fu_2977_p1 <= select_ln1193_1_fu_2969_p3(10 - 1 downto 0);
    trunc_ln1222_fu_2079_p1 <= original_ppl(31 - 1 downto 0);
    trunc_ln1226_1_fu_2697_p1 <= select_ln1222_1_fu_2685_p3(8 - 1 downto 0);
    trunc_ln1226_2_fu_2897_p1 <= lshr_ln1226_fu_2891_p2(64 - 1 downto 0);
    trunc_ln1226_fu_2693_p1 <= select_ln1222_1_fu_2685_p3(10 - 1 downto 0);
    trunc_ln1238_1_fu_2431_p1 <= select_ln1234_1_fu_2419_p3(8 - 1 downto 0);
    trunc_ln1238_2_fu_2588_p1 <= lshr_ln1238_fu_2582_p2(64 - 1 downto 0);
    trunc_ln1238_fu_2427_p1 <= select_ln1234_1_fu_2419_p3(10 - 1 downto 0);
    trunc_ln1245_1_fu_2593_p1 <= sub_ln1234_reg_4126(32 - 1 downto 0);
    trunc_ln1245_fu_2597_p1 <= sub_ln1181_reg_4290(32 - 1 downto 0);
    trunc_ln1258_cast_fu_1723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_2_phi_fu_918_p4),64));
    trunc_ln1277_1_fu_1604_p1 <= data_V_11_fu_1596_p1(52 - 1 downto 0);
    trunc_ln1277_fu_1579_p1 <= data_V_10_fu_1572_p1(52 - 1 downto 0);
    trunc_ln1279_cast_fu_1561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_1_phi_fu_870_p4),64));
    trunc_ln17_fu_3570_p1 <= sub_ln17_fu_3554_p2(8 - 1 downto 0);
    trunc_ln368_1_fu_1600_p1 <= data_V_11_fu_1596_p1(63 - 1 downto 0);
    trunc_ln368_fu_1575_p1 <= data_V_10_fu_1572_p1(63 - 1 downto 0);
    trunc_ln54_fu_1206_p1 <= GDn_points_q0(31 - 1 downto 0);
    trunc_ln5_fu_2615_p1 <= p_read1(3 - 1 downto 0);
    ush_4_fu_1815_p3 <= 
        sext_ln1311_4_fu_1811_p1 when (isNeg_4_fu_1798_p3(0) = '1') else 
        add_ln510_fu_1792_p2;
    ush_5_fu_1934_p3 <= 
        sext_ln1311_5_fu_1930_p1 when (isNeg_5_fu_1917_p3(0) = '1') else 
        add_ln510_1_fu_1911_p2;
    ush_fu_1477_p3 <= 
        sext_ln1311_fu_1473_p1 when (isNeg_fu_1459_p3(0) = '1') else 
        add_ln341_fu_1453_p2;
    val_4_fu_1865_p3 <= 
        zext_ln662_4_fu_1851_p1 when (isNeg_4_fu_1798_p3(0) = '1') else 
        tmp_119_fu_1855_p4;
    val_5_fu_1984_p3 <= 
        zext_ln662_5_fu_1970_p1 when (isNeg_5_fu_1917_p3(0) = '1') else 
        tmp_121_fu_1974_p4;
    val_fu_1527_p3 <= 
        zext_ln662_fu_1513_p1 when (isNeg_fu_1459_p3(0) = '1') else 
        tmp_110_fu_1517_p4;
    zext_ln1141_fu_1194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i),64));
    zext_ln1147_1_fu_1352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1147_2_fu_1344_p3),64));
    zext_ln1147_2_fu_1380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1373_p3),192));
    zext_ln1147_3_fu_1321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_118_fu_1311_p4),64));
    zext_ln1185_1_fu_3485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1185_2_fu_3477_p3),64));
    zext_ln1185_2_fu_3511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln5_fu_3504_p3),192));
    zext_ln1185_3_fu_3500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1185_1_reg_4324_pp6_iter1_reg),64));
    zext_ln1185_5_fu_3454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_132_fu_3444_p4),64));
    zext_ln1185_fu_3390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1170_fu_3318_p3),10));
    zext_ln1193_fu_2212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1193_fu_2181_p1),33));
    zext_ln1197_1_fu_3144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1197_2_fu_3136_p3),64));
    zext_ln1197_2_fu_3160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1197_1_reg_4260_pp5_iter1_reg),64));
    zext_ln1197_3_fu_3171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln6_fu_3164_p3),192));
    zext_ln1197_5_fu_3113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_133_fu_3103_p4),64));
    zext_ln1197_fu_3045_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1193_fu_2961_p3),10));
    zext_ln1222_fu_2110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1222_fu_2079_p1),33));
    zext_ln1226_1_fu_2860_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1226_2_fu_2852_p3),64));
    zext_ln1226_2_fu_2876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1226_1_reg_4216_pp4_iter1_reg),64));
    zext_ln1226_3_fu_2887_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln7_fu_2880_p3),192));
    zext_ln1226_5_fu_2829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_134_fu_2819_p4),64));
    zext_ln1226_fu_2761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1222_fu_2677_p3),10));
    zext_ln1238_1_fu_2552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1238_2_fu_2544_p3),64));
    zext_ln1238_2_fu_2578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln8_fu_2571_p3),192));
    zext_ln1238_3_fu_2567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1238_1_reg_4160_pp3_iter1_reg),64));
    zext_ln1238_5_fu_2521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_135_fu_2511_p4),64));
    zext_ln1238_fu_2457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1170_2_fu_2385_p3),10));
    zext_ln1254_fu_1707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trapezoid_edges_q0),64));
    zext_ln15_4_fu_1785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_4_fu_1776_p4),169));
    zext_ln15_5_fu_1904_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_5_fu_1895_p4),169));
    zext_ln15_fu_1445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_1435_p4),111));
    zext_ln17_1_fu_3560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln17_fu_3554_p2),64));
    zext_ln17_2_fu_3580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln17_fu_3574_p2),64));
    zext_ln17_3_fu_3595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln17_1_fu_3590_p2),64));
    zext_ln17_fu_3542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_10_reg_1145),10));
    zext_ln20_fu_3640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_fu_3635_p2),64));
    zext_ln341_fu_1449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_136_fu_1421_p4),9));
    zext_ln510_1_fu_1908_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_140_reg_4023),12));
    zext_ln510_fu_1789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_138_reg_4012),12));
    zext_ln54_10_fu_2100_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln54_9_fu_2093_p3),17));
    zext_ln54_11_fu_2303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln54_10_fu_2296_p3),17));
    zext_ln54_12_fu_2314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln54_11_fu_2307_p3),17));
    zext_ln54_2_fu_1228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln54_1_fu_1221_p3),17));
    zext_ln54_3_fu_1267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln54_2_fu_1259_p3),37));
    zext_ln54_4_fu_1279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln54_3_fu_1271_p3),37));
    zext_ln54_5_fu_3236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln54_4_fu_3229_p3),17));
    zext_ln54_6_fu_3247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln54_5_fu_3240_p3),17));
    zext_ln54_7_fu_2191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln54_6_fu_2184_p3),17));
    zext_ln54_8_fu_2202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln54_7_fu_2195_p3),17));
    zext_ln54_9_fu_2089_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln54_8_fu_2082_p3),17));
    zext_ln54_fu_1217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln54_s_fu_1210_p3),17));
    zext_ln662_4_fu_1851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_127_fu_1843_p3),64));
    zext_ln662_5_fu_1970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_131_fu_1962_p3),64));
    zext_ln662_fu_1513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_123_fu_1505_p3),64));
end behav;
