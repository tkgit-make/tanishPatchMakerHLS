// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module makePatches_ShadowQuilt_fromEdges_areWedgeSuperPointsEqual_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        patches_superpoints_31_address0,
        patches_superpoints_31_ce0,
        patches_superpoints_31_q0,
        patches_superpoints_31_address1,
        patches_superpoints_31_ce1,
        patches_superpoints_31_q1,
        patches_superpoints_30_address0,
        patches_superpoints_30_ce0,
        patches_superpoints_30_q0,
        patches_superpoints_30_address1,
        patches_superpoints_30_ce1,
        patches_superpoints_30_q1,
        wsp1,
        wsp2,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
output  [9:0] patches_superpoints_31_address0;
output   patches_superpoints_31_ce0;
input  [63:0] patches_superpoints_31_q0;
output  [9:0] patches_superpoints_31_address1;
output   patches_superpoints_31_ce1;
input  [63:0] patches_superpoints_31_q1;
output  [9:0] patches_superpoints_30_address0;
output   patches_superpoints_30_ce0;
input  [63:0] patches_superpoints_30_q0;
output  [9:0] patches_superpoints_30_address1;
output   patches_superpoints_30_ce1;
input  [63:0] patches_superpoints_30_q1;
input  [2:0] wsp1;
input  [2:0] wsp2;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg patches_superpoints_31_ce0;
reg patches_superpoints_31_ce1;
reg patches_superpoints_30_ce0;
reg patches_superpoints_30_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln36_1_fu_164_p1;
wire   [63:0] zext_ln36_2_fu_175_p1;
wire   [63:0] zext_ln36_4_fu_212_p1;
wire   [63:0] zext_ln36_5_fu_223_p1;
wire   [63:0] grp_fu_126_p0;
wire   [63:0] grp_fu_129_p0;
wire   [6:0] tmp_s_fu_140_p3;
wire   [9:0] tmp_fu_132_p3;
wire   [9:0] zext_ln36_fu_148_p1;
wire   [9:0] add_ln36_fu_152_p2;
wire   [9:0] add_ln36_1_fu_158_p2;
wire   [9:0] add_ln36_2_fu_169_p2;
wire   [6:0] tmp_135_fu_188_p3;
wire   [9:0] tmp_134_fu_180_p3;
wire   [9:0] zext_ln36_3_fu_196_p1;
wire   [9:0] add_ln36_3_fu_200_p2;
wire   [9:0] add_ln36_4_fu_206_p2;
wire   [9:0] add_ln36_5_fu_217_p2;
wire   [63:0] grp_fu_126_p1;
wire   [63:0] data_V_fu_242_p1;
wire   [51:0] tmp_178_fu_256_p1;
wire   [53:0] mantissa_fu_260_p4;
wire   [10:0] tmp_177_fu_246_p4;
wire   [11:0] zext_ln510_fu_274_p1;
wire   [11:0] add_ln510_fu_278_p2;
wire   [10:0] sub_ln1311_fu_292_p2;
wire   [0:0] isNeg_fu_284_p3;
wire  signed [11:0] sext_ln1311_fu_298_p1;
wire   [11:0] ush_fu_302_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i_cast_cast_cast_fu_310_p1;
wire   [168:0] zext_ln15_fu_270_p1;
wire   [168:0] sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_314_p1;
wire   [168:0] r_V_fu_318_p2;
wire   [0:0] tmp_172_fu_330_p3;
wire   [168:0] r_V_16_fu_324_p2;
wire   [63:0] zext_ln662_fu_338_p1;
wire   [63:0] tmp_137_fu_342_p4;
wire   [63:0] val_fu_352_p3;
wire   [63:0] grp_fu_129_p1;
wire   [63:0] data_V_14_fu_366_p1;
wire   [51:0] tmp_180_fu_380_p1;
wire   [53:0] mantissa_6_fu_384_p4;
wire   [10:0] tmp_179_fu_370_p4;
wire   [11:0] zext_ln510_2_fu_398_p1;
wire   [11:0] add_ln510_2_fu_402_p2;
wire   [10:0] sub_ln1311_5_fu_416_p2;
wire   [0:0] isNeg_6_fu_408_p3;
wire  signed [11:0] sext_ln1311_6_fu_422_p1;
wire   [11:0] ush_6_fu_426_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i64_cast_cast_cast_fu_434_p1;
wire   [168:0] zext_ln15_6_fu_394_p1;
wire   [168:0] sh_prom_i_i_i_i_i64_cast_cast_cast_cast_fu_438_p1;
wire   [168:0] r_V_17_fu_442_p2;
wire   [0:0] tmp_176_fu_454_p3;
wire   [168:0] r_V_18_fu_448_p2;
wire   [63:0] zext_ln662_6_fu_462_p1;
wire   [63:0] tmp_139_fu_466_p4;
wire   [63:0] val_6_fu_476_p3;
wire   [0:0] icmp_ln36_fu_360_p2;
wire   [0:0] icmp_ln36_1_fu_484_p2;
reg    grp_fu_126_ce;
reg    grp_fu_129_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

makePatches_ShadowQuilt_fromEdges_sitodp_64ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sitodp_64ns_64_2_no_dsp_1_U173(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_126_p0),
    .ce(grp_fu_126_ce),
    .dout(grp_fu_126_p1)
);

makePatches_ShadowQuilt_fromEdges_sitodp_64ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sitodp_64ns_64_2_no_dsp_1_U174(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_129_p0),
    .ce(grp_fu_129_ce),
    .dout(grp_fu_129_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_126_ce = 1'b1;
    end else begin
        grp_fu_126_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_129_ce = 1'b1;
    end else begin
        grp_fu_129_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        patches_superpoints_30_ce0 = 1'b1;
    end else begin
        patches_superpoints_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        patches_superpoints_30_ce1 = 1'b1;
    end else begin
        patches_superpoints_30_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        patches_superpoints_31_ce0 = 1'b1;
    end else begin
        patches_superpoints_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        patches_superpoints_31_ce1 = 1'b1;
    end else begin
        patches_superpoints_31_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln36_1_fu_158_p2 = (add_ln36_fu_152_p2 + 10'd99);

assign add_ln36_2_fu_169_p2 = (add_ln36_fu_152_p2 + 10'd102);

assign add_ln36_3_fu_200_p2 = (tmp_134_fu_180_p3 + zext_ln36_3_fu_196_p1);

assign add_ln36_4_fu_206_p2 = (add_ln36_3_fu_200_p2 + 10'd99);

assign add_ln36_5_fu_217_p2 = (add_ln36_3_fu_200_p2 + 10'd102);

assign add_ln36_fu_152_p2 = (tmp_fu_132_p3 + zext_ln36_fu_148_p1);

assign add_ln510_2_fu_402_p2 = ($signed(zext_ln510_2_fu_398_p1) + $signed(12'd3073));

assign add_ln510_fu_278_p2 = ($signed(zext_ln510_fu_274_p1) + $signed(12'd3073));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = (icmp_ln36_fu_360_p2 & icmp_ln36_1_fu_484_p2);

assign data_V_14_fu_366_p1 = grp_fu_129_p1;

assign data_V_fu_242_p1 = grp_fu_126_p1;

assign grp_fu_126_p0 = (patches_superpoints_31_q1 - patches_superpoints_30_q1);

assign grp_fu_129_p0 = (patches_superpoints_31_q0 - patches_superpoints_30_q0);

assign icmp_ln36_1_fu_484_p2 = (($signed(val_6_fu_476_p3) < $signed(64'd100)) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_360_p2 = (($signed(val_fu_352_p3) < $signed(64'd100)) ? 1'b1 : 1'b0);

assign isNeg_6_fu_408_p3 = add_ln510_2_fu_402_p2[32'd11];

assign isNeg_fu_284_p3 = add_ln510_fu_278_p2[32'd11];

assign mantissa_6_fu_384_p4 = {{{{1'd1}, {tmp_180_fu_380_p1}}}, {1'd0}};

assign mantissa_fu_260_p4 = {{{{1'd1}, {tmp_178_fu_256_p1}}}, {1'd0}};

assign patches_superpoints_30_address0 = zext_ln36_2_fu_175_p1;

assign patches_superpoints_30_address1 = zext_ln36_1_fu_164_p1;

assign patches_superpoints_31_address0 = zext_ln36_5_fu_223_p1;

assign patches_superpoints_31_address1 = zext_ln36_4_fu_212_p1;

assign r_V_16_fu_324_p2 = zext_ln15_fu_270_p1 << sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_314_p1;

assign r_V_17_fu_442_p2 = zext_ln15_6_fu_394_p1 >> sh_prom_i_i_i_i_i64_cast_cast_cast_cast_fu_438_p1;

assign r_V_18_fu_448_p2 = zext_ln15_6_fu_394_p1 << sh_prom_i_i_i_i_i64_cast_cast_cast_cast_fu_438_p1;

assign r_V_fu_318_p2 = zext_ln15_fu_270_p1 >> sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_314_p1;

assign sext_ln1311_6_fu_422_p1 = $signed(sub_ln1311_5_fu_416_p2);

assign sext_ln1311_fu_298_p1 = $signed(sub_ln1311_fu_292_p2);

assign sh_prom_i_i_i_i_i64_cast_cast_cast_cast_fu_438_p1 = $unsigned(sh_prom_i_i_i_i_i64_cast_cast_cast_fu_434_p1);

assign sh_prom_i_i_i_i_i64_cast_cast_cast_fu_434_p1 = $signed(ush_6_fu_426_p3);

assign sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_314_p1 = $unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_310_p1);

assign sh_prom_i_i_i_i_i_cast_cast_cast_fu_310_p1 = $signed(ush_fu_302_p3);

assign sub_ln1311_5_fu_416_p2 = (11'd1023 - tmp_179_fu_370_p4);

assign sub_ln1311_fu_292_p2 = (11'd1023 - tmp_177_fu_246_p4);

assign tmp_134_fu_180_p3 = {{wsp1}, {7'd0}};

assign tmp_135_fu_188_p3 = {{wsp1}, {4'd0}};

assign tmp_137_fu_342_p4 = {{r_V_16_fu_324_p2[116:53]}};

assign tmp_139_fu_466_p4 = {{r_V_18_fu_448_p2[116:53]}};

assign tmp_172_fu_330_p3 = r_V_fu_318_p2[32'd53];

assign tmp_176_fu_454_p3 = r_V_17_fu_442_p2[32'd53];

assign tmp_177_fu_246_p4 = {{data_V_fu_242_p1[62:52]}};

assign tmp_178_fu_256_p1 = data_V_fu_242_p1[51:0];

assign tmp_179_fu_370_p4 = {{data_V_14_fu_366_p1[62:52]}};

assign tmp_180_fu_380_p1 = data_V_14_fu_366_p1[51:0];

assign tmp_fu_132_p3 = {{wsp2}, {7'd0}};

assign tmp_s_fu_140_p3 = {{wsp2}, {4'd0}};

assign ush_6_fu_426_p3 = ((isNeg_6_fu_408_p3[0:0] == 1'b1) ? sext_ln1311_6_fu_422_p1 : add_ln510_2_fu_402_p2);

assign ush_fu_302_p3 = ((isNeg_fu_284_p3[0:0] == 1'b1) ? sext_ln1311_fu_298_p1 : add_ln510_fu_278_p2);

assign val_6_fu_476_p3 = ((isNeg_6_fu_408_p3[0:0] == 1'b1) ? zext_ln662_6_fu_462_p1 : tmp_139_fu_466_p4);

assign val_fu_352_p3 = ((isNeg_fu_284_p3[0:0] == 1'b1) ? zext_ln662_fu_338_p1 : tmp_137_fu_342_p4);

assign zext_ln15_6_fu_394_p1 = mantissa_6_fu_384_p4;

assign zext_ln15_fu_270_p1 = mantissa_fu_260_p4;

assign zext_ln36_1_fu_164_p1 = add_ln36_1_fu_158_p2;

assign zext_ln36_2_fu_175_p1 = add_ln36_2_fu_169_p2;

assign zext_ln36_3_fu_196_p1 = tmp_135_fu_188_p3;

assign zext_ln36_4_fu_212_p1 = add_ln36_4_fu_206_p2;

assign zext_ln36_5_fu_223_p1 = add_ln36_5_fu_217_p2;

assign zext_ln36_fu_148_p1 = tmp_s_fu_140_p3;

assign zext_ln510_2_fu_398_p1 = tmp_179_fu_370_p4;

assign zext_ln510_fu_274_p1 = tmp_177_fu_246_p4;

assign zext_ln662_6_fu_462_p1 = tmp_176_fu_454_p3;

assign zext_ln662_fu_338_p1 = tmp_172_fu_330_p3;

endmodule //makePatches_ShadowQuilt_fromEdges_areWedgeSuperPointsEqual_1
