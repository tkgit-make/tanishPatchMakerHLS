-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity makePatches_ShadowQuilt_fromEdges_areWedgeSuperPointsEqual_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    patches_superpoints_31_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    patches_superpoints_31_ce0 : OUT STD_LOGIC;
    patches_superpoints_31_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_31_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    patches_superpoints_31_ce1 : OUT STD_LOGIC;
    patches_superpoints_31_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_30_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    patches_superpoints_30_ce0 : OUT STD_LOGIC;
    patches_superpoints_30_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_30_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    patches_superpoints_30_ce1 : OUT STD_LOGIC;
    patches_superpoints_30_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    wsp1 : IN STD_LOGIC_VECTOR (2 downto 0);
    wsp2 : IN STD_LOGIC_VECTOR (2 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of makePatches_ShadowQuilt_fromEdges_areWedgeSuperPointsEqual_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv7_F : STD_LOGIC_VECTOR (6 downto 0) := "0001111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv64_64 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001100100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln23_1_fu_174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_2_fu_217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_4_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_5_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_132_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_135_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln23_fu_146_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_138_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_148_cast_fu_150_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln23_fu_158_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln23_fu_162_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln23_fu_168_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln23_1_fu_179_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln23_1_fu_193_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl3_cast_fu_197_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_150_cast_fu_185_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln23_1_fu_205_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln23_fu_211_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_2_fu_230_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_222_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_152_cast_fu_234_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln23_3_fu_242_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln23_2_fu_246_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln23_2_fu_252_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln23_3_fu_263_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln23_3_fu_277_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_281_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_154_cast_fu_269_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln23_3_fu_289_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln23_1_fu_295_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_195_fu_334_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_fu_338_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_194_fu_324_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln510_fu_352_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_fu_356_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_370_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_362_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_376_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_380_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_fu_388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_348_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_392_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal r_V_fu_396_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_189_fu_408_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_16_fu_402_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln662_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_131_fu_420_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_fu_430_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_135_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_14_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_197_fu_458_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_6_fu_462_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_196_fu_448_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln510_2_fu_476_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_2_fu_480_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_5_fu_494_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_6_fu_486_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_6_fu_500_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_6_fu_504_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i59_cast_cast_cast_fu_512_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_6_fu_472_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal sh_prom_i_i_i_i_i59_cast_cast_cast_cast_fu_516_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal r_V_17_fu_520_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_193_fu_532_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_18_fu_526_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln662_6_fu_540_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_fu_544_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_6_fu_554_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln23_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_1_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_132_ce : STD_LOGIC;
    signal grp_fu_135_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component makePatches_ShadowQuilt_fromEdges_sitodp_64ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    sitodp_64ns_64_2_no_dsp_1_U225 : component makePatches_ShadowQuilt_fromEdges_sitodp_64ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_132_p0,
        ce => grp_fu_132_ce,
        dout => grp_fu_132_p1);

    sitodp_64ns_64_2_no_dsp_1_U226 : component makePatches_ShadowQuilt_fromEdges_sitodp_64ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_135_p0,
        ce => grp_fu_135_ce,
        dout => grp_fu_135_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln23_1_fu_295_p2 <= std_logic_vector(unsigned(sub_ln23_3_fu_289_p2) + unsigned(ap_const_lv8_2));
    add_ln23_fu_211_p2 <= std_logic_vector(unsigned(sub_ln23_1_fu_205_p2) + unsigned(ap_const_lv8_2));
    add_ln510_2_fu_480_p2 <= std_logic_vector(unsigned(zext_ln510_2_fu_476_p1) + unsigned(ap_const_lv12_C01));
    add_ln510_fu_356_p2 <= std_logic_vector(unsigned(zext_ln510_fu_352_p1) + unsigned(ap_const_lv12_C01));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= (icmp_ln23_fu_438_p2 and icmp_ln23_1_fu_562_p2);
    data_V_14_fu_444_p1 <= grp_fu_135_p1;
    data_V_fu_320_p1 <= grp_fu_132_p1;

    grp_fu_132_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_132_ce <= ap_const_logic_1;
        else 
            grp_fu_132_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_132_p0 <= std_logic_vector(unsigned(patches_superpoints_31_q1) - unsigned(patches_superpoints_30_q1));

    grp_fu_135_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_135_ce <= ap_const_logic_1;
        else 
            grp_fu_135_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_135_p0 <= std_logic_vector(unsigned(patches_superpoints_31_q0) - unsigned(patches_superpoints_30_q0));
    icmp_ln23_1_fu_562_p2 <= "1" when (signed(val_6_fu_554_p3) < signed(ap_const_lv64_64)) else "0";
    icmp_ln23_fu_438_p2 <= "1" when (signed(val_fu_430_p3) < signed(ap_const_lv64_64)) else "0";
    isNeg_6_fu_486_p3 <= add_ln510_2_fu_480_p2(11 downto 11);
    isNeg_fu_362_p3 <= add_ln510_fu_356_p2(11 downto 11);
    mantissa_6_fu_462_p4 <= ((ap_const_lv1_1 & tmp_197_fu_458_p1) & ap_const_lv1_0);
    mantissa_fu_338_p4 <= ((ap_const_lv1_1 & tmp_195_fu_334_p1) & ap_const_lv1_0);
    or_ln23_1_fu_179_p2 <= (tmp_fu_138_p3 or ap_const_lv7_F);
    or_ln23_2_fu_252_p2 <= (sub_ln23_2_fu_246_p2 or ap_const_lv8_2);
    or_ln23_3_fu_263_p2 <= (tmp_s_fu_222_p3 or ap_const_lv7_F);
    or_ln23_fu_168_p2 <= (sub_ln23_fu_162_p2 or ap_const_lv8_2);
    p_shl3_cast_fu_197_p3 <= (trunc_ln23_1_fu_193_p1 & ap_const_lv2_0);
    p_shl_cast_fu_281_p3 <= (trunc_ln23_3_fu_277_p1 & ap_const_lv2_0);
    patches_superpoints_30_address0 <= zext_ln23_2_fu_217_p1(8 - 1 downto 0);
    patches_superpoints_30_address1 <= zext_ln23_1_fu_174_p1(8 - 1 downto 0);

    patches_superpoints_30_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            patches_superpoints_30_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_30_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_30_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            patches_superpoints_30_ce1 <= ap_const_logic_1;
        else 
            patches_superpoints_30_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    patches_superpoints_31_address0 <= zext_ln23_5_fu_301_p1(8 - 1 downto 0);
    patches_superpoints_31_address1 <= zext_ln23_4_fu_258_p1(8 - 1 downto 0);

    patches_superpoints_31_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            patches_superpoints_31_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_31_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_31_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            patches_superpoints_31_ce1 <= ap_const_logic_1;
        else 
            patches_superpoints_31_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_16_fu_402_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_348_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_392_p1(31-1 downto 0)))));
    r_V_17_fu_520_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_6_fu_472_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i59_cast_cast_cast_cast_fu_516_p1(31-1 downto 0)))));
    r_V_18_fu_526_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_6_fu_472_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i59_cast_cast_cast_cast_fu_516_p1(31-1 downto 0)))));
    r_V_fu_396_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_348_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_392_p1(31-1 downto 0)))));
        sext_ln1311_6_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_5_fu_494_p2),12));

        sext_ln1311_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_370_p2),12));

    sh_prom_i_i_i_i_i59_cast_cast_cast_cast_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i59_cast_cast_cast_fu_512_p1),169));
        sh_prom_i_i_i_i_i59_cast_cast_cast_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_6_fu_504_p3),32));

    sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_388_p1),169));
        sh_prom_i_i_i_i_i_cast_cast_cast_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_380_p3),32));

    sub_ln1311_5_fu_494_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_196_fu_448_p4));
    sub_ln1311_fu_370_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_194_fu_324_p4));
    sub_ln23_1_fu_205_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_197_p3) - unsigned(tmp_150_cast_fu_185_p3));
    sub_ln23_2_fu_246_p2 <= std_logic_vector(unsigned(tmp_152_cast_fu_234_p3) - unsigned(zext_ln23_3_fu_242_p1));
    sub_ln23_3_fu_289_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_281_p3) - unsigned(tmp_154_cast_fu_269_p3));
    sub_ln23_fu_162_p2 <= std_logic_vector(unsigned(tmp_148_cast_fu_150_p3) - unsigned(zext_ln23_fu_158_p1));
    tmp_131_fu_420_p4 <= r_V_16_fu_402_p2(116 downto 53);
    tmp_133_fu_544_p4 <= r_V_18_fu_526_p2(116 downto 53);
    tmp_148_cast_fu_150_p3 <= (trunc_ln23_fu_146_p1 & ap_const_lv6_0);
    tmp_150_cast_fu_185_p3 <= (ap_const_lv1_0 & or_ln23_1_fu_179_p2);
    tmp_152_cast_fu_234_p3 <= (trunc_ln23_2_fu_230_p1 & ap_const_lv6_0);
    tmp_154_cast_fu_269_p3 <= (ap_const_lv1_0 & or_ln23_3_fu_263_p2);
    tmp_189_fu_408_p3 <= r_V_fu_396_p2(53 downto 53);
    tmp_193_fu_532_p3 <= r_V_17_fu_520_p2(53 downto 53);
    tmp_194_fu_324_p4 <= data_V_fu_320_p1(62 downto 52);
    tmp_195_fu_334_p1 <= data_V_fu_320_p1(52 - 1 downto 0);
    tmp_196_fu_448_p4 <= data_V_14_fu_444_p1(62 downto 52);
    tmp_197_fu_458_p1 <= data_V_14_fu_444_p1(52 - 1 downto 0);
    tmp_fu_138_p3 <= (wsp2 & ap_const_lv4_0);
    tmp_s_fu_222_p3 <= (wsp1 & ap_const_lv4_0);
    trunc_ln23_1_fu_193_p1 <= or_ln23_1_fu_179_p2(6 - 1 downto 0);
    trunc_ln23_2_fu_230_p1 <= wsp1(2 - 1 downto 0);
    trunc_ln23_3_fu_277_p1 <= or_ln23_3_fu_263_p2(6 - 1 downto 0);
    trunc_ln23_fu_146_p1 <= wsp2(2 - 1 downto 0);
    ush_6_fu_504_p3 <= 
        sext_ln1311_6_fu_500_p1 when (isNeg_6_fu_486_p3(0) = '1') else 
        add_ln510_2_fu_480_p2;
    ush_fu_380_p3 <= 
        sext_ln1311_fu_376_p1 when (isNeg_fu_362_p3(0) = '1') else 
        add_ln510_fu_356_p2;
    val_6_fu_554_p3 <= 
        zext_ln662_6_fu_540_p1 when (isNeg_6_fu_486_p3(0) = '1') else 
        tmp_133_fu_544_p4;
    val_fu_430_p3 <= 
        zext_ln662_fu_416_p1 when (isNeg_fu_362_p3(0) = '1') else 
        tmp_131_fu_420_p4;
    zext_ln15_6_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_6_fu_462_p4),169));
    zext_ln15_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_338_p4),169));
    zext_ln23_1_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_fu_168_p2),64));
    zext_ln23_2_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_fu_211_p2),64));
    zext_ln23_3_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_222_p3),8));
    zext_ln23_4_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_2_fu_252_p2),64));
    zext_ln23_5_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_1_fu_295_p2),64));
    zext_ln23_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_138_p3),8));
    zext_ln510_2_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_196_fu_448_p4),12));
    zext_ln510_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_194_fu_324_p4),12));
    zext_ln662_6_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_193_fu_532_p3),64));
    zext_ln662_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_189_fu_408_p3),64));
end behav;
