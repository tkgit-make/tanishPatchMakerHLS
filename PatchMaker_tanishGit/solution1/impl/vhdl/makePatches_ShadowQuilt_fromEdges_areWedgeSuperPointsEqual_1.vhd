-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity makePatches_ShadowQuilt_fromEdges_areWedgeSuperPointsEqual_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    patches_superpoints_31_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    patches_superpoints_31_ce0 : OUT STD_LOGIC;
    patches_superpoints_31_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_31_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    patches_superpoints_31_ce1 : OUT STD_LOGIC;
    patches_superpoints_31_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_30_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    patches_superpoints_30_ce0 : OUT STD_LOGIC;
    patches_superpoints_30_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_30_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    patches_superpoints_30_ce1 : OUT STD_LOGIC;
    patches_superpoints_30_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    wsp1 : IN STD_LOGIC_VECTOR (2 downto 0);
    wsp2 : IN STD_LOGIC_VECTOR (2 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of makePatches_ShadowQuilt_fromEdges_areWedgeSuperPointsEqual_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_63 : STD_LOGIC_VECTOR (9 downto 0) := "0001100011";
    constant ap_const_lv10_66 : STD_LOGIC_VECTOR (9 downto 0) := "0001100110";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv64_64 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001100100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln36_1_fu_164_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_2_fu_175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_4_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_5_fu_223_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_126_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_129_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_140_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_132_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln36_fu_148_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln36_fu_152_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln36_1_fu_158_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln36_2_fu_169_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_135_fu_188_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_134_fu_180_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln36_3_fu_196_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln36_3_fu_200_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln36_4_fu_206_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln36_5_fu_217_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_178_fu_256_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_fu_260_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_177_fu_246_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln510_fu_274_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_fu_278_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_292_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_284_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_298_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_302_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_fu_310_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_270_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_314_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal r_V_fu_318_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_172_fu_330_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_16_fu_324_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln662_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_137_fu_342_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_fu_352_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_129_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_14_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_180_fu_380_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_6_fu_384_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_179_fu_370_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln510_2_fu_398_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_2_fu_402_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_5_fu_416_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_6_fu_408_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_6_fu_422_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_6_fu_426_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i64_cast_cast_cast_fu_434_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_6_fu_394_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal sh_prom_i_i_i_i_i64_cast_cast_cast_cast_fu_438_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal r_V_17_fu_442_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_176_fu_454_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_18_fu_448_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln662_6_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_139_fu_466_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_6_fu_476_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln36_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_1_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_126_ce : STD_LOGIC;
    signal grp_fu_129_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component makePatches_ShadowQuilt_fromEdges_sitodp_64ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    sitodp_64ns_64_2_no_dsp_1_U173 : component makePatches_ShadowQuilt_fromEdges_sitodp_64ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_126_p0,
        ce => grp_fu_126_ce,
        dout => grp_fu_126_p1);

    sitodp_64ns_64_2_no_dsp_1_U174 : component makePatches_ShadowQuilt_fromEdges_sitodp_64ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_129_p0,
        ce => grp_fu_129_ce,
        dout => grp_fu_129_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln36_1_fu_158_p2 <= std_logic_vector(unsigned(add_ln36_fu_152_p2) + unsigned(ap_const_lv10_63));
    add_ln36_2_fu_169_p2 <= std_logic_vector(unsigned(add_ln36_fu_152_p2) + unsigned(ap_const_lv10_66));
    add_ln36_3_fu_200_p2 <= std_logic_vector(unsigned(tmp_134_fu_180_p3) + unsigned(zext_ln36_3_fu_196_p1));
    add_ln36_4_fu_206_p2 <= std_logic_vector(unsigned(add_ln36_3_fu_200_p2) + unsigned(ap_const_lv10_63));
    add_ln36_5_fu_217_p2 <= std_logic_vector(unsigned(add_ln36_3_fu_200_p2) + unsigned(ap_const_lv10_66));
    add_ln36_fu_152_p2 <= std_logic_vector(unsigned(tmp_fu_132_p3) + unsigned(zext_ln36_fu_148_p1));
    add_ln510_2_fu_402_p2 <= std_logic_vector(unsigned(zext_ln510_2_fu_398_p1) + unsigned(ap_const_lv12_C01));
    add_ln510_fu_278_p2 <= std_logic_vector(unsigned(zext_ln510_fu_274_p1) + unsigned(ap_const_lv12_C01));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= (icmp_ln36_fu_360_p2 and icmp_ln36_1_fu_484_p2);
    data_V_14_fu_366_p1 <= grp_fu_129_p1;
    data_V_fu_242_p1 <= grp_fu_126_p1;

    grp_fu_126_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_126_ce <= ap_const_logic_1;
        else 
            grp_fu_126_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_126_p0 <= std_logic_vector(unsigned(patches_superpoints_31_q1) - unsigned(patches_superpoints_30_q1));

    grp_fu_129_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_129_ce <= ap_const_logic_1;
        else 
            grp_fu_129_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_129_p0 <= std_logic_vector(unsigned(patches_superpoints_31_q0) - unsigned(patches_superpoints_30_q0));
    icmp_ln36_1_fu_484_p2 <= "1" when (signed(val_6_fu_476_p3) < signed(ap_const_lv64_64)) else "0";
    icmp_ln36_fu_360_p2 <= "1" when (signed(val_fu_352_p3) < signed(ap_const_lv64_64)) else "0";
    isNeg_6_fu_408_p3 <= add_ln510_2_fu_402_p2(11 downto 11);
    isNeg_fu_284_p3 <= add_ln510_fu_278_p2(11 downto 11);
    mantissa_6_fu_384_p4 <= ((ap_const_lv1_1 & tmp_180_fu_380_p1) & ap_const_lv1_0);
    mantissa_fu_260_p4 <= ((ap_const_lv1_1 & tmp_178_fu_256_p1) & ap_const_lv1_0);
    patches_superpoints_30_address0 <= zext_ln36_2_fu_175_p1(10 - 1 downto 0);
    patches_superpoints_30_address1 <= zext_ln36_1_fu_164_p1(10 - 1 downto 0);

    patches_superpoints_30_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            patches_superpoints_30_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_30_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_30_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            patches_superpoints_30_ce1 <= ap_const_logic_1;
        else 
            patches_superpoints_30_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    patches_superpoints_31_address0 <= zext_ln36_5_fu_223_p1(10 - 1 downto 0);
    patches_superpoints_31_address1 <= zext_ln36_4_fu_212_p1(10 - 1 downto 0);

    patches_superpoints_31_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            patches_superpoints_31_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_31_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_31_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            patches_superpoints_31_ce1 <= ap_const_logic_1;
        else 
            patches_superpoints_31_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_16_fu_324_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_270_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_314_p1(31-1 downto 0)))));
    r_V_17_fu_442_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_6_fu_394_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i64_cast_cast_cast_cast_fu_438_p1(31-1 downto 0)))));
    r_V_18_fu_448_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_6_fu_394_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i64_cast_cast_cast_cast_fu_438_p1(31-1 downto 0)))));
    r_V_fu_318_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_270_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_314_p1(31-1 downto 0)))));
        sext_ln1311_6_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_5_fu_416_p2),12));

        sext_ln1311_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_292_p2),12));

    sh_prom_i_i_i_i_i64_cast_cast_cast_cast_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i64_cast_cast_cast_fu_434_p1),169));
        sh_prom_i_i_i_i_i64_cast_cast_cast_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_6_fu_426_p3),32));

    sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_310_p1),169));
        sh_prom_i_i_i_i_i_cast_cast_cast_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_302_p3),32));

    sub_ln1311_5_fu_416_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_179_fu_370_p4));
    sub_ln1311_fu_292_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_177_fu_246_p4));
    tmp_134_fu_180_p3 <= (wsp1 & ap_const_lv7_0);
    tmp_135_fu_188_p3 <= (wsp1 & ap_const_lv4_0);
    tmp_137_fu_342_p4 <= r_V_16_fu_324_p2(116 downto 53);
    tmp_139_fu_466_p4 <= r_V_18_fu_448_p2(116 downto 53);
    tmp_172_fu_330_p3 <= r_V_fu_318_p2(53 downto 53);
    tmp_176_fu_454_p3 <= r_V_17_fu_442_p2(53 downto 53);
    tmp_177_fu_246_p4 <= data_V_fu_242_p1(62 downto 52);
    tmp_178_fu_256_p1 <= data_V_fu_242_p1(52 - 1 downto 0);
    tmp_179_fu_370_p4 <= data_V_14_fu_366_p1(62 downto 52);
    tmp_180_fu_380_p1 <= data_V_14_fu_366_p1(52 - 1 downto 0);
    tmp_fu_132_p3 <= (wsp2 & ap_const_lv7_0);
    tmp_s_fu_140_p3 <= (wsp2 & ap_const_lv4_0);
    ush_6_fu_426_p3 <= 
        sext_ln1311_6_fu_422_p1 when (isNeg_6_fu_408_p3(0) = '1') else 
        add_ln510_2_fu_402_p2;
    ush_fu_302_p3 <= 
        sext_ln1311_fu_298_p1 when (isNeg_fu_284_p3(0) = '1') else 
        add_ln510_fu_278_p2;
    val_6_fu_476_p3 <= 
        zext_ln662_6_fu_462_p1 when (isNeg_6_fu_408_p3(0) = '1') else 
        tmp_139_fu_466_p4;
    val_fu_352_p3 <= 
        zext_ln662_fu_338_p1 when (isNeg_fu_284_p3(0) = '1') else 
        tmp_137_fu_342_p4;
    zext_ln15_6_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_6_fu_384_p4),169));
    zext_ln15_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_260_p4),169));
    zext_ln36_1_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_1_fu_158_p2),64));
    zext_ln36_2_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_2_fu_169_p2),64));
    zext_ln36_3_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_135_fu_188_p3),10));
    zext_ln36_4_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_4_fu_206_p2),64));
    zext_ln36_5_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_5_fu_217_p2),64));
    zext_ln36_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_140_p3),10));
    zext_ln510_2_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_179_fu_370_p4),12));
    zext_ln510_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_177_fu_246_p4),12));
    zext_ln662_6_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_176_fu_454_p3),64));
    zext_ln662_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_172_fu_330_p3),64));
end behav;
