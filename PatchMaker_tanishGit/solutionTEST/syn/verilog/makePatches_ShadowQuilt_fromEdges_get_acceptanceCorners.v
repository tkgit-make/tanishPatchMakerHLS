// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module makePatches_ShadowQuilt_fromEdges_get_acceptanceCorners (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read15,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read16,
        p_read17,
        p_read18,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [31:0] p_read2;
input  [31:0] p_read3;
input  [31:0] p_read4;
input  [31:0] p_read15;
input  [31:0] p_read6;
input  [31:0] p_read7;
input  [31:0] p_read8;
input  [31:0] p_read9;
input  [31:0] p_read10;
input  [31:0] p_read11;
input  [31:0] p_read12;
input  [31:0] p_read13;
input  [31:0] p_read14;
input  [31:0] p_read16;
input  [31:0] p_read17;
input  [31:0] p_read18;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;
output  [31:0] ap_return_6;
output  [31:0] ap_return_7;
output  [31:0] ap_return_8;
output  [31:0] ap_return_9;
output  [31:0] ap_return_10;
output  [31:0] ap_return_11;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] add_ln220_fu_233_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] a_corner_min_V_1_fu_265_p3;
wire   [0:0] icmp_ln220_fu_239_p2;
wire   [31:0] b_corner_min_V_3_fu_289_p3;
wire   [31:0] c_corner_max_V_1_fu_313_p3;
wire   [31:0] d_corner_max_V_3_fu_337_p3;
reg   [2:0] i_reg_174;
reg   [31:0] d_corner_max_V_reg_185;
reg   [31:0] c_corner_max_V_reg_197;
reg   [31:0] b_corner_min_V_reg_209;
reg   [31:0] a_corner_min_V_reg_221;
wire   [1:0] trunc_ln878_fu_245_p1;
wire   [31:0] tmp_fu_249_p6;
wire   [0:0] icmp_ln878_fu_259_p2;
wire   [31:0] b_corner_min_V_2_fu_273_p6;
wire   [0:0] icmp_ln878_10_fu_283_p2;
wire   [31:0] tmp_s_fu_297_p6;
wire   [0:0] icmp_ln886_fu_307_p2;
wire   [31:0] d_corner_max_V_2_fu_321_p6;
wire   [0:0] icmp_ln886_8_fu_331_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln874_1_fu_350_p2;
wire   [0:0] icmp_ln874_fu_345_p2;
wire   [0:0] and_ln256_fu_355_p2;
wire   [0:0] icmp_ln874_2_fu_365_p2;
wire   [0:0] icmp_ln874_3_fu_376_p2;
wire   [0:0] and_ln266_fu_381_p2;
wire   [0:0] and_ln261_fu_370_p2;
wire   [0:0] and_ln266_1_fu_391_p2;
wire   [0:0] icmp_ln886_7_fu_401_p2;
wire   [0:0] icmp_ln878_9_fu_423_p2;
wire   [31:0] select_ln273_fu_407_p3;
wire   [0:0] or_ln280_fu_445_p2;
wire   [31:0] select_ln273_1_fu_415_p3;
wire   [31:0] b_corner_min_V_1_fu_429_p3;
wire   [31:0] d_corner_max_V_1_fu_437_p3;
wire   [31:0] zext_ln266_fu_387_p1;
wire   [31:0] zext_ln874_fu_361_p1;
wire   [31:0] zext_ln886_fu_397_p1;
wire   [31:0] zext_ln280_fu_451_p1;
reg   [2:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

makePatches_ShadowQuilt_fromEdges_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U3166(
    .din0(p_read),
    .din1(p_read6),
    .din2(p_read10),
    .din3(p_read14),
    .din4(trunc_ln878_fu_245_p1),
    .dout(tmp_fu_249_p6)
);

makePatches_ShadowQuilt_fromEdges_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U3167(
    .din0(p_read1),
    .din1(p_read7),
    .din2(p_read11),
    .din3(p_read16),
    .din4(trunc_ln878_fu_245_p1),
    .dout(b_corner_min_V_2_fu_273_p6)
);

makePatches_ShadowQuilt_fromEdges_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U3168(
    .din0(p_read2),
    .din1(p_read8),
    .din2(p_read12),
    .din3(p_read17),
    .din4(trunc_ln878_fu_245_p1),
    .dout(tmp_s_fu_297_p6)
);

makePatches_ShadowQuilt_fromEdges_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U3169(
    .din0(p_read3),
    .din1(p_read9),
    .din2(p_read13),
    .din3(p_read18),
    .din4(trunc_ln878_fu_245_p1),
    .dout(d_corner_max_V_2_fu_321_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln220_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_corner_min_V_reg_221 <= a_corner_min_V_1_fu_265_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        a_corner_min_V_reg_221 <= 32'd4294967295;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln220_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        b_corner_min_V_reg_209 <= b_corner_min_V_3_fu_289_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        b_corner_min_V_reg_209 <= 32'd4294967295;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln220_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_corner_max_V_reg_197 <= c_corner_max_V_1_fu_313_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_corner_max_V_reg_197 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln220_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        d_corner_max_V_reg_185 <= d_corner_max_V_3_fu_337_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        d_corner_max_V_reg_185 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln220_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_174 <= add_ln220_fu_233_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_174 <= 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln220_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_corner_min_V_1_fu_265_p3 = ((icmp_ln878_fu_259_p2[0:0] == 1'b1) ? tmp_fu_249_p6 : a_corner_min_V_reg_221);

assign add_ln220_fu_233_p2 = (i_reg_174 + 3'd1);

assign and_ln256_fu_355_p2 = (icmp_ln874_fu_345_p2 & icmp_ln874_1_fu_350_p2);

assign and_ln261_fu_370_p2 = (icmp_ln874_2_fu_365_p2 & and_ln256_fu_355_p2);

assign and_ln266_1_fu_391_p2 = (icmp_ln874_3_fu_376_p2 & and_ln261_fu_370_p2);

assign and_ln266_fu_381_p2 = (icmp_ln874_3_fu_376_p2 & icmp_ln874_2_fu_365_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_return_0 = p_read4;

assign ap_return_1 = select_ln273_1_fu_415_p3;

assign ap_return_10 = zext_ln886_fu_397_p1;

assign ap_return_11 = zext_ln280_fu_451_p1;

assign ap_return_2 = p_read15;

assign ap_return_3 = b_corner_min_V_1_fu_429_p3;

assign ap_return_4 = p_read4;

assign ap_return_5 = select_ln273_fu_407_p3;

assign ap_return_6 = p_read15;

assign ap_return_7 = d_corner_max_V_1_fu_437_p3;

assign ap_return_8 = zext_ln266_fu_387_p1;

assign ap_return_9 = zext_ln874_fu_361_p1;

assign b_corner_min_V_1_fu_429_p3 = ((icmp_ln878_9_fu_423_p2[0:0] == 1'b1) ? select_ln273_fu_407_p3 : b_corner_min_V_reg_209);

assign b_corner_min_V_3_fu_289_p3 = ((icmp_ln878_10_fu_283_p2[0:0] == 1'b1) ? b_corner_min_V_2_fu_273_p6 : b_corner_min_V_reg_209);

assign c_corner_max_V_1_fu_313_p3 = ((icmp_ln886_fu_307_p2[0:0] == 1'b1) ? tmp_s_fu_297_p6 : c_corner_max_V_reg_197);

assign d_corner_max_V_1_fu_437_p3 = ((icmp_ln878_9_fu_423_p2[0:0] == 1'b1) ? select_ln273_fu_407_p3 : d_corner_max_V_reg_185);

assign d_corner_max_V_3_fu_337_p3 = ((icmp_ln886_8_fu_331_p2[0:0] == 1'b1) ? d_corner_max_V_2_fu_321_p6 : d_corner_max_V_reg_185);

assign icmp_ln220_fu_239_p2 = ((i_reg_174 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln874_1_fu_350_p2 = ((b_corner_min_V_reg_209 == p_read16) ? 1'b1 : 1'b0);

assign icmp_ln874_2_fu_365_p2 = ((c_corner_max_V_reg_197 == p_read17) ? 1'b1 : 1'b0);

assign icmp_ln874_3_fu_376_p2 = ((d_corner_max_V_reg_185 == p_read18) ? 1'b1 : 1'b0);

assign icmp_ln874_fu_345_p2 = ((a_corner_min_V_reg_221 == p_read14) ? 1'b1 : 1'b0);

assign icmp_ln878_10_fu_283_p2 = (($signed(b_corner_min_V_2_fu_273_p6) < $signed(b_corner_min_V_reg_209)) ? 1'b1 : 1'b0);

assign icmp_ln878_9_fu_423_p2 = (($signed(b_corner_min_V_reg_209) < $signed(d_corner_max_V_reg_185)) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_259_p2 = (($signed(tmp_fu_249_p6) < $signed(a_corner_min_V_reg_221)) ? 1'b1 : 1'b0);

assign icmp_ln886_7_fu_401_p2 = (($signed(c_corner_max_V_reg_197) > $signed(a_corner_min_V_reg_221)) ? 1'b1 : 1'b0);

assign icmp_ln886_8_fu_331_p2 = (($signed(d_corner_max_V_2_fu_321_p6) > $signed(d_corner_max_V_reg_185)) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_307_p2 = (($signed(tmp_s_fu_297_p6) > $signed(c_corner_max_V_reg_197)) ? 1'b1 : 1'b0);

assign or_ln280_fu_445_p2 = (icmp_ln886_7_fu_401_p2 | icmp_ln878_9_fu_423_p2);

assign select_ln273_1_fu_415_p3 = ((icmp_ln886_7_fu_401_p2[0:0] == 1'b1) ? b_corner_min_V_reg_209 : a_corner_min_V_reg_221);

assign select_ln273_fu_407_p3 = ((icmp_ln886_7_fu_401_p2[0:0] == 1'b1) ? b_corner_min_V_reg_209 : c_corner_max_V_reg_197);

assign trunc_ln878_fu_245_p1 = i_reg_174[1:0];

assign zext_ln266_fu_387_p1 = and_ln266_fu_381_p2;

assign zext_ln280_fu_451_p1 = or_ln280_fu_445_p2;

assign zext_ln874_fu_361_p1 = and_ln256_fu_355_p2;

assign zext_ln886_fu_397_p1 = and_ln266_1_fu_391_p2;

endmodule //makePatches_ShadowQuilt_fromEdges_get_acceptanceCorners
