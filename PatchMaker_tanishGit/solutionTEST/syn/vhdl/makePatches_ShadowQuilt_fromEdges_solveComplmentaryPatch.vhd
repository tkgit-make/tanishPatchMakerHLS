-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity makePatches_ShadowQuilt_fromEdges_solveComplmentaryPatch is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n_patches_i : IN STD_LOGIC_VECTOR (7 downto 0);
    n_patches_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    n_patches_o_ap_vld : OUT STD_LOGIC;
    GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    GDn_points_ce0 : OUT STD_LOGIC;
    GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_we0 : OUT STD_LOGIC;
    patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce1 : OUT STD_LOGIC;
    patches_superpoints_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    ppl : IN STD_LOGIC_VECTOR (31 downto 0);
    nPatchesAtOriginal : IN STD_LOGIC_VECTOR (7 downto 0);
    previous_z_top_min_read : IN STD_LOGIC_VECTOR (31 downto 0);
    complementary_apexZ0 : IN STD_LOGIC_VECTOR (31 downto 0);
    white_space_height_read : IN STD_LOGIC_VECTOR (63 downto 0);
    original_c : IN STD_LOGIC_VECTOR (31 downto 0);
    original_d : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (31 downto 0);
    z_top_min_read : IN STD_LOGIC_VECTOR (31 downto 0);
    GDarrayDecoded_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    GDarrayDecoded_ce0 : OUT STD_LOGIC;
    GDarrayDecoded_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    GDarrayDecoded_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    GDarrayDecoded_ce1 : OUT STD_LOGIC;
    GDarrayDecoded_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_ce1 : OUT STD_LOGIC;
    patches_parameters_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    temp_V_ce0 : OUT STD_LOGIC;
    temp_V_we0 : OUT STD_LOGIC;
    temp_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    temp_V_ce1 : OUT STD_LOGIC;
    temp_V_we1 : OUT STD_LOGIC;
    temp_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_643_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_643_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_643_p_din3 : OUT STD_LOGIC_VECTOR (2 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_643_p_din4 : OUT STD_LOGIC_VECTOR (2 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_643_p_din5 : OUT STD_LOGIC_VECTOR (2 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_643_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_643_p_ce : OUT STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_643_p_start : OUT STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_643_p_ready : IN STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_643_p_done : IN STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_643_p_idle : IN STD_LOGIC;
    grp_fu_1824_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1824_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1824_p_ce : OUT STD_LOGIC;
    grp_fu_1827_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1827_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1827_p_ce : OUT STD_LOGIC;
    grp_fu_660_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_660_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_660_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_660_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_660_p_ce : OUT STD_LOGIC;
    grp_fu_1830_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1830_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1830_p_ce : OUT STD_LOGIC );
end;


architecture behav of makePatches_ShadowQuilt_fromEdges_solveComplmentaryPatch is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_pp8_stage0 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp9_stage0 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (89 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (89 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (89 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (89 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (89 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (89 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (89 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (89 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (89 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (89 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (89 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (89 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv55_2 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_401 : STD_LOGIC_VECTOR (10 downto 0) := "10000000001";
    constant ap_const_lv11_301 : STD_LOGIC_VECTOR (10 downto 0) := "01100000001";
    constant ap_const_lv11_201 : STD_LOGIC_VECTOR (10 downto 0) := "01000000001";
    constant ap_const_lv12_30 : STD_LOGIC_VECTOR (11 downto 0) := "000000110000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_37 : STD_LOGIC_VECTOR (11 downto 0) := "000000110111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_561 : STD_LOGIC_VECTOR (7 downto 0);
    signal index_reg_573 : STD_LOGIC_VECTOR (7 downto 0);
    signal minVal_reg_585 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_reg_609 : STD_LOGIC_VECTOR (7 downto 0);
    signal index_2_reg_621 : STD_LOGIC_VECTOR (7 downto 0);
    signal minVal_2_reg_634 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_7_reg_645 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_665 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_8_reg_705 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_10_reg_716 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_11_reg_727 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_12_reg_738 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_15_reg_750 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_14_reg_761 : STD_LOGIC_VECTOR (2 downto 0);
    signal layerSMin_reg_772 : STD_LOGIC_VECTOR (63 downto 0);
    signal layerWithSmallestShift_reg_784 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_940 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_block_state30_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state31_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state32_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_state33_pp5_stage0_iter3 : BOOLEAN;
    signal ap_block_state34_pp5_stage0_iter4 : BOOLEAN;
    signal ap_block_state35_pp5_stage0_iter5 : BOOLEAN;
    signal ap_block_state36_pp5_stage0_iter6 : BOOLEAN;
    signal ap_block_state37_pp5_stage0_iter7 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal icmp_ln936_reg_2815 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_899_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_945 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal icmp_ln936_reg_2815_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal ap_block_state39_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state40_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state41_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_state42_pp6_stage0_iter3 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal icmp_ln941_reg_2854 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln941_reg_2854_pp6_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_951 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal rhs_fu_956_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal rhs_reg_2613 : STD_LOGIC_VECTOR (32 downto 0);
    signal i_4_fu_960_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_4_reg_2623 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln412_fu_970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln412_reg_2628 : STD_LOGIC_VECTOR (0 downto 0);
    signal minVal_1_fu_1040_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal index_1_fu_1048_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln896_fu_1056_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln896_reg_2647 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln901_fu_1060_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln901_reg_2653 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln899_fu_1066_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_fu_1072_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_reg_2663 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln906_fu_1076_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln906_reg_2667 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln899_fu_1081_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln899_reg_2672 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_32_cast_fu_1094_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_cast_reg_2682 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal GDn_points_load_1_reg_2687 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_2_fu_1098_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal rhs_2_reg_2692 : STD_LOGIC_VECTOR (32 downto 0);
    signal i_13_fu_1102_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_13_reg_2697 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state19_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln412_1_fu_1112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln412_1_reg_2702 : STD_LOGIC_VECTOR (0 downto 0);
    signal minVal_3_fu_1184_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal index_3_fu_1192_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln907_fu_1200_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state22_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state23_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln907_fu_1206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln907_reg_2726 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_cast_fu_1212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_7_cast_reg_2730 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_1217_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_reg_2740 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal add_ln926_fu_1224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln926_reg_2744 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln928_fu_1235_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln928_reg_2749 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln917_fu_1239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln917_reg_2754 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln919_fu_1250_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln919_reg_2759 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln928_fu_1254_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state25_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state26_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln928_fu_1260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln928_reg_2769 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_9_cast_fu_1266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_9_cast_reg_2773 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln934_fu_1287_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln934_reg_2783 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal add_ln919_fu_1295_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal ap_block_state28_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state29_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal icmp_ln919_fu_1301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln919_reg_2796 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_cast_fu_1307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_8_cast_reg_2800 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln936_fu_1319_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal icmp_ln936_fu_1325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln936_reg_2815_pp5_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln936_reg_2815_pp5_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln936_reg_2815_pp5_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln936_reg_2815_pp5_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln936_reg_2815_pp5_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal new_z_i_index_addr_3_reg_2819 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_2819_pp5_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_2819_pp5_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_2819_pp5_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_2819_pp5_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_2819_pp5_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_2819_pp5_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln938_fu_1337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_894_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_2835 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_2835_pp5_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_903_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_2842 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln941_fu_1549_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal icmp_ln941_fu_1555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln941_reg_2854_pp6_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal new_z_i_index_addr_4_reg_2858 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_4_reg_2858_pp6_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_4_reg_2858_pp6_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln943_fu_1566_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln947_fu_1740_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln947_reg_2869 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal ap_block_state44_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state45_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_state46_pp7_stage0_iter2 : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal icmp_ln947_fu_1746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_reg_2874 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_reg_2874_pp7_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_12_cast_fu_1752_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_12_cast_reg_2878 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_12_cast_reg_2878_pp7_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln953_fu_1796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln953_reg_2923 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp8_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp8_stage0 : signal is "none";
    signal ap_block_state48_pp8_stage0_iter0 : BOOLEAN;
    signal ap_block_state49_pp8_stage0_iter1 : BOOLEAN;
    signal ap_block_state50_pp8_stage0_iter2 : BOOLEAN;
    signal ap_block_state51_pp8_stage0_iter3 : BOOLEAN;
    signal ap_block_state52_pp8_stage0_iter4 : BOOLEAN;
    signal ap_block_state53_pp8_stage0_iter5 : BOOLEAN;
    signal ap_block_state54_pp8_stage0_iter6 : BOOLEAN;
    signal ap_block_state55_pp8_stage0_iter7 : BOOLEAN;
    signal ap_block_state56_pp8_stage0_iter8 : BOOLEAN;
    signal ap_block_state57_pp8_stage0_iter9 : BOOLEAN;
    signal ap_block_state58_pp8_stage0_iter10 : BOOLEAN;
    signal ap_block_state59_pp8_stage0_iter11 : BOOLEAN;
    signal ap_block_state60_pp8_stage0_iter12 : BOOLEAN;
    signal ap_block_pp8_stage0_11001 : BOOLEAN;
    signal add_ln958_fu_1802_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln958_reg_2927 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp8_iter0 : STD_LOGIC := '0';
    signal trunc_ln955_fu_1813_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln955_reg_2938 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln955_reg_2938_pp8_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln955_reg_2938_pp8_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln955_reg_2938_pp8_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln955_reg_2938_pp8_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln955_reg_2938_pp8_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln955_reg_2938_pp8_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln955_reg_2938_pp8_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln955_reg_2938_pp8_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln955_reg_2938_pp8_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln955_reg_2938_pp8_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln955_reg_2938_pp8_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln965_fu_1842_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp9_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp9_stage0 : signal is "none";
    signal ap_enable_reg_pp9_iter0 : STD_LOGIC := '0';
    signal ap_block_state62_pp9_stage0_iter0 : BOOLEAN;
    signal ap_block_state63_pp9_stage0_iter1 : BOOLEAN;
    signal ap_block_state64_pp9_stage0_iter2 : BOOLEAN;
    signal ap_block_pp9_stage0_11001 : BOOLEAN;
    signal icmp_ln965_fu_1848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln965_reg_2947 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln965_reg_2947_pp9_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln534_fu_1854_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln534_reg_2951 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln534_reg_2951_pp9_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln277_3_fu_1881_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_reg_2961 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_53_fu_1900_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_53_reg_2967 : STD_LOGIC_VECTOR (51 downto 0);
    signal layerWithSmallestShift_1_fu_2010_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp9_iter2 : STD_LOGIC := '0';
    signal layerSMin_1_fu_2018_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_3_fu_2030_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_3_reg_2982 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal sext_ln277_fu_2053_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln521_fu_2070_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal icmp_ln987_fu_2089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln987_reg_2999 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln987_1_fu_2095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln987_1_reg_3004 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_3009 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal tmp_50_cast_fu_2104_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_50_cast_reg_3014 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_4_fu_2132_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_4_reg_3025 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal sext_ln277_1_fu_2148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal bitcast_ln521_1_fu_2175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln992_fu_2194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln992_reg_3045 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln992_1_fu_2200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln992_1_reg_3050 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_5_fu_2216_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_5_reg_3055 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal sext_ln277_2_fu_2231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal bitcast_ln521_2_fu_2258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln997_fu_2277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln997_reg_3076 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln997_1_fu_2283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln997_1_reg_3081 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_6_fu_2299_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_6_reg_3086 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1019_fu_2306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_3092 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1002_fu_2339_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1002_reg_3096 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal zext_ln1038_fu_2352_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1038_reg_3103 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_makePatch_alignedToLine_fu_830_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ppl_assign2_reg_3108 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal lastPatchIdx_fu_2357_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lastPatchIdx_reg_3113 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1072_fu_2431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1072_reg_3130 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln534_1_fu_2477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln534_1_reg_3134 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal zext_ln1075_fu_2481_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1075_reg_3139 : STD_LOGIC_VECTOR (8 downto 0);
    signal thirdLastPatchIdx_fu_2484_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal thirdLastPatchIdx_reg_3144 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1082_fu_2490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1082_reg_3149 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal add_ln1082_fu_2496_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1082_reg_3153 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1102_fu_2546_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state121 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state121 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_flush_enable : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state22 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state25 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state28 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state30 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter7 : STD_LOGIC := '0';
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state39 : STD_LOGIC;
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_exit_iter0_state44 : STD_LOGIC;
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_block_pp8_stage0_subdone : BOOLEAN;
    signal ap_condition_pp8_exit_iter0_state48 : STD_LOGIC;
    signal ap_enable_reg_pp8_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter12 : STD_LOGIC := '0';
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_block_pp9_stage0_subdone : BOOLEAN;
    signal ap_condition_pp9_exit_iter0_state62 : STD_LOGIC;
    signal ap_enable_reg_pp9_iter1 : STD_LOGIC := '0';
    signal current_z_i_index_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal current_z_i_index_ce0 : STD_LOGIC;
    signal current_z_i_index_we0 : STD_LOGIC;
    signal current_z_i_index_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_z_i_index_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_ce0 : STD_LOGIC;
    signal new_z_i_index_we0 : STD_LOGIC;
    signal new_z_i_index_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_z_i_index_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_z_i_index_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_ce1 : STD_LOGIC;
    signal new_z_i_index_we1 : STD_LOGIC;
    signal new_z_i_index_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_z_i_index_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_z_i_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_V_ce0 : STD_LOGIC;
    signal new_z_i_V_we0 : STD_LOGIC;
    signal new_z_i_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_makePatch_alignedToLine_fu_830_ap_start : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_830_ap_done : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_830_ap_idle : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_830_ap_ready : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_830_n_patches_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_makePatch_alignedToLine_fu_830_n_patches_o_ap_vld : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_830_GDn_points_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_makePatch_alignedToLine_fu_830_GDn_points_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_830_patches_superpoints_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_makePatch_alignedToLine_fu_830_patches_superpoints_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_830_patches_superpoints_we0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_830_patches_superpoints_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_makePatch_alignedToLine_fu_830_z_top : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_makePatch_alignedToLine_fu_830_p_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_makePatch_alignedToLine_fu_830_GDarrayDecoded_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_makePatch_alignedToLine_fu_830_GDarrayDecoded_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_830_GDarrayDecoded_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_makePatch_alignedToLine_fu_830_GDarrayDecoded_ce1 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_830_patches_parameters_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_makePatch_alignedToLine_fu_830_patches_parameters_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_830_patches_parameters_we0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_830_patches_parameters_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_makePatch_alignedToLine_fu_830_temp_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_makePatch_alignedToLine_fu_830_temp_V_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_830_temp_V_we0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_830_temp_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_makePatch_alignedToLine_fu_830_temp_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_makePatch_alignedToLine_fu_830_temp_V_ce1 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_830_temp_V_we1 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_830_temp_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_areWedgeSuperPointsEqual_fu_855_ap_start : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_855_ap_done : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_855_ap_idle : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_855_ap_ready : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_855_wsp1_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_areWedgeSuperPointsEqual_fu_855_wsp1_2_ce0 : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_855_wsp1_2_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_areWedgeSuperPointsEqual_fu_855_wsp1_2_ce1 : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_855_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_867_ap_start : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_867_ap_done : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_867_ap_idle : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_867_ap_ready : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_867_ap_ce : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_867_z_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_867_z_j : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_867_i : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_867_j : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_867_k : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_867_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_delete_patch_fu_882_ap_start : STD_LOGIC;
    signal grp_delete_patch_fu_882_ap_done : STD_LOGIC;
    signal grp_delete_patch_fu_882_ap_idle : STD_LOGIC;
    signal grp_delete_patch_fu_882_ap_ready : STD_LOGIC;
    signal grp_delete_patch_fu_882_n_patches : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_delete_patch_fu_882_n_patches_ap_vld : STD_LOGIC;
    signal grp_delete_patch_fu_882_patches_superpoints_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_delete_patch_fu_882_patches_superpoints_ce0 : STD_LOGIC;
    signal grp_delete_patch_fu_882_patches_superpoints_we0 : STD_LOGIC;
    signal grp_delete_patch_fu_882_patches_superpoints_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_delete_patch_fu_882_patches_superpoints_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_delete_patch_fu_882_patches_superpoints_ce1 : STD_LOGIC;
    signal grp_delete_patch_fu_882_index : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_delete_patch_fu_882_patches_parameters_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_delete_patch_fu_882_patches_parameters_V_ce0 : STD_LOGIC;
    signal grp_delete_patch_fu_882_patches_parameters_V_we0 : STD_LOGIC;
    signal grp_delete_patch_fu_882_patches_parameters_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_delete_patch_fu_882_patches_parameters_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_delete_patch_fu_882_patches_parameters_V_ce1 : STD_LOGIC;
    signal ap_phi_mux_i_phi_fu_565_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_17_reg_597 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_phi_mux_i_5_phi_fu_613_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_empty_73_phi_fu_659_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_73_reg_656 : STD_LOGIC_VECTOR (8 downto 0);
    signal counter_0_reg_676 : STD_LOGIC_VECTOR (31 downto 0);
    signal counterUpshift_0_reg_686 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_76_phi_fu_699_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_i_12_phi_fu_742_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal ap_phi_mux_i_15_phi_fu_754_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp8_stage0 : BOOLEAN;
    signal i_16_reg_796 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal ap_phi_mux_current_z_top_index_0_phi_fu_811_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_z_top_index_0_reg_808 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal ap_phi_mux_z_top_min_4_phi_fu_822_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_top_min_4_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_makePatch_alignedToLine_fu_830_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal grp_areWedgeSuperPointsEqual_fu_855_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (89 downto 0);
    signal ap_NS_fsm_state81 : STD_LOGIC;
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal grp_straightLineProjectorFromLayerIJtoK_fu_867_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm_state7 : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_delete_patch_fu_882_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal tmp_7_fu_990_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_1_fu_1138_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal i_10_cast_fu_1331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal i_11_cast_fu_1561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal zext_ln949_1_fu_1791_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln958_cast_fu_1808_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln989_fu_2118_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln994_fu_2158_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln999_fu_2241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1050_1_fu_2405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1051_fu_2416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal new_z_i_atTop_V_3_fu_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_atTop_V_3_1_fu_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp9_stage0 : BOOLEAN;
    signal new_z_i_atTop_V_3_2_fu_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_atTop_V_3_3_fu_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_atTop_V_3_4_fu_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_921_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln921_fu_1312_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_fu_1540_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_899_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_903_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_906_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_906_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_913_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_913_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_918_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs_fu_956_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln412_fu_966_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_976_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln215_fu_984_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln215_fu_999_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_fu_1003_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_31_fu_1014_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln180_fu_1008_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal diff_fu_1022_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln414_fu_1030_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln415_fu_1034_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_fu_1072_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1086_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln412_1_fu_1108_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln215_fu_1117_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln215_fu_1121_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln215_fu_1126_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln215_1_fu_1132_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln215_4_fu_1143_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_3_fu_1147_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_32_fu_1158_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln180_1_fu_1152_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal diff_1_fu_1166_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln414_1_fu_1174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln415_1_fu_1178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_1217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln927_fu_1229_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln918_fu_1244_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln934_fu_1271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln934_fu_1275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln934_fu_1281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln938_fu_1342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln938_1_fu_1359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1345_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln938_fu_1355_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln938_1_fu_1382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln938_fu_1376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_1362_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln938_1_fu_1372_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln938_3_fu_1400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln938_2_fu_1394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln938_fu_1388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln938_1_fu_1406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln938_fu_1412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_906_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln938_1_fu_1418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dc_fu_1424_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_fu_1430_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_fu_1444_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_fu_1448_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_48_fu_1434_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln341_fu_1462_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln341_fu_1466_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_1480_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_1472_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_1486_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_1490_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_fu_1498_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_fu_1458_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1502_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_fu_1506_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_37_fu_1518_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_fu_1512_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal zext_ln662_fu_1526_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_1530_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln943_fu_1571_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1575_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_fu_1585_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln943_1_fu_1595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln943_fu_1589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln943_fu_1601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln943_fu_1607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln312_fu_1613_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal data_V_2_fu_1617_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_51_fu_1635_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_2_fu_1639_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_50_fu_1625_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln341_2_fu_1653_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln341_2_fu_1657_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_2_fu_1671_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_2_fu_1663_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_2_fu_1677_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_2_fu_1681_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_prom_i_i_i_i_i75_cast_cast_cast_fu_1689_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_1_fu_1649_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal sh_prom_i_i_i_i_i75_cast_cast_cast_cast_fu_1693_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_5_fu_1697_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_41_fu_1709_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_6_fu_1703_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal zext_ln662_1_fu_1717_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_1721_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_1757_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln947_fu_1765_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln949_fu_1769_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln949_fu_1773_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln949_fu_1779_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln949_fu_1785_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_17_fu_1858_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_17_fu_1858_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln967_fu_1872_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln967_fu_1876_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_918_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_3_fu_1886_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mantissa_3_fu_1904_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln510_fu_1917_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_fu_1920_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_3_fu_1934_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_3_fu_1926_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_3_fu_1939_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_3_fu_1943_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i102_cast_cast_cast_fu_1951_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_1913_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal sh_prom_i_i_i_i_i102_cast_cast_cast_cast_fu_1955_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal r_V_7_fu_1959_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_46_fu_1971_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_8_fu_1965_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln662_2_fu_1979_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_1983_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_3_fu_1993_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln967_fu_2001_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln967_fu_2007_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_3_fu_2030_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln215_5_fu_2044_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_8_fu_2048_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal data_V_4_fu_2058_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_2062_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln368_fu_2066_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_2075_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln987_fu_2085_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln989_fu_2101_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln989_fu_2112_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln987_fu_2123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln987_fu_2127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln215_6_fu_2139_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_10_fu_2143_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln994_fu_2153_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal data_V_5_fu_2163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_2_fu_2167_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln368_1_fu_2171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_2180_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln992_fu_2190_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln992_fu_2206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln992_fu_2210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln215_7_fu_2223_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_12_fu_2226_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln999_fu_2236_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal data_V_6_fu_2246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_3_fu_2250_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln368_2_fu_2254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_2263_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln997_fu_2273_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln997_fu_2289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln997_fu_2293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln215_8_fu_2314_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_14_fu_2317_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln1002_fu_2326_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_fu_2331_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1018_fu_2346_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1050_fu_2363_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_24_fu_2375_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_54_cast_fu_2367_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1050_fu_2383_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1050_fu_2387_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1050_fu_2393_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln1050_fu_2399_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1051_fu_2410_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_47_fu_2421_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln215_9_fu_2437_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_10_fu_2440_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_11_fu_2450_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_12_fu_2453_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_17_fu_2444_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_18_fu_2457_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln878_fu_2463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1056_fu_2469_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_899_ce : STD_LOGIC;
    signal grp_fu_903_ce : STD_LOGIC;
    signal ap_block_pp5_stage0_00001 : BOOLEAN;
    signal ap_block_pp6_stage0_00001 : BOOLEAN;
    signal grp_fu_913_ce : STD_LOGIC;
    signal grp_fu_913_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_918_ce : STD_LOGIC;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_state75_on_subcall_done : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal ap_idle_pp8 : STD_LOGIC;
    signal ap_enable_pp8 : STD_LOGIC;
    signal ap_idle_pp9 : STD_LOGIC;
    signal ap_enable_pp9 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component makePatches_ShadowQuilt_fromEdges_makePatch_alignedToLine IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        n_patches_i : IN STD_LOGIC_VECTOR (7 downto 0);
        n_patches_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        n_patches_o_ap_vld : OUT STD_LOGIC;
        GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        GDn_points_ce0 : OUT STD_LOGIC;
        GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_superpoints_ce0 : OUT STD_LOGIC;
        patches_superpoints_we0 : OUT STD_LOGIC;
        patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        patches_superpoints_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        apexZ0 : IN STD_LOGIC_VECTOR (31 downto 0);
        z_top : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        leftRight : IN STD_LOGIC_VECTOR (0 downto 0);
        GDarrayDecoded_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        GDarrayDecoded_ce0 : OUT STD_LOGIC;
        GDarrayDecoded_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        GDarrayDecoded_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        GDarrayDecoded_ce1 : OUT STD_LOGIC;
        GDarrayDecoded_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_parameters_ce0 : OUT STD_LOGIC;
        patches_parameters_we0 : OUT STD_LOGIC;
        patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        temp_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        temp_V_ce0 : OUT STD_LOGIC;
        temp_V_we0 : OUT STD_LOGIC;
        temp_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        temp_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        temp_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        temp_V_ce1 : OUT STD_LOGIC;
        temp_V_we1 : OUT STD_LOGIC;
        temp_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_areWedgeSuperPointsEqual IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        wsp1_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        wsp1_2_ce0 : OUT STD_LOGIC;
        wsp1_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        wsp1_2_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        wsp1_2_ce1 : OUT STD_LOGIC;
        wsp1_2_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        wsp1 : IN STD_LOGIC_VECTOR (7 downto 0);
        wsp11 : IN STD_LOGIC_VECTOR (2 downto 0);
        wsp2 : IN STD_LOGIC_VECTOR (7 downto 0);
        wsp23 : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_straightLineProjectorFromLayerIJtoK IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        z_i : IN STD_LOGIC_VECTOR (31 downto 0);
        z_j : IN STD_LOGIC_VECTOR (31 downto 0);
        i : IN STD_LOGIC_VECTOR (2 downto 0);
        j : IN STD_LOGIC_VECTOR (2 downto 0);
        k : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_delete_patch IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        n_patches : OUT STD_LOGIC_VECTOR (7 downto 0);
        n_patches_ap_vld : OUT STD_LOGIC;
        n_patches_read : IN STD_LOGIC_VECTOR (7 downto 0);
        patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_superpoints_ce0 : OUT STD_LOGIC;
        patches_superpoints_we0 : OUT STD_LOGIC;
        patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        patches_superpoints_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_superpoints_ce1 : OUT STD_LOGIC;
        patches_superpoints_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        index : IN STD_LOGIC_VECTOR (8 downto 0);
        patches_parameters_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_parameters_V_ce0 : OUT STD_LOGIC;
        patches_parameters_V_we0 : OUT STD_LOGIC;
        patches_parameters_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_parameters_V_ce1 : OUT STD_LOGIC;
        patches_parameters_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_fadd_32ns_32ns_32_3_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_sitofp_32ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_sitodp_64s_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_mul_33s_64s_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_solveComplmentaryPatch_current_z_i_index IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_solveComplmentaryPatch_new_z_i_index IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_solveComplmentaryPatch_new_z_i_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    current_z_i_index_U : component makePatches_ShadowQuilt_fromEdges_solveComplmentaryPatch_current_z_i_index
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => current_z_i_index_address0,
        ce0 => current_z_i_index_ce0,
        we0 => current_z_i_index_we0,
        d0 => index_2_reg_621,
        q0 => current_z_i_index_q0);

    new_z_i_index_U : component makePatches_ShadowQuilt_fromEdges_solveComplmentaryPatch_new_z_i_index
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => new_z_i_index_address0,
        ce0 => new_z_i_index_ce0,
        we0 => new_z_i_index_we0,
        d0 => new_z_i_index_d0,
        q0 => new_z_i_index_q0,
        address1 => new_z_i_index_address1,
        ce1 => new_z_i_index_ce1,
        we1 => new_z_i_index_we1,
        d1 => new_z_i_index_d1,
        q1 => new_z_i_index_q1);

    new_z_i_V_U : component makePatches_ShadowQuilt_fromEdges_solveComplmentaryPatch_new_z_i_V
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => new_z_i_V_address0,
        ce0 => new_z_i_V_ce0,
        we0 => new_z_i_V_we0,
        d0 => GDarrayDecoded_q0,
        q0 => new_z_i_V_q0);

    grp_makePatch_alignedToLine_fu_830 : component makePatches_ShadowQuilt_fromEdges_makePatch_alignedToLine
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_makePatch_alignedToLine_fu_830_ap_start,
        ap_done => grp_makePatch_alignedToLine_fu_830_ap_done,
        ap_idle => grp_makePatch_alignedToLine_fu_830_ap_idle,
        ap_ready => grp_makePatch_alignedToLine_fu_830_ap_ready,
        n_patches_i => n_patches_i,
        n_patches_o => grp_makePatch_alignedToLine_fu_830_n_patches_o,
        n_patches_o_ap_vld => grp_makePatch_alignedToLine_fu_830_n_patches_o_ap_vld,
        GDn_points_address0 => grp_makePatch_alignedToLine_fu_830_GDn_points_address0,
        GDn_points_ce0 => grp_makePatch_alignedToLine_fu_830_GDn_points_ce0,
        GDn_points_q0 => GDn_points_q0,
        patches_superpoints_address0 => grp_makePatch_alignedToLine_fu_830_patches_superpoints_address0,
        patches_superpoints_ce0 => grp_makePatch_alignedToLine_fu_830_patches_superpoints_ce0,
        patches_superpoints_we0 => grp_makePatch_alignedToLine_fu_830_patches_superpoints_we0,
        patches_superpoints_d0 => grp_makePatch_alignedToLine_fu_830_patches_superpoints_d0,
        patches_superpoints_q0 => patches_superpoints_q0,
        apexZ0 => complementary_apexZ0,
        z_top => grp_makePatch_alignedToLine_fu_830_z_top,
        p_read => grp_makePatch_alignedToLine_fu_830_p_read,
        leftRight => ap_const_lv1_1,
        GDarrayDecoded_address0 => grp_makePatch_alignedToLine_fu_830_GDarrayDecoded_address0,
        GDarrayDecoded_ce0 => grp_makePatch_alignedToLine_fu_830_GDarrayDecoded_ce0,
        GDarrayDecoded_q0 => GDarrayDecoded_q0,
        GDarrayDecoded_address1 => grp_makePatch_alignedToLine_fu_830_GDarrayDecoded_address1,
        GDarrayDecoded_ce1 => grp_makePatch_alignedToLine_fu_830_GDarrayDecoded_ce1,
        GDarrayDecoded_q1 => GDarrayDecoded_q1,
        patches_parameters_address0 => grp_makePatch_alignedToLine_fu_830_patches_parameters_address0,
        patches_parameters_ce0 => grp_makePatch_alignedToLine_fu_830_patches_parameters_ce0,
        patches_parameters_we0 => grp_makePatch_alignedToLine_fu_830_patches_parameters_we0,
        patches_parameters_d0 => grp_makePatch_alignedToLine_fu_830_patches_parameters_d0,
        patches_parameters_q0 => patches_parameters_q0,
        temp_V_address0 => grp_makePatch_alignedToLine_fu_830_temp_V_address0,
        temp_V_ce0 => grp_makePatch_alignedToLine_fu_830_temp_V_ce0,
        temp_V_we0 => grp_makePatch_alignedToLine_fu_830_temp_V_we0,
        temp_V_d0 => grp_makePatch_alignedToLine_fu_830_temp_V_d0,
        temp_V_q0 => temp_V_q0,
        temp_V_address1 => grp_makePatch_alignedToLine_fu_830_temp_V_address1,
        temp_V_ce1 => grp_makePatch_alignedToLine_fu_830_temp_V_ce1,
        temp_V_we1 => grp_makePatch_alignedToLine_fu_830_temp_V_we1,
        temp_V_d1 => grp_makePatch_alignedToLine_fu_830_temp_V_d1,
        ap_return => grp_makePatch_alignedToLine_fu_830_ap_return);

    grp_areWedgeSuperPointsEqual_fu_855 : component makePatches_ShadowQuilt_fromEdges_areWedgeSuperPointsEqual
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_areWedgeSuperPointsEqual_fu_855_ap_start,
        ap_done => grp_areWedgeSuperPointsEqual_fu_855_ap_done,
        ap_idle => grp_areWedgeSuperPointsEqual_fu_855_ap_idle,
        ap_ready => grp_areWedgeSuperPointsEqual_fu_855_ap_ready,
        wsp1_2_address0 => grp_areWedgeSuperPointsEqual_fu_855_wsp1_2_address0,
        wsp1_2_ce0 => grp_areWedgeSuperPointsEqual_fu_855_wsp1_2_ce0,
        wsp1_2_q0 => patches_superpoints_q0,
        wsp1_2_address1 => grp_areWedgeSuperPointsEqual_fu_855_wsp1_2_address1,
        wsp1_2_ce1 => grp_areWedgeSuperPointsEqual_fu_855_wsp1_2_ce1,
        wsp1_2_q1 => patches_superpoints_q1,
        wsp1 => lastPatchIdx_reg_3113,
        wsp11 => i_16_reg_796,
        wsp2 => thirdLastPatchIdx_reg_3144,
        wsp23 => i_16_reg_796,
        ap_return => grp_areWedgeSuperPointsEqual_fu_855_ap_return);

    grp_delete_patch_fu_882 : component makePatches_ShadowQuilt_fromEdges_delete_patch
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_delete_patch_fu_882_ap_start,
        ap_done => grp_delete_patch_fu_882_ap_done,
        ap_idle => grp_delete_patch_fu_882_ap_idle,
        ap_ready => grp_delete_patch_fu_882_ap_ready,
        n_patches => grp_delete_patch_fu_882_n_patches,
        n_patches_ap_vld => grp_delete_patch_fu_882_n_patches_ap_vld,
        n_patches_read => reg_951,
        patches_superpoints_address0 => grp_delete_patch_fu_882_patches_superpoints_address0,
        patches_superpoints_ce0 => grp_delete_patch_fu_882_patches_superpoints_ce0,
        patches_superpoints_we0 => grp_delete_patch_fu_882_patches_superpoints_we0,
        patches_superpoints_d0 => grp_delete_patch_fu_882_patches_superpoints_d0,
        patches_superpoints_address1 => grp_delete_patch_fu_882_patches_superpoints_address1,
        patches_superpoints_ce1 => grp_delete_patch_fu_882_patches_superpoints_ce1,
        patches_superpoints_q1 => patches_superpoints_q1,
        index => grp_delete_patch_fu_882_index,
        patches_parameters_V_address0 => grp_delete_patch_fu_882_patches_parameters_V_address0,
        patches_parameters_V_ce0 => grp_delete_patch_fu_882_patches_parameters_V_ce0,
        patches_parameters_V_we0 => grp_delete_patch_fu_882_patches_parameters_V_we0,
        patches_parameters_V_d0 => grp_delete_patch_fu_882_patches_parameters_V_d0,
        patches_parameters_V_address1 => grp_delete_patch_fu_882_patches_parameters_V_address1,
        patches_parameters_V_ce1 => grp_delete_patch_fu_882_patches_parameters_V_ce1,
        patches_parameters_V_q1 => patches_parameters_q1);

    fadd_32ns_32ns_32_3_full_dsp_1_U130 : component makePatches_ShadowQuilt_fromEdges_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_945,
        din1 => ap_const_lv32_BF800000,
        ce => ap_const_logic_1,
        dout => grp_fu_894_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U133 : component makePatches_ShadowQuilt_fromEdges_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_906_p0,
        din1 => grp_fu_906_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_906_p2);

    mux_42_32_1_1_U136 : component makePatches_ShadowQuilt_fromEdges_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => new_z_i_atTop_V_3_1_fu_268,
        din1 => new_z_i_atTop_V_3_2_fu_272,
        din2 => new_z_i_atTop_V_3_3_fu_276,
        din3 => new_z_i_atTop_V_3_4_fu_280,
        din4 => tmp_17_fu_1858_p5,
        dout => tmp_17_fu_1858_p6);

    mux_42_32_1_1_U137 : component makePatches_ShadowQuilt_fromEdges_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => new_z_i_atTop_V_3_1_fu_268,
        din1 => new_z_i_atTop_V_3_2_fu_272,
        din2 => new_z_i_atTop_V_3_3_fu_276,
        din3 => new_z_i_atTop_V_3_4_fu_280,
        din4 => lhs_3_fu_2030_p5,
        dout => lhs_3_fu_2030_p6);

    mul_33s_64s_64_1_1_U138 : component makePatches_ShadowQuilt_fromEdges_mul_33s_64s_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        din0 => ret_14_fu_2317_p2,
        din1 => white_space_height_read,
        dout => mul_ln1002_fu_2326_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp1_flush_enable)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state22) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln870_fu_1072_p2 = ap_const_lv1_1) and (icmp_ln899_fu_1066_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state22))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state22);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((icmp_ln870_fu_1072_p2 = ap_const_lv1_1) and (icmp_ln899_fu_1066_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state25) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((tmp_33_fu_1217_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state25))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state25);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif (((tmp_33_fu_1217_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state28) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((tmp_33_fu_1217_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state28))) then 
                    ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state28);
                elsif ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif (((tmp_33_fu_1217_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state30) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state30)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state30);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter4 <= ap_enable_reg_pp5_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter5 <= ap_enable_reg_pp5_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter6 <= ap_enable_reg_pp5_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter7 <= ap_enable_reg_pp5_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp5_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state39) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state39)) then 
                        ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state39);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter3 <= ap_enable_reg_pp6_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                    ap_enable_reg_pp6_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp7_exit_iter0_state44) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp7_exit_iter0_state44)) then 
                        ap_enable_reg_pp7_iter1 <= (ap_const_logic_1 xor ap_condition_pp7_exit_iter0_state44);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                    ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_logic_1 = ap_condition_pp8_exit_iter0_state48))) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp8_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp8_exit_iter0_state48)) then 
                        ap_enable_reg_pp8_iter1 <= (ap_const_logic_1 xor ap_condition_pp8_exit_iter0_state48);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp8_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter10 <= ap_enable_reg_pp8_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp8_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter11 <= ap_enable_reg_pp8_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp8_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter12 <= ap_enable_reg_pp8_iter11;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                    ap_enable_reg_pp8_iter12 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp8_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter2 <= ap_enable_reg_pp8_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp8_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter3 <= ap_enable_reg_pp8_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp8_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter4 <= ap_enable_reg_pp8_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp8_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter5 <= ap_enable_reg_pp8_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp8_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter6 <= ap_enable_reg_pp8_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp8_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter7 <= ap_enable_reg_pp8_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp8_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter8 <= ap_enable_reg_pp8_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp8_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter9 <= ap_enable_reg_pp8_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp9_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_logic_1 = ap_condition_pp9_exit_iter0_state62))) then 
                    ap_enable_reg_pp9_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                    ap_enable_reg_pp9_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp9_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp9_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp9_exit_iter0_state62)) then 
                        ap_enable_reg_pp9_iter1 <= (ap_const_logic_1 xor ap_condition_pp9_exit_iter0_state62);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp9_iter1 <= ap_enable_reg_pp9_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp9_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp9_stage0_subdone)) then 
                    ap_enable_reg_pp9_iter2 <= ap_enable_reg_pp9_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                    ap_enable_reg_pp9_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
                    ap_return_0_preg <= white_space_height_read;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
                    ap_return_1_preg <= lastPatchIdx_reg_3113;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
                    ap_return_2_preg <= ap_phi_mux_current_z_top_index_0_phi_fu_811_p6;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
                    ap_return_3_preg <= counter_0_reg_676;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
                    ap_return_4_preg <= counterUpshift_0_reg_686;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
                    ap_return_5_preg <= z_top_min_read;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
                    ap_return_6_preg <= sext_ln534_1_reg_3134;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
                    ap_return_7_preg <= ap_phi_mux_z_top_min_4_phi_fu_822_p6;
                end if; 
            end if;
        end if;
    end process;


    grp_areWedgeSuperPointsEqual_fu_855_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_areWedgeSuperPointsEqual_fu_855_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln1082_fu_2490_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80) and (ap_const_logic_1 = ap_NS_fsm_state81))) then 
                    grp_areWedgeSuperPointsEqual_fu_855_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_areWedgeSuperPointsEqual_fu_855_ap_ready = ap_const_logic_1)) then 
                    grp_areWedgeSuperPointsEqual_fu_855_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_delete_patch_fu_882_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_delete_patch_fu_882_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state102) or ((icmp_ln1019_reg_3092 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state74)))) then 
                    grp_delete_patch_fu_882_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_delete_patch_fu_882_ap_ready = ap_const_logic_1)) then 
                    grp_delete_patch_fu_882_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_makePatch_alignedToLine_fu_830_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_makePatch_alignedToLine_fu_830_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state76))) then 
                    grp_makePatch_alignedToLine_fu_830_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_makePatch_alignedToLine_fu_830_ap_ready = ap_const_logic_1)) then 
                    grp_makePatch_alignedToLine_fu_830_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_straightLineProjectorFromLayerIJtoK_fu_867_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_straightLineProjectorFromLayerIJtoK_fu_867_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (icmp_ln953_fu_1796_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = ap_NS_fsm_state7)))) then 
                    grp_straightLineProjectorFromLayerIJtoK_fu_867_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_straightLineProjectorFromLayerIJtoK_fu_867_ap_ready = ap_const_logic_1)) then 
                    grp_straightLineProjectorFromLayerIJtoK_fu_867_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    counterUpshift_0_reg_686_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                if ((tmp_33_reg_2740 = ap_const_lv1_1)) then 
                    counterUpshift_0_reg_686 <= p_read13;
                elsif ((tmp_33_reg_2740 = ap_const_lv1_0)) then 
                    counterUpshift_0_reg_686 <= add_ln926_reg_2744;
                end if;
            end if; 
        end if;
    end process;

    counter_0_reg_676_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                if ((tmp_33_reg_2740 = ap_const_lv1_1)) then 
                    counter_0_reg_676 <= add_ln917_reg_2754;
                elsif ((tmp_33_reg_2740 = ap_const_lv1_0)) then 
                    counter_0_reg_676 <= p_read12;
                end if;
            end if; 
        end if;
    end process;

    current_z_top_index_0_reg_808_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln1072_reg_3130 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state79)) or ((icmp_ln1082_reg_3149 = ap_const_lv1_1) and (icmp_ln1072_reg_3130 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state101)))) then 
                current_z_top_index_0_reg_808 <= select_ln934_reg_2783;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
                current_z_top_index_0_reg_808 <= add_ln1102_fu_2546_p2;
            end if; 
        end if;
    end process;

    empty_73_reg_656_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln870_reg_2663 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                empty_73_reg_656 <= add_ln906_reg_2667;
            elsif (((icmp_ln870_fu_1072_p2 = ap_const_lv1_0) and (icmp_ln899_fu_1066_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                empty_73_reg_656 <= zext_ln896_reg_2647;
            end if; 
        end if;
    end process;

    i_10_reg_716_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln936_fu_1325_p2 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                i_10_reg_716 <= add_ln936_fu_1319_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                i_10_reg_716 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_11_reg_727_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                i_11_reg_727 <= ap_const_lv3_0;
            elsif (((icmp_ln941_fu_1555_p2 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
                i_11_reg_727 <= add_ln941_fu_1549_p2;
            end if; 
        end if;
    end process;

    i_12_reg_738_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                i_12_reg_738 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (icmp_ln947_reg_2874 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                i_12_reg_738 <= add_ln947_reg_2869;
            end if; 
        end if;
    end process;

    i_14_reg_761_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                i_14_reg_761 <= ap_const_lv3_0;
            elsif (((icmp_ln965_fu_1848_p2 = ap_const_lv1_0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then 
                i_14_reg_761 <= add_ln965_fu_1842_p2;
            end if; 
        end if;
    end process;

    i_15_reg_750_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                i_15_reg_750 <= ap_const_lv3_1;
            elsif (((icmp_ln953_reg_2923 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1))) then 
                i_15_reg_750 <= add_ln958_reg_2927;
            end if; 
        end if;
    end process;

    i_16_reg_796_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1082_reg_3149 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state100) and (grp_areWedgeSuperPointsEqual_fu_855_ap_return = ap_const_lv1_1))) then 
                i_16_reg_796 <= add_ln1082_reg_3153;
            elsif (((icmp_ln1072_reg_3130 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
                i_16_reg_796 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_17_reg_597_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i_17_reg_597 <= add_ln901_reg_2653;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_17_reg_597 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_5_reg_609_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln412_1_reg_2702 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_5_reg_609 <= i_13_reg_2697;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i_5_reg_609 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_7_reg_645_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln870_fu_1072_p2 = ap_const_lv1_1) and (icmp_ln899_fu_1066_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_7_reg_645 <= ap_const_lv3_0;
            elsif (((icmp_ln907_fu_1206_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_7_reg_645 <= add_ln907_fu_1200_p2;
            end if; 
        end if;
    end process;

    i_8_reg_705_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_33_fu_1217_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                i_8_reg_705 <= ap_const_lv3_0;
            elsif (((icmp_ln919_fu_1301_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                i_8_reg_705 <= add_ln919_fu_1295_p2;
            end if; 
        end if;
    end process;

    i_9_reg_665_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_33_fu_1217_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                i_9_reg_665 <= ap_const_lv3_0;
            elsif (((icmp_ln928_fu_1260_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                i_9_reg_665 <= add_ln928_fu_1254_p2;
            end if; 
        end if;
    end process;

    i_reg_561_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln412_reg_2628 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_561 <= i_4_reg_2623;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_561 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    index_2_reg_621_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln412_1_reg_2702 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                index_2_reg_621 <= index_3_fu_1192_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                index_2_reg_621 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    index_reg_573_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln412_reg_2628 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                index_reg_573 <= index_1_fu_1048_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                index_reg_573 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    layerSMin_reg_772_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                layerSMin_reg_772 <= ap_const_lv64_7FFFFFFFFFFFFFFF;
            elsif (((ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (icmp_ln965_reg_2947_pp9_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001))) then 
                layerSMin_reg_772 <= layerSMin_1_fu_2018_p3;
            end if; 
        end if;
    end process;

    layerWithSmallestShift_reg_784_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                layerWithSmallestShift_reg_784 <= ap_const_lv8_0;
            elsif (((ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (icmp_ln965_reg_2947_pp9_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001))) then 
                layerWithSmallestShift_reg_784 <= layerWithSmallestShift_1_fu_2010_p3;
            end if; 
        end if;
    end process;

    minVal_2_reg_634_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln412_1_reg_2702 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                minVal_2_reg_634 <= minVal_3_fu_1184_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                minVal_2_reg_634 <= ap_const_lv64_7FFFFFFFFFFFFFFF;
            end if; 
        end if;
    end process;

    minVal_reg_585_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln412_reg_2628 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                minVal_reg_585 <= minVal_1_fu_1040_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                minVal_reg_585 <= ap_const_lv64_7FFFFFFFFFFFFFFF;
            end if; 
        end if;
    end process;

    z_top_min_4_reg_819_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln1072_reg_3130 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state79)) or ((icmp_ln1082_reg_3149 = ap_const_lv1_1) and (icmp_ln1072_reg_3130 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state101)))) then 
                z_top_min_4_reg_819 <= select_ln1002_reg_3096;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
                z_top_min_4_reg_819 <= lhs_3_reg_2982;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                GDn_points_load_1_reg_2687 <= GDn_points_q0;
                rhs_2_reg_2692 <= rhs_2_fu_1098_p1;
                    tmp_32_cast_reg_2682(9 downto 7) <= tmp_32_cast_fu_1094_p1(9 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then
                add_ln1082_reg_3153 <= add_ln1082_fu_2496_p2;
                icmp_ln1082_reg_3149 <= icmp_ln1082_fu_2490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln901_reg_2653 <= add_ln901_fu_1060_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln870_fu_1072_p2 = ap_const_lv1_1) and (icmp_ln899_fu_1066_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln906_reg_2667 <= add_ln906_fu_1076_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_33_fu_1217_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                add_ln917_reg_2754 <= add_ln917_fu_1239_p2;
                sext_ln919_reg_2759 <= sext_ln919_fu_1250_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_33_fu_1217_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                add_ln926_reg_2744 <= add_ln926_fu_1224_p2;
                    zext_ln928_reg_2749(8 downto 0) <= zext_ln928_fu_1235_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                add_ln947_reg_2869 <= add_ln947_fu_1740_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (icmp_ln953_fu_1796_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then
                add_ln958_reg_2927 <= add_ln958_fu_1802_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln936_reg_2815_pp5_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                conv_reg_2842 <= grp_fu_1827_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln947_fu_1746_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                    i_12_cast_reg_2878(2 downto 0) <= i_12_cast_fu_1752_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                    i_12_cast_reg_2878_pp7_iter1_reg(2 downto 0) <= i_12_cast_reg_2878(2 downto 0);
                icmp_ln947_reg_2874 <= icmp_ln947_fu_1746_p2;
                icmp_ln947_reg_2874_pp7_iter1_reg <= icmp_ln947_reg_2874;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                i_13_reg_2697 <= i_13_fu_1102_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_4_reg_2623 <= i_4_fu_960_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln907_fu_1206_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                    i_7_cast_reg_2730(2 downto 0) <= i_7_cast_fu_1212_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln919_fu_1301_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                    i_8_cast_reg_2800(2 downto 0) <= i_8_cast_fu_1307_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln928_fu_1260_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                    i_9_cast_reg_2773(2 downto 0) <= i_9_cast_fu_1266_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then
                icmp_ln1019_reg_3092 <= icmp_ln1019_fu_2306_p2;
                lhs_6_reg_3086 <= lhs_6_fu_2299_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                icmp_ln1072_reg_3130 <= icmp_ln1072_fu_2431_p2;
                lastPatchIdx_reg_3113 <= lastPatchIdx_fu_2357_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln412_1_reg_2702 <= icmp_ln412_1_fu_1112_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln412_reg_2628 <= icmp_ln412_fu_970_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln899_fu_1066_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                icmp_ln870_reg_2663 <= icmp_ln870_fu_1072_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln907_reg_2726 <= icmp_ln907_fu_1206_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln919_reg_2796 <= icmp_ln919_fu_1301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln928_reg_2769 <= icmp_ln928_fu_1260_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                icmp_ln936_reg_2815 <= icmp_ln936_fu_1325_p2;
                icmp_ln936_reg_2815_pp5_iter1_reg <= icmp_ln936_reg_2815;
                new_z_i_index_addr_3_reg_2819_pp5_iter1_reg <= new_z_i_index_addr_3_reg_2819;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp5_stage0_11001)) then
                icmp_ln936_reg_2815_pp5_iter2_reg <= icmp_ln936_reg_2815_pp5_iter1_reg;
                icmp_ln936_reg_2815_pp5_iter3_reg <= icmp_ln936_reg_2815_pp5_iter2_reg;
                icmp_ln936_reg_2815_pp5_iter4_reg <= icmp_ln936_reg_2815_pp5_iter3_reg;
                icmp_ln936_reg_2815_pp5_iter5_reg <= icmp_ln936_reg_2815_pp5_iter4_reg;
                icmp_ln936_reg_2815_pp5_iter6_reg <= icmp_ln936_reg_2815_pp5_iter5_reg;
                new_z_i_index_addr_3_reg_2819_pp5_iter2_reg <= new_z_i_index_addr_3_reg_2819_pp5_iter1_reg;
                new_z_i_index_addr_3_reg_2819_pp5_iter3_reg <= new_z_i_index_addr_3_reg_2819_pp5_iter2_reg;
                new_z_i_index_addr_3_reg_2819_pp5_iter4_reg <= new_z_i_index_addr_3_reg_2819_pp5_iter3_reg;
                new_z_i_index_addr_3_reg_2819_pp5_iter5_reg <= new_z_i_index_addr_3_reg_2819_pp5_iter4_reg;
                new_z_i_index_addr_3_reg_2819_pp5_iter6_reg <= new_z_i_index_addr_3_reg_2819_pp5_iter5_reg;
                sub_reg_2835_pp5_iter6_reg <= sub_reg_2835;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                icmp_ln941_reg_2854 <= icmp_ln941_fu_1555_p2;
                icmp_ln941_reg_2854_pp6_iter1_reg <= icmp_ln941_reg_2854;
                new_z_i_index_addr_4_reg_2858_pp6_iter1_reg <= new_z_i_index_addr_4_reg_2858;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp6_stage0_11001)) then
                icmp_ln941_reg_2854_pp6_iter2_reg <= icmp_ln941_reg_2854_pp6_iter1_reg;
                new_z_i_index_addr_4_reg_2858_pp6_iter2_reg <= new_z_i_index_addr_4_reg_2858_pp6_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then
                icmp_ln953_reg_2923 <= icmp_ln953_fu_1796_p2;
                trunc_ln955_reg_2938_pp8_iter1_reg <= trunc_ln955_reg_2938;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then
                icmp_ln965_reg_2947 <= icmp_ln965_fu_1848_p2;
                icmp_ln965_reg_2947_pp9_iter1_reg <= icmp_ln965_reg_2947;
                trunc_ln534_reg_2951_pp9_iter1_reg <= trunc_ln534_reg_2951;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                icmp_ln987_1_reg_3004 <= icmp_ln987_1_fu_2095_p2;
                icmp_ln987_reg_2999 <= icmp_ln987_fu_2089_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                icmp_ln992_1_reg_3050 <= icmp_ln992_1_fu_2200_p2;
                icmp_ln992_reg_3045 <= icmp_ln992_fu_2194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then
                icmp_ln997_1_reg_3081 <= icmp_ln997_1_fu_2283_p2;
                icmp_ln997_reg_3076 <= icmp_ln997_fu_2277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                lhs_3_reg_2982 <= lhs_3_fu_2030_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then
                lhs_4_reg_3025 <= lhs_4_fu_2132_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                lhs_5_reg_3055 <= lhs_5_fu_2216_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln955_reg_2938_pp8_iter11_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_enable_reg_pp8_iter12 = ap_const_logic_1))) then
                new_z_i_atTop_V_3_1_fu_268 <= grp_straightLineProjectorFromLayerIJtoK_fu_643_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln955_reg_2938_pp8_iter11_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_enable_reg_pp8_iter12 = ap_const_logic_1))) then
                new_z_i_atTop_V_3_2_fu_272 <= grp_straightLineProjectorFromLayerIJtoK_fu_643_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln955_reg_2938_pp8_iter11_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_enable_reg_pp8_iter12 = ap_const_logic_1))) then
                new_z_i_atTop_V_3_3_fu_276 <= grp_straightLineProjectorFromLayerIJtoK_fu_643_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln955_reg_2938_pp8_iter11_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_enable_reg_pp8_iter12 = ap_const_logic_1))) then
                new_z_i_atTop_V_3_4_fu_280 <= grp_straightLineProjectorFromLayerIJtoK_fu_643_p_dout0;
                new_z_i_atTop_V_3_fu_264 <= grp_straightLineProjectorFromLayerIJtoK_fu_643_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln936_fu_1325_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                new_z_i_index_addr_3_reg_2819 <= i_10_cast_fu_1331_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln941_fu_1555_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                new_z_i_index_addr_4_reg_2858 <= i_11_cast_fu_1561_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                ppl_assign2_reg_3108 <= grp_makePatch_alignedToLine_fu_830_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_ln936_reg_2815 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)))) then
                reg_940 <= GDn_points_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln941_reg_2854_pp6_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001)) or ((icmp_ln936_reg_2815_pp5_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)))) then
                reg_945 <= grp_fu_1824_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state73))) then
                reg_951 <= n_patches_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                rhs_reg_2613 <= rhs_fu_956_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                select_ln1002_reg_3096 <= select_ln1002_fu_2339_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                select_ln934_reg_2783 <= select_ln934_fu_1287_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                sext_ln534_1_reg_3134 <= sext_ln534_1_fu_2477_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln936_reg_2815_pp5_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                sub_reg_2835 <= grp_fu_894_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1072_reg_3130 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                thirdLastPatchIdx_reg_3144 <= thirdLastPatchIdx_fu_2484_p2;
                    zext_ln1075_reg_3139(7 downto 0) <= zext_ln1075_fu_2481_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then
                tmp_10_reg_3009 <= grp_fu_660_p_dout0;
                    tmp_50_cast_reg_3014(10 downto 1) <= tmp_50_cast_fu_2104_p3(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                tmp_33_reg_2740 <= tmp_33_fu_1217_p1(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln965_reg_2947 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then
                tmp_52_reg_2961 <= data_V_3_fu_1886_p1(62 downto 52);
                tmp_53_reg_2967 <= tmp_53_fu_1900_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln965_fu_1848_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then
                trunc_ln534_reg_2951 <= trunc_ln534_fu_1854_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln953_fu_1796_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then
                trunc_ln955_reg_2938 <= trunc_ln955_fu_1813_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp8_stage0_11001)) then
                trunc_ln955_reg_2938_pp8_iter10_reg <= trunc_ln955_reg_2938_pp8_iter9_reg;
                trunc_ln955_reg_2938_pp8_iter11_reg <= trunc_ln955_reg_2938_pp8_iter10_reg;
                trunc_ln955_reg_2938_pp8_iter2_reg <= trunc_ln955_reg_2938_pp8_iter1_reg;
                trunc_ln955_reg_2938_pp8_iter3_reg <= trunc_ln955_reg_2938_pp8_iter2_reg;
                trunc_ln955_reg_2938_pp8_iter4_reg <= trunc_ln955_reg_2938_pp8_iter3_reg;
                trunc_ln955_reg_2938_pp8_iter5_reg <= trunc_ln955_reg_2938_pp8_iter4_reg;
                trunc_ln955_reg_2938_pp8_iter6_reg <= trunc_ln955_reg_2938_pp8_iter5_reg;
                trunc_ln955_reg_2938_pp8_iter7_reg <= trunc_ln955_reg_2938_pp8_iter6_reg;
                trunc_ln955_reg_2938_pp8_iter8_reg <= trunc_ln955_reg_2938_pp8_iter7_reg;
                trunc_ln955_reg_2938_pp8_iter9_reg <= trunc_ln955_reg_2938_pp8_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1019_reg_3092 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state74))) then
                    zext_ln1038_reg_3103(7 downto 0) <= zext_ln1038_fu_2352_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    zext_ln896_reg_2647(7 downto 0) <= zext_ln896_fu_1056_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                    zext_ln899_reg_2672(2 downto 0) <= zext_ln899_fu_1081_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln896_reg_2647(8) <= '0';
    zext_ln899_reg_2672(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    tmp_32_cast_reg_2682(6 downto 0) <= "0000000";
    tmp_32_cast_reg_2682(10) <= '0';
    i_7_cast_reg_2730(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln928_reg_2749(9) <= '0';
    i_9_cast_reg_2773(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_8_cast_reg_2800(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_12_cast_reg_2878(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_12_cast_reg_2878_pp7_iter1_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    tmp_50_cast_reg_3014(0) <= '0';
    zext_ln1038_reg_3103(8) <= '0';
    zext_ln1075_reg_3139(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp5_iter1, ap_enable_reg_pp6_iter2, ap_enable_reg_pp0_iter0, icmp_ln412_fu_970_p2, ap_CS_fsm_state6, icmp_ln899_fu_1066_p2, icmp_ln870_fu_1072_p2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter0, icmp_ln907_fu_1206_p2, tmp_33_fu_1217_p3, ap_CS_fsm_state24, ap_enable_reg_pp3_iter0, icmp_ln928_fu_1260_p2, ap_enable_reg_pp4_iter0, icmp_ln919_fu_1301_p2, ap_enable_reg_pp5_iter0, icmp_ln936_fu_1325_p2, ap_enable_reg_pp6_iter0, icmp_ln941_fu_1555_p2, ap_enable_reg_pp7_iter0, icmp_ln947_fu_1746_p2, icmp_ln953_fu_1796_p2, ap_enable_reg_pp8_iter0, ap_enable_reg_pp9_iter0, icmp_ln965_fu_1848_p2, ap_enable_reg_pp9_iter2, ap_CS_fsm_state77, icmp_ln1072_reg_3130, ap_CS_fsm_state79, icmp_ln1082_reg_3149, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_block_pp4_stage0_subdone, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter6, ap_enable_reg_pp5_iter7, ap_block_pp6_stage0_subdone, ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter3, ap_block_pp7_stage0_subdone, ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter2, ap_block_pp8_stage0_subdone, ap_enable_reg_pp8_iter1, ap_enable_reg_pp8_iter11, ap_enable_reg_pp8_iter12, ap_block_pp9_stage0_subdone, ap_enable_reg_pp9_iter1, grp_makePatch_alignedToLine_fu_830_ap_done, grp_areWedgeSuperPointsEqual_fu_855_ap_return, grp_delete_patch_fu_882_ap_done, ap_CS_fsm_state100, ap_CS_fsm_state105, ap_CS_fsm_state75, ap_CS_fsm_state103, ap_block_state75_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln412_fu_970_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln412_fu_970_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln870_fu_1072_p2 = ap_const_lv1_1) and (icmp_ln899_fu_1066_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln870_fu_1072_p2 = ap_const_lv1_0) and (icmp_ln899_fu_1066_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((icmp_ln907_fu_1206_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln907_fu_1206_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state24 => 
                if (((tmp_33_fu_1217_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((icmp_ln928_fu_1260_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((icmp_ln928_fu_1260_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if (not(((icmp_ln919_fu_1301_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((icmp_ln919_fu_1301_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((icmp_ln936_fu_1325_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp5_iter7 = ap_const_logic_1) and (ap_enable_reg_pp5_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((icmp_ln936_fu_1325_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp5_iter7 = ap_const_logic_1) and (ap_enable_reg_pp5_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
            when ap_ST_fsm_pp6_stage0 => 
                if ((not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (icmp_ln941_fu_1555_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) and not(((ap_enable_reg_pp6_iter3 = ap_const_logic_1) and (ap_enable_reg_pp6_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif ((((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (icmp_ln941_fu_1555_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) or ((ap_enable_reg_pp6_iter3 = ap_const_logic_1) and (ap_enable_reg_pp6_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
            when ap_ST_fsm_pp7_stage0 => 
                if ((not(((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (icmp_ln947_fu_1746_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) and not(((ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif ((((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (icmp_ln947_fu_1746_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) or ((ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
            when ap_ST_fsm_pp8_stage0 => 
                if ((not(((ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (icmp_ln953_fu_1796_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_enable_reg_pp8_iter12 = ap_const_logic_1) and (ap_enable_reg_pp8_iter11 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                elsif ((((ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (icmp_ln953_fu_1796_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_enable_reg_pp8_iter12 = ap_const_logic_1) and (ap_enable_reg_pp8_iter11 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                end if;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
            when ap_ST_fsm_pp9_stage0 => 
                if ((not(((icmp_ln965_fu_1848_p2 = ap_const_lv1_1) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                elsif ((((ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0)) or ((icmp_ln965_fu_1848_p2 = ap_const_lv1_1) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                end if;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                if (((ap_const_boolean_0 = ap_block_state75_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state77) and (grp_makePatch_alignedToLine_fu_830_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                if (((icmp_ln1072_reg_3130 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state101;
                end if;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                if (((icmp_ln1082_reg_3149 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state100) and (grp_areWedgeSuperPointsEqual_fu_855_ap_return = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                elsif (((icmp_ln1082_reg_3149 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state100))) then
                    ap_NS_fsm <= ap_ST_fsm_state102;
                else
                    ap_NS_fsm <= ap_ST_fsm_state101;
                end if;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state103) and (grp_delete_patch_fu_882_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state104;
                else
                    ap_NS_fsm <= ap_ST_fsm_state103;
                end if;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state105) and (grp_makePatch_alignedToLine_fu_830_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state106;
                else
                    ap_NS_fsm <= ap_ST_fsm_state105;
                end if;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    GDarrayDecoded_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp7_stage0, ap_CS_fsm_state67, ap_CS_fsm_state69, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_enable_reg_pp7_iter1, grp_makePatch_alignedToLine_fu_830_GDarrayDecoded_address0, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp7_stage0, ap_CS_fsm_state105, tmp_7_fu_990_p3, zext_ln215_1_fu_1138_p1, zext_ln949_1_fu_1791_p1, zext_ln989_fu_2118_p1, zext_ln994_fu_2158_p1, zext_ln999_fu_2241_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            GDarrayDecoded_address0 <= zext_ln999_fu_2241_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            GDarrayDecoded_address0 <= zext_ln994_fu_2158_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            GDarrayDecoded_address0 <= zext_ln989_fu_2118_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
            GDarrayDecoded_address0 <= zext_ln949_1_fu_1791_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            GDarrayDecoded_address0 <= zext_ln215_1_fu_1138_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            GDarrayDecoded_address0 <= tmp_7_fu_990_p3(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            GDarrayDecoded_address0 <= grp_makePatch_alignedToLine_fu_830_GDarrayDecoded_address0;
        else 
            GDarrayDecoded_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    GDarrayDecoded_address1 <= grp_makePatch_alignedToLine_fu_830_GDarrayDecoded_address1;

    GDarrayDecoded_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ap_CS_fsm_state67, ap_CS_fsm_state69, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_enable_reg_pp7_iter1, grp_makePatch_alignedToLine_fu_830_GDarrayDecoded_ce0, ap_CS_fsm_state105)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state67) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)))) then 
            GDarrayDecoded_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            GDarrayDecoded_ce0 <= grp_makePatch_alignedToLine_fu_830_GDarrayDecoded_ce0;
        else 
            GDarrayDecoded_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    GDarrayDecoded_ce1_assign_proc : process(ap_CS_fsm_state77, grp_makePatch_alignedToLine_fu_830_GDarrayDecoded_ce1, ap_CS_fsm_state105)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            GDarrayDecoded_ce1 <= grp_makePatch_alignedToLine_fu_830_GDarrayDecoded_ce1;
        else 
            GDarrayDecoded_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    GDn_points_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp5_stage0, zext_ln899_fu_1081_p1, ap_CS_fsm_state17, ap_enable_reg_pp5_iter0, ap_CS_fsm_state77, grp_makePatch_alignedToLine_fu_830_GDn_points_address0, ap_CS_fsm_state105, i_10_cast_fu_1331_p1, ap_block_pp5_stage0)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            GDn_points_address0 <= i_10_cast_fu_1331_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            GDn_points_address0 <= zext_ln899_fu_1081_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            GDn_points_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            GDn_points_address0 <= grp_makePatch_alignedToLine_fu_830_GDn_points_address0;
        else 
            GDn_points_address0 <= "XXX";
        end if; 
    end process;


    GDn_points_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_CS_fsm_state17, ap_enable_reg_pp5_iter0, ap_CS_fsm_state77, grp_makePatch_alignedToLine_fu_830_GDn_points_ce0, ap_CS_fsm_state105)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            GDn_points_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            GDn_points_ce0 <= grp_makePatch_alignedToLine_fu_830_GDn_points_ce0;
        else 
            GDn_points_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1018_fu_2346_p2 <= std_logic_vector(unsigned(reg_951) + unsigned(ap_const_lv8_FF));
    add_ln1050_fu_2393_p2 <= std_logic_vector(unsigned(sub_ln1050_fu_2387_p2) + unsigned(ap_const_lv12_30));
    add_ln1051_fu_2410_p2 <= std_logic_vector(unsigned(sub_ln1050_fu_2387_p2) + unsigned(ap_const_lv12_37));
    add_ln1082_fu_2496_p2 <= std_logic_vector(unsigned(i_16_reg_796) + unsigned(ap_const_lv3_1));
    add_ln1102_fu_2546_p2 <= std_logic_vector(unsigned(select_ln934_reg_2783) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln215_fu_1121_p2 <= std_logic_vector(unsigned(tmp_32_cast_reg_2682) + unsigned(zext_ln215_fu_1117_p1));
    add_ln341_2_fu_1657_p2 <= std_logic_vector(unsigned(zext_ln341_2_fu_1653_p1) + unsigned(ap_const_lv9_181));
    add_ln341_fu_1466_p2 <= std_logic_vector(unsigned(zext_ln341_fu_1462_p1) + unsigned(ap_const_lv9_181));
    add_ln510_fu_1920_p2 <= std_logic_vector(unsigned(zext_ln510_fu_1917_p1) + unsigned(ap_const_lv12_C01));
    add_ln901_fu_1060_p2 <= std_logic_vector(unsigned(i_17_reg_597) + unsigned(ap_const_lv3_1));
    add_ln906_fu_1076_p2 <= std_logic_vector(unsigned(zext_ln896_reg_2647) + unsigned(ap_const_lv9_1));
    add_ln907_fu_1200_p2 <= std_logic_vector(unsigned(i_7_reg_645) + unsigned(ap_const_lv3_1));
    add_ln917_fu_1239_p2 <= std_logic_vector(unsigned(p_read12) + unsigned(ap_const_lv32_1));
    add_ln918_fu_1244_p2 <= std_logic_vector(unsigned(ap_phi_mux_empty_73_phi_fu_659_p4) + unsigned(ap_const_lv9_1FF));
    add_ln919_fu_1295_p2 <= std_logic_vector(unsigned(i_8_reg_705) + unsigned(ap_const_lv3_1));
    add_ln921_fu_1312_p2 <= std_logic_vector(unsigned(current_z_i_index_q0) + unsigned(ap_const_lv8_FF));
    add_ln926_fu_1224_p2 <= std_logic_vector(unsigned(p_read13) + unsigned(ap_const_lv32_1));
    add_ln927_fu_1229_p2 <= std_logic_vector(unsigned(ap_phi_mux_empty_73_phi_fu_659_p4) + unsigned(ap_const_lv9_1));
    add_ln928_fu_1254_p2 <= std_logic_vector(unsigned(i_9_reg_665) + unsigned(ap_const_lv3_1));
    add_ln934_fu_1275_p2 <= std_logic_vector(unsigned(reg_940) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln936_fu_1319_p2 <= std_logic_vector(unsigned(i_10_reg_716) + unsigned(ap_const_lv3_1));
    add_ln941_fu_1549_p2 <= std_logic_vector(unsigned(i_11_reg_727) + unsigned(ap_const_lv3_1));
    add_ln947_fu_1740_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_12_phi_fu_742_p4) + unsigned(ap_const_lv3_1));
    add_ln949_fu_1773_p2 <= std_logic_vector(unsigned(zext_ln947_fu_1765_p1) + unsigned(zext_ln949_fu_1769_p1));
    add_ln958_fu_1802_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_15_phi_fu_754_p4) + unsigned(ap_const_lv3_1));
    add_ln965_fu_1842_p2 <= std_logic_vector(unsigned(i_14_reg_761) + unsigned(ap_const_lv3_1));
    add_ln989_fu_2112_p2 <= std_logic_vector(unsigned(tmp_50_cast_fu_2104_p3) + unsigned(ap_const_lv11_401));
    add_ln994_fu_2153_p2 <= std_logic_vector(unsigned(tmp_50_cast_reg_3014) + unsigned(ap_const_lv11_301));
    add_ln999_fu_2236_p2 <= std_logic_vector(unsigned(tmp_50_cast_reg_3014) + unsigned(ap_const_lv11_201));
    and_ln938_1_fu_1418_p2 <= (grp_fu_906_p2 and and_ln938_fu_1412_p2);
    and_ln938_fu_1412_p2 <= (or_ln938_fu_1388_p2 and or_ln938_1_fu_1406_p2);
    and_ln943_fu_1607_p2 <= (or_ln943_fu_1601_p2 and grp_fu_906_p2);
    and_ln987_fu_2127_p2 <= (tmp_10_reg_3009 and or_ln987_fu_2123_p2);
    and_ln992_fu_2210_p2 <= (or_ln992_fu_2206_p2 and grp_fu_660_p_dout0);
    and_ln997_fu_2293_p2 <= (or_ln997_fu_2289_p2 and grp_fu_660_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(17);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(19);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(21);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(23);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(24);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(26);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(28);
    ap_CS_fsm_pp8_stage0 <= ap_CS_fsm(30);
    ap_CS_fsm_pp9_stage0 <= ap_CS_fsm(32);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(68);
    ap_CS_fsm_state101 <= ap_CS_fsm(69);
    ap_CS_fsm_state102 <= ap_CS_fsm(70);
    ap_CS_fsm_state103 <= ap_CS_fsm(71);
    ap_CS_fsm_state104 <= ap_CS_fsm(72);
    ap_CS_fsm_state105 <= ap_CS_fsm(73);
    ap_CS_fsm_state121 <= ap_CS_fsm(89);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(18);
    ap_CS_fsm_state24 <= ap_CS_fsm(20);
    ap_CS_fsm_state27 <= ap_CS_fsm(22);
    ap_CS_fsm_state38 <= ap_CS_fsm(25);
    ap_CS_fsm_state43 <= ap_CS_fsm(27);
    ap_CS_fsm_state47 <= ap_CS_fsm(29);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state61 <= ap_CS_fsm(31);
    ap_CS_fsm_state65 <= ap_CS_fsm(33);
    ap_CS_fsm_state66 <= ap_CS_fsm(34);
    ap_CS_fsm_state67 <= ap_CS_fsm(35);
    ap_CS_fsm_state68 <= ap_CS_fsm(36);
    ap_CS_fsm_state69 <= ap_CS_fsm(37);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state70 <= ap_CS_fsm(38);
    ap_CS_fsm_state71 <= ap_CS_fsm(39);
    ap_CS_fsm_state72 <= ap_CS_fsm(40);
    ap_CS_fsm_state73 <= ap_CS_fsm(41);
    ap_CS_fsm_state74 <= ap_CS_fsm(42);
    ap_CS_fsm_state75 <= ap_CS_fsm(43);
    ap_CS_fsm_state76 <= ap_CS_fsm(44);
    ap_CS_fsm_state77 <= ap_CS_fsm(45);
    ap_CS_fsm_state78 <= ap_CS_fsm(46);
    ap_CS_fsm_state79 <= ap_CS_fsm(47);
    ap_CS_fsm_state80 <= ap_CS_fsm(48);
    ap_CS_fsm_state81 <= ap_CS_fsm(49);
    ap_CS_fsm_state82 <= ap_CS_fsm(50);
    ap_CS_fsm_state98 <= ap_CS_fsm(66);
    ap_CS_fsm_state99 <= ap_CS_fsm(67);
    ap_NS_fsm_state7 <= ap_NS_fsm(5);
    ap_NS_fsm_state81 <= ap_NS_fsm(49);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp8_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp8_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp8_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp5_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp5_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp5_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp5_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp5_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp6_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp7_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp7_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp8_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp8_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp8_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp8_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp8_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp8_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp8_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp8_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp8_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp8_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp8_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp8_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp8_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp9_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp9_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp9_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state75_on_subcall_done_assign_proc : process(icmp_ln1019_reg_3092, grp_delete_patch_fu_882_ap_done)
    begin
                ap_block_state75_on_subcall_done <= ((icmp_ln1019_reg_3092 = ap_const_lv1_1) and (grp_delete_patch_fu_882_ap_done = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln412_fu_970_p2)
    begin
        if ((icmp_ln412_fu_970_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_flush_enable_assign_proc : process(ap_CS_fsm_pp1_stage0, icmp_ln412_1_fu_1112_p2, ap_block_pp1_stage0_subdone)
    begin
        if (((icmp_ln412_1_fu_1112_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_condition_pp1_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp1_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state22_assign_proc : process(icmp_ln907_fu_1206_p2)
    begin
        if ((icmp_ln907_fu_1206_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state22 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state25_assign_proc : process(icmp_ln928_fu_1260_p2)
    begin
        if ((icmp_ln928_fu_1260_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state25 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state28_assign_proc : process(icmp_ln919_fu_1301_p2)
    begin
        if ((icmp_ln919_fu_1301_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state28 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state30_assign_proc : process(icmp_ln936_fu_1325_p2)
    begin
        if ((icmp_ln936_fu_1325_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state30 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state39_assign_proc : process(icmp_ln941_fu_1555_p2)
    begin
        if ((icmp_ln941_fu_1555_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state39 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state39 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_exit_iter0_state44_assign_proc : process(icmp_ln947_fu_1746_p2)
    begin
        if ((icmp_ln947_fu_1746_p2 = ap_const_lv1_1)) then 
            ap_condition_pp7_exit_iter0_state44 <= ap_const_logic_1;
        else 
            ap_condition_pp7_exit_iter0_state44 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp8_exit_iter0_state48_assign_proc : process(icmp_ln953_fu_1796_p2)
    begin
        if ((icmp_ln953_fu_1796_p2 = ap_const_lv1_1)) then 
            ap_condition_pp8_exit_iter0_state48 <= ap_const_logic_1;
        else 
            ap_condition_pp8_exit_iter0_state48 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp9_exit_iter0_state62_assign_proc : process(icmp_ln965_fu_1848_p2)
    begin
        if ((icmp_ln965_fu_1848_p2 = ap_const_lv1_1)) then 
            ap_condition_pp9_exit_iter0_state62 <= ap_const_logic_1;
        else 
            ap_condition_pp9_exit_iter0_state62 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);
    ap_enable_pp8 <= (ap_idle_pp8 xor ap_const_logic_1);
    ap_enable_pp9 <= (ap_idle_pp9 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter3, ap_enable_reg_pp5_iter4, ap_enable_reg_pp5_iter5, ap_enable_reg_pp5_iter6, ap_enable_reg_pp5_iter7)
    begin
        if (((ap_enable_reg_pp5_iter7 = ap_const_logic_0) and (ap_enable_reg_pp5_iter6 = ap_const_logic_0) and (ap_enable_reg_pp5_iter5 = ap_const_logic_0) and (ap_enable_reg_pp5_iter4 = ap_const_logic_0) and (ap_enable_reg_pp5_iter3 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter2, ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter3)
    begin
        if (((ap_enable_reg_pp6_iter3 = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter2)
    begin
        if (((ap_enable_reg_pp7_iter2 = ap_const_logic_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp8_assign_proc : process(ap_enable_reg_pp8_iter0, ap_enable_reg_pp8_iter1, ap_enable_reg_pp8_iter2, ap_enable_reg_pp8_iter3, ap_enable_reg_pp8_iter4, ap_enable_reg_pp8_iter5, ap_enable_reg_pp8_iter6, ap_enable_reg_pp8_iter7, ap_enable_reg_pp8_iter8, ap_enable_reg_pp8_iter9, ap_enable_reg_pp8_iter10, ap_enable_reg_pp8_iter11, ap_enable_reg_pp8_iter12)
    begin
        if (((ap_enable_reg_pp8_iter0 = ap_const_logic_0) and (ap_enable_reg_pp8_iter12 = ap_const_logic_0) and (ap_enable_reg_pp8_iter11 = ap_const_logic_0) and (ap_enable_reg_pp8_iter10 = ap_const_logic_0) and (ap_enable_reg_pp8_iter9 = ap_const_logic_0) and (ap_enable_reg_pp8_iter8 = ap_const_logic_0) and (ap_enable_reg_pp8_iter7 = ap_const_logic_0) and (ap_enable_reg_pp8_iter6 = ap_const_logic_0) and (ap_enable_reg_pp8_iter5 = ap_const_logic_0) and (ap_enable_reg_pp8_iter4 = ap_const_logic_0) and (ap_enable_reg_pp8_iter3 = ap_const_logic_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0))) then 
            ap_idle_pp8 <= ap_const_logic_1;
        else 
            ap_idle_pp8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp9_assign_proc : process(ap_enable_reg_pp9_iter0, ap_enable_reg_pp9_iter2, ap_enable_reg_pp9_iter1)
    begin
        if (((ap_enable_reg_pp9_iter2 = ap_const_logic_0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0))) then 
            ap_idle_pp9 <= ap_const_logic_1;
        else 
            ap_idle_pp9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_current_z_top_index_0_phi_fu_811_p6_assign_proc : process(select_ln934_reg_2783, icmp_ln1072_reg_3130, icmp_ln1082_reg_3149, current_z_top_index_0_reg_808, ap_CS_fsm_state101)
    begin
        if (((icmp_ln1082_reg_3149 = ap_const_lv1_1) and (icmp_ln1072_reg_3130 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state101))) then 
            ap_phi_mux_current_z_top_index_0_phi_fu_811_p6 <= select_ln934_reg_2783;
        else 
            ap_phi_mux_current_z_top_index_0_phi_fu_811_p6 <= current_z_top_index_0_reg_808;
        end if; 
    end process;


    ap_phi_mux_empty_73_phi_fu_659_p4_assign_proc : process(icmp_ln870_reg_2663, add_ln906_reg_2667, ap_CS_fsm_state24, empty_73_reg_656)
    begin
        if (((icmp_ln870_reg_2663 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            ap_phi_mux_empty_73_phi_fu_659_p4 <= add_ln906_reg_2667;
        else 
            ap_phi_mux_empty_73_phi_fu_659_p4 <= empty_73_reg_656;
        end if; 
    end process;


    ap_phi_mux_empty_76_phi_fu_699_p4_assign_proc : process(tmp_33_reg_2740, zext_ln928_reg_2749, sext_ln919_reg_2759, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
            if ((tmp_33_reg_2740 = ap_const_lv1_1)) then 
                ap_phi_mux_empty_76_phi_fu_699_p4 <= sext_ln919_reg_2759;
            elsif ((tmp_33_reg_2740 = ap_const_lv1_0)) then 
                ap_phi_mux_empty_76_phi_fu_699_p4 <= zext_ln928_reg_2749;
            else 
                ap_phi_mux_empty_76_phi_fu_699_p4 <= "XXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_empty_76_phi_fu_699_p4 <= "XXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_i_12_phi_fu_742_p4_assign_proc : process(i_12_reg_738, add_ln947_reg_2869, ap_CS_fsm_pp7_stage0, icmp_ln947_reg_2874, ap_enable_reg_pp7_iter1, ap_block_pp7_stage0)
    begin
        if (((ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (icmp_ln947_reg_2874 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
            ap_phi_mux_i_12_phi_fu_742_p4 <= add_ln947_reg_2869;
        else 
            ap_phi_mux_i_12_phi_fu_742_p4 <= i_12_reg_738;
        end if; 
    end process;


    ap_phi_mux_i_15_phi_fu_754_p4_assign_proc : process(i_15_reg_750, icmp_ln953_reg_2923, ap_CS_fsm_pp8_stage0, add_ln958_reg_2927, ap_enable_reg_pp8_iter1, ap_block_pp8_stage0)
    begin
        if (((icmp_ln953_reg_2923 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_15_phi_fu_754_p4 <= add_ln958_reg_2927;
        else 
            ap_phi_mux_i_15_phi_fu_754_p4 <= i_15_reg_750;
        end if; 
    end process;


    ap_phi_mux_i_5_phi_fu_613_p4_assign_proc : process(i_5_reg_609, i_13_reg_2697, ap_CS_fsm_pp1_stage0, icmp_ln412_1_reg_2702, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln412_1_reg_2702 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_i_5_phi_fu_613_p4 <= i_13_reg_2697;
        else 
            ap_phi_mux_i_5_phi_fu_613_p4 <= i_5_reg_609;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_565_p4_assign_proc : process(i_reg_561, i_4_reg_2623, ap_CS_fsm_pp0_stage0, icmp_ln412_reg_2628, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln412_reg_2628 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_565_p4 <= i_4_reg_2623;
        else 
            ap_phi_mux_i_phi_fu_565_p4 <= i_reg_561;
        end if; 
    end process;


    ap_phi_mux_z_top_min_4_phi_fu_822_p6_assign_proc : process(select_ln1002_reg_3096, icmp_ln1072_reg_3130, icmp_ln1082_reg_3149, ap_CS_fsm_state101, z_top_min_4_reg_819)
    begin
        if (((icmp_ln1082_reg_3149 = ap_const_lv1_1) and (icmp_ln1072_reg_3130 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state101))) then 
            ap_phi_mux_z_top_min_4_phi_fu_822_p6 <= select_ln1002_reg_3096;
        else 
            ap_phi_mux_z_top_min_4_phi_fu_822_p6 <= z_top_min_4_reg_819;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(white_space_height_read, ap_CS_fsm_state101, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            ap_return_0 <= white_space_height_read;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(lastPatchIdx_reg_3113, ap_CS_fsm_state101, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            ap_return_1 <= lastPatchIdx_reg_3113;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_phi_mux_current_z_top_index_0_phi_fu_811_p6, ap_CS_fsm_state101, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            ap_return_2 <= ap_phi_mux_current_z_top_index_0_phi_fu_811_p6;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(counter_0_reg_676, ap_CS_fsm_state101, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            ap_return_3 <= counter_0_reg_676;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(counterUpshift_0_reg_686, ap_CS_fsm_state101, ap_return_4_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            ap_return_4 <= counterUpshift_0_reg_686;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(z_top_min_read, ap_CS_fsm_state101, ap_return_5_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            ap_return_5 <= z_top_min_read;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(sext_ln534_1_reg_3134, ap_CS_fsm_state101, ap_return_6_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            ap_return_6 <= sext_ln534_1_reg_3134;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(ap_CS_fsm_state101, ap_phi_mux_z_top_min_4_phi_fu_822_p6, ap_return_7_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            ap_return_7 <= ap_phi_mux_z_top_min_4_phi_fu_822_p6;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;

    bitcast_ln521_1_fu_2175_p1 <= zext_ln368_1_fu_2171_p1;
    bitcast_ln521_2_fu_2258_p1 <= zext_ln368_2_fu_2254_p1;
    bitcast_ln521_fu_2070_p1 <= zext_ln368_fu_2066_p1;
    bitcast_ln938_1_fu_1359_p1 <= sub_reg_2835_pp5_iter6_reg;
    bitcast_ln938_fu_1342_p1 <= conv_reg_2842;
    bitcast_ln943_fu_1571_p1 <= reg_945;

    current_z_i_index_address0_assign_proc : process(zext_ln899_reg_2672, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, i_7_cast_fu_1212_p1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, i_9_cast_fu_1266_p1, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, i_8_cast_fu_1307_p1, ap_CS_fsm_state21, ap_block_pp2_stage0, ap_block_pp3_stage0, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            current_z_i_index_address0 <= i_8_cast_fu_1307_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            current_z_i_index_address0 <= i_9_cast_fu_1266_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            current_z_i_index_address0 <= i_7_cast_fu_1212_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            current_z_i_index_address0 <= zext_ln899_reg_2672(3 - 1 downto 0);
        else 
            current_z_i_index_address0 <= "XXX";
        end if; 
    end process;


    current_z_i_index_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp4_stage0_11001, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            current_z_i_index_ce0 <= ap_const_logic_1;
        else 
            current_z_i_index_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    current_z_i_index_we0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            current_z_i_index_we0 <= ap_const_logic_1;
        else 
            current_z_i_index_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_V_2_fu_1617_p3 <= 
        ap_const_lv31_0 when (and_ln943_fu_1607_p2(0) = '1') else 
        trunc_ln312_fu_1613_p1;
    data_V_3_fu_1886_p1 <= grp_fu_1830_p_dout0;
    data_V_4_fu_2058_p1 <= grp_fu_1830_p_dout0;
    data_V_5_fu_2163_p1 <= grp_fu_1830_p_dout0;
    data_V_6_fu_2246_p1 <= grp_fu_1830_p_dout0;
    data_V_fu_1430_p1 <= dc_fu_1424_p3;
    dc_fu_1424_p3 <= 
        conv_reg_2842 when (and_ln938_1_fu_1418_p2(0) = '1') else 
        sub_reg_2835_pp5_iter6_reg;
    diff_1_fu_1166_p3 <= 
        sub_ln180_1_fu_1152_p2 when (tmp_32_fu_1158_p3(0) = '1') else 
        ret_3_fu_1147_p2;
    diff_fu_1022_p3 <= 
        sub_ln180_fu_1008_p2 when (tmp_31_fu_1014_p3(0) = '1') else 
        ret_fu_1003_p2;
    grp_areWedgeSuperPointsEqual_fu_855_ap_start <= grp_areWedgeSuperPointsEqual_fu_855_ap_start_reg;
    grp_delete_patch_fu_882_ap_start <= grp_delete_patch_fu_882_ap_start_reg;

    grp_delete_patch_fu_882_index_assign_proc : process(icmp_ln1019_reg_3092, zext_ln1038_reg_3103, zext_ln1075_reg_3139, ap_CS_fsm_state75, ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            grp_delete_patch_fu_882_index <= zext_ln1075_reg_3139;
        elsif (((icmp_ln1019_reg_3092 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            grp_delete_patch_fu_882_index <= zext_ln1038_reg_3103;
        else 
            grp_delete_patch_fu_882_index <= "XXXXXXXXX";
        end if; 
    end process;

    grp_fu_1824_p_ce <= ap_const_logic_1;
    grp_fu_1824_p_din0 <= grp_fu_899_p0;
    grp_fu_1827_p_ce <= ap_const_logic_1;
    grp_fu_1827_p_din0 <= zext_ln938_fu_1337_p1;
    grp_fu_1830_p_ce <= ap_const_logic_1;
    grp_fu_1830_p_din0 <= grp_fu_918_p0;
    grp_fu_660_p_ce <= ap_const_logic_1;
    grp_fu_660_p_din0 <= grp_fu_913_p0;
    grp_fu_660_p_din1 <= ap_const_lv64_3FF0000000000000;
    grp_fu_660_p_opcode <= ap_const_lv5_4;
    grp_fu_899_ce <= ap_const_logic_1;

    grp_fu_899_p0_assign_proc : process(GDn_points_q0, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_CS_fsm_pp6_stage0, zext_ln943_fu_1566_p1, ap_enable_reg_pp6_iter1, ap_block_pp5_stage0, ap_block_pp6_stage0)
    begin
        if (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            grp_fu_899_p0 <= zext_ln943_fu_1566_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            grp_fu_899_p0 <= GDn_points_q0;
        else 
            grp_fu_899_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_899_p1 <= grp_fu_1824_p_dout0;
    grp_fu_903_ce <= ap_const_logic_1;
    grp_fu_903_p0 <= zext_ln938_fu_1337_p1;
    grp_fu_903_p1 <= grp_fu_1827_p_dout0;

    grp_fu_906_p0_assign_proc : process(ap_enable_reg_pp6_iter2, ap_enable_reg_pp5_iter6, ap_block_pp5_stage0, ap_block_pp6_stage0, grp_fu_1824_p_dout0, grp_fu_1827_p_dout0)
    begin
        if (((ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            grp_fu_906_p0 <= grp_fu_1824_p_dout0;
        elsif (((ap_enable_reg_pp5_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            grp_fu_906_p0 <= grp_fu_1827_p_dout0;
        else 
            grp_fu_906_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_906_p1_assign_proc : process(ap_enable_reg_pp6_iter2, sub_reg_2835, ap_enable_reg_pp5_iter6, ap_block_pp5_stage0, ap_block_pp6_stage0)
    begin
        if (((ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            grp_fu_906_p1 <= ap_const_lv32_0;
        elsif (((ap_enable_reg_pp5_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            grp_fu_906_p1 <= sub_reg_2835;
        else 
            grp_fu_906_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_913_ce <= ap_const_logic_1;
    grp_fu_913_opcode <= ap_const_lv5_4;

    grp_fu_913_p0_assign_proc : process(bitcast_ln521_fu_2070_p1, ap_CS_fsm_state66, ap_CS_fsm_state69, bitcast_ln521_1_fu_2175_p1, ap_CS_fsm_state72, bitcast_ln521_2_fu_2258_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_fu_913_p0 <= bitcast_ln521_2_fu_2258_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_fu_913_p0 <= bitcast_ln521_1_fu_2175_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_913_p0 <= bitcast_ln521_fu_2070_p1;
        else 
            grp_fu_913_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_913_p1 <= ap_const_lv64_3FF0000000000000;
    grp_fu_913_p2 <= grp_fu_660_p_dout0;
    grp_fu_918_ce <= ap_const_logic_1;

    grp_fu_918_p0_assign_proc : process(ap_CS_fsm_pp9_stage0, ap_enable_reg_pp9_iter0, sext_ln277_3_fu_1881_p1, ap_CS_fsm_state65, sext_ln277_fu_2053_p1, ap_CS_fsm_state68, sext_ln277_1_fu_2148_p1, sext_ln277_2_fu_2231_p1, ap_CS_fsm_state71, ap_block_pp9_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            grp_fu_918_p0 <= sext_ln277_2_fu_2231_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_fu_918_p0 <= sext_ln277_1_fu_2148_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_fu_918_p0 <= sext_ln277_fu_2053_p1;
        elsif (((ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then 
            grp_fu_918_p0 <= sext_ln277_3_fu_1881_p1;
        else 
            grp_fu_918_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_918_p1 <= grp_fu_1830_p_dout0;
    grp_fu_921_p2 <= std_logic_vector(unsigned(current_z_i_index_q0) + unsigned(ap_const_lv8_1));
    grp_makePatch_alignedToLine_fu_830_ap_start <= grp_makePatch_alignedToLine_fu_830_ap_start_reg;

    grp_makePatch_alignedToLine_fu_830_p_read_assign_proc : process(ppl, ppl_assign2_reg_3108, ap_CS_fsm_state77, ap_CS_fsm_state105)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            grp_makePatch_alignedToLine_fu_830_p_read <= ppl_assign2_reg_3108;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            grp_makePatch_alignedToLine_fu_830_p_read <= ppl;
        else 
            grp_makePatch_alignedToLine_fu_830_p_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_makePatch_alignedToLine_fu_830_z_top_assign_proc : process(lhs_3_reg_2982, select_ln1002_reg_3096, ap_CS_fsm_state77, ap_CS_fsm_state105)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            grp_makePatch_alignedToLine_fu_830_z_top <= lhs_3_reg_2982;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            grp_makePatch_alignedToLine_fu_830_z_top <= select_ln1002_reg_3096;
        else 
            grp_makePatch_alignedToLine_fu_830_z_top <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_straightLineProjectorFromLayerIJtoK_fu_643_p_ce <= ap_const_logic_1;
    grp_straightLineProjectorFromLayerIJtoK_fu_643_p_din1 <= complementary_apexZ0;
    grp_straightLineProjectorFromLayerIJtoK_fu_643_p_din2 <= grp_straightLineProjectorFromLayerIJtoK_fu_867_z_j;
    grp_straightLineProjectorFromLayerIJtoK_fu_643_p_din3 <= ap_const_lv3_1;
    grp_straightLineProjectorFromLayerIJtoK_fu_643_p_din4 <= grp_straightLineProjectorFromLayerIJtoK_fu_867_j;
    grp_straightLineProjectorFromLayerIJtoK_fu_643_p_din5 <= grp_straightLineProjectorFromLayerIJtoK_fu_867_k;
    grp_straightLineProjectorFromLayerIJtoK_fu_643_p_start <= grp_straightLineProjectorFromLayerIJtoK_fu_867_ap_start_reg;
    grp_straightLineProjectorFromLayerIJtoK_fu_867_ap_ce <= ap_const_logic_1;
    grp_straightLineProjectorFromLayerIJtoK_fu_867_ap_done <= grp_straightLineProjectorFromLayerIJtoK_fu_643_p_done;
    grp_straightLineProjectorFromLayerIJtoK_fu_867_ap_idle <= grp_straightLineProjectorFromLayerIJtoK_fu_643_p_idle;
    grp_straightLineProjectorFromLayerIJtoK_fu_867_ap_ready <= grp_straightLineProjectorFromLayerIJtoK_fu_643_p_ready;
    grp_straightLineProjectorFromLayerIJtoK_fu_867_ap_return <= grp_straightLineProjectorFromLayerIJtoK_fu_643_p_dout0;
    grp_straightLineProjectorFromLayerIJtoK_fu_867_ap_start <= grp_straightLineProjectorFromLayerIJtoK_fu_867_ap_start_reg;
    grp_straightLineProjectorFromLayerIJtoK_fu_867_i <= ap_const_lv3_1;

    grp_straightLineProjectorFromLayerIJtoK_fu_867_j_assign_proc : process(icmp_ln953_reg_2923, ap_CS_fsm_pp8_stage0, add_ln958_reg_2927, ap_enable_reg_pp8_iter1, ap_block_pp8_stage0, ap_CS_fsm_state7)
    begin
        if (((icmp_ln953_reg_2923 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_867_j <= add_ln958_reg_2927;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_867_j <= ap_const_lv3_5;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_867_j <= "XXX";
        end if; 
    end process;


    grp_straightLineProjectorFromLayerIJtoK_fu_867_k_assign_proc : process(add_ln901_reg_2653, icmp_ln953_reg_2923, ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter1, ap_block_pp8_stage0, ap_CS_fsm_state7)
    begin
        if (((icmp_ln953_reg_2923 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_867_k <= ap_const_lv3_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_867_k <= add_ln901_reg_2653;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_867_k <= "XXX";
        end if; 
    end process;

    grp_straightLineProjectorFromLayerIJtoK_fu_867_z_i <= complementary_apexZ0;

    grp_straightLineProjectorFromLayerIJtoK_fu_867_z_j_assign_proc : process(z_top_min_read, icmp_ln953_reg_2923, ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter1, new_z_i_V_q0, ap_block_pp8_stage0, ap_CS_fsm_state7)
    begin
        if (((icmp_ln953_reg_2923 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_867_z_j <= new_z_i_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_867_z_j <= z_top_min_read;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_867_z_j <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_10_cast_fu_1331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_10_reg_716),64));
    i_11_cast_fu_1561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_11_reg_727),64));
    i_12_cast_fu_1752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_12_phi_fu_742_p4),64));
    i_13_fu_1102_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_5_phi_fu_613_p4) + unsigned(ap_const_lv8_1));
    i_4_fu_960_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_565_p4) + unsigned(ap_const_lv8_1));
    i_7_cast_fu_1212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_645),64));
    i_8_cast_fu_1307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_reg_705),64));
    i_9_cast_fu_1266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_9_reg_665),64));
    icmp_ln1019_fu_2306_p2 <= "1" when (unsigned(n_patches_i) > unsigned(nPatchesAtOriginal)) else "0";
    icmp_ln1072_fu_2431_p2 <= "1" when (tmp_47_fu_2421_p4 = ap_const_lv6_0) else "0";
    icmp_ln1082_fu_2490_p2 <= "1" when (unsigned(i_16_reg_796) < unsigned(ap_const_lv3_5)) else "0";
    icmp_ln412_1_fu_1112_p2 <= "1" when (signed(zext_ln412_1_fu_1108_p1) < signed(GDn_points_load_1_reg_2687)) else "0";
    icmp_ln412_fu_970_p2 <= "1" when (signed(zext_ln412_fu_966_p1) < signed(reg_940)) else "0";
    icmp_ln415_1_fu_1178_p2 <= "1" when (signed(sext_ln414_1_fu_1174_p1) < signed(minVal_2_reg_634)) else "0";
    icmp_ln415_fu_1034_p2 <= "1" when (signed(sext_ln414_fu_1030_p1) < signed(minVal_reg_585)) else "0";
    icmp_ln870_fu_1072_p0 <= z_top_min_read;
    icmp_ln870_fu_1072_p2 <= "1" when (icmp_ln870_fu_1072_p0 = previous_z_top_min_read) else "0";
    icmp_ln878_fu_2463_p2 <= "1" when (signed(ret_17_fu_2444_p2) < signed(ret_18_fu_2457_p2)) else "0";
    icmp_ln899_fu_1066_p2 <= "1" when (i_17_reg_597 = ap_const_lv3_5) else "0";
    icmp_ln907_fu_1206_p2 <= "1" when (i_7_reg_645 = ap_const_lv3_5) else "0";
    icmp_ln919_fu_1301_p2 <= "1" when (i_8_reg_705 = ap_const_lv3_5) else "0";
    icmp_ln928_fu_1260_p2 <= "1" when (i_9_reg_665 = ap_const_lv3_5) else "0";
    icmp_ln934_fu_1281_p2 <= "1" when (signed(sext_ln934_fu_1271_p1) < signed(add_ln934_fu_1275_p2)) else "0";
    icmp_ln936_fu_1325_p2 <= "1" when (i_10_reg_716 = ap_const_lv3_5) else "0";
    icmp_ln938_1_fu_1382_p2 <= "1" when (trunc_ln938_fu_1355_p1 = ap_const_lv23_0) else "0";
    icmp_ln938_2_fu_1394_p2 <= "0" when (tmp_1_fu_1362_p4 = ap_const_lv8_FF) else "1";
    icmp_ln938_3_fu_1400_p2 <= "1" when (trunc_ln938_1_fu_1372_p1 = ap_const_lv23_0) else "0";
    icmp_ln938_fu_1376_p2 <= "0" when (tmp_s_fu_1345_p4 = ap_const_lv8_FF) else "1";
    icmp_ln941_fu_1555_p2 <= "1" when (i_11_reg_727 = ap_const_lv3_5) else "0";
    icmp_ln943_1_fu_1595_p2 <= "1" when (trunc_ln943_fu_1585_p1 = ap_const_lv23_0) else "0";
    icmp_ln943_fu_1589_p2 <= "0" when (tmp_fu_1575_p4 = ap_const_lv8_FF) else "1";
    icmp_ln947_fu_1746_p2 <= "1" when (ap_phi_mux_i_12_phi_fu_742_p4 = ap_const_lv3_5) else "0";
    icmp_ln953_fu_1796_p2 <= "1" when (ap_phi_mux_i_15_phi_fu_754_p4 = ap_const_lv3_5) else "0";
    icmp_ln965_fu_1848_p2 <= "1" when (i_14_reg_761 = ap_const_lv3_4) else "0";
    icmp_ln967_fu_2001_p2 <= "1" when (signed(val_3_fu_1993_p3) < signed(layerSMin_reg_772)) else "0";
    icmp_ln987_1_fu_2095_p2 <= "1" when (trunc_ln987_fu_2085_p1 = ap_const_lv52_0) else "0";
    icmp_ln987_fu_2089_p2 <= "0" when (tmp_8_fu_2075_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln992_1_fu_2200_p2 <= "1" when (trunc_ln992_fu_2190_p1 = ap_const_lv52_0) else "0";
    icmp_ln992_fu_2194_p2 <= "0" when (tmp_11_fu_2180_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln997_1_fu_2283_p2 <= "1" when (trunc_ln997_fu_2273_p1 = ap_const_lv52_0) else "0";
    icmp_ln997_fu_2277_p2 <= "0" when (tmp_14_fu_2263_p4 = ap_const_lv11_7FF) else "1";
    index_1_fu_1048_p3 <= 
        i_reg_561 when (icmp_ln415_fu_1034_p2(0) = '1') else 
        index_reg_573;
    index_3_fu_1192_p3 <= 
        i_5_reg_609 when (icmp_ln415_1_fu_1178_p2(0) = '1') else 
        index_2_reg_621;
    isNeg_2_fu_1663_p3 <= add_ln341_2_fu_1657_p2(8 downto 8);
    isNeg_3_fu_1926_p3 <= add_ln510_fu_1920_p2(11 downto 11);
    isNeg_fu_1472_p3 <= add_ln341_fu_1466_p2(8 downto 8);
    lastPatchIdx_fu_2357_p2 <= std_logic_vector(unsigned(n_patches_i) + unsigned(ap_const_lv8_FF));
    layerSMin_1_fu_2018_p3 <= 
        val_3_fu_1993_p3 when (icmp_ln967_fu_2001_p2(0) = '1') else 
        layerSMin_reg_772;
    layerWithSmallestShift_1_fu_2010_p3 <= 
        zext_ln967_fu_2007_p1 when (icmp_ln967_fu_2001_p2(0) = '1') else 
        layerWithSmallestShift_reg_784;
    lhs_3_fu_2030_p5 <= layerWithSmallestShift_reg_784(2 - 1 downto 0);
    lhs_4_fu_2132_p3 <= 
        GDarrayDecoded_q0 when (and_ln987_fu_2127_p2(0) = '1') else 
        lhs_3_reg_2982;
    lhs_5_fu_2216_p3 <= 
        GDarrayDecoded_q0 when (and_ln992_fu_2210_p2(0) = '1') else 
        lhs_4_reg_3025;
    lhs_6_fu_2299_p3 <= 
        GDarrayDecoded_q0 when (and_ln997_fu_2293_p2(0) = '1') else 
        lhs_5_reg_3055;
    mantissa_2_fu_1639_p4 <= ((ap_const_lv1_1 & tmp_51_fu_1635_p1) & ap_const_lv1_0);
    mantissa_3_fu_1904_p4 <= ((ap_const_lv1_1 & tmp_53_reg_2967) & ap_const_lv1_0);
    mantissa_fu_1448_p4 <= ((ap_const_lv1_1 & tmp_49_fu_1444_p1) & ap_const_lv1_0);
    minVal_1_fu_1040_p3 <= 
        sext_ln414_fu_1030_p1 when (icmp_ln415_fu_1034_p2(0) = '1') else 
        minVal_reg_585;
    minVal_3_fu_1184_p3 <= 
        sext_ln414_1_fu_1174_p1 when (icmp_ln415_1_fu_1178_p2(0) = '1') else 
        minVal_2_reg_634;

    n_patches_o_assign_proc : process(n_patches_i, icmp_ln1019_reg_3092, ap_CS_fsm_state77, grp_makePatch_alignedToLine_fu_830_n_patches_o, grp_makePatch_alignedToLine_fu_830_n_patches_o_ap_vld, grp_delete_patch_fu_882_n_patches, grp_delete_patch_fu_882_n_patches_ap_vld, ap_CS_fsm_state105, ap_CS_fsm_state75, ap_CS_fsm_state103)
    begin
        if ((((icmp_ln1019_reg_3092 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75) and (grp_delete_patch_fu_882_n_patches_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state103) and (grp_delete_patch_fu_882_n_patches_ap_vld = ap_const_logic_1)))) then 
            n_patches_o <= grp_delete_patch_fu_882_n_patches;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state77) and (grp_makePatch_alignedToLine_fu_830_n_patches_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state105) and (grp_makePatch_alignedToLine_fu_830_n_patches_o_ap_vld = ap_const_logic_1)))) then 
            n_patches_o <= grp_makePatch_alignedToLine_fu_830_n_patches_o;
        else 
            n_patches_o <= n_patches_i;
        end if; 
    end process;


    n_patches_o_ap_vld_assign_proc : process(icmp_ln1019_reg_3092, ap_CS_fsm_state77, grp_makePatch_alignedToLine_fu_830_n_patches_o_ap_vld, grp_delete_patch_fu_882_n_patches_ap_vld, ap_CS_fsm_state105, ap_CS_fsm_state75, ap_CS_fsm_state103)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state103) or ((icmp_ln1019_reg_3092 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            n_patches_o_ap_vld <= grp_delete_patch_fu_882_n_patches_ap_vld;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            n_patches_o_ap_vld <= grp_makePatch_alignedToLine_fu_830_n_patches_o_ap_vld;
        else 
            n_patches_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_V_address0_assign_proc : process(i_12_cast_reg_2878_pp7_iter1_reg, ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter0, ap_enable_reg_pp7_iter2, ap_block_pp7_stage0, ap_block_pp8_stage0, trunc_ln958_cast_fu_1808_p1)
    begin
        if (((ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then 
            new_z_i_V_address0 <= trunc_ln958_cast_fu_1808_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0))) then 
            new_z_i_V_address0 <= i_12_cast_reg_2878_pp7_iter1_reg(3 - 1 downto 0);
        else 
            new_z_i_V_address0 <= "XXX";
        end if; 
    end process;


    new_z_i_V_ce0_assign_proc : process(ap_block_pp7_stage0_11001, ap_CS_fsm_pp8_stage0, ap_block_pp8_stage0_11001, ap_enable_reg_pp8_iter0, ap_enable_reg_pp7_iter2)
    begin
        if ((((ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0)) or ((ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001)))) then 
            new_z_i_V_ce0 <= ap_const_logic_1;
        else 
            new_z_i_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_V_we0_assign_proc : process(ap_block_pp7_stage0_11001, icmp_ln947_reg_2874_pp7_iter1_reg, ap_enable_reg_pp7_iter2)
    begin
        if (((ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (icmp_ln947_reg_2874_pp7_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then 
            new_z_i_V_we0 <= ap_const_logic_1;
        else 
            new_z_i_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, i_7_cast_reg_2730, ap_CS_fsm_pp3_stage0, i_9_cast_reg_2773, ap_CS_fsm_pp4_stage0, i_8_cast_reg_2800, new_z_i_index_addr_3_reg_2819_pp5_iter6_reg, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_enable_reg_pp4_iter1, ap_enable_reg_pp5_iter7, ap_block_pp2_stage0, ap_block_pp3_stage0, ap_block_pp4_stage0, ap_block_pp5_stage0, i_11_cast_fu_1561_p1, ap_block_pp6_stage0)
    begin
        if (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            new_z_i_index_address0 <= i_11_cast_fu_1561_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp5_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            new_z_i_index_address0 <= new_z_i_index_addr_3_reg_2819_pp5_iter6_reg;
        elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            new_z_i_index_address0 <= i_8_cast_reg_2800(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            new_z_i_index_address0 <= i_9_cast_reg_2773(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            new_z_i_index_address0 <= i_7_cast_reg_2730(3 - 1 downto 0);
        else 
            new_z_i_index_address0 <= "XXX";
        end if; 
    end process;


    new_z_i_index_address1_assign_proc : process(new_z_i_index_addr_3_reg_2819_pp5_iter3_reg, new_z_i_index_addr_4_reg_2858_pp6_iter2_reg, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, i_12_cast_fu_1752_p1, ap_enable_reg_pp5_iter4, ap_enable_reg_pp6_iter3, ap_block_pp7_stage0, ap_block_pp5_stage0, ap_block_pp6_stage0)
    begin
        if (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
            new_z_i_index_address1 <= i_12_cast_fu_1752_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp6_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            new_z_i_index_address1 <= new_z_i_index_addr_4_reg_2858_pp6_iter2_reg;
        elsif (((ap_enable_reg_pp5_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            new_z_i_index_address1 <= new_z_i_index_addr_3_reg_2819_pp5_iter3_reg;
        else 
            new_z_i_index_address1 <= "XXX";
        end if; 
    end process;


    new_z_i_index_ce0_assign_proc : process(ap_block_pp5_stage0_11001, ap_block_pp6_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_enable_reg_pp4_iter1, ap_enable_reg_pp5_iter7)
    begin
        if ((((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)) or ((ap_enable_reg_pp5_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            new_z_i_index_ce0 <= ap_const_logic_1;
        else 
            new_z_i_index_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_ce1_assign_proc : process(ap_block_pp5_stage0_11001, ap_block_pp6_stage0_11001, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, ap_block_pp7_stage0_11001, ap_enable_reg_pp5_iter4, ap_enable_reg_pp6_iter3)
    begin
        if ((((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)) or ((ap_enable_reg_pp6_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001)) or ((ap_enable_reg_pp5_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)))) then 
            new_z_i_index_ce1 <= ap_const_logic_1;
        else 
            new_z_i_index_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_d0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_enable_reg_pp4_iter1, ap_enable_reg_pp5_iter7, ap_block_pp2_stage0, ap_block_pp3_stage0, ap_block_pp4_stage0, ap_block_pp5_stage0, grp_fu_921_p2, add_ln921_fu_1312_p2, val_fu_1540_p3)
    begin
        if (((ap_enable_reg_pp5_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            new_z_i_index_d0 <= val_fu_1540_p3;
        elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            new_z_i_index_d0 <= add_ln921_fu_1312_p2;
        elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            new_z_i_index_d0 <= grp_fu_921_p2;
        else 
            new_z_i_index_d0 <= "XXXXXXXX";
        end if; 
    end process;

    new_z_i_index_d1 <= 
        zext_ln662_1_fu_1717_p1 when (isNeg_2_fu_1663_p3(0) = '1') else 
        tmp_19_fu_1721_p4;

    new_z_i_index_we0_assign_proc : process(ap_block_pp5_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln907_reg_2726, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, icmp_ln928_reg_2769, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, icmp_ln919_reg_2796, icmp_ln936_reg_2815_pp5_iter6_reg, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_enable_reg_pp4_iter1, ap_enable_reg_pp5_iter7)
    begin
        if ((((ap_enable_reg_pp5_iter7 = ap_const_logic_1) and (icmp_ln936_reg_2815_pp5_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln919_reg_2796 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln928_reg_2769 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln907_reg_2726 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            new_z_i_index_we0 <= ap_const_logic_1;
        else 
            new_z_i_index_we0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_we1_assign_proc : process(ap_block_pp6_stage0_11001, icmp_ln941_reg_2854_pp6_iter2_reg, ap_enable_reg_pp6_iter3)
    begin
        if (((ap_enable_reg_pp6_iter3 = ap_const_logic_1) and (icmp_ln941_reg_2854_pp6_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then 
            new_z_i_index_we1 <= ap_const_logic_1;
        else 
            new_z_i_index_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1050_fu_2399_p2 <= (ap_const_lv12_1 or add_ln1050_fu_2393_p2);
    or_ln215_1_fu_1132_p2 <= (shl_ln215_fu_1126_p2 or ap_const_lv11_1);
    or_ln215_fu_984_p2 <= (tmp_6_fu_976_p3 or ap_const_lv9_1);
    or_ln938_1_fu_1406_p2 <= (icmp_ln938_3_fu_1400_p2 or icmp_ln938_2_fu_1394_p2);
    or_ln938_fu_1388_p2 <= (icmp_ln938_fu_1376_p2 or icmp_ln938_1_fu_1382_p2);
    or_ln943_fu_1601_p2 <= (icmp_ln943_fu_1589_p2 or icmp_ln943_1_fu_1595_p2);
    or_ln949_fu_1785_p2 <= (shl_ln949_fu_1779_p2 or ap_const_lv11_1);
    or_ln987_fu_2123_p2 <= (icmp_ln987_reg_2999 or icmp_ln987_1_reg_3004);
    or_ln992_fu_2206_p2 <= (icmp_ln992_reg_3045 or icmp_ln992_1_reg_3050);
    or_ln997_fu_2289_p2 <= (icmp_ln997_reg_3076 or icmp_ln997_1_reg_3081);
    p_Result_2_fu_2167_p1 <= data_V_5_fu_2163_p1(63 - 1 downto 0);
    p_Result_3_fu_2250_p1 <= data_V_6_fu_2246_p1(63 - 1 downto 0);
    p_Result_s_fu_2062_p1 <= data_V_4_fu_2058_p1(63 - 1 downto 0);

    patches_parameters_address0_assign_proc : process(ap_CS_fsm_state78, icmp_ln1019_reg_3092, ap_CS_fsm_state77, grp_makePatch_alignedToLine_fu_830_patches_parameters_address0, grp_delete_patch_fu_882_patches_parameters_V_address0, ap_CS_fsm_state105, ap_CS_fsm_state75, ap_CS_fsm_state103, zext_ln1051_fu_2416_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            patches_parameters_address0 <= zext_ln1051_fu_2416_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state103) or ((icmp_ln1019_reg_3092 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            patches_parameters_address0 <= grp_delete_patch_fu_882_patches_parameters_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            patches_parameters_address0 <= grp_makePatch_alignedToLine_fu_830_patches_parameters_address0;
        else 
            patches_parameters_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_address1_assign_proc : process(ap_CS_fsm_state78, icmp_ln1019_reg_3092, grp_delete_patch_fu_882_patches_parameters_V_address1, ap_CS_fsm_state75, ap_CS_fsm_state103, zext_ln1050_1_fu_2405_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            patches_parameters_address1 <= zext_ln1050_1_fu_2405_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state103) or ((icmp_ln1019_reg_3092 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            patches_parameters_address1 <= grp_delete_patch_fu_882_patches_parameters_V_address1;
        else 
            patches_parameters_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_ce0_assign_proc : process(ap_CS_fsm_state78, icmp_ln1019_reg_3092, ap_CS_fsm_state77, grp_makePatch_alignedToLine_fu_830_patches_parameters_ce0, grp_delete_patch_fu_882_patches_parameters_V_ce0, ap_CS_fsm_state105, ap_CS_fsm_state75, ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            patches_parameters_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state103) or ((icmp_ln1019_reg_3092 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            patches_parameters_ce0 <= grp_delete_patch_fu_882_patches_parameters_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            patches_parameters_ce0 <= grp_makePatch_alignedToLine_fu_830_patches_parameters_ce0;
        else 
            patches_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_ce1_assign_proc : process(ap_CS_fsm_state78, icmp_ln1019_reg_3092, grp_delete_patch_fu_882_patches_parameters_V_ce1, ap_CS_fsm_state75, ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            patches_parameters_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state103) or ((icmp_ln1019_reg_3092 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            patches_parameters_ce1 <= grp_delete_patch_fu_882_patches_parameters_V_ce1;
        else 
            patches_parameters_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_d0_assign_proc : process(icmp_ln1019_reg_3092, ap_CS_fsm_state77, grp_makePatch_alignedToLine_fu_830_patches_parameters_d0, grp_delete_patch_fu_882_patches_parameters_V_d0, ap_CS_fsm_state105, ap_CS_fsm_state75, ap_CS_fsm_state103)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state103) or ((icmp_ln1019_reg_3092 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            patches_parameters_d0 <= grp_delete_patch_fu_882_patches_parameters_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            patches_parameters_d0 <= grp_makePatch_alignedToLine_fu_830_patches_parameters_d0;
        else 
            patches_parameters_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_we0_assign_proc : process(icmp_ln1019_reg_3092, ap_CS_fsm_state77, grp_makePatch_alignedToLine_fu_830_patches_parameters_we0, grp_delete_patch_fu_882_patches_parameters_V_we0, ap_CS_fsm_state105, ap_CS_fsm_state75, ap_CS_fsm_state103)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state103) or ((icmp_ln1019_reg_3092 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            patches_parameters_we0 <= grp_delete_patch_fu_882_patches_parameters_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            patches_parameters_we0 <= grp_makePatch_alignedToLine_fu_830_patches_parameters_we0;
        else 
            patches_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_address0_assign_proc : process(icmp_ln1019_reg_3092, ap_CS_fsm_state77, icmp_ln1082_reg_3149, grp_makePatch_alignedToLine_fu_830_patches_superpoints_address0, grp_areWedgeSuperPointsEqual_fu_855_wsp1_2_address0, grp_delete_patch_fu_882_patches_superpoints_address0, ap_CS_fsm_state105, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state75, ap_CS_fsm_state103)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state103) or ((icmp_ln1019_reg_3092 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            patches_superpoints_address0 <= grp_delete_patch_fu_882_patches_superpoints_address0;
        elsif ((((icmp_ln1082_reg_3149 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state99)) or ((icmp_ln1082_reg_3149 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state98)) or ((icmp_ln1082_reg_3149 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state82)) or ((icmp_ln1082_reg_3149 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state81)))) then 
            patches_superpoints_address0 <= grp_areWedgeSuperPointsEqual_fu_855_wsp1_2_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            patches_superpoints_address0 <= grp_makePatch_alignedToLine_fu_830_patches_superpoints_address0;
        else 
            patches_superpoints_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_address1_assign_proc : process(icmp_ln1019_reg_3092, icmp_ln1082_reg_3149, grp_areWedgeSuperPointsEqual_fu_855_wsp1_2_address1, grp_delete_patch_fu_882_patches_superpoints_address1, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state75, ap_CS_fsm_state103)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state103) or ((icmp_ln1019_reg_3092 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            patches_superpoints_address1 <= grp_delete_patch_fu_882_patches_superpoints_address1;
        elsif ((((icmp_ln1082_reg_3149 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state99)) or ((icmp_ln1082_reg_3149 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state98)) or ((icmp_ln1082_reg_3149 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state82)) or ((icmp_ln1082_reg_3149 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state81)))) then 
            patches_superpoints_address1 <= grp_areWedgeSuperPointsEqual_fu_855_wsp1_2_address1;
        else 
            patches_superpoints_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_ce0_assign_proc : process(icmp_ln1019_reg_3092, ap_CS_fsm_state77, icmp_ln1082_reg_3149, grp_makePatch_alignedToLine_fu_830_patches_superpoints_ce0, grp_areWedgeSuperPointsEqual_fu_855_wsp1_2_ce0, grp_delete_patch_fu_882_patches_superpoints_ce0, ap_CS_fsm_state105, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state75, ap_CS_fsm_state103)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state103) or ((icmp_ln1019_reg_3092 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            patches_superpoints_ce0 <= grp_delete_patch_fu_882_patches_superpoints_ce0;
        elsif ((((icmp_ln1082_reg_3149 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state99)) or ((icmp_ln1082_reg_3149 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state98)) or ((icmp_ln1082_reg_3149 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state82)) or ((icmp_ln1082_reg_3149 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state81)))) then 
            patches_superpoints_ce0 <= grp_areWedgeSuperPointsEqual_fu_855_wsp1_2_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            patches_superpoints_ce0 <= grp_makePatch_alignedToLine_fu_830_patches_superpoints_ce0;
        else 
            patches_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_ce1_assign_proc : process(icmp_ln1019_reg_3092, icmp_ln1082_reg_3149, grp_areWedgeSuperPointsEqual_fu_855_wsp1_2_ce1, grp_delete_patch_fu_882_patches_superpoints_ce1, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state75, ap_CS_fsm_state103)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state103) or ((icmp_ln1019_reg_3092 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            patches_superpoints_ce1 <= grp_delete_patch_fu_882_patches_superpoints_ce1;
        elsif ((((icmp_ln1082_reg_3149 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state99)) or ((icmp_ln1082_reg_3149 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state98)) or ((icmp_ln1082_reg_3149 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state82)) or ((icmp_ln1082_reg_3149 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state81)))) then 
            patches_superpoints_ce1 <= grp_areWedgeSuperPointsEqual_fu_855_wsp1_2_ce1;
        else 
            patches_superpoints_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_d0_assign_proc : process(icmp_ln1019_reg_3092, ap_CS_fsm_state77, grp_makePatch_alignedToLine_fu_830_patches_superpoints_d0, grp_delete_patch_fu_882_patches_superpoints_d0, ap_CS_fsm_state105, ap_CS_fsm_state75, ap_CS_fsm_state103)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state103) or ((icmp_ln1019_reg_3092 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            patches_superpoints_d0 <= grp_delete_patch_fu_882_patches_superpoints_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            patches_superpoints_d0 <= grp_makePatch_alignedToLine_fu_830_patches_superpoints_d0;
        else 
            patches_superpoints_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_we0_assign_proc : process(icmp_ln1019_reg_3092, ap_CS_fsm_state77, grp_makePatch_alignedToLine_fu_830_patches_superpoints_we0, grp_delete_patch_fu_882_patches_superpoints_we0, ap_CS_fsm_state105, ap_CS_fsm_state75, ap_CS_fsm_state103)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state103) or ((icmp_ln1019_reg_3092 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
            patches_superpoints_we0 <= grp_delete_patch_fu_882_patches_superpoints_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            patches_superpoints_we0 <= grp_makePatch_alignedToLine_fu_830_patches_superpoints_we0;
        else 
            patches_superpoints_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_4_fu_1512_p2 <= std_logic_vector(shift_left(unsigned(zext_ln68_fu_1458_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1502_p1(31-1 downto 0)))));
    r_V_5_fu_1697_p2 <= std_logic_vector(shift_right(unsigned(zext_ln68_1_fu_1649_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i75_cast_cast_cast_cast_fu_1693_p1(31-1 downto 0)))));
    r_V_6_fu_1703_p2 <= std_logic_vector(shift_left(unsigned(zext_ln68_1_fu_1649_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i75_cast_cast_cast_cast_fu_1693_p1(31-1 downto 0)))));
    r_V_7_fu_1959_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_1913_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i102_cast_cast_cast_cast_fu_1955_p1(31-1 downto 0)))));
    r_V_8_fu_1965_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_1913_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i102_cast_cast_cast_cast_fu_1955_p1(31-1 downto 0)))));
    r_V_fu_1506_p2 <= std_logic_vector(shift_right(unsigned(zext_ln68_fu_1458_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1502_p1(31-1 downto 0)))));
    ret_10_fu_2143_p2 <= std_logic_vector(signed(sext_ln215_6_fu_2139_p1) - signed(rhs_reg_2613));
    ret_12_fu_2226_p2 <= std_logic_vector(signed(sext_ln215_7_fu_2223_p1) - signed(rhs_reg_2613));
    ret_14_fu_2317_p2 <= std_logic_vector(signed(sext_ln215_8_fu_2314_p1) - signed(rhs_reg_2613));
    ret_17_fu_2444_p2 <= std_logic_vector(signed(sext_ln215_9_fu_2437_p1) - signed(sext_ln215_10_fu_2440_p1));
    ret_18_fu_2457_p2 <= std_logic_vector(signed(sext_ln215_11_fu_2450_p1) - signed(sext_ln215_12_fu_2453_p1));
    ret_3_fu_1147_p2 <= std_logic_vector(signed(sext_ln215_4_fu_1143_p1) - signed(rhs_2_reg_2692));
    ret_8_fu_2048_p2 <= std_logic_vector(signed(sext_ln215_5_fu_2044_p1) - signed(rhs_reg_2613));
    ret_fu_1003_p2 <= std_logic_vector(signed(sext_ln215_fu_999_p1) - signed(rhs_reg_2613));
        rhs_2_fu_1098_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_straightLineProjectorFromLayerIJtoK_fu_643_p_dout0),33));

    rhs_fu_956_p0 <= z_top_min_read;
        rhs_fu_956_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_fu_956_p0),33));

    select_ln1002_fu_2339_p3 <= 
        new_z_i_atTop_V_3_fu_264 when (tmp_42_fu_2331_p3(0) = '1') else 
        lhs_6_reg_3086;
    select_ln1056_fu_2469_p3 <= 
        ret_18_fu_2457_p2 when (icmp_ln878_fu_2463_p2(0) = '1') else 
        ret_17_fu_2444_p2;
    select_ln934_fu_1287_p3 <= 
        sext_ln934_fu_1271_p1 when (icmp_ln934_fu_1281_p2(0) = '1') else 
        add_ln934_fu_1275_p2;
        sext_ln1311_2_fu_1677_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_2_fu_1671_p2),9));

        sext_ln1311_3_fu_1939_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_3_fu_1934_p2),12));

        sext_ln1311_fu_1486_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_1480_p2),9));

        sext_ln215_10_fu_2440_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(patches_parameters_q1),33));

        sext_ln215_11_fu_2450_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(original_d),33));

        sext_ln215_12_fu_2453_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(patches_parameters_q0),33));

        sext_ln215_4_fu_1143_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(GDarrayDecoded_q0),33));

        sext_ln215_5_fu_2044_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_3_fu_2030_p6),33));

        sext_ln215_6_fu_2139_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_4_fu_2132_p3),33));

        sext_ln215_7_fu_2223_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_5_reg_3055),33));

        sext_ln215_8_fu_2314_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_6_reg_3086),33));

        sext_ln215_9_fu_2437_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(original_c),33));

        sext_ln215_fu_999_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(GDarrayDecoded_q0),33));

        sext_ln277_1_fu_2148_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_10_fu_2143_p2),64));

        sext_ln277_2_fu_2231_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_12_fu_2226_p2),64));

        sext_ln277_3_fu_1881_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln967_fu_1876_p2),64));

        sext_ln277_fu_2053_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_8_fu_2048_p2),64));

        sext_ln414_1_fu_1174_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(diff_1_fu_1166_p3),64));

        sext_ln414_fu_1030_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(diff_fu_1022_p3),64));

        sext_ln534_1_fu_2477_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln1056_fu_2469_p3),64));

        sext_ln919_fu_1250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln918_fu_1244_p2),10));

        sext_ln934_fu_1271_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_empty_76_phi_fu_699_p4),32));

        sext_ln967_fu_1872_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_fu_1858_p6),33));

    sh_prom_i_i_i_i_i102_cast_cast_cast_cast_fu_1955_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i102_cast_cast_cast_fu_1951_p1),169));
        sh_prom_i_i_i_i_i102_cast_cast_cast_fu_1951_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_3_fu_1943_p3),32));

    sh_prom_i_i_i_i_i75_cast_cast_cast_cast_fu_1693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i75_cast_cast_cast_fu_1689_p1),55));
        sh_prom_i_i_i_i_i75_cast_cast_cast_fu_1689_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_fu_1681_p3),32));

    sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_1498_p1),55));
        sh_prom_i_i_i_i_i_cast_cast_cast_fu_1498_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_1490_p3),32));

    shl_ln215_fu_1126_p2 <= std_logic_vector(shift_left(unsigned(add_ln215_fu_1121_p2),to_integer(unsigned('0' & ap_const_lv11_1(11-1 downto 0)))));
    shl_ln949_fu_1779_p2 <= std_logic_vector(shift_left(unsigned(add_ln949_fu_1773_p2),to_integer(unsigned('0' & ap_const_lv11_1(11-1 downto 0)))));
    sub_ln1050_fu_2387_p2 <= std_logic_vector(unsigned(tmp_54_cast_fu_2367_p3) - unsigned(zext_ln1050_fu_2383_p1));
    sub_ln1311_2_fu_1671_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_50_fu_1625_p4));
    sub_ln1311_3_fu_1934_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_52_reg_2961));
    sub_ln1311_fu_1480_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_48_fu_1434_p4));
    sub_ln180_1_fu_1152_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(ret_3_fu_1147_p2));
    sub_ln180_fu_1008_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(ret_fu_1003_p2));
    sub_ln967_fu_1876_p2 <= std_logic_vector(signed(sext_ln967_fu_1872_p1) - signed(rhs_reg_2613));
    temp_V_address0 <= grp_makePatch_alignedToLine_fu_830_temp_V_address0;
    temp_V_address1 <= grp_makePatch_alignedToLine_fu_830_temp_V_address1;

    temp_V_ce0_assign_proc : process(ap_CS_fsm_state77, grp_makePatch_alignedToLine_fu_830_temp_V_ce0, ap_CS_fsm_state105)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            temp_V_ce0 <= grp_makePatch_alignedToLine_fu_830_temp_V_ce0;
        else 
            temp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_V_ce1_assign_proc : process(ap_CS_fsm_state77, grp_makePatch_alignedToLine_fu_830_temp_V_ce1, ap_CS_fsm_state105)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            temp_V_ce1 <= grp_makePatch_alignedToLine_fu_830_temp_V_ce1;
        else 
            temp_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_d0 <= grp_makePatch_alignedToLine_fu_830_temp_V_d0;
    temp_V_d1 <= grp_makePatch_alignedToLine_fu_830_temp_V_d1;

    temp_V_we0_assign_proc : process(ap_CS_fsm_state77, grp_makePatch_alignedToLine_fu_830_temp_V_we0, ap_CS_fsm_state105)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            temp_V_we0 <= grp_makePatch_alignedToLine_fu_830_temp_V_we0;
        else 
            temp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_V_we1_assign_proc : process(ap_CS_fsm_state77, grp_makePatch_alignedToLine_fu_830_temp_V_we1, ap_CS_fsm_state105)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            temp_V_we1 <= grp_makePatch_alignedToLine_fu_830_temp_V_we1;
        else 
            temp_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    thirdLastPatchIdx_fu_2484_p2 <= std_logic_vector(unsigned(reg_951) + unsigned(ap_const_lv8_FD));
    tmp_11_fu_2180_p4 <= data_V_5_fu_2163_p1(62 downto 52);
    tmp_14_fu_2263_p4 <= data_V_6_fu_2246_p1(62 downto 52);
    tmp_15_fu_1530_p4 <= r_V_4_fu_1512_p2(31 downto 24);
    tmp_17_fu_1858_p5 <= i_14_reg_761(2 - 1 downto 0);
    tmp_19_fu_1721_p4 <= r_V_6_fu_1703_p2(31 downto 24);
    tmp_1_fu_1362_p4 <= bitcast_ln938_1_fu_1359_p1(30 downto 23);
    tmp_21_fu_1757_p3 <= (i_12_reg_738 & ap_const_lv7_0);
    tmp_23_fu_1983_p4 <= r_V_8_fu_1965_p2(116 downto 53);
    tmp_24_fu_2375_p3 <= (lastPatchIdx_fu_2357_p2 & ap_const_lv3_0);
    tmp_31_fu_1014_p3 <= ret_fu_1003_p2(32 downto 32);
    tmp_32_cast_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_1086_p3),11));
    tmp_32_fu_1158_p3 <= ret_3_fu_1147_p2(32 downto 32);
    tmp_33_fu_1217_p1 <= white_space_height_read;
    tmp_33_fu_1217_p3 <= tmp_33_fu_1217_p1(63 downto 63);
    tmp_37_fu_1518_p3 <= r_V_fu_1506_p2(24 downto 24);
    tmp_41_fu_1709_p3 <= r_V_5_fu_1697_p2(24 downto 24);
    tmp_42_fu_2331_p3 <= mul_ln1002_fu_2326_p2(63 downto 63);
    tmp_46_fu_1971_p3 <= r_V_7_fu_1959_p2(53 downto 53);
    tmp_47_fu_2421_p4 <= n_patches_i(7 downto 2);
    tmp_48_fu_1434_p4 <= data_V_fu_1430_p1(30 downto 23);
    tmp_49_fu_1444_p1 <= data_V_fu_1430_p1(23 - 1 downto 0);
    tmp_50_cast_fu_2104_p3 <= (trunc_ln989_fu_2101_p1 & ap_const_lv1_0);
    tmp_50_fu_1625_p4 <= data_V_2_fu_1617_p3(30 downto 23);
    tmp_51_fu_1635_p1 <= data_V_2_fu_1617_p3(23 - 1 downto 0);
    tmp_53_fu_1900_p1 <= data_V_3_fu_1886_p1(52 - 1 downto 0);
    tmp_54_cast_fu_2367_p3 <= (trunc_ln1050_fu_2363_p1 & ap_const_lv7_0);
    tmp_6_fu_976_p3 <= (ap_phi_mux_i_phi_fu_565_p4 & ap_const_lv1_0);
    tmp_7_fu_990_p3 <= (ap_const_lv55_2 & or_ln215_fu_984_p2);
    tmp_8_fu_2075_p4 <= data_V_4_fu_2058_p1(62 downto 52);
    tmp_9_fu_1086_p3 <= (i_17_reg_597 & ap_const_lv7_0);
    tmp_fu_1575_p4 <= bitcast_ln943_fu_1571_p1(30 downto 23);
    tmp_s_fu_1345_p4 <= bitcast_ln938_fu_1342_p1(30 downto 23);
    trunc_ln1050_fu_2363_p1 <= lastPatchIdx_fu_2357_p2(5 - 1 downto 0);
    trunc_ln312_fu_1613_p1 <= bitcast_ln943_fu_1571_p1(31 - 1 downto 0);
    trunc_ln534_fu_1854_p1 <= i_14_reg_761(2 - 1 downto 0);
    trunc_ln938_1_fu_1372_p1 <= bitcast_ln938_1_fu_1359_p1(23 - 1 downto 0);
    trunc_ln938_fu_1355_p1 <= bitcast_ln938_fu_1342_p1(23 - 1 downto 0);
    trunc_ln943_fu_1585_p1 <= bitcast_ln943_fu_1571_p1(23 - 1 downto 0);
    trunc_ln955_fu_1813_p1 <= ap_phi_mux_i_15_phi_fu_754_p4(2 - 1 downto 0);
    trunc_ln958_cast_fu_1808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_15_phi_fu_754_p4),64));
    trunc_ln987_fu_2085_p1 <= data_V_4_fu_2058_p1(52 - 1 downto 0);
    trunc_ln989_fu_2101_p1 <= select_ln934_reg_2783(10 - 1 downto 0);
    trunc_ln992_fu_2190_p1 <= data_V_5_fu_2163_p1(52 - 1 downto 0);
    trunc_ln997_fu_2273_p1 <= data_V_6_fu_2246_p1(52 - 1 downto 0);
    ush_2_fu_1681_p3 <= 
        sext_ln1311_2_fu_1677_p1 when (isNeg_2_fu_1663_p3(0) = '1') else 
        add_ln341_2_fu_1657_p2;
    ush_3_fu_1943_p3 <= 
        sext_ln1311_3_fu_1939_p1 when (isNeg_3_fu_1926_p3(0) = '1') else 
        add_ln510_fu_1920_p2;
    ush_fu_1490_p3 <= 
        sext_ln1311_fu_1486_p1 when (isNeg_fu_1472_p3(0) = '1') else 
        add_ln341_fu_1466_p2;
    val_3_fu_1993_p3 <= 
        zext_ln662_2_fu_1979_p1 when (isNeg_3_fu_1926_p3(0) = '1') else 
        tmp_23_fu_1983_p4;
    val_fu_1540_p3 <= 
        zext_ln662_fu_1526_p1 when (isNeg_fu_1472_p3(0) = '1') else 
        tmp_15_fu_1530_p4;
    zext_ln1038_fu_2352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1018_fu_2346_p2),9));
    zext_ln1050_1_fu_2405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1050_fu_2399_p2),64));
    zext_ln1050_fu_2383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_2375_p3),12));
    zext_ln1051_fu_2416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1051_fu_2410_p2),64));
    zext_ln1075_fu_2481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lastPatchIdx_reg_3113),9));
    zext_ln15_fu_1913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_3_fu_1904_p4),169));
    zext_ln215_1_fu_1138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln215_1_fu_1132_p2),64));
    zext_ln215_fu_1117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_5_phi_fu_613_p4),11));
    zext_ln341_2_fu_1653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_1625_p4),9));
    zext_ln341_fu_1462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_1434_p4),9));
    zext_ln368_1_fu_2171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_2_fu_2167_p1),64));
    zext_ln368_2_fu_2254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_3_fu_2250_p1),64));
    zext_ln368_fu_2066_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_2062_p1),64));
    zext_ln412_1_fu_1108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_5_phi_fu_613_p4),32));
    zext_ln412_fu_966_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_phi_fu_565_p4),32));
    zext_ln510_fu_1917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_reg_2961),12));
    zext_ln662_1_fu_1717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_1709_p3),8));
    zext_ln662_2_fu_1979_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_1971_p3),64));
    zext_ln662_fu_1526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_1518_p3),8));
    zext_ln68_1_fu_1649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_2_fu_1639_p4),55));
    zext_ln68_fu_1458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_1448_p4),55));
    zext_ln896_fu_1056_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_reg_573),9));
    zext_ln899_fu_1081_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_17_reg_597),64));
    zext_ln928_fu_1235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln927_fu_1229_p2),10));
    zext_ln938_fu_1337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_z_i_index_q1),32));
    zext_ln943_fu_1566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_z_i_index_q0),32));
    zext_ln947_fu_1765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_1757_p3),11));
    zext_ln949_1_fu_1791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln949_fu_1785_p2),64));
    zext_ln949_fu_1769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_z_i_index_q1),11));
    zext_ln967_fu_2007_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln534_reg_2951_pp9_iter1_reg),8));
    zext_ln989_fu_2118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln989_fu_2112_p2),64));
    zext_ln994_fu_2158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln994_fu_2153_p2),64));
    zext_ln999_fu_2241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln999_fu_2236_p2),64));
end behav;
