-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity makePatches_ShadowQuilt_fromEdges_areWedgeSuperPointsEqual is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    wsp1_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    wsp1_2_ce0 : OUT STD_LOGIC;
    wsp1_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    wsp1_2_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    wsp1_2_ce1 : OUT STD_LOGIC;
    wsp1_2_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    wsp1 : IN STD_LOGIC_VECTOR (7 downto 0);
    wsp11 : IN STD_LOGIC_VECTOR (2 downto 0);
    wsp2 : IN STD_LOGIC_VECTOR (7 downto 0);
    wsp23 : IN STD_LOGIC_VECTOR (2 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of makePatches_ShadowQuilt_fromEdges_areWedgeSuperPointsEqual is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv64_64 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001100100";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv18_78 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001111000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv12_F : STD_LOGIC_VECTOR (11 downto 0) := "000000001111";
    constant ap_const_lv37_66667 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001100110011001100111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal wsp23_read_reg_857 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal wsp23_read_reg_857_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal wsp2_read_reg_862 : STD_LOGIC_VECTOR (7 downto 0);
    signal wsp2_read_reg_862_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal wsp11_read_reg_868 : STD_LOGIC_VECTOR (2 downto 0);
    signal wsp1_read_reg_873 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln277_fu_293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln23_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_894 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_894_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_894_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_894_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_894_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_894_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_894_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_894_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_894_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_fu_465_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln23_reg_898 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln23_reg_898_pp0_iter2_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln23_reg_898_pp0_iter3_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln23_reg_898_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln23_reg_898_pp0_iter5_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln23_reg_898_pp0_iter6_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln23_1_fu_530_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln23_1_reg_908 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln23_1_reg_908_pp0_iter2_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln23_1_reg_908_pp0_iter3_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln23_1_reg_908_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln23_1_reg_908_pp0_iter5_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_481_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal urem_ln23_reg_928 : STD_LOGIC_VECTOR (7 downto 0);
    signal udiv_ln23_1_cast_reg_933 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_84_reg_938 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln277_4_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_empty_phi_fu_171_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_1_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter9_empty_reg_167 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_reg_167 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_reg_167 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_reg_167 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter3_empty_reg_167 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter4_empty_reg_167 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter5_empty_reg_167 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter6_empty_reg_167 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter7_empty_reg_167 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter8_empty_reg_167 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln23_10_fu_221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_13_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_15_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln23_17_fu_684_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_178_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_189_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln23_5_fu_197_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln23_4_fu_185_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_4_fu_201_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal wsp23_cast_fu_181_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_5_fu_207_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_77_fu_213_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_234_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln23_12_fu_242_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln23_11_fu_230_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_6_fu_246_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal wsp11_cast_fu_226_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_7_fu_252_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_78_fu_258_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal lhs_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_fu_275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln215_fu_279_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_28_fu_283_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_fu_287_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_178_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_fu_298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_90_fu_312_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_fu_316_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_89_fu_302_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln510_fu_330_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_fu_334_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_348_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_340_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_354_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_358_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_fu_366_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_326_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_370_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal r_V_fu_374_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_82_fu_386_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_11_fu_380_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln662_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_fu_398_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_fu_408_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln23_2_fu_422_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln23_3_fu_433_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln_fu_444_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln23_1_fu_440_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln23_2_fu_451_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln23_2_fu_455_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln23_3_fu_461_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln23_fu_429_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_481_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_481_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln23_4_fu_487_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln23_5_fu_498_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln23_1_fu_509_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln23_7_fu_505_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln23_8_fu_516_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln23_3_fu_520_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln23_9_fu_526_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln23_6_fu_494_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_546_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_546_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln23_1_fu_552_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_ln23_fu_561_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_841_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_849_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_83_fu_597_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_158_cast_fu_606_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal udiv_ln_cast_fu_588_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln23_8_fu_614_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_fu_620_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln23_9_fu_623_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_160_cast_fu_629_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln23_2_fu_637_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_162_cast_fu_648_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_546_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln23_10_fu_655_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_2_fu_660_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln23_11_fu_664_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_164_cast_fu_670_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln23_3_fu_678_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_9_fu_689_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_14_fu_693_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln215_29_fu_697_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_30_fu_701_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_37_fu_705_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal data_V_11_fu_716_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_92_fu_730_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_4_fu_734_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_91_fu_720_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln510_1_fu_748_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_1_fu_752_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_4_fu_766_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_4_fu_758_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_4_fu_772_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_4_fu_776_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i196_cast_cast_cast_fu_784_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_2_fu_744_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal sh_prom_i_i_i_i_i196_cast_cast_cast_cast_fu_788_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal r_V_12_fu_792_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_88_fu_804_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_13_fu_798_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln662_3_fu_812_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_fu_816_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_4_fu_826_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_841_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_841_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_849_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_849_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to9 : STD_LOGIC;
    signal ap_idle_pp0_0to8 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_841_p00 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_849_p00 : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component makePatches_ShadowQuilt_fromEdges_sitodp_64s_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_urem_11ns_4ns_8_15_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_mul_mul_18ns_20ns_37_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (36 downto 0) );
    end component;



begin
    sitodp_64s_64_2_no_dsp_1_U112 : component makePatches_ShadowQuilt_fromEdges_sitodp_64s_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_178_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_178_p1);

    urem_11ns_4ns_8_15_1_U113 : component makePatches_ShadowQuilt_fromEdges_urem_11ns_4ns_8_15_1
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_481_p0,
        din1 => grp_fu_481_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_481_p2);

    urem_11ns_4ns_8_15_1_U114 : component makePatches_ShadowQuilt_fromEdges_urem_11ns_4ns_8_15_1
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_546_p0,
        din1 => grp_fu_546_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_546_p2);

    mul_mul_18ns_20ns_37_4_1_U115 : component makePatches_ShadowQuilt_fromEdges_mul_mul_18ns_20ns_37_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 20,
        dout_WIDTH => 37)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_841_p0,
        din1 => grp_fu_841_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_841_p2);

    mul_mul_18ns_20ns_37_4_1_U116 : component makePatches_ShadowQuilt_fromEdges_mul_mul_18ns_20ns_37_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 20,
        dout_WIDTH => 37)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_849_p0,
        din1 => grp_fu_849_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_849_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_empty_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln23_fu_416_p2 = ap_const_lv1_0))) then 
                ap_phi_reg_pp0_iter1_empty_reg_167 <= ap_const_lv1_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                ap_phi_reg_pp0_iter1_empty_reg_167 <= ap_phi_reg_pp0_iter0_empty_reg_167;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln23_reg_894 = ap_const_lv1_1))) then
                    add_ln23_1_reg_908(17 downto 7) <= add_ln23_1_fu_530_p2(17 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    add_ln23_1_reg_908_pp0_iter2_reg(17 downto 7) <= add_ln23_1_reg_908(17 downto 7);
                    add_ln23_1_reg_908_pp0_iter3_reg(17 downto 7) <= add_ln23_1_reg_908_pp0_iter2_reg(17 downto 7);
                    add_ln23_1_reg_908_pp0_iter4_reg(17 downto 7) <= add_ln23_1_reg_908_pp0_iter3_reg(17 downto 7);
                    add_ln23_1_reg_908_pp0_iter5_reg(17 downto 7) <= add_ln23_1_reg_908_pp0_iter4_reg(17 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln23_fu_416_p2 = ap_const_lv1_1))) then
                    add_ln23_reg_898(17 downto 7) <= add_ln23_fu_465_p2(17 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    add_ln23_reg_898_pp0_iter2_reg(17 downto 7) <= add_ln23_reg_898(17 downto 7);
                    add_ln23_reg_898_pp0_iter3_reg(17 downto 7) <= add_ln23_reg_898_pp0_iter2_reg(17 downto 7);
                    add_ln23_reg_898_pp0_iter4_reg(17 downto 7) <= add_ln23_reg_898_pp0_iter3_reg(17 downto 7);
                    add_ln23_reg_898_pp0_iter5_reg(17 downto 7) <= add_ln23_reg_898_pp0_iter4_reg(17 downto 7);
                    add_ln23_reg_898_pp0_iter6_reg(17 downto 7) <= add_ln23_reg_898_pp0_iter5_reg(17 downto 7);
                icmp_ln23_reg_894 <= icmp_ln23_fu_416_p2;
                icmp_ln23_reg_894_pp0_iter2_reg <= icmp_ln23_reg_894;
                icmp_ln23_reg_894_pp0_iter3_reg <= icmp_ln23_reg_894_pp0_iter2_reg;
                icmp_ln23_reg_894_pp0_iter4_reg <= icmp_ln23_reg_894_pp0_iter3_reg;
                icmp_ln23_reg_894_pp0_iter5_reg <= icmp_ln23_reg_894_pp0_iter4_reg;
                icmp_ln23_reg_894_pp0_iter6_reg <= icmp_ln23_reg_894_pp0_iter5_reg;
                icmp_ln23_reg_894_pp0_iter7_reg <= icmp_ln23_reg_894_pp0_iter6_reg;
                icmp_ln23_reg_894_pp0_iter8_reg <= icmp_ln23_reg_894_pp0_iter7_reg;
                icmp_ln23_reg_894_pp0_iter9_reg <= icmp_ln23_reg_894_pp0_iter8_reg;
                wsp11_read_reg_868 <= wsp11;
                wsp1_read_reg_873 <= wsp1;
                wsp23_read_reg_857 <= wsp23;
                wsp23_read_reg_857_pp0_iter1_reg <= wsp23_read_reg_857;
                wsp2_read_reg_862 <= wsp2;
                wsp2_read_reg_862_pp0_iter1_reg <= wsp2_read_reg_862;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter2_empty_reg_167 <= ap_phi_reg_pp0_iter1_empty_reg_167;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter3_empty_reg_167 <= ap_phi_reg_pp0_iter2_empty_reg_167;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter4_empty_reg_167 <= ap_phi_reg_pp0_iter3_empty_reg_167;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter5_empty_reg_167 <= ap_phi_reg_pp0_iter4_empty_reg_167;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter6_empty_reg_167 <= ap_phi_reg_pp0_iter5_empty_reg_167;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter7_empty_reg_167 <= ap_phi_reg_pp0_iter6_empty_reg_167;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter8_empty_reg_167 <= ap_phi_reg_pp0_iter7_empty_reg_167;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter9_empty_reg_167 <= ap_phi_reg_pp0_iter8_empty_reg_167;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln23_reg_894_pp0_iter7_reg = ap_const_lv1_1))) then
                tmp_84_reg_938 <= grp_fu_841_p2(33 downto 28);
                udiv_ln23_1_cast_reg_933 <= grp_fu_841_p2(35 downto 28);
                urem_ln23_reg_928 <= grp_fu_481_p2;
            end if;
        end if;
    end process;
    add_ln23_reg_898(6 downto 0) <= "0000000";
    add_ln23_reg_898_pp0_iter2_reg(6 downto 0) <= "0000000";
    add_ln23_reg_898_pp0_iter3_reg(6 downto 0) <= "0000000";
    add_ln23_reg_898_pp0_iter4_reg(6 downto 0) <= "0000000";
    add_ln23_reg_898_pp0_iter5_reg(6 downto 0) <= "0000000";
    add_ln23_reg_898_pp0_iter6_reg(6 downto 0) <= "0000000";
    add_ln23_1_reg_908(6 downto 0) <= "0000000";
    add_ln23_1_reg_908_pp0_iter2_reg(6 downto 0) <= "0000000";
    add_ln23_1_reg_908_pp0_iter3_reg(6 downto 0) <= "0000000";
    add_ln23_1_reg_908_pp0_iter4_reg(6 downto 0) <= "0000000";
    add_ln23_1_reg_908_pp0_iter5_reg(6 downto 0) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to9, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to9 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln23_10_fu_655_p2 <= std_logic_vector(unsigned(tmp_162_cast_fu_648_p3) + unsigned(udiv_ln23_1_cast_reg_933));
    add_ln23_11_fu_664_p2 <= std_logic_vector(unsigned(add_ln23_10_fu_655_p2) + unsigned(trunc_ln23_2_fu_660_p1));
    add_ln23_1_fu_530_p2 <= std_logic_vector(unsigned(zext_ln23_9_fu_526_p1) + unsigned(zext_ln23_6_fu_494_p1));
    add_ln23_2_fu_455_p2 <= std_logic_vector(unsigned(zext_ln23_1_fu_440_p1) + unsigned(zext_ln23_2_fu_451_p1));
    add_ln23_3_fu_520_p2 <= std_logic_vector(unsigned(zext_ln23_7_fu_505_p1) + unsigned(zext_ln23_8_fu_516_p1));
    add_ln23_4_fu_201_p2 <= std_logic_vector(unsigned(zext_ln23_5_fu_197_p1) + unsigned(zext_ln23_4_fu_185_p1));
    add_ln23_5_fu_207_p2 <= std_logic_vector(unsigned(add_ln23_4_fu_201_p2) + unsigned(wsp23_cast_fu_181_p1));
    add_ln23_6_fu_246_p2 <= std_logic_vector(unsigned(zext_ln23_12_fu_242_p1) + unsigned(zext_ln23_11_fu_230_p1));
    add_ln23_7_fu_252_p2 <= std_logic_vector(unsigned(add_ln23_6_fu_246_p2) + unsigned(wsp11_cast_fu_226_p1));
    add_ln23_8_fu_614_p2 <= std_logic_vector(unsigned(tmp_158_cast_fu_606_p3) + unsigned(udiv_ln_cast_fu_588_p4));
    add_ln23_9_fu_623_p2 <= std_logic_vector(unsigned(add_ln23_8_fu_614_p2) + unsigned(trunc_ln23_fu_620_p1));
    add_ln23_fu_465_p2 <= std_logic_vector(unsigned(zext_ln23_3_fu_461_p1) + unsigned(zext_ln23_fu_429_p1));
    add_ln510_1_fu_752_p2 <= std_logic_vector(unsigned(zext_ln510_1_fu_748_p1) + unsigned(ap_const_lv12_C01));
    add_ln510_fu_334_p2 <= std_logic_vector(unsigned(zext_ln510_fu_330_p1) + unsigned(ap_const_lv12_C01));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to8_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to8 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to9_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to9 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_empty_phi_fu_171_p4_assign_proc : process(icmp_ln23_reg_894_pp0_iter9_reg, icmp_ln23_1_fu_834_p2, ap_phi_reg_pp0_iter9_empty_reg_167)
    begin
        if ((icmp_ln23_reg_894_pp0_iter9_reg = ap_const_lv1_1)) then 
            ap_phi_mux_empty_phi_fu_171_p4 <= icmp_ln23_1_fu_834_p2;
        else 
            ap_phi_mux_empty_phi_fu_171_p4 <= ap_phi_reg_pp0_iter9_empty_reg_167;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_empty_reg_167 <= "X";

    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to8)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to8 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_phi_mux_empty_phi_fu_171_p4;
    data_V_11_fu_716_p1 <= grp_fu_178_p1;
    data_V_fu_298_p1 <= grp_fu_178_p1;

    grp_fu_178_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, sext_ln277_fu_293_p1, sext_ln277_4_fu_711_p1, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_178_p0 <= sext_ln277_4_fu_711_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_178_p0 <= sext_ln277_fu_293_p1;
        else 
            grp_fu_178_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_481_p0 <= add_ln23_fu_465_p2(17 downto 7);
    grp_fu_481_p1 <= ap_const_lv11_5(4 - 1 downto 0);
    grp_fu_546_p0 <= add_ln23_1_fu_530_p2(17 downto 7);
    grp_fu_546_p1 <= ap_const_lv11_5(4 - 1 downto 0);
    grp_fu_841_p0 <= grp_fu_841_p00(18 - 1 downto 0);
    grp_fu_841_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_1_fu_552_p2),37));
    grp_fu_841_p1 <= ap_const_lv37_66667(20 - 1 downto 0);
    grp_fu_849_p0 <= grp_fu_849_p00(18 - 1 downto 0);
    grp_fu_849_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_fu_561_p2),37));
    grp_fu_849_p1 <= ap_const_lv37_66667(20 - 1 downto 0);
    icmp_ln23_1_fu_834_p2 <= "1" when (signed(val_4_fu_826_p3) < signed(ap_const_lv64_64)) else "0";
    icmp_ln23_fu_416_p2 <= "1" when (signed(val_fu_408_p3) < signed(ap_const_lv64_64)) else "0";
    isNeg_4_fu_758_p3 <= add_ln510_1_fu_752_p2(11 downto 11);
    isNeg_fu_340_p3 <= add_ln510_fu_334_p2(11 downto 11);
    lhs_9_fu_689_p1 <= wsp1_2_q1(32 - 1 downto 0);
    lhs_fu_271_p1 <= wsp1_2_q1(32 - 1 downto 0);
    mantissa_4_fu_734_p4 <= ((ap_const_lv1_1 & tmp_92_fu_730_p1) & ap_const_lv1_0);
    mantissa_fu_316_p4 <= ((ap_const_lv1_1 & tmp_90_fu_312_p1) & ap_const_lv1_0);
    or_ln23_1_fu_552_p2 <= (ap_const_lv18_78 or add_ln23_1_reg_908_pp0_iter5_reg);
    or_ln23_2_fu_637_p2 <= (tmp_160_cast_fu_629_p3 or ap_const_lv12_F);
    or_ln23_3_fu_678_p2 <= (tmp_164_cast_fu_670_p3 or ap_const_lv12_F);
    or_ln23_fu_561_p2 <= (ap_const_lv18_78 or add_ln23_reg_898_pp0_iter6_reg);
    r_V_11_fu_380_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_326_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_370_p1(31-1 downto 0)))));
    r_V_12_fu_792_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_2_fu_744_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i196_cast_cast_cast_cast_fu_788_p1(31-1 downto 0)))));
    r_V_13_fu_798_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_2_fu_744_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i196_cast_cast_cast_cast_fu_788_p1(31-1 downto 0)))));
    r_V_fu_374_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_326_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_370_p1(31-1 downto 0)))));
    ret_37_fu_705_p2 <= std_logic_vector(signed(sext_ln215_29_fu_697_p1) - signed(sext_ln215_30_fu_701_p1));
    ret_fu_287_p2 <= std_logic_vector(signed(sext_ln215_fu_279_p1) - signed(sext_ln215_28_fu_283_p1));
    rhs_14_fu_693_p1 <= wsp1_2_q0(32 - 1 downto 0);
    rhs_fu_275_p1 <= wsp1_2_q0(32 - 1 downto 0);
        sext_ln1311_4_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_4_fu_766_p2),12));

        sext_ln1311_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_348_p2),12));

        sext_ln215_28_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_fu_275_p1),33));

        sext_ln215_29_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_9_fu_689_p1),33));

        sext_ln215_30_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_14_fu_693_p1),33));

        sext_ln215_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_fu_271_p1),33));

        sext_ln277_4_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_37_fu_705_p2),64));

        sext_ln277_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_fu_287_p2),64));

    sh_prom_i_i_i_i_i196_cast_cast_cast_cast_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i196_cast_cast_cast_fu_784_p1),169));
        sh_prom_i_i_i_i_i196_cast_cast_cast_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_4_fu_776_p3),32));

    sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_366_p1),169));
        sh_prom_i_i_i_i_i_cast_cast_cast_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_358_p3),32));

    shl_ln23_1_fu_509_p3 <= (wsp23_read_reg_857_pp0_iter1_reg & ap_const_lv7_0);
    shl_ln23_2_fu_422_p3 <= (wsp1_read_reg_873 & ap_const_lv9_0);
    shl_ln23_3_fu_433_p3 <= (wsp1_read_reg_873 & ap_const_lv7_0);
    shl_ln23_4_fu_487_p3 <= (wsp2_read_reg_862_pp0_iter1_reg & ap_const_lv9_0);
    shl_ln23_5_fu_498_p3 <= (wsp2_read_reg_862_pp0_iter1_reg & ap_const_lv7_0);
    shl_ln_fu_444_p3 <= (wsp11_read_reg_868 & ap_const_lv7_0);
    sub_ln1311_4_fu_766_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_91_fu_720_p4));
    sub_ln1311_fu_348_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_89_fu_302_p4));
    tmp_158_cast_fu_606_p3 <= (tmp_83_fu_597_p4 & ap_const_lv2_0);
    tmp_160_cast_fu_629_p3 <= (add_ln23_9_fu_623_p2 & ap_const_lv4_0);
    tmp_162_cast_fu_648_p3 <= (tmp_84_reg_938 & ap_const_lv2_0);
    tmp_164_cast_fu_670_p3 <= (add_ln23_11_fu_664_p2 & ap_const_lv4_0);
    tmp_51_fu_398_p4 <= r_V_11_fu_380_p2(116 downto 53);
    tmp_53_fu_816_p4 <= r_V_13_fu_798_p2(116 downto 53);
    tmp_77_fu_213_p3 <= (add_ln23_5_fu_207_p2 & ap_const_lv4_0);
    tmp_78_fu_258_p3 <= (add_ln23_7_fu_252_p2 & ap_const_lv4_0);
    tmp_82_fu_386_p3 <= r_V_fu_374_p2(53 downto 53);
    tmp_83_fu_597_p4 <= grp_fu_849_p2(33 downto 28);
    tmp_88_fu_804_p3 <= r_V_12_fu_792_p2(53 downto 53);
    tmp_89_fu_302_p4 <= data_V_fu_298_p1(62 downto 52);
    tmp_90_fu_312_p1 <= data_V_fu_298_p1(52 - 1 downto 0);
    tmp_91_fu_720_p4 <= data_V_11_fu_716_p1(62 downto 52);
    tmp_92_fu_730_p1 <= data_V_11_fu_716_p1(52 - 1 downto 0);
    tmp_fu_189_p3 <= (wsp2 & ap_const_lv2_0);
    tmp_s_fu_234_p3 <= (wsp1 & ap_const_lv2_0);
    trunc_ln23_2_fu_660_p1 <= grp_fu_546_p2(8 - 1 downto 0);
    trunc_ln23_fu_620_p1 <= urem_ln23_reg_928(8 - 1 downto 0);
    udiv_ln_cast_fu_588_p4 <= grp_fu_849_p2(35 downto 28);
    ush_4_fu_776_p3 <= 
        sext_ln1311_4_fu_772_p1 when (isNeg_4_fu_758_p3(0) = '1') else 
        add_ln510_1_fu_752_p2;
    ush_fu_358_p3 <= 
        sext_ln1311_fu_354_p1 when (isNeg_fu_340_p3(0) = '1') else 
        add_ln510_fu_334_p2;
    val_4_fu_826_p3 <= 
        zext_ln662_3_fu_812_p1 when (isNeg_4_fu_758_p3(0) = '1') else 
        tmp_53_fu_816_p4;
    val_fu_408_p3 <= 
        zext_ln662_fu_394_p1 when (isNeg_fu_340_p3(0) = '1') else 
        tmp_51_fu_398_p4;
    wsp11_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wsp11),11));

    wsp1_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, zext_ln23_10_fu_221_p1, ap_block_pp0_stage1, zext_ln23_17_fu_684_p1)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            wsp1_2_address0 <= zext_ln23_17_fu_684_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            wsp1_2_address0 <= zext_ln23_10_fu_221_p1(12 - 1 downto 0);
        else 
            wsp1_2_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    wsp1_2_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, zext_ln23_13_fu_266_p1, zext_ln23_15_fu_643_p1, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            wsp1_2_address1 <= zext_ln23_15_fu_643_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            wsp1_2_address1 <= zext_ln23_13_fu_266_p1(12 - 1 downto 0);
        else 
            wsp1_2_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    wsp1_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            wsp1_2_ce0 <= ap_const_logic_1;
        else 
            wsp1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wsp1_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            wsp1_2_ce1 <= ap_const_logic_1;
        else 
            wsp1_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    wsp23_cast_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wsp23),11));
    zext_ln15_2_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_4_fu_734_p4),169));
    zext_ln15_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_316_p4),169));
    zext_ln23_10_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_77_fu_213_p3),64));
    zext_ln23_11_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wsp1),11));
    zext_ln23_12_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_234_p3),11));
    zext_ln23_13_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_78_fu_258_p3),64));
    zext_ln23_15_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_2_fu_637_p2),64));
    zext_ln23_17_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_3_fu_678_p2),64));
    zext_ln23_1_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln23_3_fu_433_p3),16));
    zext_ln23_2_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_444_p3),16));
    zext_ln23_3_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_2_fu_455_p2),18));
    zext_ln23_4_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wsp2),11));
    zext_ln23_5_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_189_p3),11));
    zext_ln23_6_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln23_4_fu_487_p3),18));
    zext_ln23_7_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln23_5_fu_498_p3),16));
    zext_ln23_8_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln23_1_fu_509_p3),16));
    zext_ln23_9_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_3_fu_520_p2),18));
    zext_ln23_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln23_2_fu_422_p3),18));
    zext_ln510_1_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_91_fu_720_p4),12));
    zext_ln510_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_89_fu_302_p4),12));
    zext_ln662_3_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_88_fu_804_p3),64));
    zext_ln662_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_82_fu_386_p3),64));
end behav;
