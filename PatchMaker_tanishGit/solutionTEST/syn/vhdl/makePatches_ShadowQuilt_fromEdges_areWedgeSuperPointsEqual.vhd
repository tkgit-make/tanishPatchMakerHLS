-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity makePatches_ShadowQuilt_fromEdges_areWedgeSuperPointsEqual is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    patches_superpoints_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    patches_superpoints_0_ce0 : OUT STD_LOGIC;
    patches_superpoints_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    patches_superpoints_0_ce1 : OUT STD_LOGIC;
    patches_superpoints_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    wsp1 : IN STD_LOGIC_VECTOR (7 downto 0);
    wsp11 : IN STD_LOGIC_VECTOR (2 downto 0);
    wsp2 : IN STD_LOGIC_VECTOR (7 downto 0);
    wsp22 : IN STD_LOGIC_VECTOR (2 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of makePatches_ShadowQuilt_fromEdges_areWedgeSuperPointsEqual is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv64_64 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001100100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv29_6667 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000110011001100111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_state28_pp0_stage1_iter13 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal wsp22_read_reg_785 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal wsp22_read_reg_785_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal wsp22_read_reg_785_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal wsp22_read_reg_785_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal wsp2_read_reg_790 : STD_LOGIC_VECTOR (7 downto 0);
    signal wsp2_read_reg_790_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal wsp2_read_reg_790_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal wsp2_read_reg_790_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal wsp11_read_reg_796 : STD_LOGIC_VECTOR (2 downto 0);
    signal wsp11_read_reg_796_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal wsp11_read_reg_796_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal wsp1_read_reg_801 : STD_LOGIC_VECTOR (7 downto 0);
    signal wsp1_read_reg_801_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal wsp1_read_reg_801_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_fu_243_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_reg_817 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln277_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_155_reg_827 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_156_fu_267_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_156_reg_833 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln28_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_838 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_838_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_838_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_838_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_838_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_838_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_838_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_838_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_838_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_838_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_838_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_1_fu_423_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_1_reg_842 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_1_reg_842_pp0_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_1_reg_842_pp0_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_1_reg_842_pp0_iter6_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_1_reg_842_pp0_iter7_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_1_reg_842_pp0_iter8_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_3_fu_494_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_3_reg_852 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_3_reg_852_pp0_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_3_reg_852_pp0_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_3_reg_852_pp0_iter6_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_3_reg_852_pp0_iter7_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_439_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal urem_ln28_reg_872 : STD_LOGIC_VECTOR (2 downto 0);
    signal udiv_ln28_1_cast_reg_877 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_150_reg_882 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_35_fu_637_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_35_reg_897 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln277_4_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_157_reg_907 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_158_fu_661_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_158_reg_913 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_empty_phi_fu_163_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_1_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter13_empty_reg_159 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_reg_159 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_reg_159 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_reg_159 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter3_empty_reg_159 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter4_empty_reg_159 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter5_empty_reg_159 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter6_empty_reg_159 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter7_empty_reg_159 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter8_empty_reg_159 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter9_empty_reg_159 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter10_empty_reg_159 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter11_empty_reg_159 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter12_empty_reg_159 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln28_4_fu_195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_5_fu_222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_12_fu_585_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln28_15_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_170_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln28_fu_177_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_6_fu_183_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal wsp22_cast_fu_173_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_7_fu_189_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln28_6_fu_204_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_8_fu_210_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal wsp11_cast_fu_200_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_9_fu_216_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_fu_227_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_fu_231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln215_fu_235_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_27_fu_239_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mantissa_fu_271_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln510_fu_284_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_fu_287_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_301_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_293_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_306_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_310_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_fu_318_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_280_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_322_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal r_V_fu_326_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_fu_338_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_12_fu_332_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln662_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_350_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_fu_360_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln28_2_fu_374_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln28_3_fu_385_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln_fu_396_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln28_1_fu_392_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln28_fu_381_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln28_2_fu_403_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_2_fu_413_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln28_3_fu_419_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_fu_407_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_439_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_439_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln28_4_fu_445_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln28_5_fu_456_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln28_1_fu_467_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln28_7_fu_463_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln28_6_fu_452_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln28_8_fu_474_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_5_fu_484_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln28_9_fu_490_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_4_fu_478_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_510_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_510_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_769_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_777_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_149_fu_549_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_160_cast_fu_558_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal udiv_ln_cast_fu_540_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_fu_572_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln28_10_fu_566_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln28_11_fu_575_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_11_fu_579_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_162_cast_fu_590_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_510_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln28_2_fu_602_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln28_12_fu_597_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln28_14_fu_606_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_13_fu_610_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_7_fu_621_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_11_fu_625_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln215_28_fu_629_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_29_fu_633_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal data_V_11_fu_647_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mantissa_4_fu_665_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln510_1_fu_678_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_1_fu_681_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_4_fu_695_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_4_fu_687_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_4_fu_700_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_4_fu_704_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i196_cast_cast_cast_fu_712_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_2_fu_674_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal sh_prom_i_i_i_i_i196_cast_cast_cast_cast_fu_716_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal r_V_13_fu_720_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_154_fu_732_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_14_fu_726_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln662_3_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_138_fu_744_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_5_fu_754_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_769_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_769_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_777_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_777_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to13 : STD_LOGIC;
    signal ap_idle_pp0_0to12 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_769_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_777_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component makePatches_ShadowQuilt_fromEdges_sitodp_64s_64_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_urem_11ns_4ns_3_15_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_mul_mul_14ns_16ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;



begin
    sitodp_64s_64_4_no_dsp_1_U6399 : component makePatches_ShadowQuilt_fromEdges_sitodp_64s_64_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_170_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_170_p1);

    urem_11ns_4ns_3_15_1_U6400 : component makePatches_ShadowQuilt_fromEdges_urem_11ns_4ns_3_15_1
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_439_p0,
        din1 => grp_fu_439_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_439_p2);

    urem_11ns_4ns_3_15_1_U6401 : component makePatches_ShadowQuilt_fromEdges_urem_11ns_4ns_3_15_1
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_510_p0,
        din1 => grp_fu_510_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_510_p2);

    mul_mul_14ns_16ns_29_4_1_U6402 : component makePatches_ShadowQuilt_fromEdges_mul_mul_14ns_16ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_769_p0,
        din1 => grp_fu_769_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_769_p2);

    mul_mul_14ns_16ns_29_4_1_U6403 : component makePatches_ShadowQuilt_fromEdges_mul_mul_14ns_16ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_777_p0,
        din1 => grp_fu_777_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_777_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter3_empty_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_fu_368_p2 = ap_const_lv1_0))) then 
                ap_phi_reg_pp0_iter3_empty_reg_159 <= ap_const_lv1_0;
            elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_phi_reg_pp0_iter3_empty_reg_159 <= ap_phi_reg_pp0_iter2_empty_reg_159;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_fu_368_p2 = ap_const_lv1_1))) then
                    add_ln28_1_reg_842(13 downto 3) <= add_ln28_1_fu_423_p2(13 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    add_ln28_1_reg_842_pp0_iter4_reg(13 downto 3) <= add_ln28_1_reg_842(13 downto 3);
                    add_ln28_1_reg_842_pp0_iter5_reg(13 downto 3) <= add_ln28_1_reg_842_pp0_iter4_reg(13 downto 3);
                    add_ln28_1_reg_842_pp0_iter6_reg(13 downto 3) <= add_ln28_1_reg_842_pp0_iter5_reg(13 downto 3);
                    add_ln28_1_reg_842_pp0_iter7_reg(13 downto 3) <= add_ln28_1_reg_842_pp0_iter6_reg(13 downto 3);
                    add_ln28_1_reg_842_pp0_iter8_reg(13 downto 3) <= add_ln28_1_reg_842_pp0_iter7_reg(13 downto 3);
                icmp_ln28_reg_838 <= icmp_ln28_fu_368_p2;
                icmp_ln28_reg_838_pp0_iter10_reg <= icmp_ln28_reg_838_pp0_iter9_reg;
                icmp_ln28_reg_838_pp0_iter11_reg <= icmp_ln28_reg_838_pp0_iter10_reg;
                icmp_ln28_reg_838_pp0_iter12_reg <= icmp_ln28_reg_838_pp0_iter11_reg;
                icmp_ln28_reg_838_pp0_iter13_reg <= icmp_ln28_reg_838_pp0_iter12_reg;
                icmp_ln28_reg_838_pp0_iter4_reg <= icmp_ln28_reg_838;
                icmp_ln28_reg_838_pp0_iter5_reg <= icmp_ln28_reg_838_pp0_iter4_reg;
                icmp_ln28_reg_838_pp0_iter6_reg <= icmp_ln28_reg_838_pp0_iter5_reg;
                icmp_ln28_reg_838_pp0_iter7_reg <= icmp_ln28_reg_838_pp0_iter6_reg;
                icmp_ln28_reg_838_pp0_iter8_reg <= icmp_ln28_reg_838_pp0_iter7_reg;
                icmp_ln28_reg_838_pp0_iter9_reg <= icmp_ln28_reg_838_pp0_iter8_reg;
                wsp11_read_reg_796 <= wsp11;
                wsp11_read_reg_796_pp0_iter1_reg <= wsp11_read_reg_796;
                wsp11_read_reg_796_pp0_iter2_reg <= wsp11_read_reg_796_pp0_iter1_reg;
                wsp1_read_reg_801 <= wsp1;
                wsp1_read_reg_801_pp0_iter1_reg <= wsp1_read_reg_801;
                wsp1_read_reg_801_pp0_iter2_reg <= wsp1_read_reg_801_pp0_iter1_reg;
                wsp22_read_reg_785 <= wsp22;
                wsp22_read_reg_785_pp0_iter1_reg <= wsp22_read_reg_785;
                wsp22_read_reg_785_pp0_iter2_reg <= wsp22_read_reg_785_pp0_iter1_reg;
                wsp22_read_reg_785_pp0_iter3_reg <= wsp22_read_reg_785_pp0_iter2_reg;
                wsp2_read_reg_790 <= wsp2;
                wsp2_read_reg_790_pp0_iter1_reg <= wsp2_read_reg_790;
                wsp2_read_reg_790_pp0_iter2_reg <= wsp2_read_reg_790_pp0_iter1_reg;
                wsp2_read_reg_790_pp0_iter3_reg <= wsp2_read_reg_790_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln28_reg_838 = ap_const_lv1_1))) then
                    add_ln28_3_reg_852(13 downto 3) <= add_ln28_3_fu_494_p2(13 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    add_ln28_3_reg_852_pp0_iter4_reg(13 downto 3) <= add_ln28_3_reg_852(13 downto 3);
                    add_ln28_3_reg_852_pp0_iter5_reg(13 downto 3) <= add_ln28_3_reg_852_pp0_iter4_reg(13 downto 3);
                    add_ln28_3_reg_852_pp0_iter6_reg(13 downto 3) <= add_ln28_3_reg_852_pp0_iter5_reg(13 downto 3);
                    add_ln28_3_reg_852_pp0_iter7_reg(13 downto 3) <= add_ln28_3_reg_852_pp0_iter6_reg(13 downto 3);
                ret_reg_817 <= ret_fu_243_p2;
                tmp_155_reg_827 <= data_V_fu_253_p1(62 downto 52);
                tmp_156_reg_833 <= tmp_156_fu_267_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter10_empty_reg_159 <= ap_phi_reg_pp0_iter9_empty_reg_159;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter11_empty_reg_159 <= ap_phi_reg_pp0_iter10_empty_reg_159;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter12_empty_reg_159 <= ap_phi_reg_pp0_iter11_empty_reg_159;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter13_empty_reg_159 <= ap_phi_reg_pp0_iter12_empty_reg_159;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter1_empty_reg_159 <= ap_phi_reg_pp0_iter0_empty_reg_159;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter2_empty_reg_159 <= ap_phi_reg_pp0_iter1_empty_reg_159;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter4_empty_reg_159 <= ap_phi_reg_pp0_iter3_empty_reg_159;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter5_empty_reg_159 <= ap_phi_reg_pp0_iter4_empty_reg_159;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter6_empty_reg_159 <= ap_phi_reg_pp0_iter5_empty_reg_159;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter7_empty_reg_159 <= ap_phi_reg_pp0_iter6_empty_reg_159;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter8_empty_reg_159 <= ap_phi_reg_pp0_iter7_empty_reg_159;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter9_empty_reg_159 <= ap_phi_reg_pp0_iter8_empty_reg_159;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_reg_838_pp0_iter10_reg = ap_const_lv1_1))) then
                ret_35_reg_897 <= ret_35_fu_637_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_reg_838_pp0_iter9_reg = ap_const_lv1_1))) then
                tmp_150_reg_882 <= grp_fu_769_p2(25 downto 20);
                udiv_ln28_1_cast_reg_877 <= grp_fu_769_p2(27 downto 20);
                urem_ln28_reg_872 <= grp_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_reg_838_pp0_iter12_reg = ap_const_lv1_1))) then
                tmp_157_reg_907 <= data_V_11_fu_647_p1(62 downto 52);
                tmp_158_reg_913 <= tmp_158_fu_661_p1;
            end if;
        end if;
    end process;
    add_ln28_1_reg_842(2 downto 0) <= "000";
    add_ln28_1_reg_842_pp0_iter4_reg(2 downto 0) <= "000";
    add_ln28_1_reg_842_pp0_iter5_reg(2 downto 0) <= "000";
    add_ln28_1_reg_842_pp0_iter6_reg(2 downto 0) <= "000";
    add_ln28_1_reg_842_pp0_iter7_reg(2 downto 0) <= "000";
    add_ln28_1_reg_842_pp0_iter8_reg(2 downto 0) <= "000";
    add_ln28_3_reg_852(2 downto 0) <= "000";
    add_ln28_3_reg_852_pp0_iter4_reg(2 downto 0) <= "000";
    add_ln28_3_reg_852_pp0_iter5_reg(2 downto 0) <= "000";
    add_ln28_3_reg_852_pp0_iter6_reg(2 downto 0) <= "000";
    add_ln28_3_reg_852_pp0_iter7_reg(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to13, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to13 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln28_10_fu_566_p2 <= std_logic_vector(unsigned(tmp_160_cast_fu_558_p3) + unsigned(udiv_ln_cast_fu_540_p4));
    add_ln28_11_fu_579_p2 <= std_logic_vector(unsigned(add_ln28_10_fu_566_p2) + unsigned(zext_ln28_11_fu_575_p1));
    add_ln28_12_fu_597_p2 <= std_logic_vector(unsigned(tmp_162_cast_fu_590_p3) + unsigned(udiv_ln28_1_cast_reg_877));
    add_ln28_13_fu_610_p2 <= std_logic_vector(unsigned(add_ln28_12_fu_597_p2) + unsigned(zext_ln28_14_fu_606_p1));
    add_ln28_1_fu_423_p2 <= std_logic_vector(unsigned(zext_ln28_3_fu_419_p1) + unsigned(add_ln28_fu_407_p2));
    add_ln28_2_fu_413_p2 <= std_logic_vector(unsigned(zext_ln28_2_fu_403_p1) + unsigned(ap_const_lv8_78));
    add_ln28_3_fu_494_p2 <= std_logic_vector(unsigned(zext_ln28_9_fu_490_p1) + unsigned(add_ln28_4_fu_478_p2));
    add_ln28_4_fu_478_p2 <= std_logic_vector(unsigned(zext_ln28_7_fu_463_p1) + unsigned(zext_ln28_6_fu_452_p1));
    add_ln28_5_fu_484_p2 <= std_logic_vector(unsigned(zext_ln28_8_fu_474_p1) + unsigned(ap_const_lv8_78));
    add_ln28_6_fu_183_p2 <= std_logic_vector(unsigned(shl_ln28_fu_177_p2) + unsigned(wsp2));
    add_ln28_7_fu_189_p2 <= std_logic_vector(unsigned(add_ln28_6_fu_183_p2) + unsigned(wsp22_cast_fu_173_p1));
    add_ln28_8_fu_210_p2 <= std_logic_vector(unsigned(shl_ln28_6_fu_204_p2) + unsigned(wsp1));
    add_ln28_9_fu_216_p2 <= std_logic_vector(unsigned(add_ln28_8_fu_210_p2) + unsigned(wsp11_cast_fu_200_p1));
    add_ln28_fu_407_p2 <= std_logic_vector(unsigned(zext_ln28_1_fu_392_p1) + unsigned(zext_ln28_fu_381_p1));
    add_ln510_1_fu_681_p2 <= std_logic_vector(unsigned(zext_ln510_1_fu_678_p1) + unsigned(ap_const_lv12_C01));
    add_ln510_fu_287_p2 <= std_logic_vector(unsigned(zext_ln510_fu_284_p1) + unsigned(ap_const_lv12_C01));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage1_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter13, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to12_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to12 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to13_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to13 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_empty_phi_fu_163_p4_assign_proc : process(icmp_ln28_reg_838_pp0_iter13_reg, icmp_ln28_1_fu_762_p2, ap_phi_reg_pp0_iter13_empty_reg_159)
    begin
        if ((icmp_ln28_reg_838_pp0_iter13_reg = ap_const_lv1_1)) then 
            ap_phi_mux_empty_phi_fu_163_p4 <= icmp_ln28_1_fu_762_p2;
        else 
            ap_phi_mux_empty_phi_fu_163_p4 <= ap_phi_reg_pp0_iter13_empty_reg_159;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_empty_reg_159 <= "X";

    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to12)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to12 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_phi_mux_empty_phi_fu_163_p4;
    data_V_11_fu_647_p1 <= grp_fu_170_p1;
    data_V_fu_253_p1 <= grp_fu_170_p1;

    grp_fu_170_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter11, ap_CS_fsm_pp0_stage1, sext_ln277_fu_249_p1, sext_ln277_4_fu_643_p1, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_170_p0 <= sext_ln277_4_fu_643_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_170_p0 <= sext_ln277_fu_249_p1;
        else 
            grp_fu_170_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_439_p0 <= add_ln28_1_fu_423_p2(13 downto 3);
    grp_fu_439_p1 <= ap_const_lv11_5(4 - 1 downto 0);
    grp_fu_510_p0 <= add_ln28_3_fu_494_p2(13 downto 3);
    grp_fu_510_p1 <= ap_const_lv11_5(4 - 1 downto 0);
    grp_fu_769_p0 <= grp_fu_769_p00(14 - 1 downto 0);
    grp_fu_769_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_3_reg_852_pp0_iter7_reg),29));
    grp_fu_769_p1 <= ap_const_lv29_6667(16 - 1 downto 0);
    grp_fu_777_p0 <= grp_fu_777_p00(14 - 1 downto 0);
    grp_fu_777_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_1_reg_842_pp0_iter8_reg),29));
    grp_fu_777_p1 <= ap_const_lv29_6667(16 - 1 downto 0);
    icmp_ln28_1_fu_762_p2 <= "1" when (signed(val_5_fu_754_p3) < signed(ap_const_lv64_64)) else "0";
    icmp_ln28_fu_368_p2 <= "1" when (signed(val_fu_360_p3) < signed(ap_const_lv64_64)) else "0";
    isNeg_4_fu_687_p3 <= add_ln510_1_fu_681_p2(11 downto 11);
    isNeg_fu_293_p3 <= add_ln510_fu_287_p2(11 downto 11);
    lhs_7_fu_621_p1 <= patches_superpoints_0_q1(32 - 1 downto 0);
    lhs_fu_227_p1 <= patches_superpoints_0_q1(32 - 1 downto 0);
    mantissa_4_fu_665_p4 <= ((ap_const_lv1_1 & tmp_158_reg_913) & ap_const_lv1_0);
    mantissa_fu_271_p4 <= ((ap_const_lv1_1 & tmp_156_reg_833) & ap_const_lv1_0);

    patches_superpoints_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, zext_ln28_4_fu_195_p1, ap_block_pp0_stage1, zext_ln28_15_fu_616_p1)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            patches_superpoints_0_address0 <= zext_ln28_15_fu_616_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            patches_superpoints_0_address0 <= zext_ln28_4_fu_195_p1(8 - 1 downto 0);
        else 
            patches_superpoints_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    patches_superpoints_0_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, zext_ln28_5_fu_222_p1, zext_ln28_12_fu_585_p1, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            patches_superpoints_0_address1 <= zext_ln28_12_fu_585_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            patches_superpoints_0_address1 <= zext_ln28_5_fu_222_p1(8 - 1 downto 0);
        else 
            patches_superpoints_0_address1 <= "XXXXXXXX";
        end if; 
    end process;


    patches_superpoints_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            patches_superpoints_0_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            patches_superpoints_0_ce1 <= ap_const_logic_1;
        else 
            patches_superpoints_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_12_fu_332_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_280_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_322_p1(31-1 downto 0)))));
    r_V_13_fu_720_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_2_fu_674_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i196_cast_cast_cast_cast_fu_716_p1(31-1 downto 0)))));
    r_V_14_fu_726_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_2_fu_674_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i196_cast_cast_cast_cast_fu_716_p1(31-1 downto 0)))));
    r_V_fu_326_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_280_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_322_p1(31-1 downto 0)))));
    ret_35_fu_637_p2 <= std_logic_vector(signed(sext_ln215_28_fu_629_p1) - signed(sext_ln215_29_fu_633_p1));
    ret_fu_243_p2 <= std_logic_vector(signed(sext_ln215_fu_235_p1) - signed(sext_ln215_27_fu_239_p1));
    rhs_11_fu_625_p1 <= patches_superpoints_0_q0(32 - 1 downto 0);
    rhs_fu_231_p1 <= patches_superpoints_0_q0(32 - 1 downto 0);
        sext_ln1311_4_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_4_fu_695_p2),12));

        sext_ln1311_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_301_p2),12));

        sext_ln215_27_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_fu_231_p1),33));

        sext_ln215_28_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_7_fu_621_p1),33));

        sext_ln215_29_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_11_fu_625_p1),33));

        sext_ln215_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_fu_227_p1),33));

        sext_ln277_4_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_35_reg_897),64));

        sext_ln277_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_reg_817),64));

    sh_prom_i_i_i_i_i196_cast_cast_cast_cast_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i196_cast_cast_cast_fu_712_p1),169));
        sh_prom_i_i_i_i_i196_cast_cast_cast_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_4_fu_704_p3),32));

    sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_318_p1),169));
        sh_prom_i_i_i_i_i_cast_cast_cast_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_310_p3),32));

    shl_ln28_1_fu_467_p3 <= (wsp22_read_reg_785_pp0_iter3_reg & ap_const_lv3_0);
    shl_ln28_2_fu_374_p3 <= (wsp1_read_reg_801_pp0_iter2_reg & ap_const_lv5_0);
    shl_ln28_3_fu_385_p3 <= (wsp1_read_reg_801_pp0_iter2_reg & ap_const_lv3_0);
    shl_ln28_4_fu_445_p3 <= (wsp2_read_reg_790_pp0_iter3_reg & ap_const_lv5_0);
    shl_ln28_5_fu_456_p3 <= (wsp2_read_reg_790_pp0_iter3_reg & ap_const_lv3_0);
    shl_ln28_6_fu_204_p2 <= std_logic_vector(shift_left(unsigned(wsp1),to_integer(unsigned('0' & ap_const_lv8_2(8-1 downto 0)))));
    shl_ln28_fu_177_p2 <= std_logic_vector(shift_left(unsigned(wsp2),to_integer(unsigned('0' & ap_const_lv8_2(8-1 downto 0)))));
    shl_ln_fu_396_p3 <= (wsp11_read_reg_796_pp0_iter2_reg & ap_const_lv3_0);
    sub_ln1311_4_fu_695_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_157_reg_907));
    sub_ln1311_fu_301_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_155_reg_827));
    tmp_138_fu_744_p4 <= r_V_14_fu_726_p2(116 downto 53);
    tmp_149_fu_549_p4 <= grp_fu_777_p2(25 downto 20);
    tmp_154_fu_732_p3 <= r_V_13_fu_720_p2(53 downto 53);
    tmp_156_fu_267_p1 <= data_V_fu_253_p1(52 - 1 downto 0);
    tmp_158_fu_661_p1 <= data_V_11_fu_647_p1(52 - 1 downto 0);
    tmp_160_cast_fu_558_p3 <= (tmp_149_fu_549_p4 & ap_const_lv2_0);
    tmp_162_cast_fu_590_p3 <= (tmp_150_reg_882 & ap_const_lv2_0);
    tmp_fu_338_p3 <= r_V_fu_326_p2(53 downto 53);
    tmp_s_fu_350_p4 <= r_V_12_fu_332_p2(116 downto 53);
    trunc_ln28_2_fu_602_p1 <= grp_fu_510_p2(3 - 1 downto 0);
    trunc_ln28_fu_572_p1 <= urem_ln28_reg_872(3 - 1 downto 0);
    udiv_ln_cast_fu_540_p4 <= grp_fu_777_p2(27 downto 20);
    ush_4_fu_704_p3 <= 
        sext_ln1311_4_fu_700_p1 when (isNeg_4_fu_687_p3(0) = '1') else 
        add_ln510_1_fu_681_p2;
    ush_fu_310_p3 <= 
        sext_ln1311_fu_306_p1 when (isNeg_fu_293_p3(0) = '1') else 
        add_ln510_fu_287_p2;
    val_5_fu_754_p3 <= 
        zext_ln662_3_fu_740_p1 when (isNeg_4_fu_687_p3(0) = '1') else 
        tmp_138_fu_744_p4;
    val_fu_360_p3 <= 
        zext_ln662_fu_346_p1 when (isNeg_fu_293_p3(0) = '1') else 
        tmp_s_fu_350_p4;
    wsp11_cast_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wsp11),8));
    wsp22_cast_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wsp22),8));
    zext_ln15_2_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_4_fu_665_p4),169));
    zext_ln15_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_271_p4),169));
    zext_ln28_11_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln28_fu_572_p1),8));
    zext_ln28_12_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_11_fu_579_p2),64));
    zext_ln28_14_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln28_2_fu_602_p1),8));
    zext_ln28_15_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_13_fu_610_p2),64));
    zext_ln28_1_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln28_3_fu_385_p3),14));
    zext_ln28_2_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_396_p3),8));
    zext_ln28_3_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_2_fu_413_p2),14));
    zext_ln28_4_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_7_fu_189_p2),64));
    zext_ln28_5_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_9_fu_216_p2),64));
    zext_ln28_6_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln28_4_fu_445_p3),14));
    zext_ln28_7_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln28_5_fu_456_p3),14));
    zext_ln28_8_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln28_1_fu_467_p3),8));
    zext_ln28_9_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_5_fu_484_p2),14));
    zext_ln28_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln28_2_fu_374_p3),14));
    zext_ln510_1_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_157_reg_907),12));
    zext_ln510_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_155_reg_827),12));
    zext_ln662_3_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_154_fu_732_p3),64));
    zext_ln662_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_338_p3),64));
end behav;
