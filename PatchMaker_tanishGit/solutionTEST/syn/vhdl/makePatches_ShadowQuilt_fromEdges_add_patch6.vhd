-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity makePatches_ShadowQuilt_fromEdges_add_patch6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n_patches : OUT STD_LOGIC_VECTOR (7 downto 0);
    n_patches_ap_vld : OUT STD_LOGIC;
    n_patches_read : IN STD_LOGIC_VECTOR (7 downto 0);
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_we0 : OUT STD_LOGIC;
    patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    wp_superpoints_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    wp_superpoints_ce0 : OUT STD_LOGIC;
    wp_superpoints_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_superpoints_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    wp_superpoints_ce1 : OUT STD_LOGIC;
    wp_superpoints_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_superpoints1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    wp_superpoints1_ce0 : OUT STD_LOGIC;
    wp_superpoints1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_superpoints1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    wp_superpoints1_ce1 : OUT STD_LOGIC;
    wp_superpoints1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_superpoints2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    wp_superpoints2_ce0 : OUT STD_LOGIC;
    wp_superpoints2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_superpoints2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    wp_superpoints2_ce1 : OUT STD_LOGIC;
    wp_superpoints2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_superpoints3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    wp_superpoints3_ce0 : OUT STD_LOGIC;
    wp_superpoints3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_superpoints3_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    wp_superpoints3_ce1 : OUT STD_LOGIC;
    wp_superpoints3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_superpoints4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    wp_superpoints4_ce0 : OUT STD_LOGIC;
    wp_superpoints4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_superpoints4_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    wp_superpoints4_ce1 : OUT STD_LOGIC;
    wp_superpoints4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    wp_parameters_ce0 : OUT STD_LOGIC;
    wp_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    wp_parameters5_ce0 : OUT STD_LOGIC;
    wp_parameters5_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    wp_parameters6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    wp_parameters6_ce0 : OUT STD_LOGIC;
    wp_parameters6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    wp_parameters7_ce0 : OUT STD_LOGIC;
    wp_parameters7_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    wp_parameters8_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    wp_parameters8_ce0 : OUT STD_LOGIC;
    wp_parameters8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of makePatches_ShadowQuilt_fromEdges_add_patch6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (75 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (75 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (75 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (75 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (75 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (75 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (75 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (75 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (75 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (75 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv12_66 : STD_LOGIC_VECTOR (11 downto 0) := "000001100110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv129_lc_1 : STD_LOGIC_VECTOR (128 downto 0) := "000000000000000000000000000000000000000000000000000000000000000011001100110011001100110011001100110011001100110011001100110011010";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv57_5 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv19_78 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001111000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv12_F : STD_LOGIC_VECTOR (11 downto 0) := "000000001111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv58_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten29_reg_687 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_3_reg_698 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_7_reg_709 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten51_reg_720 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_4_reg_731 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten37_reg_742 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_8_reg_753 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_5_reg_764 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_775 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_reg_786 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_reg_797 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten21_reg_808 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_2_reg_819 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten7_reg_830 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_6_reg_841 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_852 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_fu_863_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_reg_2093 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln284_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_reg_2098 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_fu_877_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_reg_2102 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_52_fu_920_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_52_reg_2113 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal patches_parameters_load_reg_2118 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln316_fu_927_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln316_reg_2123 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln318_fu_940_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln318_reg_2127 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln316_fu_944_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln316_reg_2132 : STD_LOGIC_VECTOR (16 downto 0);
    signal wp_superpoints_load_reg_2137 : STD_LOGIC_VECTOR (31 downto 0);
    signal wp_superpoints1_load_reg_2142 : STD_LOGIC_VECTOR (31 downto 0);
    signal wp_superpoints2_load_reg_2147 : STD_LOGIC_VECTOR (31 downto 0);
    signal wp_superpoints3_load_reg_2152 : STD_LOGIC_VECTOR (31 downto 0);
    signal wp_superpoints4_load_reg_2157 : STD_LOGIC_VECTOR (31 downto 0);
    signal wp_superpoints_load_2_reg_2162 : STD_LOGIC_VECTOR (31 downto 0);
    signal wp_superpoints1_load_4_reg_2167 : STD_LOGIC_VECTOR (31 downto 0);
    signal wp_superpoints2_load_4_reg_2172 : STD_LOGIC_VECTOR (31 downto 0);
    signal wp_superpoints3_load_4_reg_2177 : STD_LOGIC_VECTOR (31 downto 0);
    signal wp_superpoints4_load_4_reg_2182 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln316_1_fu_951_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln316_1_reg_2187 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_fu_956_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_2191 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln318_fu_983_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln318_reg_2196 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_92_reg_2201 : STD_LOGIC_VECTOR (54 downto 0);
    signal trunc_ln874_fu_1032_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln874_reg_2212 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_1036_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_2217 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1026_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal urem_ln318_reg_2222 : STD_LOGIC_VECTOR (56 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal icmp_ln874_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln874_reg_2232 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal tmp_35_fu_1176_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_reg_2241 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln329_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln329_reg_2249 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal add_ln335_fu_1224_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln335_reg_2253 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln331_1_fu_1230_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state68_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state69_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln331_fu_1236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln331_reg_2264 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln331_fu_1254_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln331_reg_2268 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln331_1_fu_1262_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln331_1_reg_2273 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln333_fu_1306_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln339_1_fu_1385_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state71_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state72_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln339_fu_1391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln339_reg_2341 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln339_1_fu_1417_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln339_1_reg_2345 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln341_fu_1455_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln341_reg_2352 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln341_1_fu_1463_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln341_1_reg_2357 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln343_fu_1520_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln341_2_fu_1532_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln287_1_fu_1647_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state75_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state76_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln287_fu_1653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln287_reg_2403 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln287_fu_1671_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln287_reg_2407 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln287_1_fu_1679_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln287_1_reg_2412 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln289_fu_1723_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln295_1_fu_1793_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal ap_block_state78_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state79_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal icmp_ln295_fu_1799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_reg_2480 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln295_1_fu_1825_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln295_1_reg_2484 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln297_fu_1863_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln297_reg_2491 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln297_1_fu_1871_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln297_1_reg_2496 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln299_fu_1928_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln297_2_fu_1940_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state68 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state71 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state75 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state78 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal i_018_reg_676 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal icmp_ln874_4_fu_1190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_a_3_phi_fu_702_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_a_4_phi_fu_735_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_b_8_phi_fu_757_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_a_phi_fu_790_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_phi_mux_a_2_phi_fu_823_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal ap_phi_mux_b_6_phi_fu_845_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_cast_fu_915_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_fu_1077_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln319_1_fu_1171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln335_1_fu_1278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_fu_1293_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln335_5_fu_1341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln345_7_fu_1511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln345_8_fu_1608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln291_1_fu_1695_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_fu_1710_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln291_2_fu_1749_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln301_8_fu_1919_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln301_9_fu_2007_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln353_fu_1642_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal tmp_36_fu_1621_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_2020_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_41_fu_1376_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_fu_1784_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln284_fu_867_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_133_fu_883_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_166_cast_fu_887_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_53_fu_895_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_134_fu_903_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_135_fu_909_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln318_1_fu_933_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln316_fu_947_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_962_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln318_fu_970_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln318_1_fu_974_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln318_1_fu_979_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln318_2_fu_988_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln318_fu_996_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln318_fu_996_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal mul_ln318_fu_996_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal trunc_ln_fu_1012_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1026_p0 : STD_LOGIC_VECTOR (56 downto 0);
    signal grp_fu_1026_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1036_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_93_fu_1050_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal zext_ln318_3_fu_1057_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal zext_ln318_2_fu_1047_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal add_ln318_2_fu_1061_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal zext_ln318_4_fu_1067_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal add_ln318_3_fu_1071_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal trunc_ln69_fu_1086_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln319_fu_1095_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln319_fu_1100_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln319_fu_1108_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln319_fu_1108_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal mul_ln319_fu_1108_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal tmp_97_fu_1124_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl7_cast_fu_1134_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal udiv_ln3_cast_fu_1114_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln319_fu_1142_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln319_fu_1148_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln319_1_fu_1151_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_181_cast_fu_1157_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln319_1_fu_1165_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln69_4_fu_1186_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_98_fu_1195_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_59_fu_1213_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln335_2_fu_1220_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln335_fu_1210_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln333_fu_1248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln331_fu_1242_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_60_fu_1270_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln335_fu_1287_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln335_fu_1312_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln335_3_fu_1315_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln335_1_fu_1318_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_184_cast_fu_1324_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln335_4_fu_1332_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln335_2_fu_1335_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal phi_V_1_fu_1346_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_V_1_fu_1361_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln341_fu_1403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln339_fu_1397_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln343_fu_1431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln339_fu_1425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln339_fu_1409_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln339_fu_1437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln341_fu_1449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln341_fu_1443_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln345_fu_1471_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_100_fu_1483_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl8_cast_fu_1475_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln345_4_fu_1491_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln345_fu_1495_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln345_6_fu_1501_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln345_2_fu_1505_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln341_3_fu_1526_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln345_2_fu_1540_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln345_fu_1543_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_99_fu_1548_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln341_fu_1556_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln345_3_fu_1560_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln345_1_fu_1563_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln345_1_fu_1569_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln345_2_fu_1581_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl10_cast_fu_1573_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl11_cast_fu_1585_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln345_1_fu_1593_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln345_5_fu_1599_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln345_3_fu_1602_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_36_fu_1621_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_1621_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln353_fu_1637_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln289_fu_1665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln287_fu_1659_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_55_fu_1687_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln291_fu_1704_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_54_fu_1729_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_168_cast_fu_1736_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln291_fu_1740_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln291_fu_1743_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_V_fu_1754_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_V_fu_1769_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln297_fu_1811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln295_fu_1805_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln299_fu_1839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln295_fu_1833_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln295_fu_1817_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln295_fu_1845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln297_fu_1857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln297_fu_1851_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln301_fu_1879_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_94_fu_1891_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_cast_fu_1883_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln301_3_fu_1899_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln301_fu_1903_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln301_7_fu_1909_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln301_1_fu_1913_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln297_1_fu_1934_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_58_fu_1948_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln297_fu_1955_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln301_2_fu_1959_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln301_fu_1962_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_95_fu_1968_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_96_fu_1980_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln301_4_fu_1976_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln301_5_fu_1988_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln301_1_fu_1992_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln301_6_fu_1998_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln301_2_fu_2001_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_2020_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_2020_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (75 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal mul_ln318_fu_996_p00 : STD_LOGIC_VECTOR (128 downto 0);
    signal mul_ln319_fu_1108_p00 : STD_LOGIC_VECTOR (128 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component makePatches_ShadowQuilt_fromEdges_mul_64ns_66ns_129_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (65 downto 0);
        dout : OUT STD_LOGIC_VECTOR (128 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_urem_57s_4ns_57_61_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (56 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (56 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_mux_53_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_64ns_66ns_129_1_1_U70 : component makePatches_ShadowQuilt_fromEdges_mul_64ns_66ns_129_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 66,
        dout_WIDTH => 129)
    port map (
        din0 => mul_ln318_fu_996_p0,
        din1 => mul_ln318_fu_996_p1,
        dout => mul_ln318_fu_996_p2);

    urem_57s_4ns_57_61_1_U71 : component makePatches_ShadowQuilt_fromEdges_urem_57s_4ns_57_61_1
    generic map (
        ID => 1,
        NUM_STAGE => 61,
        din0_WIDTH => 57,
        din1_WIDTH => 4,
        dout_WIDTH => 57)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1026_p0,
        din1 => grp_fu_1026_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1026_p2);

    mux_53_32_1_1_U72 : component makePatches_ShadowQuilt_fromEdges_mux_53_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => wp_superpoints_load_reg_2137,
        din1 => wp_superpoints1_load_reg_2142,
        din2 => wp_superpoints2_load_reg_2147,
        din3 => wp_superpoints3_load_reg_2152,
        din4 => wp_superpoints4_load_reg_2157,
        din5 => tmp_fu_1036_p6,
        dout => tmp_fu_1036_p7);

    mul_64ns_66ns_129_1_1_U73 : component makePatches_ShadowQuilt_fromEdges_mul_64ns_66ns_129_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 66,
        dout_WIDTH => 129)
    port map (
        din0 => mul_ln319_fu_1108_p0,
        din1 => mul_ln319_fu_1108_p1,
        dout => mul_ln319_fu_1108_p2);

    mux_53_32_1_1_U74 : component makePatches_ShadowQuilt_fromEdges_mux_53_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => wp_superpoints_load_2_reg_2162,
        din1 => wp_superpoints1_load_4_reg_2167,
        din2 => wp_superpoints2_load_4_reg_2172,
        din3 => wp_superpoints3_load_4_reg_2177,
        din4 => wp_superpoints4_load_4_reg_2182,
        din5 => trunc_ln874_reg_2212,
        dout => tmp_35_fu_1176_p7);

    mux_53_32_1_1_U75 : component makePatches_ShadowQuilt_fromEdges_mux_53_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => wp_superpoints_q1,
        din1 => wp_superpoints1_q1,
        din2 => wp_superpoints2_q1,
        din3 => wp_superpoints3_q1,
        din4 => wp_superpoints4_q1,
        din5 => select_ln331_1_reg_2273,
        dout => phi_V_1_fu_1346_p7);

    mux_53_32_1_1_U76 : component makePatches_ShadowQuilt_fromEdges_mux_53_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => wp_superpoints_q0,
        din1 => wp_superpoints1_q0,
        din2 => wp_superpoints2_q0,
        din3 => wp_superpoints3_q0,
        din4 => wp_superpoints4_q0,
        din5 => select_ln331_1_reg_2273,
        dout => z_V_1_fu_1361_p7);

    mux_53_32_1_1_U77 : component makePatches_ShadowQuilt_fromEdges_mux_53_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => wp_parameters_q0,
        din1 => tmp_36_fu_1621_p2,
        din2 => wp_parameters6_q0,
        din3 => tmp_36_fu_1621_p4,
        din4 => wp_parameters8_q0,
        din5 => select_ln339_1_reg_2345,
        dout => tmp_36_fu_1621_p7);

    mux_53_32_1_1_U78 : component makePatches_ShadowQuilt_fromEdges_mux_53_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => wp_superpoints_q1,
        din1 => wp_superpoints1_q1,
        din2 => wp_superpoints2_q1,
        din3 => wp_superpoints3_q1,
        din4 => wp_superpoints4_q1,
        din5 => select_ln287_1_reg_2412,
        dout => phi_V_fu_1754_p7);

    mux_53_32_1_1_U79 : component makePatches_ShadowQuilt_fromEdges_mux_53_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => wp_superpoints_q0,
        din1 => wp_superpoints1_q0,
        din2 => wp_superpoints2_q0,
        din3 => wp_superpoints3_q0,
        din4 => wp_superpoints4_q0,
        din5 => select_ln287_1_reg_2412,
        dout => z_V_fu_1769_p7);

    mux_53_32_1_1_U80 : component makePatches_ShadowQuilt_fromEdges_mux_53_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => wp_parameters_q0,
        din1 => tmp_s_fu_2020_p2,
        din2 => wp_parameters6_q0,
        din3 => tmp_s_fu_2020_p4,
        din4 => wp_parameters8_q0,
        din5 => select_ln295_1_reg_2484,
        dout => tmp_s_fu_2020_p7);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state68) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln329_fu_1204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state68))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state68);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((icmp_ln329_fu_1204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state71) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state71))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state71);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state75) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (icmp_ln284_fu_871_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state75))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state75);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif (((ap_start = ap_const_logic_1) and (icmp_ln284_fu_871_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state78) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state78))) then 
                    ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state78);
                elsif ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_2_reg_819_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                a_2_reg_819 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln295_reg_2480 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                a_2_reg_819 <= select_ln295_1_reg_2484;
            end if; 
        end if;
    end process;

    a_3_reg_698_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln331_reg_2264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                a_3_reg_698 <= select_ln331_1_reg_2273;
            elsif (((icmp_ln329_fu_1204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
                a_3_reg_698 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    a_4_reg_731_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                a_4_reg_731 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln339_reg_2341 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                a_4_reg_731 <= select_ln339_1_reg_2345;
            end if; 
        end if;
    end process;

    a_reg_786_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln284_fu_871_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                a_reg_786 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln287_reg_2403 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                a_reg_786 <= select_ln287_1_reg_2412;
            end if; 
        end if;
    end process;

    b_6_reg_841_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                b_6_reg_841 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln295_reg_2480 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                b_6_reg_841 <= select_ln297_1_reg_2496;
            end if; 
        end if;
    end process;

    b_7_reg_709_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln331_fu_1236_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                b_7_reg_709 <= add_ln333_fu_1306_p2;
            elsif (((icmp_ln329_fu_1204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
                b_7_reg_709 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    b_8_reg_753_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                b_8_reg_753 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln339_reg_2341 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                b_8_reg_753 <= select_ln341_1_reg_2357;
            end if; 
        end if;
    end process;

    b_reg_797_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln284_fu_871_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                b_reg_797 <= ap_const_lv5_0;
            elsif (((icmp_ln287_fu_1653_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                b_reg_797 <= add_ln289_fu_1723_p2;
            end if; 
        end if;
    end process;

    c_5_reg_764_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                c_5_reg_764 <= ap_const_lv3_0;
            elsif (((icmp_ln339_fu_1391_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                c_5_reg_764 <= add_ln343_fu_1520_p2;
            end if; 
        end if;
    end process;

    c_reg_852_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                c_reg_852 <= ap_const_lv3_0;
            elsif (((icmp_ln295_fu_1799_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                c_reg_852 <= add_ln299_fu_1928_p2;
            end if; 
        end if;
    end process;

    i_018_reg_676_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_018_reg_676 <= ap_const_lv8_0;
            elsif (((icmp_ln874_4_fu_1190_p2 = ap_const_lv1_1) and (icmp_ln874_reg_2232 = ap_const_lv1_1) and (icmp_ln316_1_reg_2187 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                i_018_reg_676 <= i_reg_2191;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_808_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                indvar_flatten21_reg_808 <= ap_const_lv7_0;
            elsif (((icmp_ln295_fu_1799_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                indvar_flatten21_reg_808 <= add_ln295_1_fu_1793_p2;
            end if; 
        end if;
    end process;

    indvar_flatten29_reg_687_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln331_fu_1236_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar_flatten29_reg_687 <= add_ln331_1_fu_1230_p2;
            elsif (((icmp_ln329_fu_1204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
                indvar_flatten29_reg_687 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten37_reg_742_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                indvar_flatten37_reg_742 <= ap_const_lv6_0;
            elsif (((icmp_ln339_fu_1391_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten37_reg_742 <= select_ln341_2_fu_1532_p3;
            end if; 
        end if;
    end process;

    indvar_flatten51_reg_720_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                indvar_flatten51_reg_720 <= ap_const_lv7_0;
            elsif (((icmp_ln339_fu_1391_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten51_reg_720 <= add_ln339_1_fu_1385_p2;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_830_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                indvar_flatten7_reg_830 <= ap_const_lv6_0;
            elsif (((icmp_ln295_fu_1799_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                indvar_flatten7_reg_830 <= select_ln297_2_fu_1940_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_775_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln284_fu_871_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_775 <= ap_const_lv7_0;
            elsif (((icmp_ln287_fu_1653_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                indvar_flatten_reg_775 <= add_ln287_1_fu_1647_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln316_1_fu_951_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    add_ln318_reg_2196(18 downto 7) <= add_ln318_fu_983_p2(18 downto 7);
                tmp_92_reg_2201 <= mul_ln318_fu_996_p2(128 downto 74);
                tmp_reg_2217 <= tmp_fu_1036_p7;
                trunc_ln874_reg_2212 <= trunc_ln874_fu_1032_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln329_fu_1204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                add_ln335_reg_2253 <= add_ln335_fu_1224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_reg_2093 <= empty_fu_863_p1;
                icmp_ln284_reg_2098 <= icmp_ln284_fu_871_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_2191 <= i_fu_956_p2;
                icmp_ln316_1_reg_2187 <= icmp_ln316_1_fu_951_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln287_reg_2403 <= icmp_ln287_fu_1653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln295_reg_2480 <= icmp_ln295_fu_1799_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln316_reg_2123 <= icmp_ln316_fu_927_p2;
                patches_parameters_load_reg_2118 <= patches_parameters_q0;
                    tmp_52_reg_2113(15 downto 7) <= tmp_52_fu_920_p3(15 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then
                icmp_ln329_reg_2249 <= icmp_ln329_fu_1204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln331_reg_2264 <= icmp_ln331_fu_1236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln339_reg_2341 <= icmp_ln339_fu_1391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln316_1_reg_2187 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                icmp_ln874_reg_2232 <= icmp_ln874_fu_1090_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln287_fu_1653_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                select_ln287_1_reg_2412 <= select_ln287_1_fu_1679_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln287_fu_1653_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                select_ln287_reg_2407 <= select_ln287_fu_1671_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln295_fu_1799_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                select_ln295_1_reg_2484 <= select_ln295_1_fu_1825_p3;
                select_ln297_1_reg_2496 <= select_ln297_1_fu_1871_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln295_fu_1799_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                select_ln297_reg_2491 <= select_ln297_fu_1863_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln331_fu_1236_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                select_ln331_1_reg_2273 <= select_ln331_1_fu_1262_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln331_fu_1236_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                select_ln331_reg_2268 <= select_ln331_fu_1254_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln339_fu_1391_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                select_ln339_1_reg_2345 <= select_ln339_1_fu_1417_p3;
                select_ln341_1_reg_2357 <= select_ln341_1_fu_1463_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln339_fu_1391_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                select_ln341_reg_2352 <= select_ln341_fu_1455_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    sext_ln316_reg_2132(16 downto 7) <= sext_ln316_fu_944_p1(16 downto 7);
                    sext_ln318_reg_2127(18 downto 9) <= sext_ln318_fu_940_p1(18 downto 9);
                wp_superpoints1_load_4_reg_2167 <= wp_superpoints1_q0;
                wp_superpoints1_load_reg_2142 <= wp_superpoints1_q1;
                wp_superpoints2_load_4_reg_2172 <= wp_superpoints2_q0;
                wp_superpoints2_load_reg_2147 <= wp_superpoints2_q1;
                wp_superpoints3_load_4_reg_2177 <= wp_superpoints3_q0;
                wp_superpoints3_load_reg_2152 <= wp_superpoints3_q1;
                wp_superpoints4_load_4_reg_2182 <= wp_superpoints4_q0;
                wp_superpoints4_load_reg_2157 <= wp_superpoints4_q1;
                wp_superpoints_load_2_reg_2162 <= wp_superpoints_q0;
                wp_superpoints_load_reg_2137 <= wp_superpoints_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln284_fu_871_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                sub_reg_2102 <= sub_fu_877_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln874_fu_1090_p2 = ap_const_lv1_1) and (icmp_ln316_1_reg_2187 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                tmp_35_reg_2241 <= tmp_35_fu_1176_p7;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln316_1_reg_2187 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state64))) then
                urem_ln318_reg_2222 <= grp_fu_1026_p2;
            end if;
        end if;
    end process;
    tmp_52_reg_2113(6 downto 0) <= "0000000";
    sext_ln318_reg_2127(8 downto 0) <= "000000000";
    sext_ln316_reg_2132(6 downto 0) <= "0000000";
    add_ln318_reg_2196(6 downto 0) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln284_fu_871_p2, ap_CS_fsm_state2, icmp_ln316_fu_927_p2, icmp_ln316_1_reg_2187, icmp_ln874_reg_2232, icmp_ln329_fu_1204_p2, ap_CS_fsm_state67, ap_enable_reg_pp1_iter0, icmp_ln331_fu_1236_p2, ap_enable_reg_pp2_iter0, icmp_ln339_fu_1391_p2, ap_enable_reg_pp3_iter0, icmp_ln287_fu_1653_p2, ap_enable_reg_pp4_iter0, icmp_ln295_fu_1799_p2, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_block_pp4_stage0_subdone, ap_CS_fsm_state66, icmp_ln874_4_fu_1190_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (icmp_ln284_fu_871_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_start = ap_const_logic_1) and (icmp_ln284_fu_871_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln316_fu_927_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                if (((icmp_ln874_4_fu_1190_p2 = ap_const_lv1_1) and (icmp_ln874_reg_2232 = ap_const_lv1_1) and (icmp_ln316_1_reg_2187 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((icmp_ln316_1_reg_2187 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state67 => 
                if (((icmp_ln329_fu_1204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln331_fu_1236_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln331_fu_1236_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((icmp_ln339_fu_1391_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln339_fu_1391_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((icmp_ln287_fu_1653_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((icmp_ln287_fu_1653_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if (not(((icmp_ln295_fu_1799_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((icmp_ln295_fu_1799_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln287_1_fu_1647_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_775) + unsigned(ap_const_lv7_1));
    add_ln287_fu_1659_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_phi_fu_790_p4) + unsigned(ap_const_lv3_1));
    add_ln289_fu_1723_p2 <= std_logic_vector(unsigned(select_ln287_fu_1671_p3) + unsigned(ap_const_lv5_1));
    add_ln291_fu_1743_p2 <= std_logic_vector(unsigned(tmp_168_cast_fu_1736_p1) + unsigned(zext_ln291_fu_1740_p1));
    add_ln295_1_fu_1793_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_808) + unsigned(ap_const_lv7_1));
    add_ln295_fu_1805_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_2_phi_fu_823_p4) + unsigned(ap_const_lv3_1));
    add_ln297_1_fu_1934_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_830) + unsigned(ap_const_lv6_1));
    add_ln297_fu_1851_p2 <= std_logic_vector(unsigned(select_ln295_fu_1817_p3) + unsigned(ap_const_lv3_1));
    add_ln299_fu_1928_p2 <= std_logic_vector(unsigned(select_ln297_fu_1863_p3) + unsigned(ap_const_lv3_1));
    add_ln301_1_fu_1913_p2 <= std_logic_vector(unsigned(sub_ln301_fu_1903_p2) + unsigned(zext_ln301_7_fu_1909_p1));
    add_ln301_2_fu_2001_p2 <= std_logic_vector(unsigned(sub_ln301_1_fu_1992_p2) + unsigned(zext_ln301_6_fu_1998_p1));
    add_ln301_fu_1962_p2 <= std_logic_vector(unsigned(zext_ln297_fu_1955_p1) + unsigned(zext_ln301_2_fu_1959_p1));
    add_ln318_1_fu_974_p2 <= std_logic_vector(signed(sext_ln316_reg_2132) + signed(zext_ln318_fu_970_p1));
    add_ln318_2_fu_1061_p2 <= std_logic_vector(unsigned(zext_ln318_3_fu_1057_p1) + unsigned(zext_ln318_2_fu_1047_p1));
    add_ln318_3_fu_1071_p2 <= std_logic_vector(unsigned(add_ln318_2_fu_1061_p2) + unsigned(zext_ln318_4_fu_1067_p1));
    add_ln318_fu_983_p2 <= std_logic_vector(signed(sext_ln318_1_fu_979_p1) + signed(sext_ln318_reg_2127));
    add_ln319_1_fu_1151_p2 <= std_logic_vector(unsigned(add_ln319_fu_1142_p2) + unsigned(trunc_ln319_fu_1148_p1));
    add_ln319_fu_1142_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_1134_p3) + unsigned(udiv_ln3_cast_fu_1114_p4));
    add_ln331_1_fu_1230_p2 <= std_logic_vector(unsigned(indvar_flatten29_reg_687) + unsigned(ap_const_lv7_1));
    add_ln331_fu_1242_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_3_phi_fu_702_p4) + unsigned(ap_const_lv3_1));
    add_ln333_fu_1306_p2 <= std_logic_vector(unsigned(select_ln331_fu_1254_p3) + unsigned(ap_const_lv5_1));
    add_ln335_1_fu_1318_p2 <= std_logic_vector(unsigned(trunc_ln335_fu_1312_p1) + unsigned(zext_ln335_3_fu_1315_p1));
    add_ln335_2_fu_1335_p2 <= std_logic_vector(unsigned(tmp_184_cast_fu_1324_p3) + unsigned(zext_ln335_4_fu_1332_p1));
    add_ln335_fu_1224_p2 <= std_logic_vector(unsigned(zext_ln335_2_fu_1220_p1) + unsigned(zext_ln335_fu_1210_p1));
    add_ln339_1_fu_1385_p2 <= std_logic_vector(unsigned(indvar_flatten51_reg_720) + unsigned(ap_const_lv7_1));
    add_ln339_fu_1397_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_4_phi_fu_735_p4) + unsigned(ap_const_lv3_1));
    add_ln341_3_fu_1526_p2 <= std_logic_vector(unsigned(indvar_flatten37_reg_742) + unsigned(ap_const_lv6_1));
    add_ln341_fu_1443_p2 <= std_logic_vector(unsigned(select_ln339_fu_1409_p3) + unsigned(ap_const_lv3_1));
    add_ln343_fu_1520_p2 <= std_logic_vector(unsigned(select_ln341_fu_1455_p3) + unsigned(ap_const_lv3_1));
    add_ln345_1_fu_1563_p2 <= std_logic_vector(unsigned(zext_ln341_fu_1556_p1) + unsigned(zext_ln345_3_fu_1560_p1));
    add_ln345_2_fu_1505_p2 <= std_logic_vector(unsigned(sub_ln345_fu_1495_p2) + unsigned(zext_ln345_6_fu_1501_p1));
    add_ln345_3_fu_1602_p2 <= std_logic_vector(unsigned(sub_ln345_1_fu_1593_p2) + unsigned(zext_ln345_5_fu_1599_p1));
    add_ln345_fu_1543_p2 <= std_logic_vector(unsigned(add_ln335_reg_2253) + unsigned(zext_ln345_2_fu_1540_p1));
    add_ln353_fu_1637_p2 <= std_logic_vector(unsigned(empty_reg_2093) + unsigned(ap_const_lv6_1));
    and_ln295_fu_1845_p2 <= (xor_ln295_fu_1833_p2 and icmp_ln299_fu_1839_p2);
    and_ln339_fu_1437_p2 <= (xor_ln339_fu_1425_p2 and icmp_ln343_fu_1431_p2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(67);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(69);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(72);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(74);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state70 <= ap_CS_fsm(68);
    ap_CS_fsm_state73 <= ap_CS_fsm(70);
    ap_CS_fsm_state77 <= ap_CS_fsm(73);
    ap_CS_fsm_state80 <= ap_CS_fsm(75);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state68_assign_proc : process(icmp_ln331_fu_1236_p2)
    begin
        if ((icmp_ln331_fu_1236_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state68 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state68 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state71_assign_proc : process(icmp_ln339_fu_1391_p2)
    begin
        if ((icmp_ln339_fu_1391_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state71 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state71 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state75_assign_proc : process(icmp_ln287_fu_1653_p2)
    begin
        if ((icmp_ln287_fu_1653_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state75 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state75 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state78_assign_proc : process(icmp_ln295_fu_1799_p2)
    begin
        if ((icmp_ln295_fu_1799_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state78 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state78 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_a_2_phi_fu_823_p4_assign_proc : process(a_2_reg_819, ap_CS_fsm_pp4_stage0, icmp_ln295_reg_2480, select_ln295_1_reg_2484, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln295_reg_2480 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            ap_phi_mux_a_2_phi_fu_823_p4 <= select_ln295_1_reg_2484;
        else 
            ap_phi_mux_a_2_phi_fu_823_p4 <= a_2_reg_819;
        end if; 
    end process;


    ap_phi_mux_a_3_phi_fu_702_p4_assign_proc : process(a_3_reg_698, ap_CS_fsm_pp1_stage0, icmp_ln331_reg_2264, select_ln331_1_reg_2273, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln331_reg_2264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_a_3_phi_fu_702_p4 <= select_ln331_1_reg_2273;
        else 
            ap_phi_mux_a_3_phi_fu_702_p4 <= a_3_reg_698;
        end if; 
    end process;


    ap_phi_mux_a_4_phi_fu_735_p4_assign_proc : process(a_4_reg_731, ap_CS_fsm_pp2_stage0, icmp_ln339_reg_2341, select_ln339_1_reg_2345, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln339_reg_2341 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_a_4_phi_fu_735_p4 <= select_ln339_1_reg_2345;
        else 
            ap_phi_mux_a_4_phi_fu_735_p4 <= a_4_reg_731;
        end if; 
    end process;


    ap_phi_mux_a_phi_fu_790_p4_assign_proc : process(a_reg_786, ap_CS_fsm_pp3_stage0, icmp_ln287_reg_2403, select_ln287_1_reg_2412, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln287_reg_2403 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_phi_mux_a_phi_fu_790_p4 <= select_ln287_1_reg_2412;
        else 
            ap_phi_mux_a_phi_fu_790_p4 <= a_reg_786;
        end if; 
    end process;


    ap_phi_mux_b_6_phi_fu_845_p4_assign_proc : process(b_6_reg_841, ap_CS_fsm_pp4_stage0, icmp_ln295_reg_2480, select_ln297_1_reg_2496, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln295_reg_2480 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            ap_phi_mux_b_6_phi_fu_845_p4 <= select_ln297_1_reg_2496;
        else 
            ap_phi_mux_b_6_phi_fu_845_p4 <= b_6_reg_841;
        end if; 
    end process;


    ap_phi_mux_b_8_phi_fu_757_p4_assign_proc : process(b_8_reg_753, ap_CS_fsm_pp2_stage0, icmp_ln339_reg_2341, select_ln341_1_reg_2357, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln339_reg_2341 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_b_8_phi_fu_757_p4 <= select_ln341_1_reg_2357;
        else 
            ap_phi_mux_b_8_phi_fu_757_p4 <= b_8_reg_753;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_133_fu_883_p1 <= sub_fu_877_p2(5 - 1 downto 0);
    empty_134_fu_903_p2 <= std_logic_vector(unsigned(tmp_166_cast_fu_887_p3) - unsigned(tmp_53_fu_895_p3));
    empty_135_fu_909_p2 <= std_logic_vector(unsigned(empty_134_fu_903_p2) + unsigned(ap_const_lv12_66));
    empty_fu_863_p1 <= n_patches_read(6 - 1 downto 0);
        grp_fu_1026_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_1012_p4),57));

    grp_fu_1026_p1 <= ap_const_lv57_5(4 - 1 downto 0);
    i_fu_956_p2 <= std_logic_vector(unsigned(i_018_reg_676) + unsigned(ap_const_lv8_1));
    icmp_ln284_fu_871_p2 <= "1" when (n_patches_read = ap_const_lv8_0) else "0";
    icmp_ln287_fu_1653_p2 <= "1" when (indvar_flatten_reg_775 = ap_const_lv7_50) else "0";
    icmp_ln289_fu_1665_p2 <= "1" when (b_reg_797 = ap_const_lv5_10) else "0";
    icmp_ln295_fu_1799_p2 <= "1" when (indvar_flatten21_reg_808 = ap_const_lv7_78) else "0";
    icmp_ln297_fu_1811_p2 <= "1" when (indvar_flatten7_reg_830 = ap_const_lv6_18) else "0";
    icmp_ln299_fu_1839_p2 <= "1" when (c_reg_852 = ap_const_lv3_6) else "0";
    icmp_ln316_1_fu_951_p2 <= "1" when (signed(zext_ln316_fu_947_p1) < signed(patches_parameters_load_reg_2118)) else "0";
    icmp_ln316_fu_927_p2 <= "1" when (signed(patches_parameters_q0) > signed(ap_const_lv32_0)) else "0";
    icmp_ln329_fu_1204_p2 <= "1" when (tmp_98_fu_1195_p4 = ap_const_lv3_0) else "0";
    icmp_ln331_fu_1236_p2 <= "1" when (indvar_flatten29_reg_687 = ap_const_lv7_50) else "0";
    icmp_ln333_fu_1248_p2 <= "1" when (b_7_reg_709 = ap_const_lv5_10) else "0";
    icmp_ln339_fu_1391_p2 <= "1" when (indvar_flatten51_reg_720 = ap_const_lv7_78) else "0";
    icmp_ln341_fu_1403_p2 <= "1" when (indvar_flatten37_reg_742 = ap_const_lv6_18) else "0";
    icmp_ln343_fu_1431_p2 <= "1" when (c_5_reg_764 = ap_const_lv3_6) else "0";
    icmp_ln874_4_fu_1190_p2 <= "1" when (trunc_ln69_4_fu_1186_p1 = tmp_35_reg_2241) else "0";
    icmp_ln874_fu_1090_p2 <= "1" when (trunc_ln69_fu_1086_p1 = tmp_reg_2217) else "0";
    mul_ln318_fu_996_p0 <= mul_ln318_fu_996_p00(64 - 1 downto 0);
    mul_ln318_fu_996_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln318_2_fu_988_p1),129));
    mul_ln318_fu_996_p1 <= ap_const_lv129_lc_1(66 - 1 downto 0);
    mul_ln319_fu_1108_p0 <= mul_ln319_fu_1108_p00(64 - 1 downto 0);
    mul_ln319_fu_1108_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln319_fu_1100_p1),129));
    mul_ln319_fu_1108_p1 <= ap_const_lv129_lc_1(66 - 1 downto 0);

    n_patches_assign_proc : process(icmp_ln284_reg_2098, icmp_ln316_reg_2123, icmp_ln316_1_reg_2187, icmp_ln329_reg_2249, zext_ln353_fu_1642_p1, ap_CS_fsm_state73, ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            n_patches <= ap_const_lv8_1;
        elsif (((icmp_ln329_reg_2249 = ap_const_lv1_1) and (icmp_ln316_1_reg_2187 = ap_const_lv1_1) and (icmp_ln316_reg_2123 = ap_const_lv1_1) and (icmp_ln284_reg_2098 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            n_patches <= zext_ln353_fu_1642_p1;
        else 
            n_patches <= "XXXXXXXX";
        end if; 
    end process;


    n_patches_ap_vld_assign_proc : process(icmp_ln284_reg_2098, icmp_ln316_reg_2123, icmp_ln316_1_reg_2187, icmp_ln329_reg_2249, ap_CS_fsm_state73, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or ((icmp_ln329_reg_2249 = ap_const_lv1_1) and (icmp_ln316_1_reg_2187 = ap_const_lv1_1) and (icmp_ln316_reg_2123 = ap_const_lv1_1) and (icmp_ln284_reg_2098 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state73)))) then 
            n_patches_ap_vld <= ap_const_logic_1;
        else 
            n_patches_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln291_fu_1704_p2 <= (tmp_55_fu_1687_p3 or ap_const_lv6_1);
    or_ln297_fu_1857_p2 <= (icmp_ln297_fu_1811_p2 or and_ln295_fu_1845_p2);
    or_ln319_1_fu_1165_p2 <= (tmp_181_cast_fu_1157_p3 or ap_const_lv12_F);
    or_ln319_fu_1095_p2 <= (ap_const_lv19_78 or add_ln318_reg_2196);
    or_ln335_fu_1287_p2 <= (tmp_60_fu_1270_p3 or ap_const_lv6_1);
    or_ln341_fu_1449_p2 <= (icmp_ln341_fu_1403_p2 or and_ln339_fu_1437_p2);
    p_cast_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_135_fu_909_p2),64));
    p_shl10_cast_fu_1573_p3 <= (trunc_ln345_1_fu_1569_p1 & ap_const_lv3_0);
    p_shl11_cast_fu_1585_p3 <= (trunc_ln345_2_fu_1581_p1 & ap_const_lv1_0);
    p_shl2_cast_fu_1883_p3 <= (trunc_ln301_fu_1879_p1 & ap_const_lv3_0);
    p_shl7_cast_fu_1134_p3 <= (tmp_97_fu_1124_p4 & ap_const_lv2_0);
    p_shl8_cast_fu_1475_p3 <= (trunc_ln345_fu_1471_p1 & ap_const_lv3_0);

    patches_parameters_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp4_iter1, ap_block_pp2_stage0, ap_block_pp4_stage0, p_cast_fu_915_p1, zext_ln345_8_fu_1608_p1, zext_ln301_9_fu_2007_p1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            patches_parameters_address0 <= zext_ln301_9_fu_2007_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            patches_parameters_address0 <= zext_ln345_8_fu_1608_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            patches_parameters_address0 <= p_cast_fu_915_p1(12 - 1 downto 0);
        else 
            patches_parameters_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp2_iter1, ap_enable_reg_pp4_iter1)
    begin
        if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            patches_parameters_ce0 <= ap_const_logic_1;
        else 
            patches_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_d0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp4_iter1, ap_block_pp2_stage0, ap_block_pp4_stage0, tmp_36_fu_1621_p7, tmp_s_fu_2020_p7)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            patches_parameters_d0 <= tmp_s_fu_2020_p7;
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            patches_parameters_d0 <= tmp_36_fu_1621_p7;
        else 
            patches_parameters_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_we0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln339_reg_2341, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, icmp_ln295_reg_2480, ap_enable_reg_pp2_iter1, ap_enable_reg_pp4_iter1)
    begin
        if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln295_reg_2480 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln339_reg_2341 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            patches_parameters_we0 <= ap_const_logic_1;
        else 
            patches_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_address0_assign_proc : process(ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter1, ap_block_pp1_stage0, ap_block_pp3_stage0, tmp_57_fu_1077_p3, zext_ln319_1_fu_1171_p1, zext_ln335_5_fu_1341_p1, zext_ln291_2_fu_1749_p1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            patches_superpoints_address0 <= zext_ln291_2_fu_1749_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            patches_superpoints_address0 <= zext_ln335_5_fu_1341_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            patches_superpoints_address0 <= zext_ln319_1_fu_1171_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            patches_superpoints_address0 <= tmp_57_fu_1077_p3(12 - 1 downto 0);
        else 
            patches_superpoints_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_ce0_assign_proc : process(ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            patches_superpoints_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_d0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter1, ap_block_pp1_stage0, ap_block_pp3_stage0, ret_41_fu_1376_p3, ret_fu_1784_p3)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            patches_superpoints_d0 <= ret_fu_1784_p3;
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            patches_superpoints_d0 <= ret_41_fu_1376_p3;
        else 
            patches_superpoints_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln331_reg_2264, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, icmp_ln287_reg_2403, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter1)
    begin
        if ((((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln287_reg_2403 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln331_reg_2264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            patches_superpoints_we0 <= ap_const_logic_1;
        else 
            patches_superpoints_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_41_fu_1376_p3 <= (phi_V_1_fu_1346_p7 & z_V_1_fu_1361_p7);
    ret_fu_1784_p3 <= (phi_V_fu_1754_p7 & z_V_fu_1769_p7);
    select_ln287_1_fu_1679_p3 <= 
        add_ln287_fu_1659_p2 when (icmp_ln289_fu_1665_p2(0) = '1') else 
        ap_phi_mux_a_phi_fu_790_p4;
    select_ln287_fu_1671_p3 <= 
        ap_const_lv5_0 when (icmp_ln289_fu_1665_p2(0) = '1') else 
        b_reg_797;
    select_ln295_1_fu_1825_p3 <= 
        add_ln295_fu_1805_p2 when (icmp_ln297_fu_1811_p2(0) = '1') else 
        ap_phi_mux_a_2_phi_fu_823_p4;
    select_ln295_fu_1817_p3 <= 
        ap_const_lv3_0 when (icmp_ln297_fu_1811_p2(0) = '1') else 
        ap_phi_mux_b_6_phi_fu_845_p4;
    select_ln297_1_fu_1871_p3 <= 
        add_ln297_fu_1851_p2 when (and_ln295_fu_1845_p2(0) = '1') else 
        select_ln295_fu_1817_p3;
    select_ln297_2_fu_1940_p3 <= 
        ap_const_lv6_1 when (icmp_ln297_fu_1811_p2(0) = '1') else 
        add_ln297_1_fu_1934_p2;
    select_ln297_fu_1863_p3 <= 
        ap_const_lv3_0 when (or_ln297_fu_1857_p2(0) = '1') else 
        c_reg_852;
    select_ln331_1_fu_1262_p3 <= 
        add_ln331_fu_1242_p2 when (icmp_ln333_fu_1248_p2(0) = '1') else 
        ap_phi_mux_a_3_phi_fu_702_p4;
    select_ln331_fu_1254_p3 <= 
        ap_const_lv5_0 when (icmp_ln333_fu_1248_p2(0) = '1') else 
        b_7_reg_709;
    select_ln339_1_fu_1417_p3 <= 
        add_ln339_fu_1397_p2 when (icmp_ln341_fu_1403_p2(0) = '1') else 
        ap_phi_mux_a_4_phi_fu_735_p4;
    select_ln339_fu_1409_p3 <= 
        ap_const_lv3_0 when (icmp_ln341_fu_1403_p2(0) = '1') else 
        ap_phi_mux_b_8_phi_fu_757_p4;
    select_ln341_1_fu_1463_p3 <= 
        add_ln341_fu_1443_p2 when (and_ln339_fu_1437_p2(0) = '1') else 
        select_ln339_fu_1409_p3;
    select_ln341_2_fu_1532_p3 <= 
        ap_const_lv6_1 when (icmp_ln341_fu_1403_p2(0) = '1') else 
        add_ln341_3_fu_1526_p2;
    select_ln341_fu_1455_p3 <= 
        ap_const_lv3_0 when (or_ln341_fu_1449_p2(0) = '1') else 
        c_5_reg_764;
        sext_ln316_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_52_reg_2113),17));

        sext_ln318_1_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln318_1_fu_974_p2),19));

        sext_ln318_2_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln318_fu_983_p2),64));

        sext_ln318_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln318_1_fu_933_p3),19));

        sext_ln319_fu_1100_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln319_fu_1095_p2),64));

    shl_ln318_1_fu_933_p3 <= (sub_reg_2102 & ap_const_lv9_0);
    shl_ln_fu_962_p3 <= (i_018_reg_676 & ap_const_lv7_0);
    sub_fu_877_p2 <= std_logic_vector(unsigned(zext_ln284_fu_867_p1) + unsigned(ap_const_lv9_1FF));
    sub_ln301_1_fu_1992_p2 <= std_logic_vector(unsigned(zext_ln301_4_fu_1976_p1) - unsigned(zext_ln301_5_fu_1988_p1));
    sub_ln301_fu_1903_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_1883_p3) - unsigned(zext_ln301_3_fu_1899_p1));
    sub_ln345_1_fu_1593_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_1573_p3) - unsigned(p_shl11_cast_fu_1585_p3));
    sub_ln345_fu_1495_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_1475_p3) - unsigned(zext_ln345_4_fu_1491_p1));
    tmp_100_fu_1483_p3 <= (select_ln341_1_fu_1463_p3 & ap_const_lv1_0);
    tmp_166_cast_fu_887_p3 <= (empty_133_fu_883_p1 & ap_const_lv7_0);
    tmp_168_cast_fu_1736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_1729_p3),8));
    tmp_181_cast_fu_1157_p3 <= (add_ln319_1_fu_1151_p2 & ap_const_lv4_0);
    tmp_184_cast_fu_1324_p3 <= (add_ln335_1_fu_1318_p2 & ap_const_lv4_0);
    tmp_36_fu_1621_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wp_parameters5_q0),32));
    tmp_36_fu_1621_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wp_parameters7_q0),32));
    tmp_52_fu_920_p3 <= (sub_reg_2102 & ap_const_lv7_0);
    tmp_53_fu_895_p3 <= (sub_fu_877_p2 & ap_const_lv3_0);
    tmp_54_fu_1729_p3 <= (select_ln287_1_reg_2412 & ap_const_lv4_0);
    tmp_55_fu_1687_p3 <= (select_ln287_fu_1671_p3 & ap_const_lv1_0);
    tmp_56_fu_1710_p3 <= (ap_const_lv58_0 & or_ln291_fu_1704_p2);
    tmp_57_fu_1077_p3 <= (add_ln318_3_fu_1071_p2 & ap_const_lv4_0);
    tmp_58_fu_1948_p3 <= (select_ln295_1_reg_2484 & ap_const_lv2_0);
    tmp_59_fu_1213_p3 <= (n_patches_read & ap_const_lv2_0);
    tmp_60_fu_1270_p3 <= (select_ln331_fu_1254_p3 & ap_const_lv1_0);
    tmp_61_fu_1293_p3 <= (ap_const_lv58_0 & or_ln335_fu_1287_p2);
    tmp_93_fu_1050_p3 <= (tmp_92_reg_2201 & ap_const_lv2_0);
    tmp_94_fu_1891_p3 <= (select_ln297_1_fu_1871_p3 & ap_const_lv1_0);
    tmp_95_fu_1968_p3 <= (add_ln301_fu_1962_p2 & ap_const_lv3_0);
    tmp_96_fu_1980_p3 <= (add_ln301_fu_1962_p2 & ap_const_lv1_0);
    tmp_97_fu_1124_p4 <= mul_ln319_fu_1108_p2(79 downto 74);
    tmp_98_fu_1195_p4 <= n_patches_read(7 downto 5);
    tmp_99_fu_1548_p3 <= (add_ln345_fu_1543_p2 & ap_const_lv2_0);
    tmp_fu_1036_p6 <= i_018_reg_676(3 - 1 downto 0);
    tmp_s_fu_2020_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wp_parameters5_q0),32));
    tmp_s_fu_2020_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wp_parameters7_q0),32));
    trunc_ln301_fu_1879_p1 <= select_ln297_1_fu_1871_p3(2 - 1 downto 0);
    trunc_ln319_fu_1148_p1 <= urem_ln318_reg_2222(8 - 1 downto 0);
    trunc_ln335_fu_1312_p1 <= add_ln335_reg_2253(8 - 1 downto 0);
    trunc_ln345_1_fu_1569_p1 <= add_ln345_1_fu_1563_p2(9 - 1 downto 0);
    trunc_ln345_2_fu_1581_p1 <= add_ln345_1_fu_1563_p2(11 - 1 downto 0);
    trunc_ln345_fu_1471_p1 <= select_ln341_1_fu_1463_p3(2 - 1 downto 0);
    trunc_ln69_4_fu_1186_p1 <= patches_superpoints_q0(32 - 1 downto 0);
    trunc_ln69_fu_1086_p1 <= patches_superpoints_q0(32 - 1 downto 0);
    trunc_ln874_fu_1032_p1 <= i_018_reg_676(3 - 1 downto 0);
    trunc_ln_fu_1012_p4 <= add_ln318_fu_983_p2(18 downto 7);
    udiv_ln3_cast_fu_1114_p4 <= mul_ln319_fu_1108_p2(81 downto 74);

    wp_parameters5_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp2_stage0, ap_block_pp4_stage0, zext_ln345_7_fu_1511_p1, zext_ln301_8_fu_1919_p1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            wp_parameters5_address0 <= zext_ln301_8_fu_1919_p1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            wp_parameters5_address0 <= zext_ln345_7_fu_1511_p1(5 - 1 downto 0);
        else 
            wp_parameters5_address0 <= "XXXXX";
        end if; 
    end process;


    wp_parameters5_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            wp_parameters5_ce0 <= ap_const_logic_1;
        else 
            wp_parameters5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_parameters6_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp2_stage0, ap_block_pp4_stage0, zext_ln345_7_fu_1511_p1, zext_ln301_8_fu_1919_p1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            wp_parameters6_address0 <= zext_ln301_8_fu_1919_p1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            wp_parameters6_address0 <= zext_ln345_7_fu_1511_p1(5 - 1 downto 0);
        else 
            wp_parameters6_address0 <= "XXXXX";
        end if; 
    end process;


    wp_parameters6_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            wp_parameters6_ce0 <= ap_const_logic_1;
        else 
            wp_parameters6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_parameters7_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp2_stage0, ap_block_pp4_stage0, zext_ln345_7_fu_1511_p1, zext_ln301_8_fu_1919_p1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            wp_parameters7_address0 <= zext_ln301_8_fu_1919_p1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            wp_parameters7_address0 <= zext_ln345_7_fu_1511_p1(5 - 1 downto 0);
        else 
            wp_parameters7_address0 <= "XXXXX";
        end if; 
    end process;


    wp_parameters7_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            wp_parameters7_ce0 <= ap_const_logic_1;
        else 
            wp_parameters7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_parameters8_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp2_stage0, ap_block_pp4_stage0, zext_ln345_7_fu_1511_p1, zext_ln301_8_fu_1919_p1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            wp_parameters8_address0 <= zext_ln301_8_fu_1919_p1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            wp_parameters8_address0 <= zext_ln345_7_fu_1511_p1(5 - 1 downto 0);
        else 
            wp_parameters8_address0 <= "XXXXX";
        end if; 
    end process;


    wp_parameters8_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            wp_parameters8_ce0 <= ap_const_logic_1;
        else 
            wp_parameters8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_parameters_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp2_stage0, ap_block_pp4_stage0, zext_ln345_7_fu_1511_p1, zext_ln301_8_fu_1919_p1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            wp_parameters_address0 <= zext_ln301_8_fu_1919_p1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            wp_parameters_address0 <= zext_ln345_7_fu_1511_p1(5 - 1 downto 0);
        else 
            wp_parameters_address0 <= "XXXXX";
        end if; 
    end process;


    wp_parameters_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            wp_parameters_ce0 <= ap_const_logic_1;
        else 
            wp_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_superpoints1_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp1_stage0, ap_block_pp3_stage0, tmp_61_fu_1293_p3, tmp_56_fu_1710_p3)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            wp_superpoints1_address0 <= tmp_56_fu_1710_p3(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            wp_superpoints1_address0 <= tmp_61_fu_1293_p3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_superpoints1_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        else 
            wp_superpoints1_address0 <= "XXXXX";
        end if; 
    end process;


    wp_superpoints1_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp1_stage0, ap_block_pp3_stage0, zext_ln335_1_fu_1278_p1, zext_ln291_1_fu_1695_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            wp_superpoints1_address1 <= zext_ln291_1_fu_1695_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            wp_superpoints1_address1 <= zext_ln335_1_fu_1278_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_superpoints1_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            wp_superpoints1_address1 <= "XXXXX";
        end if; 
    end process;


    wp_superpoints1_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            wp_superpoints1_ce0 <= ap_const_logic_1;
        else 
            wp_superpoints1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_superpoints1_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            wp_superpoints1_ce1 <= ap_const_logic_1;
        else 
            wp_superpoints1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    wp_superpoints2_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp1_stage0, ap_block_pp3_stage0, tmp_61_fu_1293_p3, tmp_56_fu_1710_p3)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            wp_superpoints2_address0 <= tmp_56_fu_1710_p3(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            wp_superpoints2_address0 <= tmp_61_fu_1293_p3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_superpoints2_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        else 
            wp_superpoints2_address0 <= "XXXXX";
        end if; 
    end process;


    wp_superpoints2_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp1_stage0, ap_block_pp3_stage0, zext_ln335_1_fu_1278_p1, zext_ln291_1_fu_1695_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            wp_superpoints2_address1 <= zext_ln291_1_fu_1695_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            wp_superpoints2_address1 <= zext_ln335_1_fu_1278_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_superpoints2_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            wp_superpoints2_address1 <= "XXXXX";
        end if; 
    end process;


    wp_superpoints2_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            wp_superpoints2_ce0 <= ap_const_logic_1;
        else 
            wp_superpoints2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_superpoints2_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            wp_superpoints2_ce1 <= ap_const_logic_1;
        else 
            wp_superpoints2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    wp_superpoints3_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp1_stage0, ap_block_pp3_stage0, tmp_61_fu_1293_p3, tmp_56_fu_1710_p3)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            wp_superpoints3_address0 <= tmp_56_fu_1710_p3(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            wp_superpoints3_address0 <= tmp_61_fu_1293_p3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_superpoints3_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        else 
            wp_superpoints3_address0 <= "XXXXX";
        end if; 
    end process;


    wp_superpoints3_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp1_stage0, ap_block_pp3_stage0, zext_ln335_1_fu_1278_p1, zext_ln291_1_fu_1695_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            wp_superpoints3_address1 <= zext_ln291_1_fu_1695_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            wp_superpoints3_address1 <= zext_ln335_1_fu_1278_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_superpoints3_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            wp_superpoints3_address1 <= "XXXXX";
        end if; 
    end process;


    wp_superpoints3_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            wp_superpoints3_ce0 <= ap_const_logic_1;
        else 
            wp_superpoints3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_superpoints3_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            wp_superpoints3_ce1 <= ap_const_logic_1;
        else 
            wp_superpoints3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    wp_superpoints4_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp1_stage0, ap_block_pp3_stage0, tmp_61_fu_1293_p3, tmp_56_fu_1710_p3)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            wp_superpoints4_address0 <= tmp_56_fu_1710_p3(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            wp_superpoints4_address0 <= tmp_61_fu_1293_p3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_superpoints4_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        else 
            wp_superpoints4_address0 <= "XXXXX";
        end if; 
    end process;


    wp_superpoints4_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp1_stage0, ap_block_pp3_stage0, zext_ln335_1_fu_1278_p1, zext_ln291_1_fu_1695_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            wp_superpoints4_address1 <= zext_ln291_1_fu_1695_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            wp_superpoints4_address1 <= zext_ln335_1_fu_1278_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_superpoints4_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            wp_superpoints4_address1 <= "XXXXX";
        end if; 
    end process;


    wp_superpoints4_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            wp_superpoints4_ce0 <= ap_const_logic_1;
        else 
            wp_superpoints4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_superpoints4_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            wp_superpoints4_ce1 <= ap_const_logic_1;
        else 
            wp_superpoints4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    wp_superpoints_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp1_stage0, ap_block_pp3_stage0, tmp_61_fu_1293_p3, tmp_56_fu_1710_p3)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            wp_superpoints_address0 <= tmp_56_fu_1710_p3(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            wp_superpoints_address0 <= tmp_61_fu_1293_p3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_superpoints_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        else 
            wp_superpoints_address0 <= "XXXXX";
        end if; 
    end process;


    wp_superpoints_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp1_stage0, ap_block_pp3_stage0, zext_ln335_1_fu_1278_p1, zext_ln291_1_fu_1695_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            wp_superpoints_address1 <= zext_ln291_1_fu_1695_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            wp_superpoints_address1 <= zext_ln335_1_fu_1278_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_superpoints_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            wp_superpoints_address1 <= "XXXXX";
        end if; 
    end process;


    wp_superpoints_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            wp_superpoints_ce0 <= ap_const_logic_1;
        else 
            wp_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_superpoints_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            wp_superpoints_ce1 <= ap_const_logic_1;
        else 
            wp_superpoints_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln295_fu_1833_p2 <= (icmp_ln297_fu_1811_p2 xor ap_const_lv1_1);
    xor_ln339_fu_1425_p2 <= (icmp_ln341_fu_1403_p2 xor ap_const_lv1_1);
    zext_ln284_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_patches_read),9));
    zext_ln291_1_fu_1695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_1687_p3),64));
    zext_ln291_2_fu_1749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln291_fu_1743_p2),64));
    zext_ln291_fu_1740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln287_reg_2407),8));
    zext_ln297_fu_1955_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_fu_1948_p3),6));
    zext_ln301_2_fu_1959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln297_1_reg_2496),6));
    zext_ln301_3_fu_1899_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_94_fu_1891_p3),5));
    zext_ln301_4_fu_1976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_95_fu_1968_p3),12));
    zext_ln301_5_fu_1988_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_96_fu_1980_p3),12));
    zext_ln301_6_fu_1998_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln297_reg_2491),12));
    zext_ln301_7_fu_1909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln297_fu_1863_p3),5));
    zext_ln301_8_fu_1919_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln301_1_fu_1913_p2),64));
    zext_ln301_9_fu_2007_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln301_2_fu_2001_p2),64));
    zext_ln316_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_018_reg_676),32));
    zext_ln318_2_fu_1047_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_92_reg_2201),60));
    zext_ln318_3_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_93_fu_1050_p3),60));
    zext_ln318_4_fu_1067_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1026_p2),60));
    zext_ln318_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_962_p3),17));
    zext_ln319_1_fu_1171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln319_1_fu_1165_p2),64));
    zext_ln335_1_fu_1278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_fu_1270_p3),64));
    zext_ln335_2_fu_1220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_fu_1213_p3),11));
    zext_ln335_3_fu_1315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln331_1_reg_2273),8));
    zext_ln335_4_fu_1332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln331_reg_2268),12));
    zext_ln335_5_fu_1341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln335_2_fu_1335_p2),64));
    zext_ln335_fu_1210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_patches_read),11));
    zext_ln341_fu_1556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_99_fu_1548_p3),63));
    zext_ln345_2_fu_1540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln339_1_reg_2345),11));
    zext_ln345_3_fu_1560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln341_1_reg_2357),63));
    zext_ln345_4_fu_1491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_100_fu_1483_p3),5));
    zext_ln345_5_fu_1599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln341_reg_2352),12));
    zext_ln345_6_fu_1501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln341_fu_1455_p3),5));
    zext_ln345_7_fu_1511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln345_2_fu_1505_p2),64));
    zext_ln345_8_fu_1608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln345_3_fu_1602_p2),64));
    zext_ln353_fu_1642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln353_fu_1637_p2),8));
end behav;
