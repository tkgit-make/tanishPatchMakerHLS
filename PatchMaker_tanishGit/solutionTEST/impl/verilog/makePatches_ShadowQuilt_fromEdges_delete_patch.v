// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module makePatches_ShadowQuilt_fromEdges_delete_patch (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        n_patches,
        n_patches_ap_vld,
        n_patches_read,
        patches_superpoints_address0,
        patches_superpoints_ce0,
        patches_superpoints_we0,
        patches_superpoints_d0,
        patches_superpoints_address1,
        patches_superpoints_ce1,
        patches_superpoints_q1,
        index,
        patches_parameters_V_address0,
        patches_parameters_V_ce0,
        patches_parameters_V_we0,
        patches_parameters_V_d0,
        patches_parameters_V_address1,
        patches_parameters_V_ce1,
        patches_parameters_V_q1
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_pp0_stage0 = 10'd4;
parameter    ap_ST_fsm_state5 = 10'd8;
parameter    ap_ST_fsm_pp1_stage0 = 10'd16;
parameter    ap_ST_fsm_state8 = 10'd32;
parameter    ap_ST_fsm_state9 = 10'd64;
parameter    ap_ST_fsm_state10 = 10'd128;
parameter    ap_ST_fsm_state11 = 10'd256;
parameter    ap_ST_fsm_state12 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] n_patches;
output   n_patches_ap_vld;
input  [7:0] n_patches_read;
output  [11:0] patches_superpoints_address0;
output   patches_superpoints_ce0;
output   patches_superpoints_we0;
output  [63:0] patches_superpoints_d0;
output  [11:0] patches_superpoints_address1;
output   patches_superpoints_ce1;
input  [63:0] patches_superpoints_q1;
input  [8:0] index;
output  [11:0] patches_parameters_V_address0;
output   patches_parameters_V_ce0;
output   patches_parameters_V_we0;
output  [31:0] patches_parameters_V_d0;
output  [11:0] patches_parameters_V_address1;
output   patches_parameters_V_ce1;
input  [31:0] patches_parameters_V_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg n_patches_ap_vld;
reg[11:0] patches_superpoints_address0;
reg patches_superpoints_ce0;
reg patches_superpoints_we0;
reg[63:0] patches_superpoints_d0;
reg patches_superpoints_ce1;
reg[11:0] patches_parameters_V_address0;
reg patches_parameters_V_ce0;
reg patches_parameters_V_we0;
reg[31:0] patches_parameters_V_d0;
reg patches_parameters_V_ce1;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] indvar_flatten_reg_213;
reg   [2:0] a_reg_224;
reg   [4:0] b_reg_235;
reg   [6:0] indvar_flatten21_reg_246;
reg   [2:0] a_1_reg_257;
reg   [5:0] indvar_flatten7_reg_268;
reg   [2:0] b_5_reg_279;
reg   [2:0] c_reg_290;
wire   [0:0] tmp_73_fu_323_p3;
reg   [0:0] tmp_73_reg_877;
wire   [0:0] icmp_ln361_fu_335_p2;
reg   [0:0] icmp_ln361_reg_881;
wire   [7:0] i_fu_341_p1;
wire   [7:0] sub_fu_345_p2;
reg   [7:0] sub_reg_890;
wire   [0:0] icmp_ln368_fu_351_p2;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln374_fu_382_p2;
reg   [7:0] add_ln374_reg_904;
wire   [10:0] add_ln374_1_fu_404_p2;
reg   [10:0] add_ln374_1_reg_910;
wire   [11:0] empty_120_fu_428_p2;
reg   [11:0] empty_120_reg_916;
wire   [11:0] empty_122_fu_456_p2;
reg   [11:0] empty_122_reg_921;
wire   [6:0] add_ln370_1_fu_462_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln370_fu_468_p2;
reg   [0:0] icmp_ln370_reg_931;
wire   [2:0] select_ln370_1_fu_494_p3;
reg   [2:0] select_ln370_1_reg_935;
wire   [11:0] zext_ln374_6_fu_519_p1;
reg   [11:0] zext_ln374_6_reg_941;
wire   [4:0] add_ln372_fu_534_p2;
wire   [6:0] add_ln378_1_fu_570_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state6_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln378_fu_576_p2;
reg   [0:0] icmp_ln378_reg_961;
wire   [2:0] select_ln378_1_fu_602_p3;
reg   [2:0] select_ln378_1_reg_965;
wire   [2:0] select_ln380_1_fu_690_p3;
reg   [2:0] select_ln380_1_reg_970;
wire   [11:0] add_ln384_5_fu_789_p2;
reg   [11:0] add_ln384_5_reg_980;
wire   [2:0] add_ln382_fu_795_p2;
wire   [5:0] select_ln380_2_fu_807_p3;
wire   [7:0] i_19_fu_819_p2;
wire    ap_CS_fsm_state8;
wire   [6:0] empty_124_fu_825_p2;
wire    ap_CS_fsm_state9;
wire   [6:0] empty_128_fu_851_p2;
wire    ap_CS_fsm_state11;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state5;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
reg    ap_enable_reg_pp1_iter1;
reg   [7:0] i_18_reg_203;
reg   [2:0] ap_phi_mux_a_phi_fu_228_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_a_1_phi_fu_261_p4;
wire    ap_block_pp1_stage0;
reg   [2:0] ap_phi_mux_b_5_phi_fu_283_p4;
reg   [6:0] empty_123_reg_301;
wire   [0:0] exitcond2110_fu_831_p2;
reg   [6:0] empty_127_reg_312;
wire   [0:0] exitcond9_fu_857_p2;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln374_7_fu_529_p1;
wire   [63:0] zext_ln374_8_fu_565_p1;
wire   [63:0] zext_ln384_5_fu_784_p1;
wire   [63:0] zext_ln384_6_fu_815_p1;
wire   [63:0] p_cast_fu_846_p1;
wire   [63:0] p_cast56_fu_872_p1;
wire    ap_CS_fsm_state12;
wire   [8:0] zext_ln361_fu_331_p1;
wire   [4:0] trunc_ln368_fu_356_p1;
wire   [4:0] add_fu_360_p2;
wire   [6:0] tmp_fu_370_p3;
wire   [7:0] zext_ln374_1_fu_378_p1;
wire   [7:0] zext_ln374_fu_366_p1;
wire   [9:0] tmp_s_fu_392_p3;
wire   [10:0] zext_ln374_3_fu_400_p1;
wire   [10:0] zext_ln374_2_fu_388_p1;
wire   [5:0] empty_119_fu_410_p1;
wire   [11:0] tmp_123_cast_fu_413_p3;
wire   [11:0] tmp_46_fu_421_p3;
wire   [4:0] empty_121_fu_434_p1;
wire   [10:0] tmp_47_fu_445_p3;
wire   [11:0] tmp_125_cast_fu_437_p3;
wire   [11:0] tmp_126_cast_fu_452_p1;
wire   [0:0] icmp_ln372_fu_480_p2;
wire   [2:0] add_ln370_fu_474_p2;
wire   [7:0] zext_ln374_4_fu_502_p1;
wire   [7:0] add_ln374_2_fu_506_p2;
wire   [4:0] select_ln370_fu_486_p3;
wire   [11:0] tmp_128_cast_fu_511_p3;
wire   [11:0] add_ln374_4_fu_523_p2;
wire   [7:0] trunc_ln374_fu_540_p1;
wire   [7:0] zext_ln374_5_fu_543_p1;
wire   [7:0] add_ln374_3_fu_546_p2;
wire   [11:0] tmp_130_cast_fu_552_p3;
wire   [11:0] add_ln374_5_fu_560_p2;
wire   [0:0] icmp_ln380_fu_588_p2;
wire   [2:0] add_ln378_fu_582_p2;
wire   [7:0] zext_ln384_1_fu_614_p1;
wire   [7:0] add_ln384_fu_618_p2;
wire   [9:0] tmp_74_fu_623_p3;
wire   [10:0] zext_ln384_fu_610_p1;
wire   [10:0] add_ln384_1_fu_635_p2;
wire   [12:0] tmp_75_fu_640_p3;
wire   [0:0] icmp_ln382_fu_658_p2;
wire   [0:0] xor_ln378_fu_652_p2;
wire   [2:0] select_ln378_fu_594_p3;
wire   [0:0] and_ln378_fu_664_p2;
wire   [0:0] or_ln380_fu_676_p2;
wire   [2:0] add_ln380_fu_670_p2;
wire   [62:0] zext_ln384_2_fu_631_p1;
wire   [62:0] zext_ln384_3_fu_698_p1;
wire   [62:0] add_ln384_2_fu_702_p2;
wire   [8:0] trunc_ln384_fu_708_p1;
wire   [10:0] trunc_ln384_1_fu_720_p1;
wire   [11:0] p_shl4_cast_fu_712_p3;
wire   [11:0] p_shl5_cast_fu_724_p3;
wire   [62:0] zext_ln380_fu_648_p1;
wire   [62:0] add_ln384_3_fu_738_p2;
wire   [8:0] trunc_ln384_2_fu_744_p1;
wire   [10:0] trunc_ln384_3_fu_756_p1;
wire   [11:0] p_shl2_cast_fu_748_p3;
wire   [11:0] p_shl3_cast_fu_760_p3;
wire   [2:0] select_ln380_fu_682_p3;
wire   [11:0] sub_ln384_fu_732_p2;
wire   [11:0] zext_ln384_4_fu_774_p1;
wire   [11:0] add_ln384_4_fu_778_p2;
wire   [11:0] sub_ln384_1_fu_768_p2;
wire   [5:0] add_ln380_1_fu_801_p2;
wire   [11:0] p_cast53_fu_837_p1;
wire   [11:0] empty_126_fu_841_p2;
wire   [11:0] p_cast55_fu_863_p1;
wire   [11:0] empty_130_fu_867_p2;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln368_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln368_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_1_reg_257 <= 3'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln378_reg_961 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        a_1_reg_257 <= select_ln378_1_reg_965;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln370_reg_931 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_reg_224 <= select_ln370_1_reg_935;
    end else if (((icmp_ln368_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        a_reg_224 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_5_reg_279 <= 3'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln378_reg_961 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        b_5_reg_279 <= select_ln380_1_reg_970;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln370_fu_468_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_reg_235 <= add_ln372_fu_534_p2;
    end else if (((icmp_ln368_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        b_reg_235 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_reg_290 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln378_fu_576_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        c_reg_290 <= add_ln382_fu_795_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2110_fu_831_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        empty_123_reg_301 <= empty_124_fu_825_p2;
    end else if (((icmp_ln368_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_123_reg_301 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        empty_127_reg_312 <= 7'd0;
    end else if (((exitcond9_fu_857_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        empty_127_reg_312 <= empty_128_fu_851_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_18_reg_203 <= i_19_fu_819_p2;
    end else if (((icmp_ln361_fu_335_p2 == 1'd1) & (tmp_73_fu_323_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_18_reg_203 <= i_fu_341_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten21_reg_246 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln378_fu_576_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten21_reg_246 <= add_ln378_1_fu_570_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten7_reg_268 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln378_fu_576_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten7_reg_268 <= select_ln380_2_fu_807_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln370_fu_468_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_213 <= add_ln370_1_fu_462_p2;
    end else if (((icmp_ln368_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_213 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln368_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln374_1_reg_910 <= add_ln374_1_fu_404_p2;
        add_ln374_reg_904 <= add_ln374_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln378_fu_576_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln384_5_reg_980 <= add_ln384_5_fu_789_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln368_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_120_reg_916[11 : 4] <= empty_120_fu_428_p2[11 : 4];
        empty_122_reg_921[11 : 3] <= empty_122_fu_456_p2[11 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_73_fu_323_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln361_reg_881 <= icmp_ln361_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln370_reg_931 <= icmp_ln370_fu_468_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln378_reg_961 <= icmp_ln378_fu_576_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln370_fu_468_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln370_1_reg_935 <= select_ln370_1_fu_494_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln378_fu_576_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln378_1_reg_965 <= select_ln378_1_fu_602_p3;
        select_ln380_1_reg_970 <= select_ln380_1_fu_690_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln361_fu_335_p2 == 1'd1) & (tmp_73_fu_323_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        sub_reg_890 <= sub_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_73_reg_877 <= index[32'd8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln370_fu_468_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        zext_ln374_6_reg_941[4 : 0] <= zext_ln374_6_fu_519_p1[4 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln370_fu_468_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln378_fu_576_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln378_reg_961 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_a_1_phi_fu_261_p4 = select_ln378_1_reg_965;
    end else begin
        ap_phi_mux_a_1_phi_fu_261_p4 = a_1_reg_257;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln370_reg_931 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_a_phi_fu_228_p4 = select_ln370_1_reg_935;
    end else begin
        ap_phi_mux_a_phi_fu_228_p4 = a_reg_224;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln378_reg_961 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_b_5_phi_fu_283_p4 = select_ln380_1_reg_970;
    end else begin
        ap_phi_mux_b_5_phi_fu_283_p4 = b_5_reg_279;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln361_reg_881 == 1'd1) & (tmp_73_reg_877 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        n_patches_ap_vld = 1'b1;
    end else begin
        n_patches_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        patches_parameters_V_address0 = p_cast56_fu_872_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        patches_parameters_V_address0 = zext_ln384_6_fu_815_p1;
    end else begin
        patches_parameters_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        patches_parameters_V_ce0 = 1'b1;
    end else begin
        patches_parameters_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        patches_parameters_V_ce1 = 1'b1;
    end else begin
        patches_parameters_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        patches_parameters_V_d0 = 32'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        patches_parameters_V_d0 = patches_parameters_V_q1;
    end else begin
        patches_parameters_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond9_fu_857_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln378_reg_961 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        patches_parameters_V_we0 = 1'b1;
    end else begin
        patches_parameters_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        patches_superpoints_address0 = p_cast_fu_846_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        patches_superpoints_address0 = zext_ln374_8_fu_565_p1;
    end else begin
        patches_superpoints_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        patches_superpoints_ce0 = 1'b1;
    end else begin
        patches_superpoints_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        patches_superpoints_ce1 = 1'b1;
    end else begin
        patches_superpoints_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        patches_superpoints_d0 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        patches_superpoints_d0 = patches_superpoints_q1;
    end else begin
        patches_superpoints_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond2110_fu_831_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln370_reg_931 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        patches_superpoints_we0 = 1'b1;
    end else begin
        patches_superpoints_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln361_fu_335_p2 == 1'd1) & (tmp_73_fu_323_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & ((icmp_ln361_fu_335_p2 == 1'd0) | (tmp_73_fu_323_p3 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln368_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln370_fu_468_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln370_fu_468_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln378_fu_576_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln378_fu_576_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state9 : begin
            if (((exitcond2110_fu_831_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((exitcond9_fu_857_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_fu_360_p2 = (trunc_ln368_fu_356_p1 + 5'd1);

assign add_ln370_1_fu_462_p2 = (indvar_flatten_reg_213 + 7'd1);

assign add_ln370_fu_474_p2 = (ap_phi_mux_a_phi_fu_228_p4 + 3'd1);

assign add_ln372_fu_534_p2 = (select_ln370_fu_486_p3 + 5'd1);

assign add_ln374_1_fu_404_p2 = (zext_ln374_3_fu_400_p1 + zext_ln374_2_fu_388_p1);

assign add_ln374_2_fu_506_p2 = (add_ln374_reg_904 + zext_ln374_4_fu_502_p1);

assign add_ln374_3_fu_546_p2 = (trunc_ln374_fu_540_p1 + zext_ln374_5_fu_543_p1);

assign add_ln374_4_fu_523_p2 = (tmp_128_cast_fu_511_p3 + zext_ln374_6_fu_519_p1);

assign add_ln374_5_fu_560_p2 = (tmp_130_cast_fu_552_p3 + zext_ln374_6_reg_941);

assign add_ln374_fu_382_p2 = (zext_ln374_1_fu_378_p1 + zext_ln374_fu_366_p1);

assign add_ln378_1_fu_570_p2 = (indvar_flatten21_reg_246 + 7'd1);

assign add_ln378_fu_582_p2 = (ap_phi_mux_a_1_phi_fu_261_p4 + 3'd1);

assign add_ln380_1_fu_801_p2 = (indvar_flatten7_reg_268 + 6'd1);

assign add_ln380_fu_670_p2 = (select_ln378_fu_594_p3 + 3'd1);

assign add_ln382_fu_795_p2 = (select_ln380_fu_682_p3 + 3'd1);

assign add_ln384_1_fu_635_p2 = (add_ln374_1_reg_910 + zext_ln384_fu_610_p1);

assign add_ln384_2_fu_702_p2 = (zext_ln384_2_fu_631_p1 + zext_ln384_3_fu_698_p1);

assign add_ln384_3_fu_738_p2 = (zext_ln380_fu_648_p1 + zext_ln384_3_fu_698_p1);

assign add_ln384_4_fu_778_p2 = (sub_ln384_fu_732_p2 + zext_ln384_4_fu_774_p1);

assign add_ln384_5_fu_789_p2 = (sub_ln384_1_fu_768_p2 + zext_ln384_4_fu_774_p1);

assign add_ln384_fu_618_p2 = (add_ln374_reg_904 + zext_ln384_1_fu_614_p1);

assign and_ln378_fu_664_p2 = (xor_ln378_fu_652_p2 & icmp_ln382_fu_658_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign empty_119_fu_410_p1 = sub_reg_890[5:0];

assign empty_120_fu_428_p2 = (tmp_123_cast_fu_413_p3 + tmp_46_fu_421_p3);

assign empty_121_fu_434_p1 = sub_reg_890[4:0];

assign empty_122_fu_456_p2 = (tmp_125_cast_fu_437_p3 - tmp_126_cast_fu_452_p1);

assign empty_124_fu_825_p2 = (empty_123_reg_301 + 7'd1);

assign empty_126_fu_841_p2 = (empty_120_reg_916 + p_cast53_fu_837_p1);

assign empty_128_fu_851_p2 = (empty_127_reg_312 + 7'd1);

assign empty_130_fu_867_p2 = (empty_122_reg_921 + p_cast55_fu_863_p1);

assign exitcond2110_fu_831_p2 = ((empty_123_reg_301 == 7'd80) ? 1'b1 : 1'b0);

assign exitcond9_fu_857_p2 = ((empty_127_reg_312 == 7'd120) ? 1'b1 : 1'b0);

assign i_19_fu_819_p2 = (i_18_reg_203 + 8'd1);

assign i_fu_341_p1 = index[7:0];

assign icmp_ln361_fu_335_p2 = (($signed(zext_ln361_fu_331_p1) > $signed(index)) ? 1'b1 : 1'b0);

assign icmp_ln368_fu_351_p2 = ((i_18_reg_203 < sub_reg_890) ? 1'b1 : 1'b0);

assign icmp_ln370_fu_468_p2 = ((indvar_flatten_reg_213 == 7'd80) ? 1'b1 : 1'b0);

assign icmp_ln372_fu_480_p2 = ((b_reg_235 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln378_fu_576_p2 = ((indvar_flatten21_reg_246 == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln380_fu_588_p2 = ((indvar_flatten7_reg_268 == 6'd24) ? 1'b1 : 1'b0);

assign icmp_ln382_fu_658_p2 = ((c_reg_290 == 3'd6) ? 1'b1 : 1'b0);

assign n_patches = sub_reg_890;

assign or_ln380_fu_676_p2 = (icmp_ln380_fu_588_p2 | and_ln378_fu_664_p2);

assign p_cast53_fu_837_p1 = empty_123_reg_301;

assign p_cast55_fu_863_p1 = empty_127_reg_312;

assign p_cast56_fu_872_p1 = empty_130_fu_867_p2;

assign p_cast_fu_846_p1 = empty_126_fu_841_p2;

assign p_shl2_cast_fu_748_p3 = {{trunc_ln384_2_fu_744_p1}, {3'd0}};

assign p_shl3_cast_fu_760_p3 = {{trunc_ln384_3_fu_756_p1}, {1'd0}};

assign p_shl4_cast_fu_712_p3 = {{trunc_ln384_fu_708_p1}, {3'd0}};

assign p_shl5_cast_fu_724_p3 = {{trunc_ln384_1_fu_720_p1}, {1'd0}};

assign patches_parameters_V_address1 = zext_ln384_5_fu_784_p1;

assign patches_superpoints_address1 = zext_ln374_7_fu_529_p1;

assign select_ln370_1_fu_494_p3 = ((icmp_ln372_fu_480_p2[0:0] == 1'b1) ? add_ln370_fu_474_p2 : ap_phi_mux_a_phi_fu_228_p4);

assign select_ln370_fu_486_p3 = ((icmp_ln372_fu_480_p2[0:0] == 1'b1) ? 5'd0 : b_reg_235);

assign select_ln378_1_fu_602_p3 = ((icmp_ln380_fu_588_p2[0:0] == 1'b1) ? add_ln378_fu_582_p2 : ap_phi_mux_a_1_phi_fu_261_p4);

assign select_ln378_fu_594_p3 = ((icmp_ln380_fu_588_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_b_5_phi_fu_283_p4);

assign select_ln380_1_fu_690_p3 = ((and_ln378_fu_664_p2[0:0] == 1'b1) ? add_ln380_fu_670_p2 : select_ln378_fu_594_p3);

assign select_ln380_2_fu_807_p3 = ((icmp_ln380_fu_588_p2[0:0] == 1'b1) ? 6'd1 : add_ln380_1_fu_801_p2);

assign select_ln380_fu_682_p3 = ((or_ln380_fu_676_p2[0:0] == 1'b1) ? 3'd0 : c_reg_290);

assign sub_fu_345_p2 = ($signed(n_patches_read) + $signed(8'd255));

assign sub_ln384_1_fu_768_p2 = (p_shl2_cast_fu_748_p3 - p_shl3_cast_fu_760_p3);

assign sub_ln384_fu_732_p2 = (p_shl4_cast_fu_712_p3 - p_shl5_cast_fu_724_p3);

assign tmp_123_cast_fu_413_p3 = {{empty_119_fu_410_p1}, {6'd0}};

assign tmp_125_cast_fu_437_p3 = {{empty_121_fu_434_p1}, {7'd0}};

assign tmp_126_cast_fu_452_p1 = tmp_47_fu_445_p3;

assign tmp_128_cast_fu_511_p3 = {{add_ln374_2_fu_506_p2}, {4'd0}};

assign tmp_130_cast_fu_552_p3 = {{add_ln374_3_fu_546_p2}, {4'd0}};

assign tmp_46_fu_421_p3 = {{sub_reg_890}, {4'd0}};

assign tmp_47_fu_445_p3 = {{sub_reg_890}, {3'd0}};

assign tmp_73_fu_323_p3 = index[32'd8];

assign tmp_74_fu_623_p3 = {{add_ln384_fu_618_p2}, {2'd0}};

assign tmp_75_fu_640_p3 = {{add_ln384_1_fu_635_p2}, {2'd0}};

assign tmp_fu_370_p3 = {{add_fu_360_p2}, {2'd0}};

assign tmp_s_fu_392_p3 = {{i_18_reg_203}, {2'd0}};

assign trunc_ln368_fu_356_p1 = i_18_reg_203[4:0];

assign trunc_ln374_fu_540_p1 = add_ln374_1_reg_910[7:0];

assign trunc_ln384_1_fu_720_p1 = add_ln384_2_fu_702_p2[10:0];

assign trunc_ln384_2_fu_744_p1 = add_ln384_3_fu_738_p2[8:0];

assign trunc_ln384_3_fu_756_p1 = add_ln384_3_fu_738_p2[10:0];

assign trunc_ln384_fu_708_p1 = add_ln384_2_fu_702_p2[8:0];

assign xor_ln378_fu_652_p2 = (icmp_ln380_fu_588_p2 ^ 1'd1);

assign zext_ln361_fu_331_p1 = n_patches_read;

assign zext_ln374_1_fu_378_p1 = tmp_fu_370_p3;

assign zext_ln374_2_fu_388_p1 = i_18_reg_203;

assign zext_ln374_3_fu_400_p1 = tmp_s_fu_392_p3;

assign zext_ln374_4_fu_502_p1 = select_ln370_1_fu_494_p3;

assign zext_ln374_5_fu_543_p1 = select_ln370_1_reg_935;

assign zext_ln374_6_fu_519_p1 = select_ln370_fu_486_p3;

assign zext_ln374_7_fu_529_p1 = add_ln374_4_fu_523_p2;

assign zext_ln374_8_fu_565_p1 = add_ln374_5_fu_560_p2;

assign zext_ln374_fu_366_p1 = add_fu_360_p2;

assign zext_ln380_fu_648_p1 = tmp_75_fu_640_p3;

assign zext_ln384_1_fu_614_p1 = select_ln378_1_fu_602_p3;

assign zext_ln384_2_fu_631_p1 = tmp_74_fu_623_p3;

assign zext_ln384_3_fu_698_p1 = select_ln380_1_fu_690_p3;

assign zext_ln384_4_fu_774_p1 = select_ln380_fu_682_p3;

assign zext_ln384_5_fu_784_p1 = add_ln384_4_fu_778_p2;

assign zext_ln384_6_fu_815_p1 = add_ln384_5_reg_980;

assign zext_ln384_fu_610_p1 = select_ln378_1_fu_602_p3;

always @ (posedge ap_clk) begin
    empty_120_reg_916[3:0] <= 4'b0000;
    empty_122_reg_921[2:0] <= 3'b000;
    zext_ln374_6_reg_941[11:5] <= 7'b0000000;
end

endmodule //makePatches_ShadowQuilt_fromEdges_delete_patch
