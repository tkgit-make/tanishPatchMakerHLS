// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module makePatches_ShadowQuilt_fromEdges_mSP_findStartIndex (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        row_list_address0,
        row_list_ce0,
        row_list_q0,
        row_list_size,
        projectionToRow,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_pp0_stage0 = 8'd2;
parameter    ap_ST_fsm_pp0_stage1 = 8'd4;
parameter    ap_ST_fsm_pp0_stage2 = 8'd8;
parameter    ap_ST_fsm_pp0_stage3 = 8'd16;
parameter    ap_ST_fsm_pp0_stage4 = 8'd32;
parameter    ap_ST_fsm_pp0_stage5 = 8'd64;
parameter    ap_ST_fsm_state11 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] row_list_address0;
output   row_list_ce0;
input  [31:0] row_list_q0;
input  [31:0] row_list_size;
input  [63:0] projectionToRow;
output  [31:0] ap_return_0;
output  [63:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg row_list_ce0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] j_reg_73;
reg   [31:0] j_reg_73_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [63:0] p_x_assign_1_reg_85;
reg   [31:0] start_index_write_assign_reg_97;
reg   [63:0] start_value_write_assign_reg_109;
wire   [0:0] icmp_ln1537_fu_129_p2;
reg   [0:0] icmp_ln1537_reg_313;
reg   [0:0] icmp_ln1537_reg_313_pp0_iter1_reg;
wire   [63:0] sub_ln534_fu_143_p2;
reg   [63:0] sub_ln534_reg_322;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [63:0] sub_ln534_reg_322_pp0_iter1_reg;
wire   [63:0] sub_ln180_fu_148_p2;
reg   [63:0] sub_ln180_reg_329;
reg   [0:0] tmp_reg_334;
wire   [63:0] select_ln180_fu_162_p3;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state10_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] add_ln1537_fu_168_p2;
reg   [31:0] add_ln1537_reg_344;
wire    ap_CS_fsm_pp0_stage5;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire   [63:0] grp_fu_125_p1;
reg   [63:0] conv_reg_349;
reg   [63:0] dc_reg_355;
reg    ap_enable_reg_pp0_iter1;
wire   [0:0] icmp_ln1539_fu_225_p2;
reg   [0:0] icmp_ln1539_reg_365;
wire   [0:0] icmp_ln1539_1_fu_231_p2;
reg   [0:0] icmp_ln1539_1_reg_370;
wire   [0:0] icmp_ln1539_2_fu_237_p2;
reg   [0:0] icmp_ln1539_2_reg_375;
wire   [0:0] icmp_ln1539_3_fu_243_p2;
reg   [0:0] icmp_ln1539_3_reg_380;
wire   [31:0] select_ln1539_fu_269_p3;
wire   [63:0] select_ln1539_1_fu_277_p3;
wire   [63:0] select_ln1539_2_fu_284_p3;
wire    ap_block_pp0_stage5_subdone;
reg    ap_condition_pp0_flush_enable;
wire    ap_block_pp0_stage1_subdone;
reg   [31:0] ap_phi_mux_j_phi_fu_77_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] trunc_ln1541_cast_fu_134_p1;
wire   [63:0] grp_fu_121_p1;
wire    ap_block_pp0_stage1;
reg   [63:0] grp_fu_125_p0;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire  signed [63:0] sext_ln534_fu_139_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] data_V_fu_174_p1;
wire   [62:0] trunc_ln368_fu_177_p1;
wire   [63:0] p_Result_s_fu_185_p3;
wire   [63:0] bitcast_ln1539_fu_198_p1;
wire   [10:0] tmp_s_fu_201_p4;
wire   [51:0] trunc_ln1539_1_fu_211_p1;
wire   [10:0] tmp_134_fu_215_p4;
wire   [51:0] trunc_ln1539_fu_181_p1;
wire   [0:0] or_ln1539_fu_249_p2;
wire   [0:0] or_ln1539_1_fu_253_p2;
wire   [0:0] and_ln1539_fu_257_p2;
wire   [0:0] grp_fu_121_p2;
wire   [0:0] and_ln1539_1_fu_263_p2;
wire    ap_CS_fsm_state11;
wire    ap_block_pp0_stage1_00001;
reg   [7:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

makePatches_ShadowQuilt_fromEdges_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U157(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_reg_349),
    .din1(grp_fu_121_p1),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_121_p2)
);

makePatches_ShadowQuilt_fromEdges_sitodp_64ns_64_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sitodp_64ns_64_4_no_dsp_1_U158(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_125_p0),
    .ce(1'b1),
    .dout(grp_fu_125_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) | ((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1537_reg_313 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_reg_73 <= add_ln1537_reg_344;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_73 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1537_reg_313_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        p_x_assign_1_reg_85 <= select_ln1539_2_fu_284_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_x_assign_1_reg_85 <= 64'd9223372036854775807;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1537_reg_313_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        start_index_write_assign_reg_97 <= select_ln1539_fu_269_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        start_index_write_assign_reg_97 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1537_reg_313_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        start_value_write_assign_reg_109 <= select_ln1539_1_fu_277_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        start_value_write_assign_reg_109 <= 64'd9223372036854775807;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln1537_reg_344 <= add_ln1537_fu_168_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1537_reg_313 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_reg_349 <= grp_fu_125_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1537_reg_313 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dc_reg_355 <= grp_fu_125_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1537_reg_313 <= icmp_ln1537_fu_129_p2;
        icmp_ln1537_reg_313_pp0_iter1_reg <= icmp_ln1537_reg_313;
        j_reg_73_pp0_iter1_reg <= j_reg_73;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1537_reg_313_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln1539_1_reg_370 <= icmp_ln1539_1_fu_231_p2;
        icmp_ln1539_2_reg_375 <= icmp_ln1539_2_fu_237_p2;
        icmp_ln1539_3_reg_380 <= icmp_ln1539_3_fu_243_p2;
        icmp_ln1539_reg_365 <= icmp_ln1539_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1537_reg_313 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sub_ln180_reg_329 <= sub_ln180_fu_148_p2;
        sub_ln534_reg_322 <= sub_ln534_fu_143_p2;
        tmp_reg_334 <= sub_ln534_fu_143_p2[32'd63];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sub_ln534_reg_322_pp0_iter1_reg <= sub_ln534_reg_322;
    end
end

always @ (*) begin
    if (((icmp_ln1537_reg_313 == 1'd1) & (1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1537_reg_313 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_j_phi_fu_77_p4 = add_ln1537_reg_344;
    end else begin
        ap_phi_mux_j_phi_fu_77_p4 = j_reg_73;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_125_p0 = p_x_assign_1_reg_85;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_125_p0 = select_ln180_fu_162_p3;
        end else begin
            grp_fu_125_p0 = 'bx;
        end
    end else begin
        grp_fu_125_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        row_list_ce0 = 1'b1;
    end else begin
        row_list_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1537_fu_168_p2 = (j_reg_73 + 32'd1);

assign and_ln1539_1_fu_263_p2 = (grp_fu_121_p2 & and_ln1539_fu_257_p2);

assign and_ln1539_fu_257_p2 = (or_ln1539_fu_249_p2 & or_ln1539_1_fu_253_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = start_index_write_assign_reg_97;

assign ap_return_1 = start_value_write_assign_reg_109;

assign bitcast_ln1539_fu_198_p1 = conv_reg_349;

assign data_V_fu_174_p1 = dc_reg_355;

assign grp_fu_121_p1 = p_Result_s_fu_185_p3;

assign icmp_ln1537_fu_129_p2 = ((ap_phi_mux_j_phi_fu_77_p4 == row_list_size) ? 1'b1 : 1'b0);

assign icmp_ln1539_1_fu_231_p2 = ((trunc_ln1539_1_fu_211_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln1539_2_fu_237_p2 = ((tmp_134_fu_215_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln1539_3_fu_243_p2 = ((trunc_ln1539_fu_181_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln1539_fu_225_p2 = ((tmp_s_fu_201_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign or_ln1539_1_fu_253_p2 = (icmp_ln1539_3_reg_380 | icmp_ln1539_2_reg_375);

assign or_ln1539_fu_249_p2 = (icmp_ln1539_reg_365 | icmp_ln1539_1_reg_370);

assign p_Result_s_fu_185_p3 = {{1'd0}, {trunc_ln368_fu_177_p1}};

assign row_list_address0 = trunc_ln1541_cast_fu_134_p1;

assign select_ln1539_1_fu_277_p3 = ((and_ln1539_1_fu_263_p2[0:0] == 1'b1) ? sub_ln534_reg_322_pp0_iter1_reg : start_value_write_assign_reg_109);

assign select_ln1539_2_fu_284_p3 = ((and_ln1539_1_fu_263_p2[0:0] == 1'b1) ? sub_ln534_reg_322_pp0_iter1_reg : p_x_assign_1_reg_85);

assign select_ln1539_fu_269_p3 = ((and_ln1539_1_fu_263_p2[0:0] == 1'b1) ? j_reg_73_pp0_iter1_reg : start_index_write_assign_reg_97);

assign select_ln180_fu_162_p3 = ((tmp_reg_334[0:0] == 1'b1) ? sub_ln180_reg_329 : sub_ln534_reg_322);

assign sext_ln534_fu_139_p1 = $signed(row_list_q0);

assign sub_ln180_fu_148_p2 = (64'd0 - sub_ln534_fu_143_p2);

assign sub_ln534_fu_143_p2 = ($signed(sext_ln534_fu_139_p1) - $signed(projectionToRow));

assign tmp_134_fu_215_p4 = {{data_V_fu_174_p1[62:52]}};

assign tmp_s_fu_201_p4 = {{bitcast_ln1539_fu_198_p1[62:52]}};

assign trunc_ln1539_1_fu_211_p1 = bitcast_ln1539_fu_198_p1[51:0];

assign trunc_ln1539_fu_181_p1 = data_V_fu_174_p1[51:0];

assign trunc_ln1541_cast_fu_134_p1 = ap_phi_mux_j_phi_fu_77_p4;

assign trunc_ln368_fu_177_p1 = data_V_fu_174_p1[62:0];

endmodule //makePatches_ShadowQuilt_fromEdges_mSP_findStartIndex
