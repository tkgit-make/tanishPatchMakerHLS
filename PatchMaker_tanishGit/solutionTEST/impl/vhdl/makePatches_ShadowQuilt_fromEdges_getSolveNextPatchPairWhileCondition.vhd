-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity makePatches_ShadowQuilt_fromEdges_getSolveNextPatchPairWhileCondition is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    lastPatchIndex : IN STD_LOGIC_VECTOR (4 downto 0);
    repeat_original : IN STD_LOGIC_VECTOR (0 downto 0);
    white_space_height : IN STD_LOGIC_VECTOR (63 downto 0);
    previous_white_space_height : IN STD_LOGIC_VECTOR (63 downto 0);
    current_z_top_index : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters21056_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    patches_parameters21056_ce0 : OUT STD_LOGIC;
    patches_parameters21056_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_56786_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_56786_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_56786_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_56786_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_56786_p_ce : OUT STD_LOGIC;
    grp_fu_56790_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_56790_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_56790_p_ce : OUT STD_LOGIC );
end;


architecture behav of makePatches_ShadowQuilt_fromEdges_getSolveNextPatchPairWhileCondition is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_4014000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000010100000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_FD050F1C : STD_LOGIC_VECTOR (31 downto 0) := "11111101000001010000111100011100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln812_fu_104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln812_reg_238 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln810_2_fu_110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln810_2_reg_243 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_100_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_reg_248 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal bitcast_ln521_fu_127_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln810_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln810_reg_258 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln810_1_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln810_1_reg_263 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln811_fu_158_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_95_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_95_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_100_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_fu_116_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_119_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln368_fu_123_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_132_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln810_fu_142_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln810_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_95_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_146_fu_196_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln810_1_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln810_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln813_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln814_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln811_1_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln811_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln811_2_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln811_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_95_ce : STD_LOGIC;
    signal grp_fu_95_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_100_ce : STD_LOGIC;
    signal and_ln811_3_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component makePatches_ShadowQuilt_fromEdges_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component makePatches_ShadowQuilt_fromEdges_sitodp_64ns_64_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_return_preg <= and_ln811_3_fu_227_p2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                dc_reg_248 <= grp_fu_56790_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                icmp_ln810_1_reg_263 <= icmp_ln810_1_fu_152_p2;
                icmp_ln810_reg_258 <= icmp_ln810_fu_146_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln810_2_reg_243 <= icmp_ln810_2_fu_110_p2;
                icmp_ln812_reg_238 <= icmp_ln812_fu_104_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    and_ln810_fu_167_p2 <= (or_ln810_fu_163_p2 and grp_fu_56786_p_dout0);
    and_ln811_1_fu_215_p2 <= (xor_ln814_fu_190_p2 and icmp_ln813_fu_184_p2);
    and_ln811_2_fu_221_p2 <= (or_ln811_fu_179_p2 and and_ln811_1_fu_215_p2);
    and_ln811_3_fu_227_p2 <= (and_ln811_fu_209_p2 and and_ln811_2_fu_221_p2);
    and_ln811_fu_209_p2 <= (or_ln810_1_fu_204_p2 and and_ln810_fu_167_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state6, and_ln811_3_fu_227_p2, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return <= and_ln811_3_fu_227_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln521_fu_127_p1 <= zext_ln368_fu_123_p1;
    data_V_fu_116_p1 <= dc_reg_248;
    grp_fu_100_ce <= ap_const_logic_1;
    grp_fu_100_p0 <= white_space_height;
    grp_fu_100_p1 <= grp_fu_56790_p_dout0;
    grp_fu_56786_p_ce <= ap_const_logic_1;
    grp_fu_56786_p_din0 <= bitcast_ln521_fu_127_p1;
    grp_fu_56786_p_din1 <= ap_const_lv64_4014000000000000;
    grp_fu_56786_p_opcode <= ap_const_lv5_2;
    grp_fu_56790_p_ce <= ap_const_logic_1;
    grp_fu_56790_p_din0 <= white_space_height;
    grp_fu_95_ce <= ap_const_logic_1;
    grp_fu_95_opcode <= ap_const_lv5_2;
    grp_fu_95_p0 <= bitcast_ln521_fu_127_p1;
    grp_fu_95_p1 <= ap_const_lv64_4014000000000000;
    grp_fu_95_p2 <= grp_fu_56786_p_dout0;
    icmp_ln810_1_fu_152_p2 <= "1" when (trunc_ln810_fu_142_p1 = ap_const_lv52_0) else "0";
    icmp_ln810_2_fu_110_p2 <= "1" when (signed(white_space_height) > signed(ap_const_lv64_0)) else "0";
    icmp_ln810_fu_146_p2 <= "0" when (tmp_fu_132_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln812_fu_104_p2 <= "1" when (signed(white_space_height) > signed(ap_const_lv64_5)) else "0";
    icmp_ln813_fu_184_p2 <= "1" when (signed(p_read) > signed(current_z_top_index)) else "0";
    icmp_ln886_fu_173_p2 <= "1" when (signed(patches_parameters21056_q0) > signed(ap_const_lv32_FD050F1C)) else "0";
    or_ln810_1_fu_204_p2 <= (tmp_146_fu_196_p3 or icmp_ln810_2_reg_243);
    or_ln810_fu_163_p2 <= (icmp_ln810_reg_258 or icmp_ln810_1_reg_263);
    or_ln811_fu_179_p2 <= (icmp_ln886_fu_173_p2 or icmp_ln812_reg_238);
    p_Result_s_fu_119_p1 <= data_V_fu_116_p1(63 - 1 downto 0);
    patches_parameters21056_address0 <= zext_ln811_fu_158_p1(5 - 1 downto 0);

    patches_parameters21056_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            patches_parameters21056_ce0 <= ap_const_logic_1;
        else 
            patches_parameters21056_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_146_fu_196_p3 <= previous_white_space_height(63 downto 63);
    tmp_fu_132_p4 <= data_V_fu_116_p1(62 downto 52);
    trunc_ln810_fu_142_p1 <= data_V_fu_116_p1(52 - 1 downto 0);
    xor_ln814_fu_190_p2 <= (repeat_original xor ap_const_lv1_1);
    zext_ln368_fu_123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_119_p1),64));
    zext_ln811_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lastPatchIndex),64));
end behav;
