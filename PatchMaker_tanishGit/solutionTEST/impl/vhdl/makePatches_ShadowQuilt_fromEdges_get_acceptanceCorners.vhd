-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity makePatches_ShadowQuilt_fromEdges_get_acceptanceCorners is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read16 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read17 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read18 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of makePatches_ShadowQuilt_fromEdges_get_acceptanceCorners is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln220_fu_233_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal a_corner_min_V_1_fu_265_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln220_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_corner_min_V_3_fu_289_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_corner_max_V_1_fu_313_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_corner_max_V_3_fu_337_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_174 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_corner_max_V_reg_185 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_corner_max_V_reg_197 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_corner_min_V_reg_209 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_corner_min_V_reg_221 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln878_fu_245_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_249_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln878_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_corner_min_V_2_fu_273_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln878_10_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_297_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln886_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_corner_max_V_2_fu_321_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln886_8_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln874_1_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln874_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln256_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln874_2_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln874_3_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln266_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln261_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln266_1_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_7_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_9_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln273_fu_407_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln280_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln273_1_fu_415_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_corner_min_V_1_fu_429_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_corner_max_V_1_fu_437_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln266_fu_387_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln874_fu_361_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln886_fu_397_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln280_fu_451_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component makePatches_ShadowQuilt_fromEdges_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mux_42_32_1_1_U3166 : component makePatches_ShadowQuilt_fromEdges_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => p_read,
        din1 => p_read6,
        din2 => p_read10,
        din3 => p_read14,
        din4 => trunc_ln878_fu_245_p1,
        dout => tmp_fu_249_p6);

    mux_42_32_1_1_U3167 : component makePatches_ShadowQuilt_fromEdges_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => p_read1,
        din1 => p_read7,
        din2 => p_read11,
        din3 => p_read16,
        din4 => trunc_ln878_fu_245_p1,
        dout => b_corner_min_V_2_fu_273_p6);

    mux_42_32_1_1_U3168 : component makePatches_ShadowQuilt_fromEdges_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => p_read2,
        din1 => p_read8,
        din2 => p_read12,
        din3 => p_read17,
        din4 => trunc_ln878_fu_245_p1,
        dout => tmp_s_fu_297_p6);

    mux_42_32_1_1_U3169 : component makePatches_ShadowQuilt_fromEdges_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => p_read3,
        din1 => p_read9,
        din2 => p_read13,
        din3 => p_read18,
        din4 => trunc_ln878_fu_245_p1,
        dout => d_corner_max_V_2_fu_321_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    a_corner_min_V_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln220_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                a_corner_min_V_reg_221 <= a_corner_min_V_1_fu_265_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                a_corner_min_V_reg_221 <= ap_const_lv32_FFFFFFFF;
            end if; 
        end if;
    end process;

    b_corner_min_V_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln220_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                b_corner_min_V_reg_209 <= b_corner_min_V_3_fu_289_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                b_corner_min_V_reg_209 <= ap_const_lv32_FFFFFFFF;
            end if; 
        end if;
    end process;

    c_corner_max_V_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln220_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_corner_max_V_reg_197 <= c_corner_max_V_1_fu_313_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_corner_max_V_reg_197 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    d_corner_max_V_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln220_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                d_corner_max_V_reg_185 <= d_corner_max_V_3_fu_337_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                d_corner_max_V_reg_185 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln220_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_174 <= add_ln220_fu_233_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_174 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln220_fu_239_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln220_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    a_corner_min_V_1_fu_265_p3 <= 
        tmp_fu_249_p6 when (icmp_ln878_fu_259_p2(0) = '1') else 
        a_corner_min_V_reg_221;
    add_ln220_fu_233_p2 <= std_logic_vector(unsigned(i_reg_174) + unsigned(ap_const_lv3_1));
    and_ln256_fu_355_p2 <= (icmp_ln874_fu_345_p2 and icmp_ln874_1_fu_350_p2);
    and_ln261_fu_370_p2 <= (icmp_ln874_2_fu_365_p2 and and_ln256_fu_355_p2);
    and_ln266_1_fu_391_p2 <= (icmp_ln874_3_fu_376_p2 and and_ln261_fu_370_p2);
    and_ln266_fu_381_p2 <= (icmp_ln874_3_fu_376_p2 and icmp_ln874_2_fu_365_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= p_read4;
    ap_return_1 <= select_ln273_1_fu_415_p3;
    ap_return_10 <= zext_ln886_fu_397_p1;
    ap_return_11 <= zext_ln280_fu_451_p1;
    ap_return_2 <= p_read15;
    ap_return_3 <= b_corner_min_V_1_fu_429_p3;
    ap_return_4 <= p_read4;
    ap_return_5 <= select_ln273_fu_407_p3;
    ap_return_6 <= p_read15;
    ap_return_7 <= d_corner_max_V_1_fu_437_p3;
    ap_return_8 <= zext_ln266_fu_387_p1;
    ap_return_9 <= zext_ln874_fu_361_p1;
    b_corner_min_V_1_fu_429_p3 <= 
        select_ln273_fu_407_p3 when (icmp_ln878_9_fu_423_p2(0) = '1') else 
        b_corner_min_V_reg_209;
    b_corner_min_V_3_fu_289_p3 <= 
        b_corner_min_V_2_fu_273_p6 when (icmp_ln878_10_fu_283_p2(0) = '1') else 
        b_corner_min_V_reg_209;
    c_corner_max_V_1_fu_313_p3 <= 
        tmp_s_fu_297_p6 when (icmp_ln886_fu_307_p2(0) = '1') else 
        c_corner_max_V_reg_197;
    d_corner_max_V_1_fu_437_p3 <= 
        select_ln273_fu_407_p3 when (icmp_ln878_9_fu_423_p2(0) = '1') else 
        d_corner_max_V_reg_185;
    d_corner_max_V_3_fu_337_p3 <= 
        d_corner_max_V_2_fu_321_p6 when (icmp_ln886_8_fu_331_p2(0) = '1') else 
        d_corner_max_V_reg_185;
    icmp_ln220_fu_239_p2 <= "1" when (i_reg_174 = ap_const_lv3_4) else "0";
    icmp_ln874_1_fu_350_p2 <= "1" when (b_corner_min_V_reg_209 = p_read16) else "0";
    icmp_ln874_2_fu_365_p2 <= "1" when (c_corner_max_V_reg_197 = p_read17) else "0";
    icmp_ln874_3_fu_376_p2 <= "1" when (d_corner_max_V_reg_185 = p_read18) else "0";
    icmp_ln874_fu_345_p2 <= "1" when (a_corner_min_V_reg_221 = p_read14) else "0";
    icmp_ln878_10_fu_283_p2 <= "1" when (signed(b_corner_min_V_2_fu_273_p6) < signed(b_corner_min_V_reg_209)) else "0";
    icmp_ln878_9_fu_423_p2 <= "1" when (signed(b_corner_min_V_reg_209) < signed(d_corner_max_V_reg_185)) else "0";
    icmp_ln878_fu_259_p2 <= "1" when (signed(tmp_fu_249_p6) < signed(a_corner_min_V_reg_221)) else "0";
    icmp_ln886_7_fu_401_p2 <= "1" when (signed(c_corner_max_V_reg_197) > signed(a_corner_min_V_reg_221)) else "0";
    icmp_ln886_8_fu_331_p2 <= "1" when (signed(d_corner_max_V_2_fu_321_p6) > signed(d_corner_max_V_reg_185)) else "0";
    icmp_ln886_fu_307_p2 <= "1" when (signed(tmp_s_fu_297_p6) > signed(c_corner_max_V_reg_197)) else "0";
    or_ln280_fu_445_p2 <= (icmp_ln886_7_fu_401_p2 or icmp_ln878_9_fu_423_p2);
    select_ln273_1_fu_415_p3 <= 
        b_corner_min_V_reg_209 when (icmp_ln886_7_fu_401_p2(0) = '1') else 
        a_corner_min_V_reg_221;
    select_ln273_fu_407_p3 <= 
        b_corner_min_V_reg_209 when (icmp_ln886_7_fu_401_p2(0) = '1') else 
        c_corner_max_V_reg_197;
    trunc_ln878_fu_245_p1 <= i_reg_174(2 - 1 downto 0);
    zext_ln266_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln266_fu_381_p2),32));
    zext_ln280_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln280_fu_445_p2),32));
    zext_ln874_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln256_fu_355_p2),32));
    zext_ln886_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln266_1_fu_391_p2),32));
end behav;
