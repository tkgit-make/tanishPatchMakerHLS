// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MPSQ_delete_patch_patches_parameters (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        index,
        n_patches,
        patches_parameters_address0,
        patches_parameters_ce0,
        patches_parameters_we0,
        patches_parameters_d0,
        patches_parameters_address1,
        patches_parameters_ce1,
        patches_parameters_q1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_pp0_stage0 = 6'd4;
parameter    ap_ST_fsm_state8 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state12 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] index;
input  [7:0] n_patches;
output  [8:0] patches_parameters_address0;
output   patches_parameters_ce0;
output   patches_parameters_we0;
output  [31:0] patches_parameters_d0;
output  [8:0] patches_parameters_address1;
output   patches_parameters_ce1;
input  [31:0] patches_parameters_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] patches_parameters_address0;
reg patches_parameters_ce0;
reg patches_parameters_we0;
reg[31:0] patches_parameters_d0;
reg patches_parameters_ce1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [14:0] indvar_flatten38_reg_148;
reg   [7:0] i_10_reg_159;
reg   [7:0] indvar_flatten13_reg_168;
reg   [2:0] a_reg_179;
reg   [5:0] indvar_flatten_reg_190;
reg   [2:0] b_reg_201;
reg   [2:0] c_reg_213;
reg   [6:0] indvar_flatten60_reg_225;
reg   [2:0] a_2_reg_236;
reg   [5:0] indvar_flatten46_reg_247;
reg   [2:0] b_4_reg_258;
reg   [2:0] c_4_reg_269;
wire   [7:0] add_ln458_1_fu_306_p2;
reg   [7:0] add_ln458_1_reg_910;
wire   [7:0] i_fu_316_p2;
wire    ap_CS_fsm_state2;
wire   [14:0] bound19_fu_352_p2;
reg   [14:0] bound19_reg_920;
wire   [14:0] add_ln458_5_fu_358_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln458_fu_364_p2;
reg   [0:0] icmp_ln458_reg_930;
reg   [0:0] icmp_ln458_reg_930_pp0_iter1_reg;
reg   [0:0] icmp_ln458_reg_930_pp0_iter2_reg;
reg   [0:0] icmp_ln458_reg_930_pp0_iter3_reg;
wire   [0:0] icmp_ln461_fu_375_p2;
reg   [0:0] icmp_ln461_reg_934;
wire   [7:0] select_ln458_1_fu_389_p3;
reg   [7:0] select_ln458_1_reg_940;
wire   [1:0] trunc_ln458_fu_397_p1;
reg   [1:0] trunc_ln458_reg_947;
wire   [0:0] xor_ln458_fu_401_p2;
reg   [0:0] xor_ln458_reg_952;
wire   [0:0] icmp_ln467_fu_407_p2;
reg   [0:0] icmp_ln467_reg_957;
wire   [0:0] and_ln458_1_fu_413_p2;
reg   [0:0] and_ln458_1_reg_962;
wire   [0:0] or_ln461_fu_425_p2;
reg   [0:0] or_ln461_reg_967;
wire   [2:0] select_ln461_1_fu_431_p3;
reg   [2:0] select_ln461_1_reg_972;
wire   [5:0] select_ln467_2_fu_445_p3;
wire   [7:0] select_ln461_2_fu_459_p3;
wire   [2:0] select_ln467_fu_606_p3;
reg   [2:0] select_ln467_reg_989;
wire   [2:0] select_ln467_1_fu_614_p3;
reg   [2:0] select_ln467_1_reg_994;
reg    ap_enable_reg_pp0_iter1;
wire   [5:0] trunc_ln478_fu_632_p1;
reg   [5:0] trunc_ln478_reg_999;
wire   [7:0] trunc_ln478_1_fu_636_p1;
reg   [7:0] trunc_ln478_1_reg_1004;
wire   [5:0] trunc_ln478_2_fu_646_p1;
reg   [5:0] trunc_ln478_2_reg_1009;
wire   [7:0] trunc_ln478_3_fu_650_p1;
reg   [7:0] trunc_ln478_3_reg_1014;
wire   [2:0] add_ln473_fu_654_p2;
reg   [2:0] add_ln473_reg_1019;
wire   [8:0] add_ln478_7_fu_714_p2;
reg   [8:0] add_ln478_7_reg_1029;
reg   [8:0] add_ln478_7_reg_1029_pp0_iter3_reg;
reg   [31:0] patches_parameters_load_reg_1034;
reg    ap_enable_reg_pp0_iter3;
wire   [6:0] add_ln485_1_fu_724_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state9_pp1_stage0_iter0;
wire    ap_block_state10_pp1_stage0_iter1;
wire    ap_block_state11_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln485_fu_730_p2;
reg   [0:0] icmp_ln485_reg_1044;
reg   [0:0] icmp_ln485_reg_1044_pp1_iter1_reg;
wire   [2:0] select_ln485_1_fu_756_p3;
reg   [2:0] select_ln485_1_reg_1048;
wire   [2:0] select_ln491_fu_794_p3;
reg   [2:0] select_ln491_reg_1054;
wire   [2:0] select_ln491_1_fu_802_p3;
reg   [2:0] select_ln491_1_reg_1059;
wire   [2:0] add_ln497_fu_810_p2;
wire   [5:0] select_ln491_2_fu_822_p3;
wire   [8:0] add_ln502_2_fu_889_p2;
reg   [8:0] add_ln502_2_reg_1075;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
wire    ap_CS_fsm_state8;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state9;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg   [7:0] ap_phi_mux_i_10_phi_fu_162_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_a_phi_fu_183_p4;
reg   [2:0] ap_phi_mux_b_phi_fu_205_p4;
reg   [2:0] ap_phi_mux_c_phi_fu_217_p4;
reg   [2:0] ap_phi_mux_a_2_phi_fu_240_p4;
wire    ap_block_pp1_stage0;
reg   [2:0] ap_phi_mux_b_4_phi_fu_262_p4;
wire   [63:0] zext_ln478_9_fu_709_p1;
wire   [63:0] zext_ln478_10_fu_720_p1;
wire   [63:0] zext_ln502_4_fu_895_p1;
wire   [7:0] add_ln458_fu_280_p2;
wire   [7:0] sub_ln458_fu_286_p2;
wire   [0:0] empty_fu_292_p2;
wire   [7:0] umax16_fu_298_p3;
wire   [7:0] sub_ln457_fu_312_p2;
wire   [7:0] add_ln458_2_fu_322_p2;
wire   [7:0] sub_ln458_1_fu_327_p2;
wire   [10:0] tmp_fu_340_p3;
wire   [14:0] p_shl_fu_332_p3;
wire   [14:0] p_shl2_fu_348_p1;
wire   [7:0] i_12_fu_369_p2;
wire   [2:0] select_ln458_fu_381_p3;
wire   [2:0] add_ln461_fu_419_p2;
wire   [5:0] add_ln467_1_fu_439_p2;
wire   [7:0] add_ln461_1_fu_453_p2;
wire   [1:0] add_ln458_4_fu_467_p2;
wire   [3:0] tmp_s_fu_476_p3;
wire   [4:0] zext_ln478_1_fu_484_p1;
wire   [4:0] zext_ln478_fu_472_p1;
wire   [9:0] tmp_7_fu_497_p3;
wire   [10:0] zext_ln478_3_fu_504_p1;
wire   [10:0] zext_ln478_2_fu_494_p1;
wire   [0:0] icmp_ln473_fu_514_p2;
wire   [4:0] add_ln478_fu_488_p2;
wire   [4:0] zext_ln478_5_fu_535_p1;
wire   [4:0] add_ln478_2_fu_538_p2;
wire   [6:0] tmp_34_fu_544_p3;
wire   [10:0] add_ln478_1_fu_508_p2;
wire   [10:0] zext_ln478_4_fu_532_p1;
wire   [10:0] add_ln478_3_fu_556_p2;
wire   [12:0] tmp_35_fu_562_p3;
wire   [0:0] xor_ln461_fu_574_p2;
wire   [0:0] and_ln458_fu_520_p2;
wire   [0:0] or_ln461_1_fu_579_p2;
wire   [2:0] select_ln461_fu_525_p3;
wire   [0:0] and_ln461_fu_584_p2;
wire   [0:0] or_ln467_fu_596_p2;
wire   [0:0] or_ln467_1_fu_601_p2;
wire   [2:0] add_ln467_fu_590_p2;
wire   [62:0] zext_ln478_6_fu_552_p1;
wire   [62:0] zext_ln478_7_fu_622_p1;
wire   [62:0] add_ln478_4_fu_626_p2;
wire   [62:0] zext_ln467_fu_570_p1;
wire   [62:0] add_ln478_5_fu_640_p2;
wire   [8:0] p_shl5_cast_fu_660_p3;
wire   [8:0] p_shl6_cast_fu_667_p3;
wire   [8:0] p_shl3_cast_fu_680_p3;
wire   [8:0] p_shl4_cast_fu_687_p3;
wire   [8:0] sub_ln478_fu_674_p2;
wire   [8:0] zext_ln478_8_fu_700_p1;
wire   [8:0] add_ln478_6_fu_703_p2;
wire   [8:0] sub_ln478_1_fu_694_p2;
wire   [0:0] icmp_ln491_fu_742_p2;
wire   [2:0] add_ln485_fu_736_p2;
wire   [0:0] icmp_ln497_fu_770_p2;
wire   [0:0] xor_ln485_fu_764_p2;
wire   [2:0] select_ln485_fu_748_p3;
wire   [0:0] and_ln485_fu_776_p2;
wire   [0:0] or_ln491_fu_788_p2;
wire   [2:0] add_ln491_fu_782_p2;
wire   [5:0] add_ln491_1_fu_816_p2;
wire   [4:0] tmp_8_fu_830_p3;
wire   [6:0] zext_ln502_fu_837_p1;
wire   [6:0] add_ln502_fu_841_p2;
wire   [6:0] zext_ln502_1_fu_847_p1;
wire   [6:0] add_ln502_1_fu_850_p2;
wire   [5:0] trunc_ln502_fu_856_p1;
wire   [7:0] tmp_36_fu_868_p3;
wire   [8:0] p_shl9_cast_fu_860_p3;
wire   [8:0] zext_ln502_2_fu_876_p1;
wire   [8:0] sub_ln502_fu_880_p2;
wire   [8:0] zext_ln502_3_fu_886_p1;
wire    ap_CS_fsm_state12;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state9)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        a_2_reg_236 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln485_reg_1044 == 1'd0))) begin
        a_2_reg_236 <= select_ln485_1_reg_1048;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln458_reg_930 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        a_reg_179 <= select_ln461_1_reg_972;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_reg_179 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        b_4_reg_258 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln485_reg_1044 == 1'd0))) begin
        b_4_reg_258 <= select_ln491_1_reg_1059;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln458_reg_930_pp0_iter1_reg == 1'd0))) begin
        b_reg_201 <= select_ln467_1_reg_994;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        b_reg_201 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c_4_reg_269 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln485_fu_730_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        c_4_reg_269 <= add_ln497_fu_810_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln458_reg_930_pp0_iter1_reg == 1'd0))) begin
        c_reg_213 <= add_ln473_reg_1019;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c_reg_213 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln458_reg_930 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_10_reg_159 <= select_ln458_1_reg_940;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_10_reg_159 <= i_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln458_fu_364_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_168 <= select_ln461_2_fu_459_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten13_reg_168 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln458_fu_364_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten38_reg_148 <= add_ln458_5_fu_358_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten38_reg_148 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_flatten46_reg_247 <= 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln485_fu_730_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten46_reg_247 <= select_ln491_2_fu_822_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_flatten60_reg_225 <= 7'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln485_fu_730_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten60_reg_225 <= add_ln485_1_fu_724_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln458_fu_364_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_190 <= select_ln467_2_fu_445_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_190 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln458_1_reg_910 <= add_ln458_1_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln458_reg_930 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        add_ln473_reg_1019 <= add_ln473_fu_654_p2;
        select_ln467_1_reg_994 <= select_ln467_1_fu_614_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln458_reg_930_pp0_iter1_reg == 1'd0))) begin
        add_ln478_7_reg_1029 <= add_ln478_7_fu_714_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln478_7_reg_1029_pp0_iter3_reg <= add_ln478_7_reg_1029;
        icmp_ln458_reg_930_pp0_iter2_reg <= icmp_ln458_reg_930_pp0_iter1_reg;
        icmp_ln458_reg_930_pp0_iter3_reg <= icmp_ln458_reg_930_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln485_reg_1044 == 1'd0))) begin
        add_ln502_2_reg_1075 <= add_ln502_2_fu_889_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln458_fu_364_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln458_1_reg_962 <= and_ln458_1_fu_413_p2;
        icmp_ln461_reg_934 <= icmp_ln461_fu_375_p2;
        icmp_ln467_reg_957 <= icmp_ln467_fu_407_p2;
        or_ln461_reg_967 <= or_ln461_fu_425_p2;
        trunc_ln458_reg_947 <= trunc_ln458_fu_397_p1;
        xor_ln458_reg_952 <= xor_ln458_fu_401_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound19_reg_920[14 : 3] <= bound19_fu_352_p2[14 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln458_reg_930 <= icmp_ln458_fu_364_p2;
        icmp_ln458_reg_930_pp0_iter1_reg <= icmp_ln458_reg_930;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln485_reg_1044 <= icmp_ln485_fu_730_p2;
        icmp_ln485_reg_1044_pp1_iter1_reg <= icmp_ln485_reg_1044;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln458_reg_930_pp0_iter2_reg == 1'd0))) begin
        patches_parameters_load_reg_1034 <= patches_parameters_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln458_fu_364_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln458_1_reg_940 <= select_ln458_1_fu_389_p3;
        select_ln461_1_reg_972 <= select_ln461_1_fu_431_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln458_reg_930 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln467_reg_989 <= select_ln467_fu_606_p3;
        trunc_ln478_1_reg_1004 <= trunc_ln478_1_fu_636_p1;
        trunc_ln478_2_reg_1009 <= trunc_ln478_2_fu_646_p1;
        trunc_ln478_3_reg_1014 <= trunc_ln478_3_fu_650_p1;
        trunc_ln478_reg_999 <= trunc_ln478_fu_632_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln485_fu_730_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        select_ln485_1_reg_1048 <= select_ln485_1_fu_756_p3;
        select_ln491_1_reg_1059 <= select_ln491_1_fu_802_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln485_fu_730_p2 == 1'd0))) begin
        select_ln491_reg_1054 <= select_ln491_fu_794_p3;
    end
end

always @ (*) begin
    if ((icmp_ln458_fu_364_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln485_fu_730_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln485_reg_1044 == 1'd0))) begin
        ap_phi_mux_a_2_phi_fu_240_p4 = select_ln485_1_reg_1048;
    end else begin
        ap_phi_mux_a_2_phi_fu_240_p4 = a_2_reg_236;
    end
end

always @ (*) begin
    if (((icmp_ln458_reg_930 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_a_phi_fu_183_p4 = select_ln461_1_reg_972;
    end else begin
        ap_phi_mux_a_phi_fu_183_p4 = a_reg_179;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln485_reg_1044 == 1'd0))) begin
        ap_phi_mux_b_4_phi_fu_262_p4 = select_ln491_1_reg_1059;
    end else begin
        ap_phi_mux_b_4_phi_fu_262_p4 = b_4_reg_258;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln458_reg_930_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_b_phi_fu_205_p4 = select_ln467_1_reg_994;
    end else begin
        ap_phi_mux_b_phi_fu_205_p4 = b_reg_201;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln458_reg_930_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_c_phi_fu_217_p4 = add_ln473_reg_1019;
    end else begin
        ap_phi_mux_c_phi_fu_217_p4 = c_reg_213;
    end
end

always @ (*) begin
    if (((icmp_ln458_reg_930 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_10_phi_fu_162_p4 = select_ln458_1_reg_940;
    end else begin
        ap_phi_mux_i_10_phi_fu_162_p4 = i_10_reg_159;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        patches_parameters_address0 = zext_ln502_4_fu_895_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        patches_parameters_address0 = zext_ln478_10_fu_720_p1;
    end else begin
        patches_parameters_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        patches_parameters_ce0 = 1'b1;
    end else begin
        patches_parameters_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        patches_parameters_ce1 = 1'b1;
    end else begin
        patches_parameters_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        patches_parameters_d0 = 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        patches_parameters_d0 = patches_parameters_load_reg_1034;
    end else begin
        patches_parameters_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln458_reg_930_pp0_iter3_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln485_reg_1044_pp1_iter1_reg == 1'd0)))) begin
        patches_parameters_we0 = 1'b1;
    end else begin
        patches_parameters_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln458_fu_364_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln458_fu_364_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln485_fu_730_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln485_fu_730_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln458_1_fu_306_p2 = (umax16_fu_298_p3 + index);

assign add_ln458_2_fu_322_p2 = (add_ln458_1_reg_910 + 8'd1);

assign add_ln458_4_fu_467_p2 = (trunc_ln458_reg_947 + 2'd1);

assign add_ln458_5_fu_358_p2 = (indvar_flatten38_reg_148 + 15'd1);

assign add_ln458_fu_280_p2 = ($signed(n_patches) + $signed(8'd255));

assign add_ln461_1_fu_453_p2 = (indvar_flatten13_reg_168 + 8'd1);

assign add_ln461_fu_419_p2 = (select_ln458_fu_381_p3 + 3'd1);

assign add_ln467_1_fu_439_p2 = (indvar_flatten_reg_190 + 6'd1);

assign add_ln467_fu_590_p2 = (select_ln461_fu_525_p3 + 3'd1);

assign add_ln473_fu_654_p2 = (select_ln467_fu_606_p3 + 3'd1);

assign add_ln478_1_fu_508_p2 = (zext_ln478_3_fu_504_p1 + zext_ln478_2_fu_494_p1);

assign add_ln478_2_fu_538_p2 = (add_ln478_fu_488_p2 + zext_ln478_5_fu_535_p1);

assign add_ln478_3_fu_556_p2 = (add_ln478_1_fu_508_p2 + zext_ln478_4_fu_532_p1);

assign add_ln478_4_fu_626_p2 = (zext_ln478_6_fu_552_p1 + zext_ln478_7_fu_622_p1);

assign add_ln478_5_fu_640_p2 = (zext_ln467_fu_570_p1 + zext_ln478_7_fu_622_p1);

assign add_ln478_6_fu_703_p2 = (sub_ln478_fu_674_p2 + zext_ln478_8_fu_700_p1);

assign add_ln478_7_fu_714_p2 = (sub_ln478_1_fu_694_p2 + zext_ln478_8_fu_700_p1);

assign add_ln478_fu_488_p2 = (zext_ln478_1_fu_484_p1 + zext_ln478_fu_472_p1);

assign add_ln485_1_fu_724_p2 = (indvar_flatten60_reg_225 + 7'd1);

assign add_ln485_fu_736_p2 = (ap_phi_mux_a_2_phi_fu_240_p4 + 3'd1);

assign add_ln491_1_fu_816_p2 = (indvar_flatten46_reg_247 + 6'd1);

assign add_ln491_fu_782_p2 = (select_ln485_fu_748_p3 + 3'd1);

assign add_ln497_fu_810_p2 = (select_ln491_fu_794_p3 + 3'd1);

assign add_ln502_1_fu_850_p2 = (add_ln502_fu_841_p2 + zext_ln502_1_fu_847_p1);

assign add_ln502_2_fu_889_p2 = (sub_ln502_fu_880_p2 + zext_ln502_3_fu_886_p1);

assign add_ln502_fu_841_p2 = (zext_ln502_fu_837_p1 + 7'd40);

assign and_ln458_1_fu_413_p2 = (xor_ln458_fu_401_p2 & icmp_ln467_fu_407_p2);

assign and_ln458_fu_520_p2 = (xor_ln458_reg_952 & icmp_ln473_fu_514_p2);

assign and_ln461_fu_584_p2 = (or_ln461_1_fu_579_p2 & and_ln458_fu_520_p2);

assign and_ln485_fu_776_p2 = (xor_ln485_fu_764_p2 & icmp_ln497_fu_770_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign bound19_fu_352_p2 = (p_shl_fu_332_p3 - p_shl2_fu_348_p1);

assign empty_fu_292_p2 = ((sub_ln458_fu_286_p2 > 8'd2) ? 1'b1 : 1'b0);

assign i_12_fu_369_p2 = (ap_phi_mux_i_10_phi_fu_162_p4 + 8'd1);

assign i_fu_316_p2 = ($signed(sub_ln457_fu_312_p2) + $signed(8'd255));

assign icmp_ln458_fu_364_p2 = ((indvar_flatten38_reg_148 == bound19_reg_920) ? 1'b1 : 1'b0);

assign icmp_ln461_fu_375_p2 = ((indvar_flatten13_reg_168 == 8'd120) ? 1'b1 : 1'b0);

assign icmp_ln467_fu_407_p2 = ((indvar_flatten_reg_190 == 6'd24) ? 1'b1 : 1'b0);

assign icmp_ln473_fu_514_p2 = ((ap_phi_mux_c_phi_fu_217_p4 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln485_fu_730_p2 = ((indvar_flatten60_reg_225 == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln491_fu_742_p2 = ((indvar_flatten46_reg_247 == 6'd24) ? 1'b1 : 1'b0);

assign icmp_ln497_fu_770_p2 = ((c_4_reg_269 == 3'd6) ? 1'b1 : 1'b0);

assign or_ln461_1_fu_579_p2 = (xor_ln461_fu_574_p2 | icmp_ln461_reg_934);

assign or_ln461_fu_425_p2 = (icmp_ln461_fu_375_p2 | and_ln458_1_fu_413_p2);

assign or_ln467_1_fu_601_p2 = (or_ln467_fu_596_p2 | icmp_ln461_reg_934);

assign or_ln467_fu_596_p2 = (and_ln461_fu_584_p2 | and_ln458_1_reg_962);

assign or_ln491_fu_788_p2 = (icmp_ln491_fu_742_p2 | and_ln485_fu_776_p2);

assign p_shl2_fu_348_p1 = tmp_fu_340_p3;

assign p_shl3_cast_fu_680_p3 = {{trunc_ln478_2_reg_1009}, {3'd0}};

assign p_shl4_cast_fu_687_p3 = {{trunc_ln478_3_reg_1014}, {1'd0}};

assign p_shl5_cast_fu_660_p3 = {{trunc_ln478_reg_999}, {3'd0}};

assign p_shl6_cast_fu_667_p3 = {{trunc_ln478_1_reg_1004}, {1'd0}};

assign p_shl9_cast_fu_860_p3 = {{trunc_ln502_fu_856_p1}, {3'd0}};

assign p_shl_fu_332_p3 = {{sub_ln458_1_fu_327_p2}, {7'd0}};

assign patches_parameters_address1 = zext_ln478_9_fu_709_p1;

assign select_ln458_1_fu_389_p3 = ((icmp_ln461_fu_375_p2[0:0] == 1'b1) ? i_12_fu_369_p2 : ap_phi_mux_i_10_phi_fu_162_p4);

assign select_ln458_fu_381_p3 = ((icmp_ln461_fu_375_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_a_phi_fu_183_p4);

assign select_ln461_1_fu_431_p3 = ((and_ln458_1_fu_413_p2[0:0] == 1'b1) ? add_ln461_fu_419_p2 : select_ln458_fu_381_p3);

assign select_ln461_2_fu_459_p3 = ((icmp_ln461_fu_375_p2[0:0] == 1'b1) ? 8'd1 : add_ln461_1_fu_453_p2);

assign select_ln461_fu_525_p3 = ((or_ln461_reg_967[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_b_phi_fu_205_p4);

assign select_ln467_1_fu_614_p3 = ((and_ln461_fu_584_p2[0:0] == 1'b1) ? add_ln467_fu_590_p2 : select_ln461_fu_525_p3);

assign select_ln467_2_fu_445_p3 = ((or_ln461_fu_425_p2[0:0] == 1'b1) ? 6'd1 : add_ln467_1_fu_439_p2);

assign select_ln467_fu_606_p3 = ((or_ln467_1_fu_601_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_c_phi_fu_217_p4);

assign select_ln485_1_fu_756_p3 = ((icmp_ln491_fu_742_p2[0:0] == 1'b1) ? add_ln485_fu_736_p2 : ap_phi_mux_a_2_phi_fu_240_p4);

assign select_ln485_fu_748_p3 = ((icmp_ln491_fu_742_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_b_4_phi_fu_262_p4);

assign select_ln491_1_fu_802_p3 = ((and_ln485_fu_776_p2[0:0] == 1'b1) ? add_ln491_fu_782_p2 : select_ln485_fu_748_p3);

assign select_ln491_2_fu_822_p3 = ((icmp_ln491_fu_742_p2[0:0] == 1'b1) ? 6'd1 : add_ln491_1_fu_816_p2);

assign select_ln491_fu_794_p3 = ((or_ln491_fu_788_p2[0:0] == 1'b1) ? 3'd0 : c_4_reg_269);

assign sub_ln457_fu_312_p2 = (n_patches - index);

assign sub_ln458_1_fu_327_p2 = (add_ln458_2_fu_322_p2 - n_patches);

assign sub_ln458_fu_286_p2 = (add_ln458_fu_280_p2 - index);

assign sub_ln478_1_fu_694_p2 = (p_shl3_cast_fu_680_p3 - p_shl4_cast_fu_687_p3);

assign sub_ln478_fu_674_p2 = (p_shl5_cast_fu_660_p3 - p_shl6_cast_fu_667_p3);

assign sub_ln502_fu_880_p2 = (p_shl9_cast_fu_860_p3 - zext_ln502_2_fu_876_p1);

assign tmp_34_fu_544_p3 = {{add_ln478_2_fu_538_p2}, {2'd0}};

assign tmp_35_fu_562_p3 = {{add_ln478_3_fu_556_p2}, {2'd0}};

assign tmp_36_fu_868_p3 = {{add_ln502_1_fu_850_p2}, {1'd0}};

assign tmp_7_fu_497_p3 = {{select_ln458_1_reg_940}, {2'd0}};

assign tmp_8_fu_830_p3 = {{select_ln485_1_reg_1048}, {2'd0}};

assign tmp_fu_340_p3 = {{sub_ln458_1_fu_327_p2}, {3'd0}};

assign tmp_s_fu_476_p3 = {{add_ln458_4_fu_467_p2}, {2'd0}};

assign trunc_ln458_fu_397_p1 = select_ln458_1_fu_389_p3[1:0];

assign trunc_ln478_1_fu_636_p1 = add_ln478_4_fu_626_p2[7:0];

assign trunc_ln478_2_fu_646_p1 = add_ln478_5_fu_640_p2[5:0];

assign trunc_ln478_3_fu_650_p1 = add_ln478_5_fu_640_p2[7:0];

assign trunc_ln478_fu_632_p1 = add_ln478_4_fu_626_p2[5:0];

assign trunc_ln502_fu_856_p1 = add_ln502_1_fu_850_p2[5:0];

assign umax16_fu_298_p3 = ((empty_fu_292_p2[0:0] == 1'b1) ? sub_ln458_fu_286_p2 : 8'd2);

assign xor_ln458_fu_401_p2 = (icmp_ln461_fu_375_p2 ^ 1'd1);

assign xor_ln461_fu_574_p2 = (icmp_ln467_reg_957 ^ 1'd1);

assign xor_ln485_fu_764_p2 = (icmp_ln491_fu_742_p2 ^ 1'd1);

assign zext_ln467_fu_570_p1 = tmp_35_fu_562_p3;

assign zext_ln478_10_fu_720_p1 = add_ln478_7_reg_1029_pp0_iter3_reg;

assign zext_ln478_1_fu_484_p1 = tmp_s_fu_476_p3;

assign zext_ln478_2_fu_494_p1 = select_ln458_1_reg_940;

assign zext_ln478_3_fu_504_p1 = tmp_7_fu_497_p3;

assign zext_ln478_4_fu_532_p1 = select_ln461_1_reg_972;

assign zext_ln478_5_fu_535_p1 = select_ln461_1_reg_972;

assign zext_ln478_6_fu_552_p1 = tmp_34_fu_544_p3;

assign zext_ln478_7_fu_622_p1 = select_ln467_1_fu_614_p3;

assign zext_ln478_8_fu_700_p1 = select_ln467_reg_989;

assign zext_ln478_9_fu_709_p1 = add_ln478_6_fu_703_p2;

assign zext_ln478_fu_472_p1 = add_ln458_4_fu_467_p2;

assign zext_ln502_1_fu_847_p1 = select_ln491_1_reg_1059;

assign zext_ln502_2_fu_876_p1 = tmp_36_fu_868_p3;

assign zext_ln502_3_fu_886_p1 = select_ln491_reg_1054;

assign zext_ln502_4_fu_895_p1 = add_ln502_2_reg_1075;

assign zext_ln502_fu_837_p1 = tmp_8_fu_830_p3;

always @ (posedge ap_clk) begin
    bound19_reg_920[2:0] <= 3'b000;
end

endmodule //MPSQ_delete_patch_patches_parameters
