// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MPSQ_add_patch_patches_parameters13 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        wp_parameters_address0,
        wp_parameters_ce0,
        wp_parameters_q0,
        patches_parameters_address0,
        patches_parameters_ce0,
        patches_parameters_we0,
        patches_parameters_d0,
        patches_parameters_q0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] wp_parameters_address0;
output   wp_parameters_ce0;
input  [31:0] wp_parameters_q0;
output  [6:0] patches_parameters_address0;
output   patches_parameters_ce0;
output   patches_parameters_we0;
output  [31:0] patches_parameters_d0;
input  [31:0] patches_parameters_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg wp_parameters_ce0;
reg[6:0] patches_parameters_address0;
reg patches_parameters_ce0;
reg patches_parameters_we0;
reg[31:0] patches_parameters_d0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [5:0] sext_ln318_fu_195_p1;
reg  signed [5:0] sext_ln318_reg_441;
wire    ap_CS_fsm_state2;
wire   [1:0] add_ln318_fu_205_p2;
reg   [1:0] add_ln318_reg_449;
wire   [0:0] icmp_ln318_fu_199_p2;
wire  signed [5:0] sext_ln324_fu_233_p1;
reg  signed [5:0] sext_ln324_reg_454;
wire   [1:0] add_ln324_fu_237_p2;
reg   [1:0] add_ln324_reg_459;
wire    ap_CS_fsm_state3;
wire   [5:0] add_ln341_fu_247_p2;
reg   [5:0] add_ln341_reg_464;
wire   [5:0] add_ln341_1_fu_252_p2;
reg   [5:0] add_ln341_1_reg_469;
wire   [2:0] add_ln330_fu_263_p2;
reg   [2:0] add_ln330_reg_477;
wire    ap_CS_fsm_state4;
wire   [6:0] tmp_65_cast_fu_284_p3;
reg   [6:0] tmp_65_cast_reg_482;
wire   [6:0] tmp_67_cast_fu_307_p3;
reg   [6:0] tmp_67_cast_reg_487;
wire   [1:0] add_ln336_fu_321_p2;
reg   [1:0] add_ln336_reg_495;
wire    ap_CS_fsm_state5;
reg   [6:0] patches_parameters_addr_19_reg_505;
wire   [1:0] add_ln348_fu_357_p2;
reg   [1:0] add_ln348_reg_513;
wire    ap_CS_fsm_state7;
wire   [4:0] zext_ln348_fu_371_p1;
reg   [4:0] zext_ln348_reg_518;
wire   [2:0] add_ln354_fu_381_p2;
reg   [2:0] add_ln354_reg_526;
wire    ap_CS_fsm_state8;
wire   [6:0] zext_ln354_fu_404_p1;
reg   [6:0] zext_ln354_reg_531;
wire   [1:0] add_ln360_fu_414_p2;
reg   [1:0] add_ln360_reg_539;
wire    ap_CS_fsm_state9;
reg   [6:0] patches_parameters_addr_18_reg_549;
reg   [1:0] i_reg_96;
wire   [0:0] icmp_ln324_fu_257_p2;
reg   [1:0] a_reg_107;
wire   [0:0] icmp_ln330_fu_315_p2;
reg   [2:0] b_reg_118;
wire   [0:0] icmp_ln336_fu_351_p2;
reg   [1:0] c_reg_129;
wire    ap_CS_fsm_state6;
reg   [1:0] a_4_reg_140;
wire   [0:0] icmp_ln354_fu_408_p2;
reg   [2:0] b_6_reg_151;
wire   [0:0] icmp_ln360_fu_435_p2;
wire   [0:0] icmp_ln348_fu_375_p2;
reg   [1:0] c_5_reg_162;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln341_8_fu_336_p1;
wire   [63:0] zext_ln341_9_fu_346_p1;
wire   [63:0] zext_ln365_2_fu_429_p1;
wire   [3:0] tmp_fu_177_p3;
wire   [4:0] zext_ln341_1_fu_185_p1;
wire   [4:0] zext_ln341_fu_173_p1;
wire   [4:0] sub_ln341_fu_189_p2;
wire   [3:0] tmp_s_fu_215_p3;
wire   [4:0] zext_ln341_3_fu_223_p1;
wire   [4:0] zext_ln341_2_fu_211_p1;
wire   [4:0] sub_ln341_1_fu_227_p2;
wire   [5:0] zext_ln341_4_fu_243_p1;
wire   [5:0] shl_ln341_fu_269_p2;
wire   [5:0] zext_ln341_5_fu_274_p1;
wire   [5:0] add_ln341_2_fu_278_p2;
wire   [5:0] shl_ln341_1_fu_292_p2;
wire   [5:0] zext_ln341_6_fu_297_p1;
wire   [5:0] add_ln341_3_fu_301_p2;
wire   [6:0] zext_ln341_7_fu_327_p1;
wire   [6:0] add_ln341_4_fu_331_p2;
wire   [6:0] add_ln341_5_fu_341_p2;
wire   [3:0] tmp_7_fu_363_p3;
wire   [4:0] zext_ln365_fu_387_p1;
wire   [4:0] add_ln365_fu_391_p2;
wire   [5:0] tmp_24_fu_396_p3;
wire   [6:0] zext_ln365_1_fu_420_p1;
wire   [6:0] add_ln365_1_fu_424_p2;
reg   [9:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln318_fu_199_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        a_4_reg_140 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln354_fu_408_p2 == 1'd1))) begin
        a_4_reg_140 <= add_ln348_reg_513;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln318_fu_199_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_reg_107 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln330_fu_315_p2 == 1'd1))) begin
        a_reg_107 <= add_ln324_reg_459;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln348_fu_375_p2 == 1'd0))) begin
        b_6_reg_151 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln360_fu_435_p2 == 1'd1))) begin
        b_6_reg_151 <= add_ln354_reg_526;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln324_fu_257_p2 == 1'd0))) begin
        b_reg_118 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln336_fu_351_p2 == 1'd1))) begin
        b_reg_118 <= add_ln330_reg_477;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln354_fu_408_p2 == 1'd0))) begin
        c_5_reg_162 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        c_5_reg_162 <= add_ln360_reg_539;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln330_fu_315_p2 == 1'd0))) begin
        c_reg_129 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        c_reg_129 <= add_ln336_reg_495;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_96 <= 2'd2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln324_fu_257_p2 == 1'd1))) begin
        i_reg_96 <= add_ln318_reg_449;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln318_fu_199_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln318_reg_449 <= add_ln318_fu_205_p2;
        sext_ln324_reg_454 <= sext_ln324_fu_233_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln324_reg_459 <= add_ln324_fu_237_p2;
        add_ln341_1_reg_469 <= add_ln341_1_fu_252_p2;
        add_ln341_reg_464 <= add_ln341_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln330_reg_477 <= add_ln330_fu_263_p2;
        tmp_65_cast_reg_482[6 : 1] <= tmp_65_cast_fu_284_p3[6 : 1];
        tmp_67_cast_reg_487[6 : 1] <= tmp_67_cast_fu_307_p3[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln336_reg_495 <= add_ln336_fu_321_p2;
        patches_parameters_addr_19_reg_505 <= zext_ln341_9_fu_346_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln348_reg_513 <= add_ln348_fu_357_p2;
        zext_ln348_reg_518[3 : 2] <= zext_ln348_fu_371_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln354_reg_526 <= add_ln354_fu_381_p2;
        zext_ln354_reg_531[5 : 1] <= zext_ln354_fu_404_p1[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln360_reg_539 <= add_ln360_fu_414_p2;
        patches_parameters_addr_18_reg_549 <= zext_ln365_2_fu_429_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sext_ln318_reg_441 <= sext_ln318_fu_195_p1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (icmp_ln348_fu_375_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln348_fu_375_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        patches_parameters_address0 = patches_parameters_addr_18_reg_549;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        patches_parameters_address0 = patches_parameters_addr_19_reg_505;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        patches_parameters_address0 = zext_ln341_8_fu_336_p1;
    end else begin
        patches_parameters_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        patches_parameters_ce0 = 1'b1;
    end else begin
        patches_parameters_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        patches_parameters_d0 = wp_parameters_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        patches_parameters_d0 = patches_parameters_q0;
    end else begin
        patches_parameters_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        patches_parameters_we0 = 1'b1;
    end else begin
        patches_parameters_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        wp_parameters_ce0 = 1'b1;
    end else begin
        wp_parameters_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln318_fu_199_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln324_fu_257_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln330_fu_315_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln336_fu_351_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln348_fu_375_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln354_fu_408_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln360_fu_435_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln318_fu_205_p2 = ($signed(i_reg_96) + $signed(2'd3));

assign add_ln324_fu_237_p2 = (a_reg_107 + 2'd1);

assign add_ln330_fu_263_p2 = (b_reg_118 + 3'd1);

assign add_ln336_fu_321_p2 = (c_reg_129 + 2'd1);

assign add_ln341_1_fu_252_p2 = ($signed(sext_ln318_reg_441) + $signed(zext_ln341_4_fu_243_p1));

assign add_ln341_2_fu_278_p2 = (shl_ln341_fu_269_p2 + zext_ln341_5_fu_274_p1);

assign add_ln341_3_fu_301_p2 = (shl_ln341_1_fu_292_p2 + zext_ln341_6_fu_297_p1);

assign add_ln341_4_fu_331_p2 = (tmp_65_cast_reg_482 + zext_ln341_7_fu_327_p1);

assign add_ln341_5_fu_341_p2 = (tmp_67_cast_reg_487 + zext_ln341_7_fu_327_p1);

assign add_ln341_fu_247_p2 = ($signed(sext_ln324_reg_454) + $signed(zext_ln341_4_fu_243_p1));

assign add_ln348_fu_357_p2 = (a_4_reg_140 + 2'd1);

assign add_ln354_fu_381_p2 = (b_6_reg_151 + 3'd1);

assign add_ln360_fu_414_p2 = (c_5_reg_162 + 2'd1);

assign add_ln365_1_fu_424_p2 = (zext_ln354_reg_531 + zext_ln365_1_fu_420_p1);

assign add_ln365_fu_391_p2 = (zext_ln348_reg_518 + zext_ln365_fu_387_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign icmp_ln318_fu_199_p2 = ((i_reg_96 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln324_fu_257_p2 = ((a_reg_107 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln330_fu_315_p2 = ((b_reg_118 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln336_fu_351_p2 = ((c_reg_129 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln348_fu_375_p2 = ((a_4_reg_140 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln354_fu_408_p2 = ((b_6_reg_151 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln360_fu_435_p2 = ((c_5_reg_162 == 2'd2) ? 1'b1 : 1'b0);

assign sext_ln318_fu_195_p1 = $signed(sub_ln341_fu_189_p2);

assign sext_ln324_fu_233_p1 = $signed(sub_ln341_1_fu_227_p2);

assign shl_ln341_1_fu_292_p2 = add_ln341_1_reg_469 << 6'd2;

assign shl_ln341_fu_269_p2 = add_ln341_reg_464 << 6'd2;

assign sub_ln341_1_fu_227_p2 = (zext_ln341_3_fu_223_p1 - zext_ln341_2_fu_211_p1);

assign sub_ln341_fu_189_p2 = (zext_ln341_1_fu_185_p1 - zext_ln341_fu_173_p1);

assign tmp_24_fu_396_p3 = {{add_ln365_fu_391_p2}, {1'd0}};

assign tmp_65_cast_fu_284_p3 = {{add_ln341_2_fu_278_p2}, {1'd0}};

assign tmp_67_cast_fu_307_p3 = {{add_ln341_3_fu_301_p2}, {1'd0}};

assign tmp_7_fu_363_p3 = {{a_4_reg_140}, {2'd0}};

assign tmp_fu_177_p3 = {{i_reg_96}, {2'd0}};

assign tmp_s_fu_215_p3 = {{add_ln318_fu_205_p2}, {2'd0}};

assign wp_parameters_address0 = zext_ln365_2_fu_429_p1;

assign zext_ln341_1_fu_185_p1 = tmp_fu_177_p3;

assign zext_ln341_2_fu_211_p1 = add_ln318_fu_205_p2;

assign zext_ln341_3_fu_223_p1 = tmp_s_fu_215_p3;

assign zext_ln341_4_fu_243_p1 = a_reg_107;

assign zext_ln341_5_fu_274_p1 = b_reg_118;

assign zext_ln341_6_fu_297_p1 = b_reg_118;

assign zext_ln341_7_fu_327_p1 = c_reg_129;

assign zext_ln341_8_fu_336_p1 = add_ln341_4_fu_331_p2;

assign zext_ln341_9_fu_346_p1 = add_ln341_5_fu_341_p2;

assign zext_ln341_fu_173_p1 = i_reg_96;

assign zext_ln348_fu_371_p1 = tmp_7_fu_363_p3;

assign zext_ln354_fu_404_p1 = tmp_24_fu_396_p3;

assign zext_ln365_1_fu_420_p1 = c_5_reg_162;

assign zext_ln365_2_fu_429_p1 = add_ln365_1_fu_424_p2;

assign zext_ln365_fu_387_p1 = b_6_reg_151;

always @ (posedge ap_clk) begin
    tmp_65_cast_reg_482[0] <= 1'b0;
    tmp_67_cast_reg_487[0] <= 1'b0;
    zext_ln348_reg_518[1:0] <= 2'b00;
    zext_ln348_reg_518[4] <= 1'b0;
    zext_ln354_reg_531[0] <= 1'b0;
    zext_ln354_reg_531[6] <= 1'b0;
end

endmodule //MPSQ_add_patch_patches_parameters13
