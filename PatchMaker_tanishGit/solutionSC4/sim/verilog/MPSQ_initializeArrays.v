// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MPSQ_initializeArrays (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        patches_superpoints_address0,
        patches_superpoints_ce0,
        patches_superpoints_we0,
        patches_superpoints_d0,
        patches_parameters_address0,
        patches_parameters_ce0,
        patches_parameters_we0,
        patches_parameters_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] patches_superpoints_address0;
output   patches_superpoints_ce0;
output   patches_superpoints_we0;
output  [31:0] patches_superpoints_d0;
output  [11:0] patches_parameters_address0;
output   patches_parameters_ce0;
output   patches_parameters_we0;
output  [31:0] patches_parameters_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg patches_superpoints_ce0;
reg patches_superpoints_we0;
reg patches_parameters_ce0;
reg patches_parameters_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] add_ln540_1_fu_250_p2;
wire    ap_CS_fsm_state2;
wire   [5:0] select_ln540_1_fu_282_p3;
wire   [0:0] icmp_ln540_fu_256_p2;
wire   [2:0] select_ln544_1_fu_346_p3;
wire   [4:0] add_ln550_fu_387_p2;
wire   [7:0] select_ln544_2_fu_399_p3;
wire   [11:0] add_ln561_1_fu_407_p2;
wire    ap_CS_fsm_state4;
wire   [5:0] select_ln561_1_fu_439_p3;
wire   [0:0] icmp_ln561_fu_413_p2;
wire   [2:0] select_ln565_1_fu_519_p3;
wire   [2:0] select_ln571_1_fu_593_p3;
wire   [2:0] add_ln577_fu_656_p2;
wire   [5:0] select_ln571_2_fu_668_p3;
wire   [7:0] select_ln565_2_fu_682_p3;
reg   [11:0] indvar_flatten13_reg_118;
reg   [5:0] a_reg_129;
reg   [7:0] indvar_flatten_reg_140;
reg   [2:0] b_reg_151;
reg   [4:0] c_reg_162;
reg   [11:0] indvar_flatten59_reg_173;
wire    ap_CS_fsm_state3;
reg   [5:0] a_1_reg_184;
reg   [7:0] indvar_flatten35_reg_195;
reg   [2:0] b_3_reg_206;
reg   [5:0] indvar_flatten21_reg_217;
reg   [2:0] c_3_reg_228;
reg   [2:0] d_reg_239;
wire   [63:0] zext_ln555_3_fu_382_p1;
wire   [63:0] zext_ln582_5_fu_651_p1;
wire   [0:0] icmp_ln544_fu_268_p2;
wire   [5:0] add_ln540_fu_262_p2;
wire   [7:0] tmp_fu_294_p3;
wire   [7:0] zext_ln555_fu_290_p1;
wire   [0:0] icmp_ln550_fu_314_p2;
wire   [0:0] xor_ln540_fu_308_p2;
wire   [2:0] select_ln540_fu_274_p3;
wire   [0:0] and_ln540_fu_320_p2;
wire   [0:0] or_ln544_fu_332_p2;
wire   [2:0] add_ln544_fu_326_p2;
wire   [7:0] add_ln555_fu_302_p2;
wire   [7:0] zext_ln555_1_fu_354_p1;
wire   [7:0] add_ln555_1_fu_358_p2;
wire   [4:0] select_ln544_fu_338_p3;
wire   [11:0] tmp_23_cast_fu_364_p3;
wire   [11:0] zext_ln555_2_fu_372_p1;
wire   [11:0] add_ln555_2_fu_376_p2;
wire   [7:0] add_ln544_1_fu_393_p2;
wire   [0:0] icmp_ln565_fu_425_p2;
wire   [5:0] add_ln561_fu_419_p2;
wire   [7:0] tmp_s_fu_451_p3;
wire   [8:0] zext_ln582_1_fu_459_p1;
wire   [8:0] zext_ln582_fu_447_p1;
wire   [0:0] icmp_ln577_fu_475_p2;
wire   [0:0] xor_ln561_fu_469_p2;
wire   [0:0] icmp_ln571_fu_487_p2;
wire   [2:0] select_ln561_fu_431_p3;
wire   [0:0] and_ln561_1_fu_493_p2;
wire   [0:0] or_ln565_fu_505_p2;
wire   [2:0] add_ln565_fu_499_p2;
wire   [8:0] add_ln582_fu_463_p2;
wire   [8:0] zext_ln582_2_fu_527_p1;
wire   [8:0] add_ln582_1_fu_531_p2;
wire   [10:0] tmp_3_fu_537_p3;
wire   [0:0] xor_ln565_fu_549_p2;
wire   [0:0] and_ln561_fu_481_p2;
wire   [0:0] or_ln565_1_fu_555_p2;
wire   [2:0] select_ln565_fu_511_p3;
wire   [0:0] and_ln565_fu_561_p2;
wire   [0:0] or_ln571_fu_573_p2;
wire   [0:0] or_ln571_1_fu_579_p2;
wire   [2:0] add_ln571_fu_567_p2;
wire   [62:0] zext_ln571_fu_545_p1;
wire   [62:0] zext_ln582_3_fu_601_p1;
wire   [62:0] add_ln582_2_fu_605_p2;
wire   [8:0] trunc_ln582_fu_611_p1;
wire   [10:0] trunc_ln582_1_fu_623_p1;
wire   [11:0] p_shl2_cast_fu_615_p3;
wire   [11:0] p_shl3_cast_fu_627_p3;
wire   [2:0] select_ln571_fu_585_p3;
wire   [11:0] sub_ln582_fu_635_p2;
wire   [11:0] zext_ln582_4_fu_641_p1;
wire   [11:0] add_ln582_3_fu_645_p2;
wire   [5:0] add_ln571_1_fu_662_p2;
wire   [7:0] add_ln565_1_fu_676_p2;
wire    ap_CS_fsm_state5;
reg   [4:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_1_reg_184 <= 6'd0;
    end else if (((icmp_ln561_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        a_1_reg_184 <= select_ln561_1_fu_439_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln540_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_reg_129 <= select_ln540_1_fu_282_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        a_reg_129 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_3_reg_206 <= 3'd0;
    end else if (((icmp_ln561_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        b_3_reg_206 <= select_ln565_1_fu_519_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln540_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        b_reg_151 <= select_ln544_1_fu_346_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        b_reg_151 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_3_reg_228 <= 3'd0;
    end else if (((icmp_ln561_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        c_3_reg_228 <= select_ln571_1_fu_593_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln540_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_reg_162 <= add_ln550_fu_387_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_reg_162 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        d_reg_239 <= 3'd0;
    end else if (((icmp_ln561_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        d_reg_239 <= add_ln577_fu_656_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln540_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten13_reg_118 <= add_ln540_1_fu_250_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten13_reg_118 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten21_reg_217 <= 6'd0;
    end else if (((icmp_ln561_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        indvar_flatten21_reg_217 <= select_ln571_2_fu_668_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten35_reg_195 <= 8'd0;
    end else if (((icmp_ln561_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        indvar_flatten35_reg_195 <= select_ln565_2_fu_682_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten59_reg_173 <= 12'd0;
    end else if (((icmp_ln561_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        indvar_flatten59_reg_173 <= add_ln561_1_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln540_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_140 <= select_ln544_2_fu_399_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_140 <= 8'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        patches_parameters_ce0 = 1'b1;
    end else begin
        patches_parameters_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln561_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        patches_parameters_we0 = 1'b1;
    end else begin
        patches_parameters_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_superpoints_ce0 = 1'b1;
    end else begin
        patches_superpoints_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln540_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        patches_superpoints_we0 = 1'b1;
    end else begin
        patches_superpoints_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln540_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln561_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln540_1_fu_250_p2 = (indvar_flatten13_reg_118 + 12'd1);

assign add_ln540_fu_262_p2 = (a_reg_129 + 6'd1);

assign add_ln544_1_fu_393_p2 = (indvar_flatten_reg_140 + 8'd1);

assign add_ln544_fu_326_p2 = (select_ln540_fu_274_p3 + 3'd1);

assign add_ln550_fu_387_p2 = (select_ln544_fu_338_p3 + 5'd1);

assign add_ln555_1_fu_358_p2 = (add_ln555_fu_302_p2 + zext_ln555_1_fu_354_p1);

assign add_ln555_2_fu_376_p2 = (tmp_23_cast_fu_364_p3 + zext_ln555_2_fu_372_p1);

assign add_ln555_fu_302_p2 = (tmp_fu_294_p3 + zext_ln555_fu_290_p1);

assign add_ln561_1_fu_407_p2 = (indvar_flatten59_reg_173 + 12'd1);

assign add_ln561_fu_419_p2 = (a_1_reg_184 + 6'd1);

assign add_ln565_1_fu_676_p2 = (indvar_flatten35_reg_195 + 8'd1);

assign add_ln565_fu_499_p2 = (select_ln561_fu_431_p3 + 3'd1);

assign add_ln571_1_fu_662_p2 = (indvar_flatten21_reg_217 + 6'd1);

assign add_ln571_fu_567_p2 = (select_ln565_fu_511_p3 + 3'd1);

assign add_ln577_fu_656_p2 = (select_ln571_fu_585_p3 + 3'd1);

assign add_ln582_1_fu_531_p2 = (add_ln582_fu_463_p2 + zext_ln582_2_fu_527_p1);

assign add_ln582_2_fu_605_p2 = (zext_ln571_fu_545_p1 + zext_ln582_3_fu_601_p1);

assign add_ln582_3_fu_645_p2 = (sub_ln582_fu_635_p2 + zext_ln582_4_fu_641_p1);

assign add_ln582_fu_463_p2 = (zext_ln582_1_fu_459_p1 + zext_ln582_fu_447_p1);

assign and_ln540_fu_320_p2 = (xor_ln540_fu_308_p2 & icmp_ln550_fu_314_p2);

assign and_ln561_1_fu_493_p2 = (xor_ln561_fu_469_p2 & icmp_ln571_fu_487_p2);

assign and_ln561_fu_481_p2 = (xor_ln561_fu_469_p2 & icmp_ln577_fu_475_p2);

assign and_ln565_fu_561_p2 = (or_ln565_1_fu_555_p2 & and_ln561_fu_481_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign icmp_ln540_fu_256_p2 = ((indvar_flatten13_reg_118 == 12'd2560) ? 1'b1 : 1'b0);

assign icmp_ln544_fu_268_p2 = ((indvar_flatten_reg_140 == 8'd80) ? 1'b1 : 1'b0);

assign icmp_ln550_fu_314_p2 = ((c_reg_162 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln561_fu_413_p2 = ((indvar_flatten59_reg_173 == 12'd3840) ? 1'b1 : 1'b0);

assign icmp_ln565_fu_425_p2 = ((indvar_flatten35_reg_195 == 8'd120) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_487_p2 = ((indvar_flatten21_reg_217 == 6'd24) ? 1'b1 : 1'b0);

assign icmp_ln577_fu_475_p2 = ((d_reg_239 == 3'd6) ? 1'b1 : 1'b0);

assign or_ln544_fu_332_p2 = (icmp_ln544_fu_268_p2 | and_ln540_fu_320_p2);

assign or_ln565_1_fu_555_p2 = (xor_ln565_fu_549_p2 | icmp_ln565_fu_425_p2);

assign or_ln565_fu_505_p2 = (icmp_ln565_fu_425_p2 | and_ln561_1_fu_493_p2);

assign or_ln571_1_fu_579_p2 = (or_ln571_fu_573_p2 | icmp_ln565_fu_425_p2);

assign or_ln571_fu_573_p2 = (and_ln565_fu_561_p2 | and_ln561_1_fu_493_p2);

assign p_shl2_cast_fu_615_p3 = {{trunc_ln582_fu_611_p1}, {3'd0}};

assign p_shl3_cast_fu_627_p3 = {{trunc_ln582_1_fu_623_p1}, {1'd0}};

assign patches_parameters_address0 = zext_ln582_5_fu_651_p1;

assign patches_parameters_d0 = 32'd0;

assign patches_superpoints_address0 = zext_ln555_3_fu_382_p1;

assign patches_superpoints_d0 = 32'd0;

assign select_ln540_1_fu_282_p3 = ((icmp_ln544_fu_268_p2[0:0] == 1'b1) ? add_ln540_fu_262_p2 : a_reg_129);

assign select_ln540_fu_274_p3 = ((icmp_ln544_fu_268_p2[0:0] == 1'b1) ? 3'd0 : b_reg_151);

assign select_ln544_1_fu_346_p3 = ((and_ln540_fu_320_p2[0:0] == 1'b1) ? add_ln544_fu_326_p2 : select_ln540_fu_274_p3);

assign select_ln544_2_fu_399_p3 = ((icmp_ln544_fu_268_p2[0:0] == 1'b1) ? 8'd1 : add_ln544_1_fu_393_p2);

assign select_ln544_fu_338_p3 = ((or_ln544_fu_332_p2[0:0] == 1'b1) ? 5'd0 : c_reg_162);

assign select_ln561_1_fu_439_p3 = ((icmp_ln565_fu_425_p2[0:0] == 1'b1) ? add_ln561_fu_419_p2 : a_1_reg_184);

assign select_ln561_fu_431_p3 = ((icmp_ln565_fu_425_p2[0:0] == 1'b1) ? 3'd0 : b_3_reg_206);

assign select_ln565_1_fu_519_p3 = ((and_ln561_1_fu_493_p2[0:0] == 1'b1) ? add_ln565_fu_499_p2 : select_ln561_fu_431_p3);

assign select_ln565_2_fu_682_p3 = ((icmp_ln565_fu_425_p2[0:0] == 1'b1) ? 8'd1 : add_ln565_1_fu_676_p2);

assign select_ln565_fu_511_p3 = ((or_ln565_fu_505_p2[0:0] == 1'b1) ? 3'd0 : c_3_reg_228);

assign select_ln571_1_fu_593_p3 = ((and_ln565_fu_561_p2[0:0] == 1'b1) ? add_ln571_fu_567_p2 : select_ln565_fu_511_p3);

assign select_ln571_2_fu_668_p3 = ((or_ln565_fu_505_p2[0:0] == 1'b1) ? 6'd1 : add_ln571_1_fu_662_p2);

assign select_ln571_fu_585_p3 = ((or_ln571_1_fu_579_p2[0:0] == 1'b1) ? 3'd0 : d_reg_239);

assign sub_ln582_fu_635_p2 = (p_shl2_cast_fu_615_p3 - p_shl3_cast_fu_627_p3);

assign tmp_23_cast_fu_364_p3 = {{add_ln555_1_fu_358_p2}, {4'd0}};

assign tmp_3_fu_537_p3 = {{add_ln582_1_fu_531_p2}, {2'd0}};

assign tmp_fu_294_p3 = {{select_ln540_1_fu_282_p3}, {2'd0}};

assign tmp_s_fu_451_p3 = {{select_ln561_1_fu_439_p3}, {2'd0}};

assign trunc_ln582_1_fu_623_p1 = add_ln582_2_fu_605_p2[10:0];

assign trunc_ln582_fu_611_p1 = add_ln582_2_fu_605_p2[8:0];

assign xor_ln540_fu_308_p2 = (icmp_ln544_fu_268_p2 ^ 1'd1);

assign xor_ln561_fu_469_p2 = (icmp_ln565_fu_425_p2 ^ 1'd1);

assign xor_ln565_fu_549_p2 = (icmp_ln571_fu_487_p2 ^ 1'd1);

assign zext_ln555_1_fu_354_p1 = select_ln544_1_fu_346_p3;

assign zext_ln555_2_fu_372_p1 = select_ln544_fu_338_p3;

assign zext_ln555_3_fu_382_p1 = add_ln555_2_fu_376_p2;

assign zext_ln555_fu_290_p1 = select_ln540_1_fu_282_p3;

assign zext_ln571_fu_545_p1 = tmp_3_fu_537_p3;

assign zext_ln582_1_fu_459_p1 = tmp_s_fu_451_p3;

assign zext_ln582_2_fu_527_p1 = select_ln565_1_fu_519_p3;

assign zext_ln582_3_fu_601_p1 = select_ln571_1_fu_593_p3;

assign zext_ln582_4_fu_641_p1 = select_ln571_fu_585_p3;

assign zext_ln582_5_fu_651_p1 = add_ln582_3_fu_645_p2;

assign zext_ln582_fu_447_p1 = select_ln561_1_fu_439_p3;

endmodule //MPSQ_initializeArrays
