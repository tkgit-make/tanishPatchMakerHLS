// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MPSQ_initializeArrays (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        patches_superpoints_address0,
        patches_superpoints_ce0,
        patches_superpoints_we0,
        patches_superpoints_d0,
        patches_parameters_address0,
        patches_parameters_ce0,
        patches_parameters_we0,
        patches_parameters_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state4 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state8 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] patches_superpoints_address0;
output   patches_superpoints_ce0;
output   patches_superpoints_we0;
output  [63:0] patches_superpoints_d0;
output  [6:0] patches_parameters_address0;
output   patches_parameters_ce0;
output   patches_parameters_we0;
output  [31:0] patches_parameters_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg patches_superpoints_ce0;
reg patches_superpoints_we0;
reg patches_parameters_ce0;
reg patches_parameters_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] indvar_flatten13_reg_118;
reg   [1:0] a_reg_129;
reg   [7:0] indvar_flatten_reg_140;
reg   [2:0] b_reg_151;
reg   [4:0] c_reg_162;
reg   [6:0] indvar_flatten59_reg_173;
reg   [5:0] indvar_flatten35_reg_184;
reg   [1:0] a_1_reg_195;
reg   [1:0] b_3_reg_206;
reg   [4:0] indvar_flatten21_reg_217;
reg   [2:0] c_3_reg_228;
reg   [1:0] d_reg_239;
wire   [7:0] add_ln637_1_fu_250_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln637_fu_256_p2;
reg   [0:0] icmp_ln637_reg_660;
wire   [1:0] select_ln637_1_fu_282_p3;
reg   [1:0] select_ln637_1_reg_664;
wire   [4:0] select_ln641_fu_338_p3;
reg   [4:0] select_ln641_reg_669;
wire   [2:0] select_ln641_1_fu_346_p3;
reg   [2:0] select_ln641_1_reg_674;
wire   [3:0] add_ln652_1_fu_358_p2;
reg   [3:0] add_ln652_1_reg_679;
wire   [4:0] add_ln647_fu_364_p2;
wire   [7:0] select_ln641_2_fu_376_p3;
wire   [6:0] add_ln658_1_fu_405_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_state7_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln658_fu_411_p2;
reg   [0:0] icmp_ln658_reg_699;
reg   [0:0] icmp_ln658_reg_699_pp1_iter1_reg;
wire   [0:0] icmp_ln662_fu_417_p2;
reg   [0:0] icmp_ln662_reg_703;
wire   [5:0] select_ln662_2_fu_429_p3;
wire   [1:0] select_ln658_1_fu_450_p3;
reg   [1:0] select_ln658_1_reg_718;
reg    ap_enable_reg_pp1_iter1;
wire   [1:0] select_ln662_1_fu_531_p3;
reg   [1:0] select_ln662_1_reg_723;
wire   [5:0] add_ln679_fu_543_p2;
reg   [5:0] add_ln679_reg_728;
wire   [1:0] select_ln668_fu_583_p3;
reg   [1:0] select_ln668_reg_733;
wire   [2:0] select_ln668_1_fu_591_p3;
reg   [2:0] select_ln668_1_reg_738;
wire   [1:0] add_ln674_fu_599_p2;
wire   [4:0] select_ln668_2_fu_611_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state4;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_condition_pp1_exit_iter1_state6;
reg    ap_enable_reg_pp1_iter2;
reg   [1:0] ap_phi_mux_a_phi_fu_133_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_b_phi_fu_155_p4;
reg   [1:0] ap_phi_mux_a_1_phi_fu_199_p4;
wire    ap_block_pp1_stage0;
reg   [1:0] ap_phi_mux_b_3_phi_fu_210_p4;
reg   [2:0] ap_phi_mux_c_3_phi_fu_232_p4;
wire   [63:0] zext_ln652_3_fu_400_p1;
wire   [63:0] zext_ln679_5_fu_650_p1;
wire   [0:0] icmp_ln641_fu_268_p2;
wire   [1:0] add_ln637_fu_262_p2;
wire   [3:0] tmp_fu_294_p3;
wire   [3:0] zext_ln652_fu_290_p1;
wire   [0:0] icmp_ln647_fu_314_p2;
wire   [0:0] xor_ln637_fu_308_p2;
wire   [2:0] select_ln637_fu_274_p3;
wire   [0:0] and_ln637_fu_320_p2;
wire   [0:0] or_ln641_fu_332_p2;
wire   [2:0] add_ln641_fu_326_p2;
wire   [3:0] add_ln652_fu_302_p2;
wire   [3:0] zext_ln652_1_fu_354_p1;
wire   [7:0] add_ln641_1_fu_370_p2;
wire   [7:0] tmp_25_cast_fu_384_p3;
wire   [7:0] zext_ln652_2_fu_391_p1;
wire   [7:0] add_ln652_2_fu_394_p2;
wire   [5:0] add_ln662_1_fu_423_p2;
wire   [1:0] add_ln658_fu_437_p2;
wire   [3:0] tmp_s_fu_461_p3;
wire   [4:0] zext_ln679_1_fu_469_p1;
wire   [4:0] zext_ln679_fu_457_p1;
wire   [4:0] sub_ln679_fu_473_p2;
wire   [0:0] icmp_ln674_fu_488_p2;
wire   [0:0] xor_ln658_fu_483_p2;
wire   [0:0] icmp_ln668_fu_500_p2;
wire   [1:0] select_ln658_fu_443_p3;
wire   [0:0] and_ln658_1_fu_506_p2;
wire   [0:0] or_ln662_fu_518_p2;
wire   [1:0] add_ln662_fu_512_p2;
wire  signed [5:0] sext_ln662_fu_479_p1;
wire   [5:0] zext_ln679_2_fu_539_p1;
wire   [0:0] xor_ln662_fu_549_p2;
wire   [0:0] and_ln658_fu_494_p2;
wire   [0:0] or_ln662_1_fu_555_p2;
wire   [2:0] select_ln662_fu_523_p3;
wire   [0:0] and_ln662_fu_560_p2;
wire   [0:0] or_ln668_fu_572_p2;
wire   [0:0] or_ln668_1_fu_578_p2;
wire   [2:0] add_ln668_fu_566_p2;
wire   [4:0] add_ln668_1_fu_605_p2;
wire   [5:0] shl_ln679_fu_619_p2;
wire   [5:0] zext_ln679_3_fu_624_p1;
wire   [5:0] add_ln679_1_fu_627_p2;
wire   [6:0] tmp_30_cast_fu_633_p3;
wire   [6:0] zext_ln679_4_fu_641_p1;
wire   [6:0] add_ln679_2_fu_644_p2;
wire    ap_CS_fsm_state8;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state4) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter1_state6) & (ap_enable_reg_pp1_iter0 == 1'b0)))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter1_state6))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_1_reg_195 <= 2'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln658_reg_699_pp1_iter1_reg == 1'd0))) begin
        a_1_reg_195 <= select_ln658_1_reg_718;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln637_reg_660 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        a_reg_129 <= select_ln637_1_reg_664;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        a_reg_129 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_3_reg_206 <= 2'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln658_reg_699_pp1_iter1_reg == 1'd0))) begin
        b_3_reg_206 <= select_ln662_1_reg_723;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln637_reg_660 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        b_reg_151 <= select_ln641_1_reg_674;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        b_reg_151 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_3_reg_228 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln658_reg_699_pp1_iter1_reg == 1'd0))) begin
        c_3_reg_228 <= select_ln668_1_reg_738;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln637_fu_256_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_reg_162 <= add_ln647_fu_364_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_reg_162 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        d_reg_239 <= 2'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln658_reg_699 == 1'd0))) begin
        d_reg_239 <= add_ln674_fu_599_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln637_fu_256_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_118 <= add_ln637_1_fu_250_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten13_reg_118 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten21_reg_217 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln658_reg_699 == 1'd0))) begin
        indvar_flatten21_reg_217 <= select_ln668_2_fu_611_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten35_reg_184 <= 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln658_fu_411_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten35_reg_184 <= select_ln662_2_fu_429_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten59_reg_173 <= 7'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln658_fu_411_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten59_reg_173 <= add_ln658_1_fu_405_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln637_fu_256_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_140 <= select_ln641_2_fu_376_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_140 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln637_fu_256_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln652_1_reg_679 <= add_ln652_1_fu_358_p2;
        select_ln641_reg_669 <= select_ln641_fu_338_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln658_reg_699 == 1'd0))) begin
        add_ln679_reg_728 <= add_ln679_fu_543_p2;
        select_ln668_reg_733 <= select_ln668_fu_583_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln637_reg_660 <= icmp_ln637_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln658_reg_699 <= icmp_ln658_fu_411_p2;
        icmp_ln658_reg_699_pp1_iter1_reg <= icmp_ln658_reg_699;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln658_fu_411_p2 == 1'd0))) begin
        icmp_ln662_reg_703 <= icmp_ln662_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln637_fu_256_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln637_1_reg_664 <= select_ln637_1_fu_282_p3;
        select_ln641_1_reg_674 <= select_ln641_1_fu_346_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln658_reg_699 == 1'd0))) begin
        select_ln658_1_reg_718 <= select_ln658_1_fu_450_p3;
        select_ln662_1_reg_723 <= select_ln662_1_fu_531_p3;
        select_ln668_1_reg_738 <= select_ln668_1_fu_591_p3;
    end
end

always @ (*) begin
    if ((icmp_ln637_fu_256_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_condition_pp1_exit_iter1_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter1_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln658_fu_411_p2 == 1'd1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln658_reg_699_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_a_1_phi_fu_199_p4 = select_ln658_1_reg_718;
    end else begin
        ap_phi_mux_a_1_phi_fu_199_p4 = a_1_reg_195;
    end
end

always @ (*) begin
    if (((icmp_ln637_reg_660 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_a_phi_fu_133_p4 = select_ln637_1_reg_664;
    end else begin
        ap_phi_mux_a_phi_fu_133_p4 = a_reg_129;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln658_reg_699_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_b_3_phi_fu_210_p4 = select_ln662_1_reg_723;
    end else begin
        ap_phi_mux_b_3_phi_fu_210_p4 = b_3_reg_206;
    end
end

always @ (*) begin
    if (((icmp_ln637_reg_660 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_b_phi_fu_155_p4 = select_ln641_1_reg_674;
    end else begin
        ap_phi_mux_b_phi_fu_155_p4 = b_reg_151;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln658_reg_699_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_c_3_phi_fu_232_p4 = select_ln668_1_reg_738;
    end else begin
        ap_phi_mux_c_3_phi_fu_232_p4 = c_3_reg_228;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        patches_parameters_ce0 = 1'b1;
    end else begin
        patches_parameters_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln658_reg_699_pp1_iter1_reg == 1'd0))) begin
        patches_parameters_we0 = 1'b1;
    end else begin
        patches_parameters_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        patches_superpoints_ce0 = 1'b1;
    end else begin
        patches_superpoints_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln637_reg_660 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        patches_superpoints_we0 = 1'b1;
    end else begin
        patches_superpoints_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln637_fu_256_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln637_fu_256_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln637_1_fu_250_p2 = (indvar_flatten13_reg_118 + 8'd1);

assign add_ln637_fu_262_p2 = (ap_phi_mux_a_phi_fu_133_p4 + 2'd1);

assign add_ln641_1_fu_370_p2 = (indvar_flatten_reg_140 + 8'd1);

assign add_ln641_fu_326_p2 = (select_ln637_fu_274_p3 + 3'd1);

assign add_ln647_fu_364_p2 = (select_ln641_fu_338_p3 + 5'd1);

assign add_ln652_1_fu_358_p2 = (add_ln652_fu_302_p2 + zext_ln652_1_fu_354_p1);

assign add_ln652_2_fu_394_p2 = (tmp_25_cast_fu_384_p3 + zext_ln652_2_fu_391_p1);

assign add_ln652_fu_302_p2 = (tmp_fu_294_p3 + zext_ln652_fu_290_p1);

assign add_ln658_1_fu_405_p2 = (indvar_flatten59_reg_173 + 7'd1);

assign add_ln658_fu_437_p2 = (ap_phi_mux_a_1_phi_fu_199_p4 + 2'd1);

assign add_ln662_1_fu_423_p2 = (indvar_flatten35_reg_184 + 6'd1);

assign add_ln662_fu_512_p2 = (select_ln658_fu_443_p3 + 2'd1);

assign add_ln668_1_fu_605_p2 = (indvar_flatten21_reg_217 + 5'd1);

assign add_ln668_fu_566_p2 = (select_ln662_fu_523_p3 + 3'd1);

assign add_ln674_fu_599_p2 = (select_ln668_fu_583_p3 + 2'd1);

assign add_ln679_1_fu_627_p2 = (shl_ln679_fu_619_p2 + zext_ln679_3_fu_624_p1);

assign add_ln679_2_fu_644_p2 = (tmp_30_cast_fu_633_p3 + zext_ln679_4_fu_641_p1);

assign add_ln679_fu_543_p2 = ($signed(sext_ln662_fu_479_p1) + $signed(zext_ln679_2_fu_539_p1));

assign and_ln637_fu_320_p2 = (xor_ln637_fu_308_p2 & icmp_ln647_fu_314_p2);

assign and_ln658_1_fu_506_p2 = (xor_ln658_fu_483_p2 & icmp_ln668_fu_500_p2);

assign and_ln658_fu_494_p2 = (xor_ln658_fu_483_p2 & icmp_ln674_fu_488_p2);

assign and_ln662_fu_560_p2 = (or_ln662_1_fu_555_p2 & and_ln658_fu_494_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign icmp_ln637_fu_256_p2 = ((indvar_flatten13_reg_118 == 8'd240) ? 1'b1 : 1'b0);

assign icmp_ln641_fu_268_p2 = ((indvar_flatten_reg_140 == 8'd80) ? 1'b1 : 1'b0);

assign icmp_ln647_fu_314_p2 = ((c_reg_162 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln658_fu_411_p2 = ((indvar_flatten59_reg_173 == 7'd72) ? 1'b1 : 1'b0);

assign icmp_ln662_fu_417_p2 = ((indvar_flatten35_reg_184 == 6'd24) ? 1'b1 : 1'b0);

assign icmp_ln668_fu_500_p2 = ((indvar_flatten21_reg_217 == 5'd8) ? 1'b1 : 1'b0);

assign icmp_ln674_fu_488_p2 = ((d_reg_239 == 2'd2) ? 1'b1 : 1'b0);

assign or_ln641_fu_332_p2 = (icmp_ln641_fu_268_p2 | and_ln637_fu_320_p2);

assign or_ln662_1_fu_555_p2 = (xor_ln662_fu_549_p2 | icmp_ln662_reg_703);

assign or_ln662_fu_518_p2 = (icmp_ln662_reg_703 | and_ln658_1_fu_506_p2);

assign or_ln668_1_fu_578_p2 = (or_ln668_fu_572_p2 | icmp_ln662_reg_703);

assign or_ln668_fu_572_p2 = (and_ln662_fu_560_p2 | and_ln658_1_fu_506_p2);

assign patches_parameters_address0 = zext_ln679_5_fu_650_p1;

assign patches_parameters_d0 = 32'd0;

assign patches_superpoints_address0 = zext_ln652_3_fu_400_p1;

assign patches_superpoints_d0 = 64'd0;

assign select_ln637_1_fu_282_p3 = ((icmp_ln641_fu_268_p2[0:0] == 1'b1) ? add_ln637_fu_262_p2 : ap_phi_mux_a_phi_fu_133_p4);

assign select_ln637_fu_274_p3 = ((icmp_ln641_fu_268_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_b_phi_fu_155_p4);

assign select_ln641_1_fu_346_p3 = ((and_ln637_fu_320_p2[0:0] == 1'b1) ? add_ln641_fu_326_p2 : select_ln637_fu_274_p3);

assign select_ln641_2_fu_376_p3 = ((icmp_ln641_fu_268_p2[0:0] == 1'b1) ? 8'd1 : add_ln641_1_fu_370_p2);

assign select_ln641_fu_338_p3 = ((or_ln641_fu_332_p2[0:0] == 1'b1) ? 5'd0 : c_reg_162);

assign select_ln658_1_fu_450_p3 = ((icmp_ln662_reg_703[0:0] == 1'b1) ? add_ln658_fu_437_p2 : ap_phi_mux_a_1_phi_fu_199_p4);

assign select_ln658_fu_443_p3 = ((icmp_ln662_reg_703[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_b_3_phi_fu_210_p4);

assign select_ln662_1_fu_531_p3 = ((and_ln658_1_fu_506_p2[0:0] == 1'b1) ? add_ln662_fu_512_p2 : select_ln658_fu_443_p3);

assign select_ln662_2_fu_429_p3 = ((icmp_ln662_fu_417_p2[0:0] == 1'b1) ? 6'd1 : add_ln662_1_fu_423_p2);

assign select_ln662_fu_523_p3 = ((or_ln662_fu_518_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_c_3_phi_fu_232_p4);

assign select_ln668_1_fu_591_p3 = ((and_ln662_fu_560_p2[0:0] == 1'b1) ? add_ln668_fu_566_p2 : select_ln662_fu_523_p3);

assign select_ln668_2_fu_611_p3 = ((or_ln662_fu_518_p2[0:0] == 1'b1) ? 5'd1 : add_ln668_1_fu_605_p2);

assign select_ln668_fu_583_p3 = ((or_ln668_1_fu_578_p2[0:0] == 1'b1) ? 2'd0 : d_reg_239);

assign sext_ln662_fu_479_p1 = $signed(sub_ln679_fu_473_p2);

assign shl_ln679_fu_619_p2 = add_ln679_reg_728 << 6'd2;

assign sub_ln679_fu_473_p2 = (zext_ln679_1_fu_469_p1 - zext_ln679_fu_457_p1);

assign tmp_25_cast_fu_384_p3 = {{add_ln652_1_reg_679}, {4'd0}};

assign tmp_30_cast_fu_633_p3 = {{add_ln679_1_fu_627_p2}, {1'd0}};

assign tmp_fu_294_p3 = {{select_ln637_1_fu_282_p3}, {2'd0}};

assign tmp_s_fu_461_p3 = {{select_ln658_1_fu_450_p3}, {2'd0}};

assign xor_ln637_fu_308_p2 = (icmp_ln641_fu_268_p2 ^ 1'd1);

assign xor_ln658_fu_483_p2 = (icmp_ln662_reg_703 ^ 1'd1);

assign xor_ln662_fu_549_p2 = (icmp_ln668_fu_500_p2 ^ 1'd1);

assign zext_ln652_1_fu_354_p1 = select_ln641_1_fu_346_p3;

assign zext_ln652_2_fu_391_p1 = select_ln641_reg_669;

assign zext_ln652_3_fu_400_p1 = add_ln652_2_fu_394_p2;

assign zext_ln652_fu_290_p1 = select_ln637_1_fu_282_p3;

assign zext_ln679_1_fu_469_p1 = tmp_s_fu_461_p3;

assign zext_ln679_2_fu_539_p1 = select_ln662_1_fu_531_p3;

assign zext_ln679_3_fu_624_p1 = select_ln668_1_reg_738;

assign zext_ln679_4_fu_641_p1 = select_ln668_reg_733;

assign zext_ln679_5_fu_650_p1 = add_ln679_2_fu_644_p2;

assign zext_ln679_fu_457_p1 = select_ln658_1_fu_450_p3;

endmodule //MPSQ_initializeArrays
