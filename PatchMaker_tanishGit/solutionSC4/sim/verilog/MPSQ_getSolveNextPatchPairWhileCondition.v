// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MPSQ_getSolveNextPatchPairWhileCondition (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        GDn_points_address0,
        GDn_points_ce0,
        GDn_points_q0,
        lastPatchIndex,
        repeat_original,
        white_space_height,
        previous_white_space_height,
        current_z_top_index,
        patches_parameters_address0,
        patches_parameters_ce0,
        patches_parameters_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] GDn_points_address0;
output   GDn_points_ce0;
input  [31:0] GDn_points_q0;
input  [4:0] lastPatchIndex;
input  [0:0] repeat_original;
input  [63:0] white_space_height;
input  [63:0] previous_white_space_height;
input  [31:0] current_z_top_index;
output  [11:0] patches_parameters_address0;
output   patches_parameters_ce0;
input  [31:0] patches_parameters_q0;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg GDn_points_ce0;
reg patches_parameters_ce0;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] add_ln886_fu_141_p2;
reg   [11:0] add_ln886_reg_253;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [63:0] sub_ln180_fu_151_p2;
reg   [63:0] sub_ln180_reg_271;
reg   [31:0] patches_parameters_load_reg_276;
wire   [63:0] zext_ln886_2_fu_147_p1;
wire    ap_CS_fsm_state4;
wire   [7:0] tmp_s_fu_123_p3;
wire   [11:0] tmp_fu_115_p3;
wire   [11:0] zext_ln886_fu_131_p1;
wire   [11:0] sub_ln886_fu_135_p2;
wire   [0:0] tmp_25_fu_162_p3;
wire   [0:0] icmp_ln914_fu_157_p2;
wire   [0:0] xor_ln914_fu_170_p2;
wire   [0:0] tmp_26_fu_182_p3;
wire   [63:0] select_ln180_fu_189_p3;
wire   [0:0] icmp_ln920_2_fu_212_p2;
wire   [0:0] icmp_ln920_1_fu_207_p2;
wire   [0:0] icmp_ln920_fu_201_p2;
wire   [0:0] and_ln920_fu_217_p2;
wire   [0:0] or_ln920_fu_223_p2;
wire   [0:0] and_ln914_fu_176_p2;
wire   [0:0] or_ln920_1_fu_229_p2;
wire   [0:0] or_ln920_2_fu_235_p2;
wire   [0:0] exp4_fu_195_p2;
wire   [0:0] xor_ln920_fu_241_p2;
wire   [0:0] and_ln920_1_fu_247_p2;
reg   [0:0] ap_return_preg;
reg   [3:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_preg <= and_ln920_1_fu_247_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln886_reg_253[11 : 3] <= add_ln886_fu_141_p2[11 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        patches_parameters_load_reg_276 <= patches_parameters_q0;
        sub_ln180_reg_271 <= sub_ln180_fu_151_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        GDn_points_ce0 = 1'b1;
    end else begin
        GDn_points_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return = and_ln920_1_fu_247_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_parameters_ce0 = 1'b1;
    end else begin
        patches_parameters_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign GDn_points_address0 = 64'd4;

assign add_ln886_fu_141_p2 = (sub_ln886_fu_135_p2 + 12'd61);

assign and_ln914_fu_176_p2 = (xor_ln914_fu_170_p2 & icmp_ln914_fu_157_p2);

assign and_ln920_1_fu_247_p2 = (xor_ln920_fu_241_p2 & exp4_fu_195_p2);

assign and_ln920_fu_217_p2 = (icmp_ln920_2_fu_212_p2 & icmp_ln920_1_fu_207_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign exp4_fu_195_p2 = (($signed(GDn_points_q0) > $signed(current_z_top_index)) ? 1'b1 : 1'b0);

assign icmp_ln914_fu_157_p2 = (($signed(white_space_height) < $signed(64'd1)) ? 1'b1 : 1'b0);

assign icmp_ln920_1_fu_207_p2 = (($signed(patches_parameters_load_reg_276) < $signed(32'd4244967197)) ? 1'b1 : 1'b0);

assign icmp_ln920_2_fu_212_p2 = (($signed(white_space_height) < $signed(64'd6)) ? 1'b1 : 1'b0);

assign icmp_ln920_fu_201_p2 = (($signed(select_ln180_fu_189_p3) < $signed(64'd6)) ? 1'b1 : 1'b0);

assign or_ln920_1_fu_229_p2 = (or_ln920_fu_223_p2 | and_ln914_fu_176_p2);

assign or_ln920_2_fu_235_p2 = (repeat_original | or_ln920_1_fu_229_p2);

assign or_ln920_fu_223_p2 = (icmp_ln920_fu_201_p2 | and_ln920_fu_217_p2);

assign patches_parameters_address0 = zext_ln886_2_fu_147_p1;

assign select_ln180_fu_189_p3 = ((tmp_26_fu_182_p3[0:0] == 1'b1) ? sub_ln180_reg_271 : white_space_height);

assign sub_ln180_fu_151_p2 = (64'd0 - white_space_height);

assign sub_ln886_fu_135_p2 = (tmp_fu_115_p3 - zext_ln886_fu_131_p1);

assign tmp_25_fu_162_p3 = previous_white_space_height[32'd63];

assign tmp_26_fu_182_p3 = white_space_height[32'd63];

assign tmp_fu_115_p3 = {{lastPatchIndex}, {7'd0}};

assign tmp_s_fu_123_p3 = {{lastPatchIndex}, {3'd0}};

assign xor_ln914_fu_170_p2 = (tmp_25_fu_162_p3 ^ 1'd1);

assign xor_ln920_fu_241_p2 = (or_ln920_2_fu_235_p2 ^ 1'd1);

assign zext_ln886_2_fu_147_p1 = add_ln886_reg_253;

assign zext_ln886_fu_131_p1 = tmp_s_fu_123_p3;

always @ (posedge ap_clk) begin
    add_ln886_reg_253[2:0] <= 3'b101;
end

endmodule //MPSQ_getSolveNextPatchPairWhileCondition
