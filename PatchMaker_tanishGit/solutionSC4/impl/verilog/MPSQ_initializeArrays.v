// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MPSQ_initializeArrays (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        patches_superpoints_address0,
        patches_superpoints_ce0,
        patches_superpoints_we0,
        patches_superpoints_d0,
        patches_parameters_address0,
        patches_parameters_ce0,
        patches_parameters_we0,
        patches_parameters_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state5 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state9 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] patches_superpoints_address0;
output   patches_superpoints_ce0;
output   patches_superpoints_we0;
output  [63:0] patches_superpoints_d0;
output  [6:0] patches_parameters_address0;
output   patches_parameters_ce0;
output   patches_parameters_we0;
output  [31:0] patches_parameters_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg patches_superpoints_ce0;
reg patches_superpoints_we0;
reg patches_parameters_ce0;
reg patches_parameters_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [11:0] indvar_flatten13_reg_124;
reg   [5:0] a_reg_135;
reg   [7:0] indvar_flatten_reg_146;
reg   [2:0] b_reg_157;
reg   [4:0] c_reg_168;
reg   [6:0] indvar_flatten59_reg_179;
reg   [5:0] indvar_flatten35_reg_190;
reg   [1:0] a_1_reg_201;
reg   [1:0] b_3_reg_212;
reg   [4:0] indvar_flatten21_reg_223;
reg   [2:0] c_3_reg_234;
reg   [1:0] d_reg_245;
wire   [11:0] add_ln597_1_fu_256_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln597_fu_262_p2;
reg   [0:0] icmp_ln597_reg_663;
reg   [0:0] icmp_ln597_reg_663_pp0_iter1_reg;
wire   [5:0] select_ln597_1_fu_288_p3;
reg   [5:0] select_ln597_1_reg_667;
wire   [4:0] select_ln601_fu_326_p3;
reg   [4:0] select_ln601_reg_674;
wire   [2:0] select_ln601_1_fu_334_p3;
reg   [2:0] select_ln601_1_reg_679;
wire   [4:0] add_ln607_fu_342_p2;
wire   [7:0] select_ln601_2_fu_354_p3;
wire   [11:0] add_ln612_2_fu_398_p2;
reg   [11:0] add_ln612_2_reg_695;
wire   [6:0] add_ln618_1_fu_408_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state6_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
wire    ap_block_state8_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln618_fu_414_p2;
reg   [0:0] icmp_ln618_reg_705;
reg   [0:0] icmp_ln618_reg_705_pp1_iter1_reg;
wire   [0:0] icmp_ln622_fu_420_p2;
reg   [0:0] icmp_ln622_reg_709;
wire   [5:0] select_ln622_2_fu_432_p3;
wire   [1:0] select_ln618_1_fu_453_p3;
reg   [1:0] select_ln618_1_reg_724;
reg    ap_enable_reg_pp1_iter1;
wire   [1:0] select_ln622_1_fu_534_p3;
reg   [1:0] select_ln622_1_reg_729;
wire   [5:0] add_ln639_fu_546_p2;
reg   [5:0] add_ln639_reg_734;
wire   [1:0] select_ln628_fu_586_p3;
reg   [1:0] select_ln628_reg_739;
wire   [2:0] select_ln628_1_fu_594_p3;
reg   [2:0] select_ln628_1_reg_744;
wire   [1:0] add_ln634_fu_602_p2;
wire   [4:0] select_ln628_2_fu_614_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state5;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_condition_pp1_exit_iter1_state7;
reg    ap_enable_reg_pp1_iter2;
reg   [5:0] ap_phi_mux_a_phi_fu_139_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_b_phi_fu_161_p4;
reg   [1:0] ap_phi_mux_a_1_phi_fu_205_p4;
wire    ap_block_pp1_stage0;
reg   [1:0] ap_phi_mux_b_3_phi_fu_216_p4;
reg   [2:0] ap_phi_mux_c_3_phi_fu_238_p4;
wire   [63:0] zext_ln612_3_fu_404_p1;
wire   [63:0] zext_ln639_5_fu_653_p1;
wire   [0:0] icmp_ln601_fu_274_p2;
wire   [5:0] add_ln597_fu_268_p2;
wire   [0:0] icmp_ln607_fu_302_p2;
wire   [0:0] xor_ln597_fu_296_p2;
wire   [2:0] select_ln597_fu_280_p3;
wire   [0:0] and_ln597_fu_308_p2;
wire   [0:0] or_ln601_fu_320_p2;
wire   [2:0] add_ln601_fu_314_p2;
wire   [7:0] add_ln601_1_fu_348_p2;
wire   [7:0] tmp_fu_365_p3;
wire   [7:0] zext_ln612_fu_362_p1;
wire   [7:0] add_ln612_fu_372_p2;
wire   [7:0] zext_ln612_1_fu_378_p1;
wire   [7:0] add_ln612_1_fu_381_p2;
wire   [11:0] tmp_25_cast_fu_387_p3;
wire   [11:0] zext_ln612_2_fu_395_p1;
wire   [5:0] add_ln622_1_fu_426_p2;
wire   [1:0] add_ln618_fu_440_p2;
wire   [3:0] tmp_s_fu_464_p3;
wire   [4:0] zext_ln639_1_fu_472_p1;
wire   [4:0] zext_ln639_fu_460_p1;
wire   [4:0] sub_ln639_fu_476_p2;
wire   [0:0] icmp_ln634_fu_491_p2;
wire   [0:0] xor_ln618_fu_486_p2;
wire   [0:0] icmp_ln628_fu_503_p2;
wire   [1:0] select_ln618_fu_446_p3;
wire   [0:0] and_ln618_1_fu_509_p2;
wire   [0:0] or_ln622_fu_521_p2;
wire   [1:0] add_ln622_fu_515_p2;
wire  signed [5:0] sext_ln622_fu_482_p1;
wire   [5:0] zext_ln639_2_fu_542_p1;
wire   [0:0] xor_ln622_fu_552_p2;
wire   [0:0] and_ln618_fu_497_p2;
wire   [0:0] or_ln622_1_fu_558_p2;
wire   [2:0] select_ln622_fu_526_p3;
wire   [0:0] and_ln622_fu_563_p2;
wire   [0:0] or_ln628_fu_575_p2;
wire   [0:0] or_ln628_1_fu_581_p2;
wire   [2:0] add_ln628_fu_569_p2;
wire   [4:0] add_ln628_1_fu_608_p2;
wire   [5:0] shl_ln639_fu_622_p2;
wire   [5:0] zext_ln639_3_fu_627_p1;
wire   [5:0] add_ln639_1_fu_630_p2;
wire   [6:0] tmp_30_cast_fu_636_p3;
wire   [6:0] zext_ln639_4_fu_644_p1;
wire   [6:0] add_ln639_2_fu_647_p2;
wire    ap_CS_fsm_state9;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter1_state7) & (ap_enable_reg_pp1_iter0 == 1'b0)))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter1_state7))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_1_reg_201 <= 2'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln618_reg_705_pp1_iter1_reg == 1'd0))) begin
        a_1_reg_201 <= select_ln618_1_reg_724;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln597_reg_663 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        a_reg_135 <= select_ln597_1_reg_667;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        a_reg_135 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_3_reg_212 <= 2'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln618_reg_705_pp1_iter1_reg == 1'd0))) begin
        b_3_reg_212 <= select_ln622_1_reg_729;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln597_reg_663 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        b_reg_157 <= select_ln601_1_reg_679;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        b_reg_157 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_3_reg_234 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln618_reg_705_pp1_iter1_reg == 1'd0))) begin
        c_3_reg_234 <= select_ln628_1_reg_744;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln597_fu_262_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_reg_168 <= add_ln607_fu_342_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_reg_168 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        d_reg_245 <= 2'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln618_reg_705 == 1'd0))) begin
        d_reg_245 <= add_ln634_fu_602_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln597_fu_262_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_124 <= add_ln597_1_fu_256_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten13_reg_124 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten21_reg_223 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln618_reg_705 == 1'd0))) begin
        indvar_flatten21_reg_223 <= select_ln628_2_fu_614_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten35_reg_190 <= 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln618_fu_414_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten35_reg_190 <= select_ln622_2_fu_432_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten59_reg_179 <= 7'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln618_fu_414_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten59_reg_179 <= add_ln618_1_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln597_fu_262_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_146 <= select_ln601_2_fu_354_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_146 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln597_reg_663 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln612_2_reg_695 <= add_ln612_2_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln618_reg_705 == 1'd0))) begin
        add_ln639_reg_734 <= add_ln639_fu_546_p2;
        select_ln628_reg_739 <= select_ln628_fu_586_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln597_reg_663 <= icmp_ln597_fu_262_p2;
        icmp_ln597_reg_663_pp0_iter1_reg <= icmp_ln597_reg_663;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln618_reg_705 <= icmp_ln618_fu_414_p2;
        icmp_ln618_reg_705_pp1_iter1_reg <= icmp_ln618_reg_705;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln618_fu_414_p2 == 1'd0))) begin
        icmp_ln622_reg_709 <= icmp_ln622_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln597_fu_262_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln597_1_reg_667 <= select_ln597_1_fu_288_p3;
        select_ln601_1_reg_679 <= select_ln601_1_fu_334_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln597_fu_262_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln601_reg_674 <= select_ln601_fu_326_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln618_reg_705 == 1'd0))) begin
        select_ln618_1_reg_724 <= select_ln618_1_fu_453_p3;
        select_ln622_1_reg_729 <= select_ln622_1_fu_534_p3;
        select_ln628_1_reg_744 <= select_ln628_1_fu_594_p3;
    end
end

always @ (*) begin
    if ((icmp_ln597_fu_262_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_condition_pp1_exit_iter1_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter1_state7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln618_fu_414_p2 == 1'd1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln618_reg_705_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_a_1_phi_fu_205_p4 = select_ln618_1_reg_724;
    end else begin
        ap_phi_mux_a_1_phi_fu_205_p4 = a_1_reg_201;
    end
end

always @ (*) begin
    if (((icmp_ln597_reg_663 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_a_phi_fu_139_p4 = select_ln597_1_reg_667;
    end else begin
        ap_phi_mux_a_phi_fu_139_p4 = a_reg_135;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln618_reg_705_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_b_3_phi_fu_216_p4 = select_ln622_1_reg_729;
    end else begin
        ap_phi_mux_b_3_phi_fu_216_p4 = b_3_reg_212;
    end
end

always @ (*) begin
    if (((icmp_ln597_reg_663 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_b_phi_fu_161_p4 = select_ln601_1_reg_679;
    end else begin
        ap_phi_mux_b_phi_fu_161_p4 = b_reg_157;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln618_reg_705_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_c_3_phi_fu_238_p4 = select_ln628_1_reg_744;
    end else begin
        ap_phi_mux_c_3_phi_fu_238_p4 = c_3_reg_234;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        patches_parameters_ce0 = 1'b1;
    end else begin
        patches_parameters_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln618_reg_705_pp1_iter1_reg == 1'd0))) begin
        patches_parameters_we0 = 1'b1;
    end else begin
        patches_parameters_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        patches_superpoints_ce0 = 1'b1;
    end else begin
        patches_superpoints_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln597_reg_663_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        patches_superpoints_we0 = 1'b1;
    end else begin
        patches_superpoints_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln597_fu_262_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln597_fu_262_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln597_1_fu_256_p2 = (indvar_flatten13_reg_124 + 12'd1);

assign add_ln597_fu_268_p2 = (ap_phi_mux_a_phi_fu_139_p4 + 6'd1);

assign add_ln601_1_fu_348_p2 = (indvar_flatten_reg_146 + 8'd1);

assign add_ln601_fu_314_p2 = (select_ln597_fu_280_p3 + 3'd1);

assign add_ln607_fu_342_p2 = (select_ln601_fu_326_p3 + 5'd1);

assign add_ln612_1_fu_381_p2 = (add_ln612_fu_372_p2 + zext_ln612_1_fu_378_p1);

assign add_ln612_2_fu_398_p2 = (tmp_25_cast_fu_387_p3 + zext_ln612_2_fu_395_p1);

assign add_ln612_fu_372_p2 = (tmp_fu_365_p3 + zext_ln612_fu_362_p1);

assign add_ln618_1_fu_408_p2 = (indvar_flatten59_reg_179 + 7'd1);

assign add_ln618_fu_440_p2 = (ap_phi_mux_a_1_phi_fu_205_p4 + 2'd1);

assign add_ln622_1_fu_426_p2 = (indvar_flatten35_reg_190 + 6'd1);

assign add_ln622_fu_515_p2 = (select_ln618_fu_446_p3 + 2'd1);

assign add_ln628_1_fu_608_p2 = (indvar_flatten21_reg_223 + 5'd1);

assign add_ln628_fu_569_p2 = (select_ln622_fu_526_p3 + 3'd1);

assign add_ln634_fu_602_p2 = (select_ln628_fu_586_p3 + 2'd1);

assign add_ln639_1_fu_630_p2 = (shl_ln639_fu_622_p2 + zext_ln639_3_fu_627_p1);

assign add_ln639_2_fu_647_p2 = (tmp_30_cast_fu_636_p3 + zext_ln639_4_fu_644_p1);

assign add_ln639_fu_546_p2 = ($signed(sext_ln622_fu_482_p1) + $signed(zext_ln639_2_fu_542_p1));

assign and_ln597_fu_308_p2 = (xor_ln597_fu_296_p2 & icmp_ln607_fu_302_p2);

assign and_ln618_1_fu_509_p2 = (xor_ln618_fu_486_p2 & icmp_ln628_fu_503_p2);

assign and_ln618_fu_497_p2 = (xor_ln618_fu_486_p2 & icmp_ln634_fu_491_p2);

assign and_ln622_fu_563_p2 = (or_ln622_1_fu_558_p2 & and_ln618_fu_497_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign icmp_ln597_fu_262_p2 = ((indvar_flatten13_reg_124 == 12'd2560) ? 1'b1 : 1'b0);

assign icmp_ln601_fu_274_p2 = ((indvar_flatten_reg_146 == 8'd80) ? 1'b1 : 1'b0);

assign icmp_ln607_fu_302_p2 = ((c_reg_168 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln618_fu_414_p2 = ((indvar_flatten59_reg_179 == 7'd72) ? 1'b1 : 1'b0);

assign icmp_ln622_fu_420_p2 = ((indvar_flatten35_reg_190 == 6'd24) ? 1'b1 : 1'b0);

assign icmp_ln628_fu_503_p2 = ((indvar_flatten21_reg_223 == 5'd8) ? 1'b1 : 1'b0);

assign icmp_ln634_fu_491_p2 = ((d_reg_245 == 2'd2) ? 1'b1 : 1'b0);

assign or_ln601_fu_320_p2 = (icmp_ln601_fu_274_p2 | and_ln597_fu_308_p2);

assign or_ln622_1_fu_558_p2 = (xor_ln622_fu_552_p2 | icmp_ln622_reg_709);

assign or_ln622_fu_521_p2 = (icmp_ln622_reg_709 | and_ln618_1_fu_509_p2);

assign or_ln628_1_fu_581_p2 = (or_ln628_fu_575_p2 | icmp_ln622_reg_709);

assign or_ln628_fu_575_p2 = (and_ln622_fu_563_p2 | and_ln618_1_fu_509_p2);

assign patches_parameters_address0 = zext_ln639_5_fu_653_p1;

assign patches_parameters_d0 = 32'd0;

assign patches_superpoints_address0 = zext_ln612_3_fu_404_p1;

assign patches_superpoints_d0 = 64'd0;

assign select_ln597_1_fu_288_p3 = ((icmp_ln601_fu_274_p2[0:0] == 1'b1) ? add_ln597_fu_268_p2 : ap_phi_mux_a_phi_fu_139_p4);

assign select_ln597_fu_280_p3 = ((icmp_ln601_fu_274_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_b_phi_fu_161_p4);

assign select_ln601_1_fu_334_p3 = ((and_ln597_fu_308_p2[0:0] == 1'b1) ? add_ln601_fu_314_p2 : select_ln597_fu_280_p3);

assign select_ln601_2_fu_354_p3 = ((icmp_ln601_fu_274_p2[0:0] == 1'b1) ? 8'd1 : add_ln601_1_fu_348_p2);

assign select_ln601_fu_326_p3 = ((or_ln601_fu_320_p2[0:0] == 1'b1) ? 5'd0 : c_reg_168);

assign select_ln618_1_fu_453_p3 = ((icmp_ln622_reg_709[0:0] == 1'b1) ? add_ln618_fu_440_p2 : ap_phi_mux_a_1_phi_fu_205_p4);

assign select_ln618_fu_446_p3 = ((icmp_ln622_reg_709[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_b_3_phi_fu_216_p4);

assign select_ln622_1_fu_534_p3 = ((and_ln618_1_fu_509_p2[0:0] == 1'b1) ? add_ln622_fu_515_p2 : select_ln618_fu_446_p3);

assign select_ln622_2_fu_432_p3 = ((icmp_ln622_fu_420_p2[0:0] == 1'b1) ? 6'd1 : add_ln622_1_fu_426_p2);

assign select_ln622_fu_526_p3 = ((or_ln622_fu_521_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_c_3_phi_fu_238_p4);

assign select_ln628_1_fu_594_p3 = ((and_ln622_fu_563_p2[0:0] == 1'b1) ? add_ln628_fu_569_p2 : select_ln622_fu_526_p3);

assign select_ln628_2_fu_614_p3 = ((or_ln622_fu_521_p2[0:0] == 1'b1) ? 5'd1 : add_ln628_1_fu_608_p2);

assign select_ln628_fu_586_p3 = ((or_ln628_1_fu_581_p2[0:0] == 1'b1) ? 2'd0 : d_reg_245);

assign sext_ln622_fu_482_p1 = $signed(sub_ln639_fu_476_p2);

assign shl_ln639_fu_622_p2 = add_ln639_reg_734 << 6'd2;

assign sub_ln639_fu_476_p2 = (zext_ln639_1_fu_472_p1 - zext_ln639_fu_460_p1);

assign tmp_25_cast_fu_387_p3 = {{add_ln612_1_fu_381_p2}, {4'd0}};

assign tmp_30_cast_fu_636_p3 = {{add_ln639_1_fu_630_p2}, {1'd0}};

assign tmp_fu_365_p3 = {{select_ln597_1_reg_667}, {2'd0}};

assign tmp_s_fu_464_p3 = {{select_ln618_1_fu_453_p3}, {2'd0}};

assign xor_ln597_fu_296_p2 = (icmp_ln601_fu_274_p2 ^ 1'd1);

assign xor_ln618_fu_486_p2 = (icmp_ln622_reg_709 ^ 1'd1);

assign xor_ln622_fu_552_p2 = (icmp_ln628_fu_503_p2 ^ 1'd1);

assign zext_ln612_1_fu_378_p1 = select_ln601_1_reg_679;

assign zext_ln612_2_fu_395_p1 = select_ln601_reg_674;

assign zext_ln612_3_fu_404_p1 = add_ln612_2_reg_695;

assign zext_ln612_fu_362_p1 = select_ln597_1_reg_667;

assign zext_ln639_1_fu_472_p1 = tmp_s_fu_464_p3;

assign zext_ln639_2_fu_542_p1 = select_ln622_1_fu_534_p3;

assign zext_ln639_3_fu_627_p1 = select_ln628_1_reg_744;

assign zext_ln639_4_fu_644_p1 = select_ln628_reg_739;

assign zext_ln639_5_fu_653_p1 = add_ln639_2_fu_647_p2;

assign zext_ln639_fu_460_p1 = select_ln618_1_fu_453_p3;

endmodule //MPSQ_initializeArrays
