// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MPSQ_MPSQ,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu19p-fsvb3824-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.282000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=2320,HLS_SYN_LUT=8703,HLS_VERSION=2020_2}" *)

module MPSQ (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stop,
        ppl,
        leftRight,
        n_patches_i,
        n_patches_o,
        n_patches_o_ap_vld,
        GDarray_address0,
        GDarray_ce0,
        GDarray_q0,
        GDn_points_address0,
        GDn_points_ce0,
        GDn_points_q0,
        patches_superpointsOUTPUT_address0,
        patches_superpointsOUTPUT_ce0,
        patches_superpointsOUTPUT_we0,
        patches_superpointsOUTPUT_d0,
        patches_superpointsOUTPUT_q0,
        patches_superpointsOUTPUT_address1,
        patches_superpointsOUTPUT_ce1,
        patches_superpointsOUTPUT_we1,
        patches_superpointsOUTPUT_d1,
        patches_superpointsOUTPUT_q1,
        tempArray_address0,
        tempArray_ce0,
        tempArray_we0,
        tempArray_d0,
        tempArray_address1,
        tempArray_ce1,
        tempArray_we1,
        tempArray_d1
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_state5 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] stop;
input  [31:0] ppl;
input   leftRight;
input  [7:0] n_patches_i;
output  [7:0] n_patches_o;
output   n_patches_o_ap_vld;
output  [10:0] GDarray_address0;
output   GDarray_ce0;
input  [63:0] GDarray_q0;
output  [2:0] GDn_points_address0;
output   GDn_points_ce0;
input  [31:0] GDn_points_q0;
output  [11:0] patches_superpointsOUTPUT_address0;
output   patches_superpointsOUTPUT_ce0;
output   patches_superpointsOUTPUT_we0;
output  [63:0] patches_superpointsOUTPUT_d0;
input  [63:0] patches_superpointsOUTPUT_q0;
output  [11:0] patches_superpointsOUTPUT_address1;
output   patches_superpointsOUTPUT_ce1;
output   patches_superpointsOUTPUT_we1;
output  [63:0] patches_superpointsOUTPUT_d1;
input  [63:0] patches_superpointsOUTPUT_q1;
output  [7:0] tempArray_address0;
output   tempArray_ce0;
output   tempArray_we0;
output  [63:0] tempArray_d0;
output  [7:0] tempArray_address1;
output   tempArray_ce1;
output   tempArray_we1;
output  [63:0] tempArray_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] n_patches_o;
reg GDarray_ce0;
reg[7:0] tempArray_address0;
reg tempArray_ce0;
reg tempArray_we0;
reg[63:0] tempArray_d0;
reg tempArray_ce1;
reg tempArray_we1;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] indvar_flatten_reg_169;
reg   [2:0] a_reg_180;
reg   [8:0] b_reg_191;
wire    ap_CS_fsm_state2;
wire   [10:0] add_ln624_1_fu_228_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln624_fu_234_p2;
reg   [0:0] icmp_ln624_reg_367;
wire   [8:0] select_ln624_fu_252_p3;
reg   [8:0] select_ln624_reg_371;
wire   [2:0] select_ln624_1_fu_260_p3;
reg   [2:0] select_ln624_1_reg_376;
wire   [8:0] add_ln630_fu_285_p2;
wire    grp_initializeArrays_fu_220_ap_ready;
wire    grp_initializeArrays_fu_220_ap_done;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg   [11:0] patches_superpoints_V_address0;
reg    patches_superpoints_V_ce0;
reg    patches_superpoints_V_we0;
reg   [31:0] patches_superpoints_V_d0;
wire   [31:0] patches_superpoints_V_q0;
reg   [11:0] patches_parameters_V_address0;
reg    patches_parameters_V_ce0;
reg    patches_parameters_V_we0;
reg   [31:0] patches_parameters_V_d0;
wire   [31:0] patches_parameters_V_q0;
reg    patches_parameters_V_ce1;
wire   [31:0] patches_parameters_V_q1;
reg   [11:0] GDarrayDecoded_V_address0;
reg    GDarrayDecoded_V_ce0;
reg    GDarrayDecoded_V_we0;
wire   [31:0] GDarrayDecoded_V_d0;
wire   [31:0] GDarrayDecoded_V_q0;
wire   [11:0] GDarrayDecoded_V_address1;
reg    GDarrayDecoded_V_ce1;
reg    GDarrayDecoded_V_we1;
wire   [31:0] GDarrayDecoded_V_d1;
wire    grp_solveNextColumn_fu_202_ap_start;
wire    grp_solveNextColumn_fu_202_ap_done;
wire    grp_solveNextColumn_fu_202_ap_idle;
wire    grp_solveNextColumn_fu_202_ap_ready;
wire   [7:0] grp_solveNextColumn_fu_202_n_patches_o;
wire    grp_solveNextColumn_fu_202_n_patches_o_ap_vld;
wire   [2:0] grp_solveNextColumn_fu_202_GDn_points_address0;
wire    grp_solveNextColumn_fu_202_GDn_points_ce0;
wire   [7:0] grp_solveNextColumn_fu_202_tempArray_address0;
wire    grp_solveNextColumn_fu_202_tempArray_ce0;
wire    grp_solveNextColumn_fu_202_tempArray_we0;
wire   [63:0] grp_solveNextColumn_fu_202_tempArray_d0;
wire   [7:0] grp_solveNextColumn_fu_202_tempArray_address1;
wire    grp_solveNextColumn_fu_202_tempArray_ce1;
wire    grp_solveNextColumn_fu_202_tempArray_we1;
wire   [63:0] grp_solveNextColumn_fu_202_tempArray_d1;
wire   [11:0] grp_solveNextColumn_fu_202_GDarrayDecoded_address0;
wire    grp_solveNextColumn_fu_202_GDarrayDecoded_ce0;
wire   [11:0] grp_solveNextColumn_fu_202_patches_superpoints_address0;
wire    grp_solveNextColumn_fu_202_patches_superpoints_ce0;
wire    grp_solveNextColumn_fu_202_patches_superpoints_we0;
wire   [31:0] grp_solveNextColumn_fu_202_patches_superpoints_d0;
wire   [11:0] grp_solveNextColumn_fu_202_patches_parameters_address0;
wire    grp_solveNextColumn_fu_202_patches_parameters_ce0;
wire    grp_solveNextColumn_fu_202_patches_parameters_we0;
wire   [31:0] grp_solveNextColumn_fu_202_patches_parameters_d0;
wire   [11:0] grp_solveNextColumn_fu_202_patches_parameters_address1;
wire    grp_solveNextColumn_fu_202_patches_parameters_ce1;
wire    grp_initializeArrays_fu_220_ap_start;
wire    grp_initializeArrays_fu_220_ap_idle;
wire   [11:0] grp_initializeArrays_fu_220_patches_superpoints_address0;
wire    grp_initializeArrays_fu_220_patches_superpoints_ce0;
wire    grp_initializeArrays_fu_220_patches_superpoints_we0;
wire   [31:0] grp_initializeArrays_fu_220_patches_superpoints_d0;
wire   [11:0] grp_initializeArrays_fu_220_patches_parameters_address0;
wire    grp_initializeArrays_fu_220_patches_parameters_ce0;
wire    grp_initializeArrays_fu_220_patches_parameters_we0;
wire   [31:0] grp_initializeArrays_fu_220_patches_parameters_d0;
reg   [2:0] ap_phi_mux_a_phi_fu_184_p4;
wire    ap_block_pp0_stage0;
reg    grp_solveNextColumn_fu_202_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    grp_initializeArrays_fu_220_ap_start_reg;
wire   [63:0] zext_ln635_1_fu_280_p1;
wire   [63:0] zext_ln635_2_fu_319_p1;
wire   [63:0] zext_ln636_fu_336_p1;
wire   [0:0] icmp_ln630_fu_246_p2;
wire   [2:0] add_ln624_fu_240_p2;
wire   [7:0] trunc_ln635_fu_268_p1;
wire   [10:0] tmp_s_fu_272_p3;
wire   [10:0] tmp_fu_291_p3;
wire   [11:0] tmp_cast_fu_298_p1;
wire   [11:0] zext_ln635_fu_302_p1;
wire   [11:0] add_ln635_fu_305_p2;
wire   [12:0] tmp_17_fu_311_p3;
wire   [11:0] shl_ln635_fu_324_p2;
wire   [11:0] or_ln636_fu_330_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_solveNextColumn_fu_202_ap_start_reg = 1'b0;
#0 grp_initializeArrays_fu_220_ap_start_reg = 1'b0;
end

MPSQ_patches_superpoints_V #(
    .DataWidth( 32 ),
    .AddressRange( 2560 ),
    .AddressWidth( 12 ))
patches_superpoints_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(patches_superpoints_V_address0),
    .ce0(patches_superpoints_V_ce0),
    .we0(patches_superpoints_V_we0),
    .d0(patches_superpoints_V_d0),
    .q0(patches_superpoints_V_q0)
);

MPSQ_patches_parameters_V #(
    .DataWidth( 32 ),
    .AddressRange( 3840 ),
    .AddressWidth( 12 ))
patches_parameters_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(patches_parameters_V_address0),
    .ce0(patches_parameters_V_ce0),
    .we0(patches_parameters_V_we0),
    .d0(patches_parameters_V_d0),
    .q0(patches_parameters_V_q0),
    .address1(grp_solveNextColumn_fu_202_patches_parameters_address1),
    .ce1(patches_parameters_V_ce1),
    .q1(patches_parameters_V_q1)
);

MPSQ_GDarrayDecoded_V #(
    .DataWidth( 32 ),
    .AddressRange( 2560 ),
    .AddressWidth( 12 ))
GDarrayDecoded_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(GDarrayDecoded_V_address0),
    .ce0(GDarrayDecoded_V_ce0),
    .we0(GDarrayDecoded_V_we0),
    .d0(GDarrayDecoded_V_d0),
    .q0(GDarrayDecoded_V_q0),
    .address1(GDarrayDecoded_V_address1),
    .ce1(GDarrayDecoded_V_ce1),
    .we1(GDarrayDecoded_V_we1),
    .d1(GDarrayDecoded_V_d1)
);

MPSQ_solveNextColumn grp_solveNextColumn_fu_202(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_solveNextColumn_fu_202_ap_start),
    .ap_done(grp_solveNextColumn_fu_202_ap_done),
    .ap_idle(grp_solveNextColumn_fu_202_ap_idle),
    .ap_ready(grp_solveNextColumn_fu_202_ap_ready),
    .n_patches_i(n_patches_i),
    .n_patches_o(grp_solveNextColumn_fu_202_n_patches_o),
    .n_patches_o_ap_vld(grp_solveNextColumn_fu_202_n_patches_o_ap_vld),
    .GDn_points_address0(grp_solveNextColumn_fu_202_GDn_points_address0),
    .GDn_points_ce0(grp_solveNextColumn_fu_202_GDn_points_ce0),
    .GDn_points_q0(GDn_points_q0),
    .tempArray_address0(grp_solveNextColumn_fu_202_tempArray_address0),
    .tempArray_ce0(grp_solveNextColumn_fu_202_tempArray_ce0),
    .tempArray_we0(grp_solveNextColumn_fu_202_tempArray_we0),
    .tempArray_d0(grp_solveNextColumn_fu_202_tempArray_d0),
    .tempArray_address1(grp_solveNextColumn_fu_202_tempArray_address1),
    .tempArray_ce1(grp_solveNextColumn_fu_202_tempArray_ce1),
    .tempArray_we1(grp_solveNextColumn_fu_202_tempArray_we1),
    .tempArray_d1(grp_solveNextColumn_fu_202_tempArray_d1),
    .ppl(ppl),
    .GDarrayDecoded_address0(grp_solveNextColumn_fu_202_GDarrayDecoded_address0),
    .GDarrayDecoded_ce0(grp_solveNextColumn_fu_202_GDarrayDecoded_ce0),
    .GDarrayDecoded_q0(GDarrayDecoded_V_q0),
    .patches_superpoints_address0(grp_solveNextColumn_fu_202_patches_superpoints_address0),
    .patches_superpoints_ce0(grp_solveNextColumn_fu_202_patches_superpoints_ce0),
    .patches_superpoints_we0(grp_solveNextColumn_fu_202_patches_superpoints_we0),
    .patches_superpoints_d0(grp_solveNextColumn_fu_202_patches_superpoints_d0),
    .patches_superpoints_q0(patches_superpoints_V_q0),
    .patches_parameters_address0(grp_solveNextColumn_fu_202_patches_parameters_address0),
    .patches_parameters_ce0(grp_solveNextColumn_fu_202_patches_parameters_ce0),
    .patches_parameters_we0(grp_solveNextColumn_fu_202_patches_parameters_we0),
    .patches_parameters_d0(grp_solveNextColumn_fu_202_patches_parameters_d0),
    .patches_parameters_q0(patches_parameters_V_q0),
    .patches_parameters_address1(grp_solveNextColumn_fu_202_patches_parameters_address1),
    .patches_parameters_ce1(grp_solveNextColumn_fu_202_patches_parameters_ce1),
    .patches_parameters_q1(patches_parameters_V_q1)
);

MPSQ_initializeArrays grp_initializeArrays_fu_220(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_initializeArrays_fu_220_ap_start),
    .ap_done(grp_initializeArrays_fu_220_ap_done),
    .ap_idle(grp_initializeArrays_fu_220_ap_idle),
    .ap_ready(grp_initializeArrays_fu_220_ap_ready),
    .patches_superpoints_address0(grp_initializeArrays_fu_220_patches_superpoints_address0),
    .patches_superpoints_ce0(grp_initializeArrays_fu_220_patches_superpoints_ce0),
    .patches_superpoints_we0(grp_initializeArrays_fu_220_patches_superpoints_we0),
    .patches_superpoints_d0(grp_initializeArrays_fu_220_patches_superpoints_d0),
    .patches_parameters_address0(grp_initializeArrays_fu_220_patches_parameters_address0),
    .patches_parameters_ce0(grp_initializeArrays_fu_220_patches_parameters_ce0),
    .patches_parameters_we0(grp_initializeArrays_fu_220_patches_parameters_we0),
    .patches_parameters_d0(grp_initializeArrays_fu_220_patches_parameters_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (grp_initializeArrays_fu_220_ap_done == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (grp_initializeArrays_fu_220_ap_done == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_initializeArrays_fu_220_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_initializeArrays_fu_220_ap_start_reg <= 1'b1;
        end else if ((grp_initializeArrays_fu_220_ap_ready == 1'b1)) begin
            grp_initializeArrays_fu_220_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_solveNextColumn_fu_202_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_solveNextColumn_fu_202_ap_start_reg <= 1'b1;
        end else if ((grp_solveNextColumn_fu_202_ap_ready == 1'b1)) begin
            grp_solveNextColumn_fu_202_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln624_reg_367 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        a_reg_180 <= select_ln624_1_reg_376;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_initializeArrays_fu_220_ap_done == 1'b1))) begin
        a_reg_180 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln624_fu_234_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_reg_191 <= add_ln630_fu_285_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_initializeArrays_fu_220_ap_done == 1'b1))) begin
        b_reg_191 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln624_fu_234_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_169 <= add_ln624_1_fu_228_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_initializeArrays_fu_220_ap_done == 1'b1))) begin
        indvar_flatten_reg_169 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln624_reg_367 <= icmp_ln624_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln624_fu_234_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln624_1_reg_376 <= select_ln624_1_fu_260_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln624_fu_234_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln624_reg_371 <= select_ln624_fu_252_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        GDarrayDecoded_V_address0 = zext_ln636_fu_336_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        GDarrayDecoded_V_address0 = grp_solveNextColumn_fu_202_GDarrayDecoded_address0;
    end else begin
        GDarrayDecoded_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        GDarrayDecoded_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        GDarrayDecoded_V_ce0 = grp_solveNextColumn_fu_202_GDarrayDecoded_ce0;
    end else begin
        GDarrayDecoded_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        GDarrayDecoded_V_ce1 = 1'b1;
    end else begin
        GDarrayDecoded_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln624_reg_367 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        GDarrayDecoded_V_we0 = 1'b1;
    end else begin
        GDarrayDecoded_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln624_reg_367 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        GDarrayDecoded_V_we1 = 1'b1;
    end else begin
        GDarrayDecoded_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        GDarray_ce0 = 1'b1;
    end else begin
        GDarray_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln624_fu_234_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_solveNextColumn_fu_202_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln624_reg_367 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_a_phi_fu_184_p4 = select_ln624_1_reg_376;
    end else begin
        ap_phi_mux_a_phi_fu_184_p4 = a_reg_180;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_solveNextColumn_fu_202_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_solveNextColumn_fu_202_n_patches_o_ap_vld == 1'b1))) begin
        n_patches_o = grp_solveNextColumn_fu_202_n_patches_o;
    end else begin
        n_patches_o = n_patches_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_parameters_V_address0 = grp_initializeArrays_fu_220_patches_parameters_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        patches_parameters_V_address0 = grp_solveNextColumn_fu_202_patches_parameters_address0;
    end else begin
        patches_parameters_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_parameters_V_ce0 = grp_initializeArrays_fu_220_patches_parameters_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        patches_parameters_V_ce0 = grp_solveNextColumn_fu_202_patches_parameters_ce0;
    end else begin
        patches_parameters_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        patches_parameters_V_ce1 = grp_solveNextColumn_fu_202_patches_parameters_ce1;
    end else begin
        patches_parameters_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_parameters_V_d0 = grp_initializeArrays_fu_220_patches_parameters_d0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        patches_parameters_V_d0 = grp_solveNextColumn_fu_202_patches_parameters_d0;
    end else begin
        patches_parameters_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_parameters_V_we0 = grp_initializeArrays_fu_220_patches_parameters_we0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        patches_parameters_V_we0 = grp_solveNextColumn_fu_202_patches_parameters_we0;
    end else begin
        patches_parameters_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_superpoints_V_address0 = grp_initializeArrays_fu_220_patches_superpoints_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        patches_superpoints_V_address0 = grp_solveNextColumn_fu_202_patches_superpoints_address0;
    end else begin
        patches_superpoints_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_superpoints_V_ce0 = grp_initializeArrays_fu_220_patches_superpoints_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        patches_superpoints_V_ce0 = grp_solveNextColumn_fu_202_patches_superpoints_ce0;
    end else begin
        patches_superpoints_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_superpoints_V_d0 = grp_initializeArrays_fu_220_patches_superpoints_d0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        patches_superpoints_V_d0 = grp_solveNextColumn_fu_202_patches_superpoints_d0;
    end else begin
        patches_superpoints_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patches_superpoints_V_we0 = grp_initializeArrays_fu_220_patches_superpoints_we0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        patches_superpoints_V_we0 = grp_solveNextColumn_fu_202_patches_superpoints_we0;
    end else begin
        patches_superpoints_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tempArray_address0 = 64'd197;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tempArray_address0 = grp_solveNextColumn_fu_202_tempArray_address0;
    end else begin
        tempArray_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_initializeArrays_fu_220_ap_done == 1'b1))) begin
        tempArray_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tempArray_ce0 = grp_solveNextColumn_fu_202_tempArray_ce0;
    end else begin
        tempArray_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tempArray_ce1 = grp_solveNextColumn_fu_202_tempArray_ce1;
    end else begin
        tempArray_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tempArray_d0 = 64'd22000100;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tempArray_d0 = grp_solveNextColumn_fu_202_tempArray_d0;
    end else begin
        tempArray_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_initializeArrays_fu_220_ap_done == 1'b1))) begin
        tempArray_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tempArray_we0 = grp_solveNextColumn_fu_202_tempArray_we0;
    end else begin
        tempArray_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tempArray_we1 = grp_solveNextColumn_fu_202_tempArray_we1;
    end else begin
        tempArray_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_initializeArrays_fu_220_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln624_fu_234_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln624_fu_234_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_solveNextColumn_fu_202_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign GDarrayDecoded_V_address1 = zext_ln635_2_fu_319_p1;

assign GDarrayDecoded_V_d0 = GDarray_q0[31:0];

assign GDarrayDecoded_V_d1 = {{GDarray_q0[63:32]}};

assign GDarray_address0 = zext_ln635_1_fu_280_p1;

assign GDn_points_address0 = grp_solveNextColumn_fu_202_GDn_points_address0;

assign GDn_points_ce0 = grp_solveNextColumn_fu_202_GDn_points_ce0;

assign add_ln624_1_fu_228_p2 = (indvar_flatten_reg_169 + 11'd1);

assign add_ln624_fu_240_p2 = (ap_phi_mux_a_phi_fu_184_p4 + 3'd1);

assign add_ln630_fu_285_p2 = (select_ln624_fu_252_p3 + 9'd1);

assign add_ln635_fu_305_p2 = (tmp_cast_fu_298_p1 + zext_ln635_fu_302_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_initializeArrays_fu_220_ap_start = grp_initializeArrays_fu_220_ap_start_reg;

assign grp_solveNextColumn_fu_202_ap_start = grp_solveNextColumn_fu_202_ap_start_reg;

assign icmp_ln624_fu_234_p2 = ((indvar_flatten_reg_169 == 11'd1280) ? 1'b1 : 1'b0);

assign icmp_ln630_fu_246_p2 = ((b_reg_191 == 9'd256) ? 1'b1 : 1'b0);

assign n_patches_o_ap_vld = grp_solveNextColumn_fu_202_n_patches_o_ap_vld;

assign or_ln636_fu_330_p2 = (shl_ln635_fu_324_p2 | 12'd1);

assign patches_superpointsOUTPUT_address0 = 12'd0;

assign patches_superpointsOUTPUT_address1 = 12'd0;

assign patches_superpointsOUTPUT_ce0 = 1'b0;

assign patches_superpointsOUTPUT_ce1 = 1'b0;

assign patches_superpointsOUTPUT_d0 = 64'd0;

assign patches_superpointsOUTPUT_d1 = 64'd0;

assign patches_superpointsOUTPUT_we0 = 1'b0;

assign patches_superpointsOUTPUT_we1 = 1'b0;

assign select_ln624_1_fu_260_p3 = ((icmp_ln630_fu_246_p2[0:0] == 1'b1) ? add_ln624_fu_240_p2 : ap_phi_mux_a_phi_fu_184_p4);

assign select_ln624_fu_252_p3 = ((icmp_ln630_fu_246_p2[0:0] == 1'b1) ? 9'd0 : b_reg_191);

assign shl_ln635_fu_324_p2 = add_ln635_fu_305_p2 << 12'd1;

assign tempArray_address1 = grp_solveNextColumn_fu_202_tempArray_address1;

assign tempArray_d1 = grp_solveNextColumn_fu_202_tempArray_d1;

assign tmp_17_fu_311_p3 = {{add_ln635_fu_305_p2}, {1'd0}};

assign tmp_cast_fu_298_p1 = tmp_fu_291_p3;

assign tmp_fu_291_p3 = {{select_ln624_1_reg_376}, {8'd0}};

assign tmp_s_fu_272_p3 = {{select_ln624_1_fu_260_p3}, {trunc_ln635_fu_268_p1}};

assign trunc_ln635_fu_268_p1 = select_ln624_fu_252_p3[7:0];

assign zext_ln635_1_fu_280_p1 = tmp_s_fu_272_p3;

assign zext_ln635_2_fu_319_p1 = tmp_17_fu_311_p3;

assign zext_ln635_fu_302_p1 = select_ln624_reg_371;

assign zext_ln636_fu_336_p1 = or_ln636_fu_330_p2;

endmodule //MPSQ
