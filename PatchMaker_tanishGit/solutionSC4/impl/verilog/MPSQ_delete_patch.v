// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MPSQ_delete_patch (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        n_patches,
        n_patches_ap_vld,
        n_patches_read,
        index,
        patches_superpoints_address0,
        patches_superpoints_ce0,
        patches_superpoints_we0,
        patches_superpoints_d0,
        patches_superpoints_address1,
        patches_superpoints_ce1,
        patches_superpoints_q1,
        patches_parameters_address0,
        patches_parameters_ce0,
        patches_parameters_we0,
        patches_parameters_d0,
        patches_parameters_address1,
        patches_parameters_ce1,
        patches_parameters_q1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_pp0_stage0 = 7'd4;
parameter    ap_ST_fsm_state7 = 7'd8;
parameter    ap_ST_fsm_pp1_stage0 = 7'd16;
parameter    ap_ST_fsm_state10 = 7'd32;
parameter    ap_ST_fsm_state11 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] n_patches;
output   n_patches_ap_vld;
input  [7:0] n_patches_read;
input  [1:0] index;
output  [7:0] patches_superpoints_address0;
output   patches_superpoints_ce0;
output   patches_superpoints_we0;
output  [63:0] patches_superpoints_d0;
output  [7:0] patches_superpoints_address1;
output   patches_superpoints_ce1;
input  [63:0] patches_superpoints_q1;
output  [6:0] patches_parameters_address0;
output   patches_parameters_ce0;
output   patches_parameters_we0;
output  [31:0] patches_parameters_d0;
output  [6:0] patches_parameters_address1;
output   patches_parameters_ce1;
input  [31:0] patches_parameters_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg n_patches_ap_vld;
reg[7:0] patches_superpoints_address0;
reg patches_superpoints_ce0;
reg patches_superpoints_we0;
reg[63:0] patches_superpoints_d0;
reg patches_superpoints_ce1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] indvar_flatten_reg_142;
reg   [2:0] a_reg_153;
reg   [4:0] b_reg_164;
reg   [6:0] indvar_flatten7_reg_175;
reg   [2:0] a_3_reg_186;
reg   [4:0] b_5_reg_197;
wire   [0:0] icmp_ln543_fu_219_p2;
reg   [0:0] icmp_ln543_reg_471;
wire   [0:0] tmp_23_fu_225_p3;
wire    ap_CS_fsm_state2;
wire   [1:0] i_fu_233_p2;
reg   [1:0] i_reg_479;
wire   [3:0] add_ln569_fu_251_p2;
reg   [3:0] add_ln569_reg_484;
wire   [3:0] add_ln569_1_fu_269_p2;
reg   [3:0] add_ln569_1_reg_489;
wire   [6:0] add_ln558_1_fu_275_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln558_fu_281_p2;
reg   [0:0] icmp_ln558_reg_499;
reg   [0:0] icmp_ln558_reg_499_pp0_iter1_reg;
reg   [0:0] icmp_ln558_reg_499_pp0_iter2_reg;
wire   [4:0] select_ln558_fu_299_p3;
reg   [4:0] select_ln558_reg_503;
wire   [2:0] select_ln558_1_fu_307_p3;
reg   [2:0] select_ln558_1_reg_508;
wire   [3:0] add_ln569_2_fu_319_p2;
reg   [3:0] add_ln569_2_reg_514;
wire   [4:0] add_ln564_fu_324_p2;
wire   [7:0] add_ln569_5_fu_367_p2;
reg   [7:0] add_ln569_5_reg_529;
reg   [7:0] add_ln569_5_reg_529_pp0_iter2_reg;
reg   [63:0] patches_superpoints_load_reg_534;
reg    ap_enable_reg_pp0_iter2;
wire   [6:0] add_ln580_1_fu_377_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln580_fu_383_p2;
reg   [0:0] icmp_ln580_reg_544;
wire   [4:0] select_ln580_fu_401_p3;
reg   [4:0] select_ln580_reg_548;
wire   [2:0] select_ln580_1_fu_409_p3;
reg   [2:0] select_ln580_1_reg_553;
wire   [4:0] add_ln586_fu_417_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state8;
reg    ap_enable_reg_pp1_iter1;
wire    grp_delete_patch_patches_parameters_fu_208_ap_start;
wire    grp_delete_patch_patches_parameters_fu_208_ap_done;
wire    grp_delete_patch_patches_parameters_fu_208_ap_idle;
wire    grp_delete_patch_patches_parameters_fu_208_ap_ready;
wire   [6:0] grp_delete_patch_patches_parameters_fu_208_patches_parameters_address0;
wire    grp_delete_patch_patches_parameters_fu_208_patches_parameters_ce0;
wire    grp_delete_patch_patches_parameters_fu_208_patches_parameters_we0;
wire   [31:0] grp_delete_patch_patches_parameters_fu_208_patches_parameters_d0;
wire   [6:0] grp_delete_patch_patches_parameters_fu_208_patches_parameters_address1;
wire    grp_delete_patch_patches_parameters_fu_208_patches_parameters_ce1;
reg   [1:0] i_011_reg_133;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_phi_mux_a_phi_fu_157_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_a_3_phi_fu_190_p4;
wire    ap_block_pp1_stage0;
reg    grp_delete_patch_patches_parameters_fu_208_ap_start_reg;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire   [63:0] zext_ln569_5_fu_362_p1;
wire   [63:0] zext_ln569_6_fu_373_p1;
wire   [63:0] zext_ln591_2_fu_449_p1;
wire   [7:0] index_cast20_fu_215_p1;
wire   [3:0] tmp_fu_243_p3;
wire   [3:0] zext_ln569_fu_239_p1;
wire   [3:0] tmp_s_fu_261_p3;
wire   [3:0] zext_ln569_1_fu_257_p1;
wire   [0:0] icmp_ln564_fu_293_p2;
wire   [2:0] add_ln558_fu_287_p2;
wire   [3:0] zext_ln569_2_fu_315_p1;
wire   [3:0] zext_ln569_3_fu_337_p1;
wire   [3:0] add_ln569_3_fu_340_p2;
wire   [7:0] tmp_50_cast_fu_330_p3;
wire   [7:0] zext_ln569_4_fu_353_p1;
wire   [7:0] add_ln569_4_fu_356_p2;
wire   [7:0] tmp_52_cast_fu_345_p3;
wire   [0:0] icmp_ln586_fu_395_p2;
wire   [2:0] add_ln580_fu_389_p2;
wire   [6:0] tmp_5_fu_423_p3;
wire   [7:0] zext_ln591_fu_430_p1;
wire   [7:0] add_ln591_fu_434_p2;
wire   [7:0] zext_ln591_1_fu_440_p1;
wire   [7:0] add_ln591_1_fu_443_p2;
reg    ap_block_state11_on_subcall_done;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 grp_delete_patch_patches_parameters_fu_208_ap_start_reg = 1'b0;
end

MPSQ_delete_patch_patches_parameters grp_delete_patch_patches_parameters_fu_208(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_delete_patch_patches_parameters_fu_208_ap_start),
    .ap_done(grp_delete_patch_patches_parameters_fu_208_ap_done),
    .ap_idle(grp_delete_patch_patches_parameters_fu_208_ap_idle),
    .ap_ready(grp_delete_patch_patches_parameters_fu_208_ap_ready),
    .index(index),
    .patches_parameters_address0(grp_delete_patch_patches_parameters_fu_208_patches_parameters_address0),
    .patches_parameters_ce0(grp_delete_patch_patches_parameters_fu_208_patches_parameters_ce0),
    .patches_parameters_we0(grp_delete_patch_patches_parameters_fu_208_patches_parameters_we0),
    .patches_parameters_d0(grp_delete_patch_patches_parameters_fu_208_patches_parameters_d0),
    .patches_parameters_address1(grp_delete_patch_patches_parameters_fu_208_patches_parameters_address1),
    .patches_parameters_ce1(grp_delete_patch_patches_parameters_fu_208_patches_parameters_ce1),
    .patches_parameters_q1(patches_parameters_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((tmp_23_fu_225_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((tmp_23_fu_225_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((tmp_23_fu_225_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state8) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state8);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((tmp_23_fu_225_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_delete_patch_patches_parameters_fu_208_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            grp_delete_patch_patches_parameters_fu_208_ap_start_reg <= 1'b1;
        end else if ((grp_delete_patch_patches_parameters_fu_208_ap_ready == 1'b1)) begin
            grp_delete_patch_patches_parameters_fu_208_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_23_fu_225_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        a_3_reg_186 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln580_reg_544 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        a_3_reg_186 <= select_ln580_1_reg_553;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln558_reg_499 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_reg_153 <= select_ln558_1_reg_508;
    end else if (((tmp_23_fu_225_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_reg_153 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_23_fu_225_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        b_5_reg_197 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln580_fu_383_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        b_5_reg_197 <= add_ln586_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln558_fu_281_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        b_reg_164 <= add_ln564_fu_324_p2;
    end else if (((tmp_23_fu_225_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        b_reg_164 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln543_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_011_reg_133 <= index;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_011_reg_133 <= i_reg_479;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_23_fu_225_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten7_reg_175 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln580_fu_383_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten7_reg_175 <= add_ln580_1_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln558_fu_281_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_142 <= add_ln558_1_fu_275_p2;
    end else if (((tmp_23_fu_225_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_142 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_23_fu_225_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln569_1_reg_489 <= add_ln569_1_fu_269_p2;
        add_ln569_reg_484 <= add_ln569_fu_251_p2;
        i_reg_479 <= i_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln558_fu_281_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln569_2_reg_514 <= add_ln569_2_fu_319_p2;
        select_ln558_reg_503 <= select_ln558_fu_299_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln558_reg_499 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln569_5_reg_529 <= add_ln569_5_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln569_5_reg_529_pp0_iter2_reg <= add_ln569_5_reg_529;
        icmp_ln558_reg_499_pp0_iter2_reg <= icmp_ln558_reg_499_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln543_reg_471 <= icmp_ln543_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln558_reg_499 <= icmp_ln558_fu_281_p2;
        icmp_ln558_reg_499_pp0_iter1_reg <= icmp_ln558_reg_499;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln580_reg_544 <= icmp_ln580_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln558_reg_499_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        patches_superpoints_load_reg_534 <= patches_superpoints_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln558_fu_281_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln558_1_reg_508 <= select_ln558_1_fu_307_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln580_fu_383_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln580_1_reg_553 <= select_ln580_1_fu_409_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln580_fu_383_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln580_reg_548 <= select_ln580_fu_401_p3;
    end
end

always @ (*) begin
    if ((icmp_ln558_fu_281_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln580_fu_383_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & (1'b0 == ap_block_state11_on_subcall_done)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln580_reg_544 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_a_3_phi_fu_190_p4 = select_ln580_1_reg_553;
    end else begin
        ap_phi_mux_a_3_phi_fu_190_p4 = a_3_reg_186;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln558_reg_499 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_a_phi_fu_157_p4 = select_ln558_1_reg_508;
    end else begin
        ap_phi_mux_a_phi_fu_157_p4 = a_reg_153;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'b0 == ap_block_state11_on_subcall_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        n_patches_ap_vld = 1'b1;
    end else begin
        n_patches_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        patches_superpoints_address0 = zext_ln591_2_fu_449_p1;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        patches_superpoints_address0 = zext_ln569_6_fu_373_p1;
    end else begin
        patches_superpoints_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        patches_superpoints_ce0 = 1'b1;
    end else begin
        patches_superpoints_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        patches_superpoints_ce1 = 1'b1;
    end else begin
        patches_superpoints_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        patches_superpoints_d0 = 64'd0;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        patches_superpoints_d0 = patches_superpoints_load_reg_534;
    end else begin
        patches_superpoints_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln558_reg_499_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln580_reg_544 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        patches_superpoints_we0 = 1'b1;
    end else begin
        patches_superpoints_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln543_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln543_fu_219_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_23_fu_225_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln558_fu_281_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln558_fu_281_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln580_fu_383_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln580_fu_383_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (1'b0 == ap_block_state11_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln558_1_fu_275_p2 = (indvar_flatten_reg_142 + 7'd1);

assign add_ln558_fu_287_p2 = (ap_phi_mux_a_phi_fu_157_p4 + 3'd1);

assign add_ln564_fu_324_p2 = (select_ln558_fu_299_p3 + 5'd1);

assign add_ln569_1_fu_269_p2 = (tmp_s_fu_261_p3 + zext_ln569_1_fu_257_p1);

assign add_ln569_2_fu_319_p2 = (add_ln569_reg_484 + zext_ln569_2_fu_315_p1);

assign add_ln569_3_fu_340_p2 = (add_ln569_1_reg_489 + zext_ln569_3_fu_337_p1);

assign add_ln569_4_fu_356_p2 = (tmp_50_cast_fu_330_p3 + zext_ln569_4_fu_353_p1);

assign add_ln569_5_fu_367_p2 = (tmp_52_cast_fu_345_p3 + zext_ln569_4_fu_353_p1);

assign add_ln569_fu_251_p2 = (tmp_fu_243_p3 + zext_ln569_fu_239_p1);

assign add_ln580_1_fu_377_p2 = (indvar_flatten7_reg_175 + 7'd1);

assign add_ln580_fu_389_p2 = (ap_phi_mux_a_3_phi_fu_190_p4 + 3'd1);

assign add_ln586_fu_417_p2 = (select_ln580_fu_401_p3 + 5'd1);

assign add_ln591_1_fu_443_p2 = (add_ln591_fu_434_p2 + zext_ln591_1_fu_440_p1);

assign add_ln591_fu_434_p2 = ($signed(zext_ln591_fu_430_p1) + $signed(8'd160));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_on_subcall_done = ((icmp_ln543_reg_471 == 1'd1) & (grp_delete_patch_patches_parameters_fu_208_ap_done == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign grp_delete_patch_patches_parameters_fu_208_ap_start = grp_delete_patch_patches_parameters_fu_208_ap_start_reg;

assign i_fu_233_p2 = (i_011_reg_133 + 2'd1);

assign icmp_ln543_fu_219_p2 = ((n_patches_read > index_cast20_fu_215_p1) ? 1'b1 : 1'b0);

assign icmp_ln558_fu_281_p2 = ((indvar_flatten_reg_142 == 7'd80) ? 1'b1 : 1'b0);

assign icmp_ln564_fu_293_p2 = ((b_reg_164 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln580_fu_383_p2 = ((indvar_flatten7_reg_175 == 7'd80) ? 1'b1 : 1'b0);

assign icmp_ln586_fu_395_p2 = ((b_5_reg_197 == 5'd16) ? 1'b1 : 1'b0);

assign index_cast20_fu_215_p1 = index;

assign n_patches = ($signed(n_patches_read) + $signed(8'd255));

assign patches_parameters_address0 = grp_delete_patch_patches_parameters_fu_208_patches_parameters_address0;

assign patches_parameters_address1 = grp_delete_patch_patches_parameters_fu_208_patches_parameters_address1;

assign patches_parameters_ce0 = grp_delete_patch_patches_parameters_fu_208_patches_parameters_ce0;

assign patches_parameters_ce1 = grp_delete_patch_patches_parameters_fu_208_patches_parameters_ce1;

assign patches_parameters_d0 = grp_delete_patch_patches_parameters_fu_208_patches_parameters_d0;

assign patches_parameters_we0 = grp_delete_patch_patches_parameters_fu_208_patches_parameters_we0;

assign patches_superpoints_address1 = zext_ln569_5_fu_362_p1;

assign select_ln558_1_fu_307_p3 = ((icmp_ln564_fu_293_p2[0:0] == 1'b1) ? add_ln558_fu_287_p2 : ap_phi_mux_a_phi_fu_157_p4);

assign select_ln558_fu_299_p3 = ((icmp_ln564_fu_293_p2[0:0] == 1'b1) ? 5'd0 : b_reg_164);

assign select_ln580_1_fu_409_p3 = ((icmp_ln586_fu_395_p2[0:0] == 1'b1) ? add_ln580_fu_389_p2 : ap_phi_mux_a_3_phi_fu_190_p4);

assign select_ln580_fu_401_p3 = ((icmp_ln586_fu_395_p2[0:0] == 1'b1) ? 5'd0 : b_5_reg_197);

assign tmp_23_fu_225_p3 = i_011_reg_133[32'd1];

assign tmp_50_cast_fu_330_p3 = {{add_ln569_2_reg_514}, {4'd0}};

assign tmp_52_cast_fu_345_p3 = {{add_ln569_3_fu_340_p2}, {4'd0}};

assign tmp_5_fu_423_p3 = {{select_ln580_1_reg_553}, {4'd0}};

assign tmp_fu_243_p3 = {{i_fu_233_p2}, {2'd0}};

assign tmp_s_fu_261_p3 = {{i_011_reg_133}, {2'd0}};

assign zext_ln569_1_fu_257_p1 = i_011_reg_133;

assign zext_ln569_2_fu_315_p1 = select_ln558_1_fu_307_p3;

assign zext_ln569_3_fu_337_p1 = select_ln558_1_reg_508;

assign zext_ln569_4_fu_353_p1 = select_ln558_reg_503;

assign zext_ln569_5_fu_362_p1 = add_ln569_4_fu_356_p2;

assign zext_ln569_6_fu_373_p1 = add_ln569_5_reg_529_pp0_iter2_reg;

assign zext_ln569_fu_239_p1 = i_fu_233_p2;

assign zext_ln591_1_fu_440_p1 = select_ln580_reg_548;

assign zext_ln591_2_fu_449_p1 = add_ln591_1_fu_443_p2;

assign zext_ln591_fu_430_p1 = tmp_5_fu_423_p3;

endmodule //MPSQ_delete_patch
