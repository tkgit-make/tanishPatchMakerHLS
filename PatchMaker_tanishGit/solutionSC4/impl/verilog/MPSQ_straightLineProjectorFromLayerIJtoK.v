// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MPSQ_straightLineProjectorFromLayerIJtoK (
        ap_clk,
        ap_rst,
        z_i,
        z_j,
        i,
        j,
        k,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [31:0] z_i;
input  [31:0] z_j;
input  [2:0] i;
input  [2:0] j;
input  [2:0] k;
output  [31:0] ap_return;
input   ap_ce;

reg[31:0] ap_return;

reg  signed [31:0] z_i_read_reg_111;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
wire    ap_block_state23_pp0_stage0_iter22;
wire    ap_block_state24_pp0_stage0_iter23;
wire    ap_block_state25_pp0_stage0_iter24;
wire    ap_block_state26_pp0_stage0_iter25;
wire    ap_block_state27_pp0_stage0_iter26;
wire    ap_block_state28_pp0_stage0_iter27;
wire    ap_block_state29_pp0_stage0_iter28;
wire    ap_block_state30_pp0_stage0_iter29;
wire    ap_block_state31_pp0_stage0_iter30;
wire    ap_block_state32_pp0_stage0_iter31;
wire    ap_block_state33_pp0_stage0_iter32;
wire    ap_block_state34_pp0_stage0_iter33;
wire    ap_block_state35_pp0_stage0_iter34;
wire    ap_block_state36_pp0_stage0_iter35;
wire    ap_block_state37_pp0_stage0_iter36;
wire    ap_block_state38_pp0_stage0_iter37;
wire    ap_block_state39_pp0_stage0_iter38;
wire    ap_block_state40_pp0_stage0_iter39;
wire    ap_block_state41_pp0_stage0_iter40;
wire    ap_block_state42_pp0_stage0_iter41;
wire    ap_block_state43_pp0_stage0_iter42;
wire    ap_block_state44_pp0_stage0_iter43;
wire    ap_block_state45_pp0_stage0_iter44;
wire    ap_block_pp0_stage0_11001;
reg  signed [31:0] z_i_read_reg_111_pp0_iter1_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter2_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter3_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter4_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter5_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter6_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter7_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter8_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter9_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter10_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter11_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter12_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter13_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter14_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter15_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter16_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter17_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter18_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter19_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter20_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter21_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter22_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter23_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter24_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter25_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter26_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter27_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter28_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter29_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter30_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter31_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter32_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter33_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter34_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter35_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter36_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter37_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter38_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter39_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter40_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter41_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter42_reg;
reg  signed [31:0] z_i_read_reg_111_pp0_iter43_reg;
wire   [32:0] ret_fu_64_p2;
reg  signed [32:0] ret_reg_116;
wire   [3:0] sub_ln241_fu_70_p2;
reg  signed [3:0] sub_ln241_reg_121;
wire   [3:0] sub_ln241_1_fu_76_p2;
reg   [3:0] sub_ln241_1_reg_126;
reg   [3:0] sub_ln241_1_reg_126_pp0_iter1_reg;
reg   [3:0] sub_ln241_1_reg_126_pp0_iter2_reg;
reg  signed [3:0] sub_ln241_1_reg_126_pp0_iter3_reg;
wire   [36:0] grp_fu_88_p2;
reg   [36:0] mul_ln1364_reg_141;
wire    ap_block_pp0_stage0;
wire  signed [31:0] sext_ln215_1_fu_60_p0;
wire  signed [32:0] sext_ln215_fu_56_p1;
wire  signed [32:0] sext_ln215_1_fu_60_p1;
wire   [3:0] k_cast_fu_52_p1;
wire   [3:0] i_cast_fu_48_p1;
wire   [3:0] j_cast_fu_44_p1;
wire   [31:0] grp_fu_97_p2;
wire   [31:0] trunc_ln69_fu_102_p1;
reg    grp_fu_88_ce;
reg    grp_fu_97_ce;
wire   [31:0] add_ln69_fu_106_p2;
reg    ap_ce_reg;
reg   [31:0] z_i_int_reg;
reg   [31:0] z_j_int_reg;
reg   [2:0] i_int_reg;
reg   [2:0] j_int_reg;
reg   [2:0] k_int_reg;
reg   [31:0] ap_return_int_reg;

MPSQ_mul_33s_4s_37_3_0 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 33 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 37 ))
mul_33s_4s_37_3_0_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ret_reg_116),
    .din1(sub_ln241_reg_121),
    .ce(grp_fu_88_ce),
    .dout(grp_fu_88_p2)
);

MPSQ_sdiv_37ns_4s_32_41_0 #(
    .ID( 1 ),
    .NUM_STAGE( 41 ),
    .din0_WIDTH( 37 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sdiv_37ns_4s_32_41_0_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_ln1364_reg_141),
    .din1(sub_ln241_1_reg_126_pp0_iter3_reg),
    .ce(grp_fu_97_ce),
    .dout(grp_fu_97_p2)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= add_ln69_fu_106_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        i_int_reg <= i;
        j_int_reg <= j;
        k_int_reg <= k;
        z_i_int_reg <= z_i;
        z_j_int_reg <= z_j;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        mul_ln1364_reg_141 <= grp_fu_88_p2;
        ret_reg_116 <= ret_fu_64_p2;
        sub_ln241_1_reg_126 <= sub_ln241_1_fu_76_p2;
        sub_ln241_1_reg_126_pp0_iter1_reg <= sub_ln241_1_reg_126;
        sub_ln241_1_reg_126_pp0_iter2_reg <= sub_ln241_1_reg_126_pp0_iter1_reg;
        sub_ln241_1_reg_126_pp0_iter3_reg <= sub_ln241_1_reg_126_pp0_iter2_reg;
        sub_ln241_reg_121 <= sub_ln241_fu_70_p2;
        z_i_read_reg_111 <= z_i_int_reg;
        z_i_read_reg_111_pp0_iter10_reg <= z_i_read_reg_111_pp0_iter9_reg;
        z_i_read_reg_111_pp0_iter11_reg <= z_i_read_reg_111_pp0_iter10_reg;
        z_i_read_reg_111_pp0_iter12_reg <= z_i_read_reg_111_pp0_iter11_reg;
        z_i_read_reg_111_pp0_iter13_reg <= z_i_read_reg_111_pp0_iter12_reg;
        z_i_read_reg_111_pp0_iter14_reg <= z_i_read_reg_111_pp0_iter13_reg;
        z_i_read_reg_111_pp0_iter15_reg <= z_i_read_reg_111_pp0_iter14_reg;
        z_i_read_reg_111_pp0_iter16_reg <= z_i_read_reg_111_pp0_iter15_reg;
        z_i_read_reg_111_pp0_iter17_reg <= z_i_read_reg_111_pp0_iter16_reg;
        z_i_read_reg_111_pp0_iter18_reg <= z_i_read_reg_111_pp0_iter17_reg;
        z_i_read_reg_111_pp0_iter19_reg <= z_i_read_reg_111_pp0_iter18_reg;
        z_i_read_reg_111_pp0_iter1_reg <= z_i_read_reg_111;
        z_i_read_reg_111_pp0_iter20_reg <= z_i_read_reg_111_pp0_iter19_reg;
        z_i_read_reg_111_pp0_iter21_reg <= z_i_read_reg_111_pp0_iter20_reg;
        z_i_read_reg_111_pp0_iter22_reg <= z_i_read_reg_111_pp0_iter21_reg;
        z_i_read_reg_111_pp0_iter23_reg <= z_i_read_reg_111_pp0_iter22_reg;
        z_i_read_reg_111_pp0_iter24_reg <= z_i_read_reg_111_pp0_iter23_reg;
        z_i_read_reg_111_pp0_iter25_reg <= z_i_read_reg_111_pp0_iter24_reg;
        z_i_read_reg_111_pp0_iter26_reg <= z_i_read_reg_111_pp0_iter25_reg;
        z_i_read_reg_111_pp0_iter27_reg <= z_i_read_reg_111_pp0_iter26_reg;
        z_i_read_reg_111_pp0_iter28_reg <= z_i_read_reg_111_pp0_iter27_reg;
        z_i_read_reg_111_pp0_iter29_reg <= z_i_read_reg_111_pp0_iter28_reg;
        z_i_read_reg_111_pp0_iter2_reg <= z_i_read_reg_111_pp0_iter1_reg;
        z_i_read_reg_111_pp0_iter30_reg <= z_i_read_reg_111_pp0_iter29_reg;
        z_i_read_reg_111_pp0_iter31_reg <= z_i_read_reg_111_pp0_iter30_reg;
        z_i_read_reg_111_pp0_iter32_reg <= z_i_read_reg_111_pp0_iter31_reg;
        z_i_read_reg_111_pp0_iter33_reg <= z_i_read_reg_111_pp0_iter32_reg;
        z_i_read_reg_111_pp0_iter34_reg <= z_i_read_reg_111_pp0_iter33_reg;
        z_i_read_reg_111_pp0_iter35_reg <= z_i_read_reg_111_pp0_iter34_reg;
        z_i_read_reg_111_pp0_iter36_reg <= z_i_read_reg_111_pp0_iter35_reg;
        z_i_read_reg_111_pp0_iter37_reg <= z_i_read_reg_111_pp0_iter36_reg;
        z_i_read_reg_111_pp0_iter38_reg <= z_i_read_reg_111_pp0_iter37_reg;
        z_i_read_reg_111_pp0_iter39_reg <= z_i_read_reg_111_pp0_iter38_reg;
        z_i_read_reg_111_pp0_iter3_reg <= z_i_read_reg_111_pp0_iter2_reg;
        z_i_read_reg_111_pp0_iter40_reg <= z_i_read_reg_111_pp0_iter39_reg;
        z_i_read_reg_111_pp0_iter41_reg <= z_i_read_reg_111_pp0_iter40_reg;
        z_i_read_reg_111_pp0_iter42_reg <= z_i_read_reg_111_pp0_iter41_reg;
        z_i_read_reg_111_pp0_iter43_reg <= z_i_read_reg_111_pp0_iter42_reg;
        z_i_read_reg_111_pp0_iter4_reg <= z_i_read_reg_111_pp0_iter3_reg;
        z_i_read_reg_111_pp0_iter5_reg <= z_i_read_reg_111_pp0_iter4_reg;
        z_i_read_reg_111_pp0_iter6_reg <= z_i_read_reg_111_pp0_iter5_reg;
        z_i_read_reg_111_pp0_iter7_reg <= z_i_read_reg_111_pp0_iter6_reg;
        z_i_read_reg_111_pp0_iter8_reg <= z_i_read_reg_111_pp0_iter7_reg;
        z_i_read_reg_111_pp0_iter9_reg <= z_i_read_reg_111_pp0_iter8_reg;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = add_ln69_fu_106_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_88_ce = 1'b1;
    end else begin
        grp_fu_88_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_97_ce = 1'b1;
    end else begin
        grp_fu_97_ce = 1'b0;
    end
end

assign add_ln69_fu_106_p2 = ($signed(trunc_ln69_fu_102_p1) + $signed(z_i_read_reg_111_pp0_iter43_reg));

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign i_cast_fu_48_p1 = i_int_reg;

assign j_cast_fu_44_p1 = j_int_reg;

assign k_cast_fu_52_p1 = k_int_reg;

assign ret_fu_64_p2 = ($signed(sext_ln215_fu_56_p1) - $signed(sext_ln215_1_fu_60_p1));

assign sext_ln215_1_fu_60_p0 = z_i_int_reg;

assign sext_ln215_1_fu_60_p1 = sext_ln215_1_fu_60_p0;

assign sext_ln215_fu_56_p1 = $signed(z_j_int_reg);

assign sub_ln241_1_fu_76_p2 = (j_cast_fu_44_p1 - i_cast_fu_48_p1);

assign sub_ln241_fu_70_p2 = (k_cast_fu_52_p1 - i_cast_fu_48_p1);

assign trunc_ln69_fu_102_p1 = grp_fu_97_p2[31:0];

endmodule //MPSQ_straightLineProjectorFromLayerIJtoK
