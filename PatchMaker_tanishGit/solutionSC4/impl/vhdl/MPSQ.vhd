-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stop : IN STD_LOGIC_VECTOR (31 downto 0);
    ppl : IN STD_LOGIC_VECTOR (31 downto 0);
    leftRight : IN STD_LOGIC;
    n_patches_i : IN STD_LOGIC_VECTOR (7 downto 0);
    n_patches_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    n_patches_o_ap_vld : OUT STD_LOGIC;
    GDarray_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    GDarray_ce0 : OUT STD_LOGIC;
    GDarray_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    GDn_points_ce0 : OUT STD_LOGIC;
    GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_superpointsOUTPUT_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpointsOUTPUT_ce0 : OUT STD_LOGIC;
    patches_superpointsOUTPUT_we0 : OUT STD_LOGIC;
    patches_superpointsOUTPUT_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_superpointsOUTPUT_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_superpointsOUTPUT_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpointsOUTPUT_ce1 : OUT STD_LOGIC;
    patches_superpointsOUTPUT_we1 : OUT STD_LOGIC;
    patches_superpointsOUTPUT_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_superpointsOUTPUT_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    tempArray_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tempArray_ce0 : OUT STD_LOGIC;
    tempArray_we0 : OUT STD_LOGIC;
    tempArray_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    tempArray_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tempArray_ce1 : OUT STD_LOGIC;
    tempArray_we1 : OUT STD_LOGIC;
    tempArray_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of MPSQ is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MPSQ_MPSQ,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu19p-fsvb3824-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.282000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=2320,HLS_SYN_LUT=8703,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_C5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000011000101";
    constant ap_const_lv64_14FB1E4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000001010011111011000111100100";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_169 : STD_LOGIC_VECTOR (10 downto 0);
    signal a_reg_180 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_reg_191 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln624_1_fu_228_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln624_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln624_reg_367 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln624_fu_252_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln624_reg_371 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln624_1_fu_260_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln624_1_reg_376 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln630_fu_285_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_initializeArrays_fu_220_ap_ready : STD_LOGIC;
    signal grp_initializeArrays_fu_220_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal patches_superpoints_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal patches_superpoints_V_ce0 : STD_LOGIC;
    signal patches_superpoints_V_we0 : STD_LOGIC;
    signal patches_superpoints_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal patches_superpoints_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal patches_parameters_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal patches_parameters_V_ce0 : STD_LOGIC;
    signal patches_parameters_V_we0 : STD_LOGIC;
    signal patches_parameters_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal patches_parameters_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal patches_parameters_V_ce1 : STD_LOGIC;
    signal patches_parameters_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal GDarrayDecoded_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal GDarrayDecoded_V_ce0 : STD_LOGIC;
    signal GDarrayDecoded_V_we0 : STD_LOGIC;
    signal GDarrayDecoded_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal GDarrayDecoded_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal GDarrayDecoded_V_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal GDarrayDecoded_V_ce1 : STD_LOGIC;
    signal GDarrayDecoded_V_we1 : STD_LOGIC;
    signal GDarrayDecoded_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solveNextColumn_fu_202_ap_start : STD_LOGIC;
    signal grp_solveNextColumn_fu_202_ap_done : STD_LOGIC;
    signal grp_solveNextColumn_fu_202_ap_idle : STD_LOGIC;
    signal grp_solveNextColumn_fu_202_ap_ready : STD_LOGIC;
    signal grp_solveNextColumn_fu_202_n_patches_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solveNextColumn_fu_202_n_patches_o_ap_vld : STD_LOGIC;
    signal grp_solveNextColumn_fu_202_GDn_points_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solveNextColumn_fu_202_GDn_points_ce0 : STD_LOGIC;
    signal grp_solveNextColumn_fu_202_tempArray_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solveNextColumn_fu_202_tempArray_ce0 : STD_LOGIC;
    signal grp_solveNextColumn_fu_202_tempArray_we0 : STD_LOGIC;
    signal grp_solveNextColumn_fu_202_tempArray_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_solveNextColumn_fu_202_tempArray_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_solveNextColumn_fu_202_tempArray_ce1 : STD_LOGIC;
    signal grp_solveNextColumn_fu_202_tempArray_we1 : STD_LOGIC;
    signal grp_solveNextColumn_fu_202_tempArray_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_solveNextColumn_fu_202_GDarrayDecoded_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_solveNextColumn_fu_202_GDarrayDecoded_ce0 : STD_LOGIC;
    signal grp_solveNextColumn_fu_202_patches_superpoints_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_solveNextColumn_fu_202_patches_superpoints_ce0 : STD_LOGIC;
    signal grp_solveNextColumn_fu_202_patches_superpoints_we0 : STD_LOGIC;
    signal grp_solveNextColumn_fu_202_patches_superpoints_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solveNextColumn_fu_202_patches_parameters_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_solveNextColumn_fu_202_patches_parameters_ce0 : STD_LOGIC;
    signal grp_solveNextColumn_fu_202_patches_parameters_we0 : STD_LOGIC;
    signal grp_solveNextColumn_fu_202_patches_parameters_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solveNextColumn_fu_202_patches_parameters_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_solveNextColumn_fu_202_patches_parameters_ce1 : STD_LOGIC;
    signal grp_initializeArrays_fu_220_ap_start : STD_LOGIC;
    signal grp_initializeArrays_fu_220_ap_idle : STD_LOGIC;
    signal grp_initializeArrays_fu_220_patches_superpoints_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_initializeArrays_fu_220_patches_superpoints_ce0 : STD_LOGIC;
    signal grp_initializeArrays_fu_220_patches_superpoints_we0 : STD_LOGIC;
    signal grp_initializeArrays_fu_220_patches_superpoints_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_initializeArrays_fu_220_patches_parameters_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_initializeArrays_fu_220_patches_parameters_ce0 : STD_LOGIC;
    signal grp_initializeArrays_fu_220_patches_parameters_we0 : STD_LOGIC;
    signal grp_initializeArrays_fu_220_patches_parameters_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_a_phi_fu_184_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_solveNextColumn_fu_202_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_initializeArrays_fu_220_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln635_1_fu_280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln635_2_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln636_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln630_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln624_fu_240_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln635_fu_268_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_272_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_291_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_cast_fu_298_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln635_fu_302_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln635_fu_305_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_17_fu_311_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln635_fu_324_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln636_fu_330_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component MPSQ_solveNextColumn IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        n_patches_i : IN STD_LOGIC_VECTOR (7 downto 0);
        n_patches_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        n_patches_o_ap_vld : OUT STD_LOGIC;
        GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        GDn_points_ce0 : OUT STD_LOGIC;
        GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tempArray_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        tempArray_ce0 : OUT STD_LOGIC;
        tempArray_we0 : OUT STD_LOGIC;
        tempArray_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        tempArray_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        tempArray_ce1 : OUT STD_LOGIC;
        tempArray_we1 : OUT STD_LOGIC;
        tempArray_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ppl : IN STD_LOGIC_VECTOR (31 downto 0);
        GDarrayDecoded_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        GDarrayDecoded_ce0 : OUT STD_LOGIC;
        GDarrayDecoded_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_superpoints_ce0 : OUT STD_LOGIC;
        patches_superpoints_we0 : OUT STD_LOGIC;
        patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        patches_superpoints_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_parameters_ce0 : OUT STD_LOGIC;
        patches_parameters_we0 : OUT STD_LOGIC;
        patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_parameters_ce1 : OUT STD_LOGIC;
        patches_parameters_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_initializeArrays IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_superpoints_ce0 : OUT STD_LOGIC;
        patches_superpoints_we0 : OUT STD_LOGIC;
        patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_parameters_ce0 : OUT STD_LOGIC;
        patches_parameters_we0 : OUT STD_LOGIC;
        patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_patches_superpoints_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_patches_parameters_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_GDarrayDecoded_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    patches_superpoints_V_U : component MPSQ_patches_superpoints_V
    generic map (
        DataWidth => 32,
        AddressRange => 2560,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => patches_superpoints_V_address0,
        ce0 => patches_superpoints_V_ce0,
        we0 => patches_superpoints_V_we0,
        d0 => patches_superpoints_V_d0,
        q0 => patches_superpoints_V_q0);

    patches_parameters_V_U : component MPSQ_patches_parameters_V
    generic map (
        DataWidth => 32,
        AddressRange => 3840,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => patches_parameters_V_address0,
        ce0 => patches_parameters_V_ce0,
        we0 => patches_parameters_V_we0,
        d0 => patches_parameters_V_d0,
        q0 => patches_parameters_V_q0,
        address1 => grp_solveNextColumn_fu_202_patches_parameters_address1,
        ce1 => patches_parameters_V_ce1,
        q1 => patches_parameters_V_q1);

    GDarrayDecoded_V_U : component MPSQ_GDarrayDecoded_V
    generic map (
        DataWidth => 32,
        AddressRange => 2560,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => GDarrayDecoded_V_address0,
        ce0 => GDarrayDecoded_V_ce0,
        we0 => GDarrayDecoded_V_we0,
        d0 => GDarrayDecoded_V_d0,
        q0 => GDarrayDecoded_V_q0,
        address1 => GDarrayDecoded_V_address1,
        ce1 => GDarrayDecoded_V_ce1,
        we1 => GDarrayDecoded_V_we1,
        d1 => GDarrayDecoded_V_d1);

    grp_solveNextColumn_fu_202 : component MPSQ_solveNextColumn
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_solveNextColumn_fu_202_ap_start,
        ap_done => grp_solveNextColumn_fu_202_ap_done,
        ap_idle => grp_solveNextColumn_fu_202_ap_idle,
        ap_ready => grp_solveNextColumn_fu_202_ap_ready,
        n_patches_i => n_patches_i,
        n_patches_o => grp_solveNextColumn_fu_202_n_patches_o,
        n_patches_o_ap_vld => grp_solveNextColumn_fu_202_n_patches_o_ap_vld,
        GDn_points_address0 => grp_solveNextColumn_fu_202_GDn_points_address0,
        GDn_points_ce0 => grp_solveNextColumn_fu_202_GDn_points_ce0,
        GDn_points_q0 => GDn_points_q0,
        tempArray_address0 => grp_solveNextColumn_fu_202_tempArray_address0,
        tempArray_ce0 => grp_solveNextColumn_fu_202_tempArray_ce0,
        tempArray_we0 => grp_solveNextColumn_fu_202_tempArray_we0,
        tempArray_d0 => grp_solveNextColumn_fu_202_tempArray_d0,
        tempArray_address1 => grp_solveNextColumn_fu_202_tempArray_address1,
        tempArray_ce1 => grp_solveNextColumn_fu_202_tempArray_ce1,
        tempArray_we1 => grp_solveNextColumn_fu_202_tempArray_we1,
        tempArray_d1 => grp_solveNextColumn_fu_202_tempArray_d1,
        ppl => ppl,
        GDarrayDecoded_address0 => grp_solveNextColumn_fu_202_GDarrayDecoded_address0,
        GDarrayDecoded_ce0 => grp_solveNextColumn_fu_202_GDarrayDecoded_ce0,
        GDarrayDecoded_q0 => GDarrayDecoded_V_q0,
        patches_superpoints_address0 => grp_solveNextColumn_fu_202_patches_superpoints_address0,
        patches_superpoints_ce0 => grp_solveNextColumn_fu_202_patches_superpoints_ce0,
        patches_superpoints_we0 => grp_solveNextColumn_fu_202_patches_superpoints_we0,
        patches_superpoints_d0 => grp_solveNextColumn_fu_202_patches_superpoints_d0,
        patches_superpoints_q0 => patches_superpoints_V_q0,
        patches_parameters_address0 => grp_solveNextColumn_fu_202_patches_parameters_address0,
        patches_parameters_ce0 => grp_solveNextColumn_fu_202_patches_parameters_ce0,
        patches_parameters_we0 => grp_solveNextColumn_fu_202_patches_parameters_we0,
        patches_parameters_d0 => grp_solveNextColumn_fu_202_patches_parameters_d0,
        patches_parameters_q0 => patches_parameters_V_q0,
        patches_parameters_address1 => grp_solveNextColumn_fu_202_patches_parameters_address1,
        patches_parameters_ce1 => grp_solveNextColumn_fu_202_patches_parameters_ce1,
        patches_parameters_q1 => patches_parameters_V_q1);

    grp_initializeArrays_fu_220 : component MPSQ_initializeArrays
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_initializeArrays_fu_220_ap_start,
        ap_done => grp_initializeArrays_fu_220_ap_done,
        ap_idle => grp_initializeArrays_fu_220_ap_idle,
        ap_ready => grp_initializeArrays_fu_220_ap_ready,
        patches_superpoints_address0 => grp_initializeArrays_fu_220_patches_superpoints_address0,
        patches_superpoints_ce0 => grp_initializeArrays_fu_220_patches_superpoints_ce0,
        patches_superpoints_we0 => grp_initializeArrays_fu_220_patches_superpoints_we0,
        patches_superpoints_d0 => grp_initializeArrays_fu_220_patches_superpoints_d0,
        patches_parameters_address0 => grp_initializeArrays_fu_220_patches_parameters_address0,
        patches_parameters_ce0 => grp_initializeArrays_fu_220_patches_parameters_ce0,
        patches_parameters_we0 => grp_initializeArrays_fu_220_patches_parameters_we0,
        patches_parameters_d0 => grp_initializeArrays_fu_220_patches_parameters_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_initializeArrays_fu_220_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_initializeArrays_fu_220_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_initializeArrays_fu_220_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_initializeArrays_fu_220_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_initializeArrays_fu_220_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_initializeArrays_fu_220_ap_ready = ap_const_logic_1)) then 
                    grp_initializeArrays_fu_220_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_solveNextColumn_fu_202_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_solveNextColumn_fu_202_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_solveNextColumn_fu_202_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_solveNextColumn_fu_202_ap_ready = ap_const_logic_1)) then 
                    grp_solveNextColumn_fu_202_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln624_reg_367 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                a_reg_180 <= select_ln624_1_reg_376;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_initializeArrays_fu_220_ap_done = ap_const_logic_1))) then 
                a_reg_180 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    b_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln624_fu_234_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_reg_191 <= add_ln630_fu_285_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_initializeArrays_fu_220_ap_done = ap_const_logic_1))) then 
                b_reg_191 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln624_fu_234_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_169 <= add_ln624_1_fu_228_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_initializeArrays_fu_220_ap_done = ap_const_logic_1))) then 
                indvar_flatten_reg_169 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln624_reg_367 <= icmp_ln624_fu_234_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln624_fu_234_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln624_1_reg_376 <= select_ln624_1_fu_260_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln624_fu_234_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln624_reg_371 <= select_ln624_fu_252_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, icmp_ln624_fu_234_p2, grp_initializeArrays_fu_220_ap_done, ap_block_pp0_stage0_subdone, grp_solveNextColumn_fu_202_ap_done, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_initializeArrays_fu_220_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln624_fu_234_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln624_fu_234_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_solveNextColumn_fu_202_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    GDarrayDecoded_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, grp_solveNextColumn_fu_202_GDarrayDecoded_address0, ap_block_pp0_stage0, ap_CS_fsm_state6, zext_ln636_fu_336_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            GDarrayDecoded_V_address0 <= zext_ln636_fu_336_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            GDarrayDecoded_V_address0 <= grp_solveNextColumn_fu_202_GDarrayDecoded_address0;
        else 
            GDarrayDecoded_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    GDarrayDecoded_V_address1 <= zext_ln635_2_fu_319_p1(12 - 1 downto 0);

    GDarrayDecoded_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, grp_solveNextColumn_fu_202_GDarrayDecoded_ce0, ap_CS_fsm_state6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            GDarrayDecoded_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            GDarrayDecoded_V_ce0 <= grp_solveNextColumn_fu_202_GDarrayDecoded_ce0;
        else 
            GDarrayDecoded_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    GDarrayDecoded_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            GDarrayDecoded_V_ce1 <= ap_const_logic_1;
        else 
            GDarrayDecoded_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    GDarrayDecoded_V_d0 <= GDarray_q0(32 - 1 downto 0);
    GDarrayDecoded_V_d1 <= GDarray_q0(63 downto 32);

    GDarrayDecoded_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln624_reg_367, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln624_reg_367 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            GDarrayDecoded_V_we0 <= ap_const_logic_1;
        else 
            GDarrayDecoded_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    GDarrayDecoded_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln624_reg_367, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln624_reg_367 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            GDarrayDecoded_V_we1 <= ap_const_logic_1;
        else 
            GDarrayDecoded_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    GDarray_address0 <= zext_ln635_1_fu_280_p1(11 - 1 downto 0);

    GDarray_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            GDarray_ce0 <= ap_const_logic_1;
        else 
            GDarray_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    GDn_points_address0 <= grp_solveNextColumn_fu_202_GDn_points_address0;
    GDn_points_ce0 <= grp_solveNextColumn_fu_202_GDn_points_ce0;
    add_ln624_1_fu_228_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_169) + unsigned(ap_const_lv11_1));
    add_ln624_fu_240_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_phi_fu_184_p4) + unsigned(ap_const_lv3_1));
    add_ln630_fu_285_p2 <= std_logic_vector(unsigned(select_ln624_fu_252_p3) + unsigned(ap_const_lv9_1));
    add_ln635_fu_305_p2 <= std_logic_vector(unsigned(tmp_cast_fu_298_p1) + unsigned(zext_ln635_fu_302_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln624_fu_234_p2)
    begin
        if ((icmp_ln624_fu_234_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(grp_solveNextColumn_fu_202_ap_done, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_solveNextColumn_fu_202_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_a_phi_fu_184_p4_assign_proc : process(a_reg_180, ap_CS_fsm_pp0_stage0, icmp_ln624_reg_367, select_ln624_1_reg_376, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln624_reg_367 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_a_phi_fu_184_p4 <= select_ln624_1_reg_376;
        else 
            ap_phi_mux_a_phi_fu_184_p4 <= a_reg_180;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_solveNextColumn_fu_202_ap_done, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_solveNextColumn_fu_202_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_initializeArrays_fu_220_ap_start <= grp_initializeArrays_fu_220_ap_start_reg;
    grp_solveNextColumn_fu_202_ap_start <= grp_solveNextColumn_fu_202_ap_start_reg;
    icmp_ln624_fu_234_p2 <= "1" when (indvar_flatten_reg_169 = ap_const_lv11_500) else "0";
    icmp_ln630_fu_246_p2 <= "1" when (b_reg_191 = ap_const_lv9_100) else "0";

    n_patches_o_assign_proc : process(n_patches_i, grp_solveNextColumn_fu_202_n_patches_o, grp_solveNextColumn_fu_202_n_patches_o_ap_vld, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_solveNextColumn_fu_202_n_patches_o_ap_vld = ap_const_logic_1))) then 
            n_patches_o <= grp_solveNextColumn_fu_202_n_patches_o;
        else 
            n_patches_o <= n_patches_i;
        end if; 
    end process;

    n_patches_o_ap_vld <= grp_solveNextColumn_fu_202_n_patches_o_ap_vld;
    or_ln636_fu_330_p2 <= (shl_ln635_fu_324_p2 or ap_const_lv12_1);

    patches_parameters_V_address0_assign_proc : process(ap_CS_fsm_state2, grp_solveNextColumn_fu_202_patches_parameters_address0, grp_initializeArrays_fu_220_patches_parameters_address0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patches_parameters_V_address0 <= grp_initializeArrays_fu_220_patches_parameters_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            patches_parameters_V_address0 <= grp_solveNextColumn_fu_202_patches_parameters_address0;
        else 
            patches_parameters_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_V_ce0_assign_proc : process(ap_CS_fsm_state2, grp_solveNextColumn_fu_202_patches_parameters_ce0, grp_initializeArrays_fu_220_patches_parameters_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patches_parameters_V_ce0 <= grp_initializeArrays_fu_220_patches_parameters_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            patches_parameters_V_ce0 <= grp_solveNextColumn_fu_202_patches_parameters_ce0;
        else 
            patches_parameters_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_V_ce1_assign_proc : process(grp_solveNextColumn_fu_202_patches_parameters_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            patches_parameters_V_ce1 <= grp_solveNextColumn_fu_202_patches_parameters_ce1;
        else 
            patches_parameters_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_V_d0_assign_proc : process(ap_CS_fsm_state2, grp_solveNextColumn_fu_202_patches_parameters_d0, grp_initializeArrays_fu_220_patches_parameters_d0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patches_parameters_V_d0 <= grp_initializeArrays_fu_220_patches_parameters_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            patches_parameters_V_d0 <= grp_solveNextColumn_fu_202_patches_parameters_d0;
        else 
            patches_parameters_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_V_we0_assign_proc : process(ap_CS_fsm_state2, grp_solveNextColumn_fu_202_patches_parameters_we0, grp_initializeArrays_fu_220_patches_parameters_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patches_parameters_V_we0 <= grp_initializeArrays_fu_220_patches_parameters_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            patches_parameters_V_we0 <= grp_solveNextColumn_fu_202_patches_parameters_we0;
        else 
            patches_parameters_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_superpointsOUTPUT_address0 <= ap_const_lv12_0;
    patches_superpointsOUTPUT_address1 <= ap_const_lv12_0;
    patches_superpointsOUTPUT_ce0 <= ap_const_logic_0;
    patches_superpointsOUTPUT_ce1 <= ap_const_logic_0;
    patches_superpointsOUTPUT_d0 <= ap_const_lv64_0;
    patches_superpointsOUTPUT_d1 <= ap_const_lv64_0;
    patches_superpointsOUTPUT_we0 <= ap_const_logic_0;
    patches_superpointsOUTPUT_we1 <= ap_const_logic_0;

    patches_superpoints_V_address0_assign_proc : process(ap_CS_fsm_state2, grp_solveNextColumn_fu_202_patches_superpoints_address0, grp_initializeArrays_fu_220_patches_superpoints_address0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patches_superpoints_V_address0 <= grp_initializeArrays_fu_220_patches_superpoints_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            patches_superpoints_V_address0 <= grp_solveNextColumn_fu_202_patches_superpoints_address0;
        else 
            patches_superpoints_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_V_ce0_assign_proc : process(ap_CS_fsm_state2, grp_solveNextColumn_fu_202_patches_superpoints_ce0, grp_initializeArrays_fu_220_patches_superpoints_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patches_superpoints_V_ce0 <= grp_initializeArrays_fu_220_patches_superpoints_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            patches_superpoints_V_ce0 <= grp_solveNextColumn_fu_202_patches_superpoints_ce0;
        else 
            patches_superpoints_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_V_d0_assign_proc : process(ap_CS_fsm_state2, grp_solveNextColumn_fu_202_patches_superpoints_d0, grp_initializeArrays_fu_220_patches_superpoints_d0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patches_superpoints_V_d0 <= grp_initializeArrays_fu_220_patches_superpoints_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            patches_superpoints_V_d0 <= grp_solveNextColumn_fu_202_patches_superpoints_d0;
        else 
            patches_superpoints_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_V_we0_assign_proc : process(ap_CS_fsm_state2, grp_solveNextColumn_fu_202_patches_superpoints_we0, grp_initializeArrays_fu_220_patches_superpoints_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patches_superpoints_V_we0 <= grp_initializeArrays_fu_220_patches_superpoints_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            patches_superpoints_V_we0 <= grp_solveNextColumn_fu_202_patches_superpoints_we0;
        else 
            patches_superpoints_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln624_1_fu_260_p3 <= 
        add_ln624_fu_240_p2 when (icmp_ln630_fu_246_p2(0) = '1') else 
        ap_phi_mux_a_phi_fu_184_p4;
    select_ln624_fu_252_p3 <= 
        ap_const_lv9_0 when (icmp_ln630_fu_246_p2(0) = '1') else 
        b_reg_191;
    shl_ln635_fu_324_p2 <= std_logic_vector(shift_left(unsigned(add_ln635_fu_305_p2),to_integer(unsigned('0' & ap_const_lv12_1(12-1 downto 0)))));

    tempArray_address0_assign_proc : process(ap_CS_fsm_state2, grp_solveNextColumn_fu_202_tempArray_address0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            tempArray_address0 <= ap_const_lv64_C5(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tempArray_address0 <= grp_solveNextColumn_fu_202_tempArray_address0;
        else 
            tempArray_address0 <= "XXXXXXXX";
        end if; 
    end process;

    tempArray_address1 <= grp_solveNextColumn_fu_202_tempArray_address1;

    tempArray_ce0_assign_proc : process(ap_CS_fsm_state2, grp_initializeArrays_fu_220_ap_done, grp_solveNextColumn_fu_202_tempArray_ce0, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_initializeArrays_fu_220_ap_done = ap_const_logic_1))) then 
            tempArray_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tempArray_ce0 <= grp_solveNextColumn_fu_202_tempArray_ce0;
        else 
            tempArray_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tempArray_ce1_assign_proc : process(grp_solveNextColumn_fu_202_tempArray_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tempArray_ce1 <= grp_solveNextColumn_fu_202_tempArray_ce1;
        else 
            tempArray_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    tempArray_d0_assign_proc : process(ap_CS_fsm_state2, grp_solveNextColumn_fu_202_tempArray_d0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            tempArray_d0 <= ap_const_lv64_14FB1E4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tempArray_d0 <= grp_solveNextColumn_fu_202_tempArray_d0;
        else 
            tempArray_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    tempArray_d1 <= grp_solveNextColumn_fu_202_tempArray_d1;

    tempArray_we0_assign_proc : process(ap_CS_fsm_state2, grp_initializeArrays_fu_220_ap_done, grp_solveNextColumn_fu_202_tempArray_we0, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_initializeArrays_fu_220_ap_done = ap_const_logic_1))) then 
            tempArray_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tempArray_we0 <= grp_solveNextColumn_fu_202_tempArray_we0;
        else 
            tempArray_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tempArray_we1_assign_proc : process(grp_solveNextColumn_fu_202_tempArray_we1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tempArray_we1 <= grp_solveNextColumn_fu_202_tempArray_we1;
        else 
            tempArray_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_17_fu_311_p3 <= (add_ln635_fu_305_p2 & ap_const_lv1_0);
    tmp_cast_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_291_p3),12));
    tmp_fu_291_p3 <= (select_ln624_1_reg_376 & ap_const_lv8_0);
    tmp_s_fu_272_p3 <= (select_ln624_1_fu_260_p3 & trunc_ln635_fu_268_p1);
    trunc_ln635_fu_268_p1 <= select_ln624_fu_252_p3(8 - 1 downto 0);
    zext_ln635_1_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_272_p3),64));
    zext_ln635_2_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_311_p3),64));
    zext_ln635_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln624_reg_371),12));
    zext_ln636_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln636_fu_330_p2),64));
end behav;
