-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_delete_patch_patches_parameters is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    index : IN STD_LOGIC_VECTOR (1 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    patches_parameters_ce1 : OUT STD_LOGIC;
    patches_parameters_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_delete_patch_patches_parameters is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten13_reg_120 : STD_LOGIC_VECTOR (4 downto 0);
    signal a_reg_131 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_142 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_reg_153 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_164 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten35_reg_175 : STD_LOGIC_VECTOR (4 downto 0);
    signal a_2_reg_186 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten21_reg_197 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_4_reg_208 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_4_reg_219 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_22_fu_230_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_11_fu_238_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_11_reg_647 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln510_cast_fu_266_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln510_cast_reg_652 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln493_fu_292_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln493_reg_657 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln493_1_fu_296_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln493_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln493_reg_667 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln493_reg_667_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln493_1_fu_328_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln493_1_reg_671 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln510_fu_340_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln510_reg_676 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln510_1_fu_345_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln510_1_reg_681 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln499_fu_380_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln499_reg_686 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln499_1_fu_388_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln499_1_reg_691 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln505_fu_396_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln499_2_fu_408_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln510_5_fu_474_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln510_5_reg_713 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln517_1_fu_484_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln517_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln517_reg_723 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln517_1_fu_516_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln517_1_reg_727 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln523_fu_554_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln523_reg_733 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln523_1_fu_562_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln523_1_reg_738 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln529_fu_570_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln523_2_fu_582_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal i_reg_111 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_phi_mux_a_phi_fu_135_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_b_phi_fu_157_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_a_2_phi_fu_190_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_b_4_phi_fu_212_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln510_8_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln510_9_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln534_3_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_248_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln510_1_fu_256_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln510_fu_244_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln510_fu_260_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_274_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln510_3_fu_282_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln510_2_fu_270_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln510_1_fu_286_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln499_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln493_fu_308_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln510_4_fu_336_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln505_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln493_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln493_fu_320_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln493_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln499_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln499_fu_368_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln499_1_fu_402_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln510_fu_416_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln510_5_fu_421_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln510_2_fu_424_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln510_1_fu_438_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln510_6_fu_443_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln510_3_fu_446_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_42_cast_fu_430_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln510_7_fu_460_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln510_4_fu_463_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_44_cast_fu_452_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln523_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln517_fu_496_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln529_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln517_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln517_fu_508_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln517_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln523_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln523_fu_542_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln523_1_fu_576_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_590_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln534_fu_597_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln534_fu_601_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln534_1_fu_607_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln534_1_fu_610_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_47_cast_fu_616_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln534_2_fu_624_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln534_2_fu_627_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((tmp_22_fu_230_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((tmp_22_fu_230_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((tmp_22_fu_230_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state7);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((tmp_22_fu_230_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_2_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_22_fu_230_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                a_2_reg_186 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln517_reg_723 = ap_const_lv1_0))) then 
                a_2_reg_186 <= select_ln517_1_reg_727;
            end if; 
        end if;
    end process;

    a_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln493_reg_667 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                a_reg_131 <= select_ln493_1_reg_671;
            elsif (((tmp_22_fu_230_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                a_reg_131 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    b_4_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_22_fu_230_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                b_4_reg_208 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln517_reg_723 = ap_const_lv1_0))) then 
                b_4_reg_208 <= select_ln523_1_reg_738;
            end if; 
        end if;
    end process;

    b_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln493_reg_667 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                b_reg_153 <= select_ln499_1_reg_691;
            elsif (((tmp_22_fu_230_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                b_reg_153 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_4_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_22_fu_230_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_4_reg_219 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln517_fu_490_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                c_4_reg_219 <= add_ln529_fu_570_p2;
            end if; 
        end if;
    end process;

    c_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln493_fu_302_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c_reg_164 <= add_ln505_fu_396_p2;
            elsif (((tmp_22_fu_230_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_reg_164 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_111 <= i_11_reg_647;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_111 <= index;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln493_fu_302_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten13_reg_120 <= add_ln493_1_fu_296_p2;
            elsif (((tmp_22_fu_230_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten13_reg_120 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_22_fu_230_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten21_reg_197 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln517_fu_490_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten21_reg_197 <= select_ln523_2_fu_582_p3;
            end if; 
        end if;
    end process;

    indvar_flatten35_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_22_fu_230_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten35_reg_175 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln517_fu_490_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten35_reg_175 <= add_ln517_1_fu_484_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln493_fu_302_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_142 <= select_ln499_2_fu_408_p3;
            elsif (((tmp_22_fu_230_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_142 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln493_fu_302_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln510_1_reg_681 <= add_ln510_1_fu_345_p2;
                add_ln510_reg_676 <= add_ln510_fu_340_p2;
                select_ln499_reg_686 <= select_ln499_fu_380_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln493_reg_667 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln510_5_reg_713 <= add_ln510_5_fu_474_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_22_fu_230_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_11_reg_647 <= i_11_fu_238_p2;
                sext_ln493_reg_657 <= sext_ln493_fu_292_p1;
                sub_ln510_cast_reg_652 <= sub_ln510_cast_fu_266_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln493_reg_667 <= icmp_ln493_fu_302_p2;
                icmp_ln493_reg_667_pp0_iter1_reg <= icmp_ln493_reg_667;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln517_reg_723 <= icmp_ln517_fu_490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln493_fu_302_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln493_1_reg_671 <= select_ln493_1_fu_328_p3;
                select_ln499_1_reg_691 <= select_ln499_1_fu_388_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln517_fu_490_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                select_ln517_1_reg_727 <= select_ln517_1_fu_516_p3;
                select_ln523_1_reg_738 <= select_ln523_1_fu_562_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln517_fu_490_p2 = ap_const_lv1_0))) then
                select_ln523_reg_733 <= select_ln523_fu_554_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_22_fu_230_p3, ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, icmp_ln493_fu_302_p2, ap_enable_reg_pp1_iter0, icmp_ln517_fu_490_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_22_fu_230_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln493_fu_302_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln493_fu_302_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln517_fu_490_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln517_fu_490_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln493_1_fu_296_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_120) + unsigned(ap_const_lv5_1));
    add_ln493_fu_308_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_phi_fu_135_p4) + unsigned(ap_const_lv2_1));
    add_ln499_1_fu_402_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_142) + unsigned(ap_const_lv5_1));
    add_ln499_fu_368_p2 <= std_logic_vector(unsigned(select_ln493_fu_320_p3) + unsigned(ap_const_lv3_1));
    add_ln505_fu_396_p2 <= std_logic_vector(unsigned(select_ln499_fu_380_p3) + unsigned(ap_const_lv2_1));
    add_ln510_1_fu_345_p2 <= std_logic_vector(signed(sext_ln493_reg_657) + signed(zext_ln510_4_fu_336_p1));
    add_ln510_2_fu_424_p2 <= std_logic_vector(unsigned(shl_ln510_fu_416_p2) + unsigned(zext_ln510_5_fu_421_p1));
    add_ln510_3_fu_446_p2 <= std_logic_vector(unsigned(shl_ln510_1_fu_438_p2) + unsigned(zext_ln510_6_fu_443_p1));
    add_ln510_4_fu_463_p2 <= std_logic_vector(unsigned(tmp_42_cast_fu_430_p3) + unsigned(zext_ln510_7_fu_460_p1));
    add_ln510_5_fu_474_p2 <= std_logic_vector(unsigned(tmp_44_cast_fu_452_p3) + unsigned(zext_ln510_7_fu_460_p1));
    add_ln510_fu_340_p2 <= std_logic_vector(signed(sub_ln510_cast_reg_652) + signed(zext_ln510_4_fu_336_p1));
    add_ln517_1_fu_484_p2 <= std_logic_vector(unsigned(indvar_flatten35_reg_175) + unsigned(ap_const_lv5_1));
    add_ln517_fu_496_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_2_phi_fu_190_p4) + unsigned(ap_const_lv2_1));
    add_ln523_1_fu_576_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_197) + unsigned(ap_const_lv5_1));
    add_ln523_fu_542_p2 <= std_logic_vector(unsigned(select_ln517_fu_508_p3) + unsigned(ap_const_lv3_1));
    add_ln529_fu_570_p2 <= std_logic_vector(unsigned(select_ln523_fu_554_p3) + unsigned(ap_const_lv2_1));
    add_ln534_1_fu_610_p2 <= std_logic_vector(unsigned(add_ln534_fu_601_p2) + unsigned(zext_ln534_1_fu_607_p1));
    add_ln534_2_fu_627_p2 <= std_logic_vector(unsigned(tmp_47_cast_fu_616_p3) + unsigned(zext_ln534_2_fu_624_p1));
    add_ln534_fu_601_p2 <= std_logic_vector(unsigned(zext_ln534_fu_597_p1) + unsigned(ap_const_lv6_18));
    and_ln493_fu_362_p2 <= (xor_ln493_fu_350_p2 and icmp_ln505_fu_356_p2);
    and_ln517_fu_536_p2 <= (xor_ln517_fu_524_p2 and icmp_ln529_fu_530_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln493_fu_302_p2)
    begin
        if ((icmp_ln493_fu_302_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(icmp_ln517_fu_490_p2)
    begin
        if ((icmp_ln517_fu_490_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_a_2_phi_fu_190_p4_assign_proc : process(a_2_reg_186, ap_CS_fsm_pp1_stage0, icmp_ln517_reg_723, select_ln517_1_reg_727, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln517_reg_723 = ap_const_lv1_0))) then 
            ap_phi_mux_a_2_phi_fu_190_p4 <= select_ln517_1_reg_727;
        else 
            ap_phi_mux_a_2_phi_fu_190_p4 <= a_2_reg_186;
        end if; 
    end process;


    ap_phi_mux_a_phi_fu_135_p4_assign_proc : process(a_reg_131, ap_CS_fsm_pp0_stage0, icmp_ln493_reg_667, select_ln493_1_reg_671, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln493_reg_667 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_a_phi_fu_135_p4 <= select_ln493_1_reg_671;
        else 
            ap_phi_mux_a_phi_fu_135_p4 <= a_reg_131;
        end if; 
    end process;


    ap_phi_mux_b_4_phi_fu_212_p4_assign_proc : process(b_4_reg_208, ap_CS_fsm_pp1_stage0, icmp_ln517_reg_723, select_ln523_1_reg_738, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln517_reg_723 = ap_const_lv1_0))) then 
            ap_phi_mux_b_4_phi_fu_212_p4 <= select_ln523_1_reg_738;
        else 
            ap_phi_mux_b_4_phi_fu_212_p4 <= b_4_reg_208;
        end if; 
    end process;


    ap_phi_mux_b_phi_fu_157_p4_assign_proc : process(b_reg_153, ap_CS_fsm_pp0_stage0, icmp_ln493_reg_667, select_ln499_1_reg_691, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln493_reg_667 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_b_phi_fu_157_p4 <= select_ln499_1_reg_691;
        else 
            ap_phi_mux_b_phi_fu_157_p4 <= b_reg_153;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_11_fu_238_p2 <= std_logic_vector(unsigned(i_reg_111) + unsigned(ap_const_lv2_1));
    icmp_ln493_fu_302_p2 <= "1" when (indvar_flatten13_reg_120 = ap_const_lv5_18) else "0";
    icmp_ln499_fu_314_p2 <= "1" when (indvar_flatten_reg_142 = ap_const_lv5_8) else "0";
    icmp_ln505_fu_356_p2 <= "1" when (c_reg_164 = ap_const_lv2_2) else "0";
    icmp_ln517_fu_490_p2 <= "1" when (indvar_flatten35_reg_175 = ap_const_lv5_18) else "0";
    icmp_ln523_fu_502_p2 <= "1" when (indvar_flatten21_reg_197 = ap_const_lv5_8) else "0";
    icmp_ln529_fu_530_p2 <= "1" when (c_4_reg_219 = ap_const_lv2_2) else "0";
    or_ln499_fu_374_p2 <= (icmp_ln499_fu_314_p2 or and_ln493_fu_362_p2);
    or_ln523_fu_548_p2 <= (icmp_ln523_fu_502_p2 or and_ln517_fu_536_p2);

    patches_parameters_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln510_9_fu_480_p1, zext_ln534_3_fu_633_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            patches_parameters_address0 <= zext_ln534_3_fu_633_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            patches_parameters_address0 <= zext_ln510_9_fu_480_p1(7 - 1 downto 0);
        else 
            patches_parameters_address0 <= "XXXXXXX";
        end if; 
    end process;

    patches_parameters_address1 <= zext_ln510_8_fu_469_p1(7 - 1 downto 0);

    patches_parameters_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then 
            patches_parameters_ce0 <= ap_const_logic_1;
        else 
            patches_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            patches_parameters_ce1 <= ap_const_logic_1;
        else 
            patches_parameters_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_d0_assign_proc : process(patches_parameters_q1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            patches_parameters_d0 <= ap_const_lv32_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            patches_parameters_d0 <= patches_parameters_q1;
        else 
            patches_parameters_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln493_reg_667_pp0_iter1_reg, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln517_reg_723, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter1)
    begin
        if ((((icmp_ln493_reg_667_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln517_reg_723 = ap_const_lv1_0)))) then 
            patches_parameters_we0 <= ap_const_logic_1;
        else 
            patches_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln493_1_fu_328_p3 <= 
        add_ln493_fu_308_p2 when (icmp_ln499_fu_314_p2(0) = '1') else 
        ap_phi_mux_a_phi_fu_135_p4;
    select_ln493_fu_320_p3 <= 
        ap_const_lv3_0 when (icmp_ln499_fu_314_p2(0) = '1') else 
        ap_phi_mux_b_phi_fu_157_p4;
    select_ln499_1_fu_388_p3 <= 
        add_ln499_fu_368_p2 when (and_ln493_fu_362_p2(0) = '1') else 
        select_ln493_fu_320_p3;
    select_ln499_2_fu_408_p3 <= 
        ap_const_lv5_1 when (icmp_ln499_fu_314_p2(0) = '1') else 
        add_ln499_1_fu_402_p2;
    select_ln499_fu_380_p3 <= 
        ap_const_lv2_0 when (or_ln499_fu_374_p2(0) = '1') else 
        c_reg_164;
    select_ln517_1_fu_516_p3 <= 
        add_ln517_fu_496_p2 when (icmp_ln523_fu_502_p2(0) = '1') else 
        ap_phi_mux_a_2_phi_fu_190_p4;
    select_ln517_fu_508_p3 <= 
        ap_const_lv3_0 when (icmp_ln523_fu_502_p2(0) = '1') else 
        ap_phi_mux_b_4_phi_fu_212_p4;
    select_ln523_1_fu_562_p3 <= 
        add_ln523_fu_542_p2 when (and_ln517_fu_536_p2(0) = '1') else 
        select_ln517_fu_508_p3;
    select_ln523_2_fu_582_p3 <= 
        ap_const_lv5_1 when (icmp_ln523_fu_502_p2(0) = '1') else 
        add_ln523_1_fu_576_p2;
    select_ln523_fu_554_p3 <= 
        ap_const_lv2_0 when (or_ln523_fu_548_p2(0) = '1') else 
        c_4_reg_219;
        sext_ln493_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln510_1_fu_286_p2),6));

    shl_ln510_1_fu_438_p2 <= std_logic_vector(shift_left(unsigned(add_ln510_1_reg_681),to_integer(unsigned('0' & ap_const_lv6_2(6-1 downto 0)))));
    shl_ln510_fu_416_p2 <= std_logic_vector(shift_left(unsigned(add_ln510_reg_676),to_integer(unsigned('0' & ap_const_lv6_2(6-1 downto 0)))));
    sub_ln510_1_fu_286_p2 <= std_logic_vector(unsigned(zext_ln510_3_fu_282_p1) - unsigned(zext_ln510_2_fu_270_p1));
        sub_ln510_cast_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln510_fu_260_p2),6));

    sub_ln510_fu_260_p2 <= std_logic_vector(unsigned(zext_ln510_1_fu_256_p1) - unsigned(zext_ln510_fu_244_p1));
    tmp_22_fu_230_p3 <= i_reg_111(1 downto 1);
    tmp_42_cast_fu_430_p3 <= (add_ln510_2_fu_424_p2 & ap_const_lv1_0);
    tmp_44_cast_fu_452_p3 <= (add_ln510_3_fu_446_p2 & ap_const_lv1_0);
    tmp_47_cast_fu_616_p3 <= (add_ln534_1_fu_610_p2 & ap_const_lv1_0);
    tmp_4_fu_590_p3 <= (select_ln517_1_reg_727 & ap_const_lv2_0);
    tmp_fu_248_p3 <= (i_11_fu_238_p2 & ap_const_lv2_0);
    tmp_s_fu_274_p3 <= (i_reg_111 & ap_const_lv2_0);
    xor_ln493_fu_350_p2 <= (icmp_ln499_fu_314_p2 xor ap_const_lv1_1);
    xor_ln517_fu_524_p2 <= (icmp_ln523_fu_502_p2 xor ap_const_lv1_1);
    zext_ln510_1_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_248_p3),5));
    zext_ln510_2_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_111),5));
    zext_ln510_3_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_274_p3),5));
    zext_ln510_4_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln493_1_fu_328_p3),6));
    zext_ln510_5_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln499_1_reg_691),6));
    zext_ln510_6_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln499_1_reg_691),6));
    zext_ln510_7_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln499_reg_686),7));
    zext_ln510_8_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln510_4_fu_463_p2),64));
    zext_ln510_9_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln510_5_reg_713),64));
    zext_ln510_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_11_fu_238_p2),5));
    zext_ln534_1_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln523_1_reg_738),6));
    zext_ln534_2_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln523_reg_733),7));
    zext_ln534_3_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln534_2_fu_627_p2),64));
    zext_ln534_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_590_p3),6));
end behav;
