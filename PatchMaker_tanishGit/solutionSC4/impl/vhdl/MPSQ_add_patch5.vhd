-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_add_patch5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n_patches : OUT STD_LOGIC_VECTOR (7 downto 0);
    n_patches_ap_vld : OUT STD_LOGIC;
    n_patches_read : IN STD_LOGIC_VECTOR (7 downto 0);
    wp_superpoints_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    wp_superpoints_ce0 : OUT STD_LOGIC;
    wp_superpoints_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    wp_parameters_ce0 : OUT STD_LOGIC;
    wp_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_we0 : OUT STD_LOGIC;
    patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patches_superpoints_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_add_patch5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv12_66 : STD_LOGIC_VECTOR (11 downto 0) := "000001100110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv51_0 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000000";
    constant ap_const_lv13_1F : STD_LOGIC_VECTOR (12 downto 0) := "0000000011111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv12_F : STD_LOGIC_VECTOR (11 downto 0) := "000000001111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten29_reg_297 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_3_reg_308 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_5_reg_319 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten51_reg_330 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_4_reg_341 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten37_reg_352 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_6_reg_363 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_4_reg_374 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_385 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_reg_396 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_reg_407 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten21_reg_418 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_2_reg_429 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten7_reg_440 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_4_reg_451 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_462 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln322_fu_486_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln322_reg_1346 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln325_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln325_reg_1351 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_fu_500_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_reg_1355 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln380_fu_557_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln380_reg_1366 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln380_cast_fu_563_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln380_cast_reg_1371 : STD_LOGIC_VECTOR (8 downto 0);
    signal patches_parameters_load_reg_1376 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln378_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln378_reg_1381 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln378_1_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln378_1_reg_1385 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_3_fu_582_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_3_reg_1389 : STD_LOGIC_VECTOR (7 downto 0);
    signal wp_superpoints_addr_5_reg_1399 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln380_2_fu_630_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln380_2_reg_1404 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln874_reg_1419 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln391_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln391_reg_1426 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln405_fu_700_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln405_reg_1430 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln394_1_fu_706_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln394_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln394_reg_1441 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln394_fu_730_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln394_reg_1445 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln394_1_fu_738_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln394_1_reg_1450 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln400_fu_785_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln410_1_fu_825_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state10_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln410_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln410_reg_1471 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln410_1_fu_857_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln410_1_reg_1475 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln416_fu_907_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln416_reg_1481 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln416_1_fu_915_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln416_1_reg_1486 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln422_fu_974_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln416_2_fu_986_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln329_1_fu_1077_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state14_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln329_fu_1083_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln329_reg_1512 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln329_1_fu_1109_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln329_1_reg_1516 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln340_fu_1133_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln340_reg_1521 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln335_fu_1156_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln345_1_fu_1166_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal ap_block_state17_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state18_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal icmp_ln345_fu_1172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln345_reg_1541 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln345_1_fu_1198_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln345_1_reg_1545 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln351_1_fu_1256_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln351_1_reg_1550 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln362_4_fu_1314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln362_4_reg_1555 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln357_fu_1319_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln351_2_fu_1331_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state14 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state17 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal grp_encodeCoordinates_fu_473_ap_ready : STD_LOGIC;
    signal grp_encodeCoordinates_fu_473_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_286 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_phi_mux_a_3_phi_fu_312_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_a_4_phi_fu_345_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_b_6_phi_fu_367_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_a_phi_fu_400_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_phi_mux_a_2_phi_fu_433_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal ap_phi_mux_b_4_phi_fu_455_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_cast_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_606_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_621_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln380_2_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln381_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln405_6_fu_780_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln405_7_fu_820_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln427_6_fu_969_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln427_7_fu_1062_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln340_2_fu_1151_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln340_1_fu_1162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln435_fu_1072_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal trunc_ln325_fu_490_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_514_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_506_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_41_cast_fu_522_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_42_fu_526_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_43_fu_532_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_546_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln380_1_fu_553_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln380_fu_543_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln378_fu_573_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_592_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln874_fu_600_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln874_1_fu_615_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln874_fu_588_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln380_1_fu_635_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_640_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_49_cast_fu_653_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln381_fu_660_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_fu_671_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_13_fu_689_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln405_1_fu_696_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln405_fu_686_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln400_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln394_fu_718_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_14_fu_746_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln405_2_fu_754_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln405_5_fu_758_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln405_2_fu_762_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln405_fu_768_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln405_fu_774_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln405_fu_791_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln405_3_fu_794_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln405_1_fu_797_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_56_cast_fu_803_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln405_4_fu_811_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln405_3_fu_814_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln416_fu_843_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln410_fu_837_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_fu_865_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln422_fu_883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln410_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln410_fu_849_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln410_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln416_fu_901_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln416_fu_895_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln427_1_fu_873_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln427_3_fu_923_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln427_1_fu_927_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln427_fu_933_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl8_cast_fu_937_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl9_cast_fu_945_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln427_fu_953_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln427_5_fu_959_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln427_3_fu_963_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln416_1_fu_980_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln427_fu_994_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln427_fu_997_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_fu_1002_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln416_fu_1010_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln427_2_fu_1014_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln427_2_fu_1017_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln427_1_fu_1023_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln427_2_fu_1035_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_fu_1027_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl7_cast_fu_1039_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln427_1_fu_1047_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln427_4_fu_1053_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln427_4_fu_1056_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln435_fu_1067_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln335_fu_1095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln329_fu_1089_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_1117_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln329_fu_1101_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_42_cast_fu_1125_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln340_fu_1129_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln340_fu_1139_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln340_fu_1145_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln351_fu_1184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln345_fu_1178_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_1206_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln357_fu_1224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln345_fu_1218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln345_fu_1190_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln345_fu_1230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln351_fu_1242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln351_fu_1236_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln351_fu_1214_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln362_fu_1264_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln362_fu_1268_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_fu_1274_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_1286_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln362_1_fu_1282_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln362_2_fu_1294_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln351_fu_1248_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln362_fu_1298_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln362_3_fu_1304_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln362_1_fu_1308_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln351_1_fu_1325_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component MPSQ_encodeCoordinates IS
    port (
        ap_ready : OUT STD_LOGIC;
        z : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_encodeCoordinates_fu_473 : component MPSQ_encodeCoordinates
    port map (
        ap_ready => grp_encodeCoordinates_fu_473_ap_ready,
        z => wp_superpoints_q0,
        ap_return => grp_encodeCoordinates_fu_473_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln391_fu_680_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state7);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln391_fu_680_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state10) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state10);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state14) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln325_fu_494_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state14) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state14);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln325_fu_494_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state17) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state17) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then 
                    ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state17);
                elsif ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_2_reg_429_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                a_2_reg_429 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln345_reg_1541 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                a_2_reg_429 <= select_ln345_1_reg_1545;
            end if; 
        end if;
    end process;

    a_3_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln394_reg_1441 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                a_3_reg_308 <= select_ln394_1_reg_1450;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln391_fu_680_p2 = ap_const_lv1_1))) then 
                a_3_reg_308 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    a_4_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                a_4_reg_341 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln410_reg_1471 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                a_4_reg_341 <= select_ln410_1_reg_1475;
            end if; 
        end if;
    end process;

    a_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln325_fu_494_p2 = ap_const_lv1_1))) then 
                a_reg_396 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln329_reg_1512 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                a_reg_396 <= select_ln329_1_reg_1516;
            end if; 
        end if;
    end process;

    b_4_reg_451_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                b_4_reg_451 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln345_reg_1541 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                b_4_reg_451 <= select_ln351_1_reg_1550;
            end if; 
        end if;
    end process;

    b_5_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln394_fu_712_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                b_5_reg_319 <= add_ln400_fu_785_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln391_fu_680_p2 = ap_const_lv1_1))) then 
                b_5_reg_319 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    b_6_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                b_6_reg_363 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln410_reg_1471 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                b_6_reg_363 <= select_ln416_1_reg_1486;
            end if; 
        end if;
    end process;

    b_reg_407_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln325_fu_494_p2 = ap_const_lv1_1))) then 
                b_reg_407 <= ap_const_lv5_0;
            elsif (((icmp_ln329_fu_1083_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                b_reg_407 <= add_ln335_fu_1156_p2;
            end if; 
        end if;
    end process;

    c_4_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                c_4_reg_374 <= ap_const_lv3_0;
            elsif (((icmp_ln410_fu_831_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                c_4_reg_374 <= add_ln422_fu_974_p2;
            end if; 
        end if;
    end process;

    c_reg_462_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                c_reg_462 <= ap_const_lv3_0;
            elsif (((icmp_ln345_fu_1172_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                c_reg_462 <= add_ln357_fu_1319_p2;
            end if; 
        end if;
    end process;

    i_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln378_fu_567_p2 = ap_const_lv1_1))) then 
                i_reg_286 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln874_reg_1419 = ap_const_lv1_1) and (grp_fu_480_p2 = ap_const_lv1_1) and (icmp_ln378_1_reg_1385 = ap_const_lv1_1))) then 
                i_reg_286 <= i_3_reg_1389;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                indvar_flatten21_reg_418 <= ap_const_lv7_0;
            elsif (((icmp_ln345_fu_1172_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                indvar_flatten21_reg_418 <= add_ln345_1_fu_1166_p2;
            end if; 
        end if;
    end process;

    indvar_flatten29_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln394_fu_712_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten29_reg_297 <= add_ln394_1_fu_706_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln391_fu_680_p2 = ap_const_lv1_1))) then 
                indvar_flatten29_reg_297 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten37_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                indvar_flatten37_reg_352 <= ap_const_lv6_0;
            elsif (((icmp_ln410_fu_831_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                indvar_flatten37_reg_352 <= select_ln416_2_fu_986_p3;
            end if; 
        end if;
    end process;

    indvar_flatten51_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                indvar_flatten51_reg_330 <= ap_const_lv7_0;
            elsif (((icmp_ln410_fu_831_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                indvar_flatten51_reg_330 <= add_ln410_1_fu_825_p2;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                indvar_flatten7_reg_440 <= ap_const_lv6_0;
            elsif (((icmp_ln345_fu_1172_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                indvar_flatten7_reg_440 <= select_ln351_2_fu_1331_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln325_fu_494_p2 = ap_const_lv1_1))) then 
                indvar_flatten_reg_385 <= ap_const_lv7_0;
            elsif (((icmp_ln329_fu_1083_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                indvar_flatten_reg_385 <= add_ln329_1_fu_1077_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln329_fu_1083_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                add_ln340_reg_1521 <= add_ln340_fu_1133_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln378_1_fu_577_p2 = ap_const_lv1_1))) then
                add_ln380_2_reg_1404 <= add_ln380_2_fu_630_p2;
                    wp_superpoints_addr_5_reg_1399(7 downto 5) <= tmp_7_fu_621_p3(8 - 1 downto 0)(7 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    add_ln380_cast_reg_1371(7 downto 0) <= add_ln380_cast_fu_563_p1(7 downto 0);
                add_ln380_reg_1366 <= add_ln380_fu_557_p2;
                icmp_ln378_reg_1381 <= icmp_ln378_fu_567_p2;
                patches_parameters_load_reg_1376 <= patches_parameters_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln391_fu_680_p2 = ap_const_lv1_1))) then
                add_ln405_reg_1430 <= add_ln405_fu_700_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_3_reg_1389 <= i_3_fu_582_p2;
                icmp_ln378_1_reg_1385 <= icmp_ln378_1_fu_577_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln325_reg_1351 <= icmp_ln325_fu_494_p2;
                trunc_ln322_reg_1346 <= trunc_ln322_fu_486_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln329_reg_1512 <= icmp_ln329_fu_1083_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                icmp_ln345_reg_1541 <= icmp_ln345_fu_1172_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln391_reg_1426 <= icmp_ln391_fu_680_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln394_reg_1441 <= icmp_ln394_fu_712_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln410_reg_1471 <= icmp_ln410_fu_831_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln378_1_reg_1385 = ap_const_lv1_1))) then
                icmp_ln874_reg_1419 <= grp_fu_480_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln329_fu_1083_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                select_ln329_1_reg_1516 <= select_ln329_1_fu_1109_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln345_fu_1172_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                select_ln345_1_reg_1545 <= select_ln345_1_fu_1198_p3;
                select_ln351_1_reg_1550 <= select_ln351_1_fu_1256_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln394_fu_712_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                select_ln394_1_reg_1450 <= select_ln394_1_fu_738_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln394_fu_712_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln394_reg_1445 <= select_ln394_fu_730_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln410_fu_831_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln410_1_reg_1475 <= select_ln410_1_fu_857_p3;
                select_ln416_1_reg_1486 <= select_ln416_1_fu_915_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln410_fu_831_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln416_reg_1481 <= select_ln416_fu_907_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln325_fu_494_p2 = ap_const_lv1_0))) then
                sub_reg_1355 <= sub_fu_500_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln345_fu_1172_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                    zext_ln362_4_reg_1555(11 downto 0) <= zext_ln362_4_fu_1314_p1(11 downto 0);
            end if;
        end if;
    end process;
    add_ln380_cast_reg_1371(8) <= '0';
    wp_superpoints_addr_5_reg_1399(4 downto 0) <= "11111";
    zext_ln362_4_reg_1555(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln325_fu_494_p2, ap_CS_fsm_state2, icmp_ln378_fu_567_p2, icmp_ln378_1_reg_1385, grp_fu_480_p2, icmp_ln874_reg_1419, icmp_ln391_fu_680_p2, ap_CS_fsm_state6, ap_enable_reg_pp1_iter0, icmp_ln394_fu_712_p2, ap_enable_reg_pp2_iter0, icmp_ln410_fu_831_p2, ap_enable_reg_pp3_iter0, icmp_ln329_fu_1083_p2, ap_enable_reg_pp4_iter0, icmp_ln345_fu_1172_p2, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_block_pp4_stage0_subdone, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln325_fu_494_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln325_fu_494_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln378_fu_567_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln874_reg_1419 = ap_const_lv1_1) and (grp_fu_480_p2 = ap_const_lv1_1) and (icmp_ln378_1_reg_1385 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln378_1_reg_1385 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln391_fu_680_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln394_fu_712_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln394_fu_712_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((icmp_ln410_fu_831_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln410_fu_831_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((icmp_ln329_fu_1083_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((icmp_ln329_fu_1083_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if (not(((icmp_ln345_fu_1172_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((icmp_ln345_fu_1172_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln329_1_fu_1077_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_385) + unsigned(ap_const_lv7_1));
    add_ln329_fu_1089_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_phi_fu_400_p4) + unsigned(ap_const_lv3_1));
    add_ln335_fu_1156_p2 <= std_logic_vector(unsigned(select_ln329_fu_1101_p3) + unsigned(ap_const_lv5_1));
    add_ln340_fu_1133_p2 <= std_logic_vector(unsigned(tmp_42_cast_fu_1125_p1) + unsigned(zext_ln340_fu_1129_p1));
    add_ln345_1_fu_1166_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_418) + unsigned(ap_const_lv7_1));
    add_ln345_fu_1178_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_2_phi_fu_433_p4) + unsigned(ap_const_lv3_1));
    add_ln351_1_fu_1325_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_440) + unsigned(ap_const_lv6_1));
    add_ln351_fu_1236_p2 <= std_logic_vector(unsigned(select_ln345_fu_1190_p3) + unsigned(ap_const_lv3_1));
    add_ln357_fu_1319_p2 <= std_logic_vector(unsigned(select_ln351_fu_1248_p3) + unsigned(ap_const_lv3_1));
    add_ln362_1_fu_1308_p2 <= std_logic_vector(unsigned(sub_ln362_fu_1298_p2) + unsigned(zext_ln362_3_fu_1304_p1));
    add_ln362_fu_1268_p2 <= std_logic_vector(unsigned(zext_ln351_fu_1214_p1) + unsigned(zext_ln362_fu_1264_p1));
    add_ln380_1_fu_635_p2 <= std_logic_vector(unsigned(add_ln380_cast_reg_1371) + unsigned(zext_ln874_fu_588_p1));
    add_ln380_2_fu_630_p2 <= std_logic_vector(unsigned(add_ln380_reg_1366) + unsigned(i_reg_286));
    add_ln380_cast_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln380_fu_557_p2),9));
    add_ln380_fu_557_p2 <= std_logic_vector(unsigned(zext_ln380_1_fu_553_p1) + unsigned(zext_ln380_fu_543_p1));
    add_ln394_1_fu_706_p2 <= std_logic_vector(unsigned(indvar_flatten29_reg_297) + unsigned(ap_const_lv7_1));
    add_ln394_fu_718_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_3_phi_fu_312_p4) + unsigned(ap_const_lv3_1));
    add_ln400_fu_785_p2 <= std_logic_vector(unsigned(select_ln394_fu_730_p3) + unsigned(ap_const_lv5_1));
    add_ln405_1_fu_797_p2 <= std_logic_vector(unsigned(trunc_ln405_fu_791_p1) + unsigned(zext_ln405_3_fu_794_p1));
    add_ln405_2_fu_762_p2 <= std_logic_vector(unsigned(zext_ln405_2_fu_754_p1) + unsigned(zext_ln405_5_fu_758_p1));
    add_ln405_3_fu_814_p2 <= std_logic_vector(unsigned(tmp_56_cast_fu_803_p3) + unsigned(zext_ln405_4_fu_811_p1));
    add_ln405_fu_700_p2 <= std_logic_vector(unsigned(zext_ln405_1_fu_696_p1) + unsigned(zext_ln405_fu_686_p1));
    add_ln410_1_fu_825_p2 <= std_logic_vector(unsigned(indvar_flatten51_reg_330) + unsigned(ap_const_lv7_1));
    add_ln410_fu_837_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_4_phi_fu_345_p4) + unsigned(ap_const_lv3_1));
    add_ln416_1_fu_980_p2 <= std_logic_vector(unsigned(indvar_flatten37_reg_352) + unsigned(ap_const_lv6_1));
    add_ln416_fu_895_p2 <= std_logic_vector(unsigned(select_ln410_fu_849_p3) + unsigned(ap_const_lv3_1));
    add_ln422_fu_974_p2 <= std_logic_vector(unsigned(select_ln416_fu_907_p3) + unsigned(ap_const_lv3_1));
    add_ln427_1_fu_927_p2 <= std_logic_vector(unsigned(zext_ln427_1_fu_873_p1) + unsigned(zext_ln427_3_fu_923_p1));
    add_ln427_2_fu_1017_p2 <= std_logic_vector(unsigned(zext_ln416_fu_1010_p1) + unsigned(zext_ln427_2_fu_1014_p1));
    add_ln427_3_fu_963_p2 <= std_logic_vector(unsigned(sub_ln427_fu_953_p2) + unsigned(zext_ln427_5_fu_959_p1));
    add_ln427_4_fu_1056_p2 <= std_logic_vector(unsigned(sub_ln427_1_fu_1047_p2) + unsigned(zext_ln427_4_fu_1053_p1));
    add_ln427_fu_997_p2 <= std_logic_vector(unsigned(add_ln405_reg_1430) + unsigned(zext_ln427_fu_994_p1));
    add_ln435_fu_1067_p2 <= std_logic_vector(unsigned(trunc_ln322_reg_1346) + unsigned(ap_const_lv6_1));
    and_ln345_fu_1230_p2 <= (xor_ln345_fu_1218_p2 and icmp_ln357_fu_1224_p2);
    and_ln410_fu_889_p2 <= (xor_ln410_fu_877_p2 and icmp_ln422_fu_883_p2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(13);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state16 <= ap_CS_fsm(12);
    ap_CS_fsm_state19 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state7_assign_proc : process(icmp_ln394_fu_712_p2)
    begin
        if ((icmp_ln394_fu_712_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state10_assign_proc : process(icmp_ln410_fu_831_p2)
    begin
        if ((icmp_ln410_fu_831_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state14_assign_proc : process(icmp_ln329_fu_1083_p2)
    begin
        if ((icmp_ln329_fu_1083_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state17_assign_proc : process(icmp_ln345_fu_1172_p2)
    begin
        if ((icmp_ln345_fu_1172_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state17 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_a_2_phi_fu_433_p4_assign_proc : process(a_2_reg_429, ap_CS_fsm_pp4_stage0, icmp_ln345_reg_1541, select_ln345_1_reg_1545, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln345_reg_1541 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            ap_phi_mux_a_2_phi_fu_433_p4 <= select_ln345_1_reg_1545;
        else 
            ap_phi_mux_a_2_phi_fu_433_p4 <= a_2_reg_429;
        end if; 
    end process;


    ap_phi_mux_a_3_phi_fu_312_p4_assign_proc : process(a_3_reg_308, ap_CS_fsm_pp1_stage0, icmp_ln394_reg_1441, select_ln394_1_reg_1450, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln394_reg_1441 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_a_3_phi_fu_312_p4 <= select_ln394_1_reg_1450;
        else 
            ap_phi_mux_a_3_phi_fu_312_p4 <= a_3_reg_308;
        end if; 
    end process;


    ap_phi_mux_a_4_phi_fu_345_p4_assign_proc : process(a_4_reg_341, ap_CS_fsm_pp2_stage0, icmp_ln410_reg_1471, select_ln410_1_reg_1475, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln410_reg_1471 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_a_4_phi_fu_345_p4 <= select_ln410_1_reg_1475;
        else 
            ap_phi_mux_a_4_phi_fu_345_p4 <= a_4_reg_341;
        end if; 
    end process;


    ap_phi_mux_a_phi_fu_400_p4_assign_proc : process(a_reg_396, ap_CS_fsm_pp3_stage0, icmp_ln329_reg_1512, select_ln329_1_reg_1516, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln329_reg_1512 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            ap_phi_mux_a_phi_fu_400_p4 <= select_ln329_1_reg_1516;
        else 
            ap_phi_mux_a_phi_fu_400_p4 <= a_reg_396;
        end if; 
    end process;


    ap_phi_mux_b_4_phi_fu_455_p4_assign_proc : process(b_4_reg_451, ap_CS_fsm_pp4_stage0, icmp_ln345_reg_1541, select_ln351_1_reg_1550, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln345_reg_1541 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            ap_phi_mux_b_4_phi_fu_455_p4 <= select_ln351_1_reg_1550;
        else 
            ap_phi_mux_b_4_phi_fu_455_p4 <= b_4_reg_451;
        end if; 
    end process;


    ap_phi_mux_b_6_phi_fu_367_p4_assign_proc : process(b_6_reg_363, ap_CS_fsm_pp2_stage0, icmp_ln410_reg_1471, select_ln416_1_reg_1486, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln410_reg_1471 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_b_6_phi_fu_367_p4 <= select_ln416_1_reg_1486;
        else 
            ap_phi_mux_b_6_phi_fu_367_p4 <= b_6_reg_363;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_42_fu_526_p2 <= std_logic_vector(unsigned(tmp_s_fu_506_p3) - unsigned(tmp_41_cast_fu_522_p1));
    empty_43_fu_532_p2 <= std_logic_vector(unsigned(empty_42_fu_526_p2) + unsigned(ap_const_lv12_66));
    grp_fu_480_p2 <= "1" when (patches_superpoints_q0 = wp_superpoints_q0) else "0";
    i_3_fu_582_p2 <= std_logic_vector(unsigned(i_reg_286) + unsigned(ap_const_lv8_1));
    icmp_ln325_fu_494_p2 <= "1" when (n_patches_read = ap_const_lv8_0) else "0";
    icmp_ln329_fu_1083_p2 <= "1" when (indvar_flatten_reg_385 = ap_const_lv7_50) else "0";
    icmp_ln335_fu_1095_p2 <= "1" when (b_reg_407 = ap_const_lv5_10) else "0";
    icmp_ln345_fu_1172_p2 <= "1" when (indvar_flatten21_reg_418 = ap_const_lv7_78) else "0";
    icmp_ln351_fu_1184_p2 <= "1" when (indvar_flatten7_reg_440 = ap_const_lv6_18) else "0";
    icmp_ln357_fu_1224_p2 <= "1" when (c_reg_462 = ap_const_lv3_6) else "0";
    icmp_ln378_1_fu_577_p2 <= "1" when (signed(zext_ln378_fu_573_p1) < signed(patches_parameters_load_reg_1376)) else "0";
    icmp_ln378_fu_567_p2 <= "1" when (signed(patches_parameters_q0) > signed(ap_const_lv32_0)) else "0";
    icmp_ln391_fu_680_p2 <= "1" when (tmp_12_fu_671_p4 = ap_const_lv3_0) else "0";
    icmp_ln394_fu_712_p2 <= "1" when (indvar_flatten29_reg_297 = ap_const_lv7_50) else "0";
    icmp_ln400_fu_724_p2 <= "1" when (b_5_reg_319 = ap_const_lv5_10) else "0";
    icmp_ln410_fu_831_p2 <= "1" when (indvar_flatten51_reg_330 = ap_const_lv7_78) else "0";
    icmp_ln416_fu_843_p2 <= "1" when (indvar_flatten37_reg_352 = ap_const_lv6_18) else "0";
    icmp_ln422_fu_883_p2 <= "1" when (c_4_reg_374 = ap_const_lv3_6) else "0";

    n_patches_assign_proc : process(icmp_ln325_reg_1351, icmp_ln378_reg_1381, icmp_ln378_1_reg_1385, icmp_ln391_reg_1426, zext_ln435_fu_1072_p1, ap_CS_fsm_state12, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            n_patches <= ap_const_lv8_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln391_reg_1426 = ap_const_lv1_1) and (icmp_ln378_1_reg_1385 = ap_const_lv1_1) and (icmp_ln378_reg_1381 = ap_const_lv1_1) and (icmp_ln325_reg_1351 = ap_const_lv1_0))) then 
            n_patches <= zext_ln435_fu_1072_p1;
        else 
            n_patches <= "XXXXXXXX";
        end if; 
    end process;


    n_patches_ap_vld_assign_proc : process(icmp_ln325_reg_1351, icmp_ln378_reg_1381, icmp_ln378_1_reg_1385, icmp_ln391_reg_1426, ap_CS_fsm_state12, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln391_reg_1426 = ap_const_lv1_1) and (icmp_ln378_1_reg_1385 = ap_const_lv1_1) and (icmp_ln378_reg_1381 = ap_const_lv1_1) and (icmp_ln325_reg_1351 = ap_const_lv1_0)))) then 
            n_patches_ap_vld <= ap_const_logic_1;
        else 
            n_patches_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln340_fu_1145_p2 <= (shl_ln340_fu_1139_p2 or ap_const_lv8_1);
    or_ln351_fu_1242_p2 <= (icmp_ln351_fu_1184_p2 or and_ln345_fu_1230_p2);
    or_ln381_fu_660_p2 <= (tmp_49_cast_fu_653_p3 or ap_const_lv12_F);
    or_ln405_fu_774_p2 <= (shl_ln405_fu_768_p2 or ap_const_lv8_1);
    or_ln416_fu_901_p2 <= (icmp_ln416_fu_843_p2 or and_ln410_fu_889_p2);
    or_ln874_1_fu_615_p2 <= (tmp_5_fu_592_p3 or ap_const_lv13_1F);
    or_ln874_fu_600_p2 <= (tmp_5_fu_592_p3 or ap_const_lv13_1);
    p_cast_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_43_fu_532_p2),64));
    p_shl6_cast_fu_1027_p3 <= (trunc_ln427_1_fu_1023_p1 & ap_const_lv3_0);
    p_shl7_cast_fu_1039_p3 <= (trunc_ln427_2_fu_1035_p1 & ap_const_lv1_0);
    p_shl8_cast_fu_937_p3 <= (trunc_ln427_fu_933_p1 & ap_const_lv3_0);
    p_shl9_cast_fu_945_p3 <= (add_ln427_1_fu_927_p2 & ap_const_lv1_0);

    patches_parameters_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp4_stage0, zext_ln362_4_reg_1555, ap_enable_reg_pp2_iter1, ap_enable_reg_pp4_iter1, ap_block_pp2_stage0, ap_block_pp4_stage0, p_cast_fu_538_p1, zext_ln427_7_fu_1062_p1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            patches_parameters_address0 <= zext_ln362_4_reg_1555(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            patches_parameters_address0 <= zext_ln427_7_fu_1062_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            patches_parameters_address0 <= p_cast_fu_538_p1(12 - 1 downto 0);
        else 
            patches_parameters_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp2_iter1, ap_enable_reg_pp4_iter1)
    begin
        if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            patches_parameters_ce0 <= ap_const_logic_1;
        else 
            patches_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_parameters_d0 <= wp_parameters_q0;

    patches_parameters_we0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln410_reg_1471, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, icmp_ln345_reg_1541, ap_enable_reg_pp2_iter1, ap_enable_reg_pp4_iter1)
    begin
        if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln345_reg_1541 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln410_reg_1471 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            patches_parameters_we0 <= ap_const_logic_1;
        else 
            patches_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter1, ap_block_pp1_stage0, ap_block_pp3_stage0, zext_ln380_2_fu_648_p1, zext_ln381_fu_666_p1, zext_ln405_7_fu_820_p1, zext_ln340_1_fu_1162_p1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            patches_superpoints_address0 <= zext_ln340_1_fu_1162_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            patches_superpoints_address0 <= zext_ln405_7_fu_820_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            patches_superpoints_address0 <= zext_ln381_fu_666_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            patches_superpoints_address0 <= zext_ln380_2_fu_648_p1(12 - 1 downto 0);
        else 
            patches_superpoints_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            patches_superpoints_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_superpoints_d0 <= grp_encodeCoordinates_fu_473_ap_return;

    patches_superpoints_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln394_reg_1441, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, icmp_ln329_reg_1512, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter1)
    begin
        if ((((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln329_reg_1512 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln394_reg_1441 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            patches_superpoints_we0 <= ap_const_logic_1;
        else 
            patches_superpoints_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln329_1_fu_1109_p3 <= 
        add_ln329_fu_1089_p2 when (icmp_ln335_fu_1095_p2(0) = '1') else 
        ap_phi_mux_a_phi_fu_400_p4;
    select_ln329_fu_1101_p3 <= 
        ap_const_lv5_0 when (icmp_ln335_fu_1095_p2(0) = '1') else 
        b_reg_407;
    select_ln345_1_fu_1198_p3 <= 
        add_ln345_fu_1178_p2 when (icmp_ln351_fu_1184_p2(0) = '1') else 
        ap_phi_mux_a_2_phi_fu_433_p4;
    select_ln345_fu_1190_p3 <= 
        ap_const_lv3_0 when (icmp_ln351_fu_1184_p2(0) = '1') else 
        ap_phi_mux_b_4_phi_fu_455_p4;
    select_ln351_1_fu_1256_p3 <= 
        add_ln351_fu_1236_p2 when (and_ln345_fu_1230_p2(0) = '1') else 
        select_ln345_fu_1190_p3;
    select_ln351_2_fu_1331_p3 <= 
        ap_const_lv6_1 when (icmp_ln351_fu_1184_p2(0) = '1') else 
        add_ln351_1_fu_1325_p2;
    select_ln351_fu_1248_p3 <= 
        ap_const_lv3_0 when (or_ln351_fu_1242_p2(0) = '1') else 
        c_reg_462;
    select_ln394_1_fu_738_p3 <= 
        add_ln394_fu_718_p2 when (icmp_ln400_fu_724_p2(0) = '1') else 
        ap_phi_mux_a_3_phi_fu_312_p4;
    select_ln394_fu_730_p3 <= 
        ap_const_lv5_0 when (icmp_ln400_fu_724_p2(0) = '1') else 
        b_5_reg_319;
    select_ln410_1_fu_857_p3 <= 
        add_ln410_fu_837_p2 when (icmp_ln416_fu_843_p2(0) = '1') else 
        ap_phi_mux_a_4_phi_fu_345_p4;
    select_ln410_fu_849_p3 <= 
        ap_const_lv3_0 when (icmp_ln416_fu_843_p2(0) = '1') else 
        ap_phi_mux_b_6_phi_fu_367_p4;
    select_ln416_1_fu_915_p3 <= 
        add_ln416_fu_895_p2 when (and_ln410_fu_889_p2(0) = '1') else 
        select_ln410_fu_849_p3;
    select_ln416_2_fu_986_p3 <= 
        ap_const_lv6_1 when (icmp_ln416_fu_843_p2(0) = '1') else 
        add_ln416_1_fu_980_p2;
    select_ln416_fu_907_p3 <= 
        ap_const_lv3_0 when (or_ln416_fu_901_p2(0) = '1') else 
        c_4_reg_374;
    shl_ln340_fu_1139_p2 <= std_logic_vector(shift_left(unsigned(add_ln340_fu_1133_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln405_fu_768_p2 <= std_logic_vector(shift_left(unsigned(add_ln405_2_fu_762_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    sub_fu_500_p2 <= std_logic_vector(unsigned(trunc_ln325_fu_490_p1) + unsigned(ap_const_lv5_1F));
    sub_ln362_fu_1298_p2 <= std_logic_vector(unsigned(zext_ln362_1_fu_1282_p1) - unsigned(zext_ln362_2_fu_1294_p1));
    sub_ln427_1_fu_1047_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_1027_p3) - unsigned(p_shl7_cast_fu_1039_p3));
    sub_ln427_fu_953_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_937_p3) - unsigned(p_shl9_cast_fu_945_p3));
    tmp_10_fu_1274_p3 <= (add_ln362_fu_1268_p2 & ap_const_lv3_0);
    tmp_11_fu_1286_p3 <= (add_ln362_fu_1268_p2 & ap_const_lv1_0);
    tmp_12_fu_671_p4 <= n_patches_read(7 downto 5);
    tmp_13_fu_689_p3 <= (n_patches_read & ap_const_lv2_0);
    tmp_14_fu_746_p3 <= (select_ln394_1_fu_738_p3 & ap_const_lv4_0);
    tmp_15_fu_865_p3 <= (select_ln410_1_fu_857_p3 & ap_const_lv2_0);
    tmp_16_fu_1002_p3 <= (add_ln427_fu_997_p2 & ap_const_lv2_0);
    tmp_3_fu_514_p3 <= (sub_fu_500_p2 & ap_const_lv3_0);
    tmp_41_cast_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_514_p3),12));
    tmp_42_cast_fu_1125_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_1117_p3),8));
    tmp_49_cast_fu_653_p3 <= (add_ln380_2_reg_1404 & ap_const_lv4_0);
    tmp_4_fu_1117_p3 <= (select_ln329_1_fu_1109_p3 & ap_const_lv4_0);
    tmp_56_cast_fu_803_p3 <= (add_ln405_1_fu_797_p2 & ap_const_lv4_0);
    tmp_5_fu_592_p3 <= (i_reg_286 & ap_const_lv5_0);
    tmp_6_fu_606_p3 <= (ap_const_lv51_0 & or_ln874_fu_600_p2);
    tmp_7_fu_621_p3 <= (ap_const_lv51_0 & or_ln874_1_fu_615_p2);
    tmp_8_fu_640_p3 <= (add_ln380_1_fu_635_p2 & ap_const_lv4_0);
    tmp_9_fu_1206_p3 <= (select_ln345_1_fu_1198_p3 & ap_const_lv2_0);
    tmp_fu_546_p3 <= (sub_reg_1355 & ap_const_lv2_0);
    tmp_s_fu_506_p3 <= (sub_fu_500_p2 & ap_const_lv7_0);
    trunc_ln322_fu_486_p1 <= n_patches_read(6 - 1 downto 0);
    trunc_ln325_fu_490_p1 <= n_patches_read(5 - 1 downto 0);
    trunc_ln405_fu_791_p1 <= add_ln405_reg_1430(8 - 1 downto 0);
    trunc_ln427_1_fu_1023_p1 <= add_ln427_2_fu_1017_p2(9 - 1 downto 0);
    trunc_ln427_2_fu_1035_p1 <= add_ln427_2_fu_1017_p2(11 - 1 downto 0);
    trunc_ln427_fu_933_p1 <= add_ln427_1_fu_927_p2(4 - 1 downto 0);

    wp_parameters_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, zext_ln362_4_fu_1314_p1, ap_block_pp2_stage0, ap_block_pp4_stage0, zext_ln427_6_fu_969_p1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            wp_parameters_address0 <= zext_ln362_4_fu_1314_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            wp_parameters_address0 <= zext_ln427_6_fu_969_p1(7 - 1 downto 0);
        else 
            wp_parameters_address0 <= "XXXXXXX";
        end if; 
    end process;


    wp_parameters_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            wp_parameters_ce0 <= ap_const_logic_1;
        else 
            wp_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_superpoints_address0_assign_proc : process(ap_CS_fsm_state3, wp_superpoints_addr_5_reg_1399, ap_CS_fsm_state4, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp1_stage0, ap_block_pp3_stage0, tmp_6_fu_606_p3, zext_ln405_6_fu_780_p1, zext_ln340_2_fu_1151_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            wp_superpoints_address0 <= zext_ln340_2_fu_1151_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            wp_superpoints_address0 <= zext_ln405_6_fu_780_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            wp_superpoints_address0 <= wp_superpoints_addr_5_reg_1399;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            wp_superpoints_address0 <= tmp_6_fu_606_p3(8 - 1 downto 0);
        else 
            wp_superpoints_address0 <= "XXXXXXXX";
        end if; 
    end process;


    wp_superpoints_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            wp_superpoints_ce0 <= ap_const_logic_1;
        else 
            wp_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln345_fu_1218_p2 <= (icmp_ln351_fu_1184_p2 xor ap_const_lv1_1);
    xor_ln410_fu_877_p2 <= (icmp_ln416_fu_843_p2 xor ap_const_lv1_1);
    zext_ln340_1_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln340_reg_1521),64));
    zext_ln340_2_fu_1151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln340_fu_1145_p2),64));
    zext_ln340_fu_1129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln329_fu_1101_p3),8));
    zext_ln351_fu_1214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_1206_p3),6));
    zext_ln362_1_fu_1282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_1274_p3),12));
    zext_ln362_2_fu_1294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_1286_p3),12));
    zext_ln362_3_fu_1304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln351_fu_1248_p3),12));
    zext_ln362_4_fu_1314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln362_1_fu_1308_p2),64));
    zext_ln362_fu_1264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln351_1_fu_1256_p3),6));
    zext_ln378_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_286),32));
    zext_ln380_1_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_546_p3),8));
    zext_ln380_2_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_640_p3),64));
    zext_ln380_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_reg_1355),8));
    zext_ln381_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln381_fu_660_p2),64));
    zext_ln405_1_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_689_p3),11));
    zext_ln405_2_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_746_p3),8));
    zext_ln405_3_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln394_1_reg_1450),8));
    zext_ln405_4_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln394_reg_1445),12));
    zext_ln405_5_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln394_fu_730_p3),8));
    zext_ln405_6_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln405_fu_774_p2),64));
    zext_ln405_7_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln405_3_fu_814_p2),64));
    zext_ln405_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_patches_read),11));
    zext_ln416_fu_1010_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_1002_p3),63));
    zext_ln427_1_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_865_p3),6));
    zext_ln427_2_fu_1014_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln416_1_reg_1486),63));
    zext_ln427_3_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln416_1_fu_915_p3),6));
    zext_ln427_4_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln416_reg_1481),12));
    zext_ln427_5_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln416_fu_907_p3),7));
    zext_ln427_6_fu_969_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln427_3_fu_963_p2),64));
    zext_ln427_7_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln427_4_fu_1056_p2),64));
    zext_ln427_fu_994_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln410_1_reg_1475),11));
    zext_ln435_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln435_fu_1067_p2),8));
    zext_ln874_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_286),9));
end behav;
