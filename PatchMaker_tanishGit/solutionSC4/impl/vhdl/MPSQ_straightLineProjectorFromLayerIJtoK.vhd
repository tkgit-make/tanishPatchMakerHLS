-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_straightLineProjectorFromLayerIJtoK is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    z_i : IN STD_LOGIC_VECTOR (31 downto 0);
    z_j : IN STD_LOGIC_VECTOR (31 downto 0);
    i : IN STD_LOGIC_VECTOR (2 downto 0);
    j : IN STD_LOGIC_VECTOR (2 downto 0);
    k : IN STD_LOGIC_VECTOR (2 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_straightLineProjectorFromLayerIJtoK is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal radiiDivisionList_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal radiiDivisionList_ce0 : STD_LOGIC;
    signal radiiDivisionList_q0 : STD_LOGIC_VECTOR (34 downto 0);
    signal z_j_read_reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_j_read_reg_264_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal z_i_read_reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_i_read_reg_269_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal z_i_read_reg_269_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal z_i_read_reg_269_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal z_i_read_reg_269_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal z_i_read_reg_269_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln224_fu_93_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln224_reg_276 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln224_reg_276_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln224_reg_276_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln224_reg_276_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln224_reg_276_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln224_reg_276_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln224_fu_99_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln224_reg_281 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln224_1_fu_103_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln224_1_reg_287 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln224_1_reg_287_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln224_1_reg_287_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln224_1_reg_287_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln224_1_reg_287_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln224_1_reg_287_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln224_fu_109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_reg_293 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_reg_293_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_reg_293_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_reg_293_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_reg_293_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_reg_293_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_1_fu_115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_1_reg_299 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_1_reg_299_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_1_reg_299_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_1_reg_299_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_1_reg_299_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_1_reg_299_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal neg6_fu_121_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal neg6_reg_305 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_fu_190_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_reg_315 : STD_LOGIC_VECTOR (32 downto 0);
    signal radiiDivisionList_load_reg_320 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln1_reg_335 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln226_1_fu_179_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_cast_fu_89_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_cast_fu_85_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_cast_fu_81_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal neg_fu_127_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal abs_fu_132_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_146_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_138_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln226_fu_154_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal abs8_fu_164_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln226_fu_158_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln226_fu_169_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln226_fu_173_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln215_fu_184_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_1_fu_187_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_202_p0 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_202_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_218_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_230_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln224_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln224_1_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln224_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln69_fu_242_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_fu_246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_202_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to5 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_202_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component MPSQ_mul_35ns_33s_64_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (34 downto 0);
        din1 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MPSQ_straightLineProjectorFromLayerIJtoK_radiiDivisionList IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;



begin
    radiiDivisionList_U : component MPSQ_straightLineProjectorFromLayerIJtoK_radiiDivisionList
    generic map (
        DataWidth => 35,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => radiiDivisionList_address0,
        ce0 => radiiDivisionList_ce0,
        q0 => radiiDivisionList_q0);

    mul_35ns_33s_64_3_1_U316 : component MPSQ_mul_35ns_33s_64_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 35,
        din1_WIDTH => 33,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_202_p0,
        din1 => ret_reg_315,
        ce => grp_fu_202_ce,
        dout => grp_fu_202_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln224_1_reg_299 <= icmp_ln224_1_fu_115_p2;
                icmp_ln224_1_reg_299_pp0_iter1_reg <= icmp_ln224_1_reg_299;
                icmp_ln224_reg_293 <= icmp_ln224_fu_109_p2;
                icmp_ln224_reg_293_pp0_iter1_reg <= icmp_ln224_reg_293;
                neg6_reg_305 <= neg6_fu_121_p2;
                sub_ln224_1_reg_287 <= sub_ln224_1_fu_103_p2;
                sub_ln224_1_reg_287_pp0_iter1_reg <= sub_ln224_1_reg_287;
                sub_ln224_reg_276 <= sub_ln224_fu_93_p2;
                sub_ln224_reg_276_pp0_iter1_reg <= sub_ln224_reg_276;
                trunc_ln224_reg_281 <= trunc_ln224_fu_99_p1;
                z_i_read_reg_269 <= z_i;
                z_i_read_reg_269_pp0_iter1_reg <= z_i_read_reg_269;
                z_j_read_reg_264 <= z_j;
                z_j_read_reg_264_pp0_iter1_reg <= z_j_read_reg_264;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                icmp_ln224_1_reg_299_pp0_iter2_reg <= icmp_ln224_1_reg_299_pp0_iter1_reg;
                icmp_ln224_1_reg_299_pp0_iter3_reg <= icmp_ln224_1_reg_299_pp0_iter2_reg;
                icmp_ln224_1_reg_299_pp0_iter4_reg <= icmp_ln224_1_reg_299_pp0_iter3_reg;
                icmp_ln224_1_reg_299_pp0_iter5_reg <= icmp_ln224_1_reg_299_pp0_iter4_reg;
                icmp_ln224_reg_293_pp0_iter2_reg <= icmp_ln224_reg_293_pp0_iter1_reg;
                icmp_ln224_reg_293_pp0_iter3_reg <= icmp_ln224_reg_293_pp0_iter2_reg;
                icmp_ln224_reg_293_pp0_iter4_reg <= icmp_ln224_reg_293_pp0_iter3_reg;
                icmp_ln224_reg_293_pp0_iter5_reg <= icmp_ln224_reg_293_pp0_iter4_reg;
                radiiDivisionList_load_reg_320 <= radiiDivisionList_q0;
                ret_reg_315 <= ret_fu_190_p2;
                sub_ln224_1_reg_287_pp0_iter2_reg <= sub_ln224_1_reg_287_pp0_iter1_reg;
                sub_ln224_1_reg_287_pp0_iter3_reg <= sub_ln224_1_reg_287_pp0_iter2_reg;
                sub_ln224_1_reg_287_pp0_iter4_reg <= sub_ln224_1_reg_287_pp0_iter3_reg;
                sub_ln224_1_reg_287_pp0_iter5_reg <= sub_ln224_1_reg_287_pp0_iter4_reg;
                sub_ln224_reg_276_pp0_iter2_reg <= sub_ln224_reg_276_pp0_iter1_reg;
                sub_ln224_reg_276_pp0_iter3_reg <= sub_ln224_reg_276_pp0_iter2_reg;
                sub_ln224_reg_276_pp0_iter4_reg <= sub_ln224_reg_276_pp0_iter3_reg;
                sub_ln224_reg_276_pp0_iter5_reg <= sub_ln224_reg_276_pp0_iter4_reg;
                trunc_ln1_reg_335 <= grp_fu_202_p2(63 downto 32);
                z_i_read_reg_269_pp0_iter2_reg <= z_i_read_reg_269_pp0_iter1_reg;
                z_i_read_reg_269_pp0_iter3_reg <= z_i_read_reg_269_pp0_iter2_reg;
                z_i_read_reg_269_pp0_iter4_reg <= z_i_read_reg_269_pp0_iter3_reg;
                z_i_read_reg_269_pp0_iter5_reg <= z_i_read_reg_269_pp0_iter4_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    abs8_fu_164_p3 <= 
        sub_ln224_1_reg_287 when (icmp_ln224_reg_293(0) = '1') else 
        neg6_reg_305;
    abs_fu_132_p3 <= 
        trunc_ln224_reg_281 when (icmp_ln224_1_reg_299(0) = '1') else 
        neg_fu_127_p2;
    add_ln226_fu_173_p2 <= std_logic_vector(unsigned(sub_ln226_fu_158_p2) + unsigned(sext_ln226_fu_169_p1));
    add_ln69_fu_246_p2 <= std_logic_vector(unsigned(trunc_ln1_reg_335) + unsigned(z_i_read_reg_269_pp0_iter5_reg));
    and_ln224_1_fu_237_p2 <= (tmp_3_fu_230_p3 and icmp_ln224_1_reg_299_pp0_iter5_reg);
    and_ln224_fu_225_p2 <= (tmp_2_fu_218_p3 and icmp_ln224_reg_293_pp0_iter5_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to5)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to5 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        sub_ln69_fu_242_p2 when (or_ln224_fu_250_p2(0) = '1') else 
        add_ln69_fu_246_p2;

    grp_fu_202_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_202_ce <= ap_const_logic_1;
        else 
            grp_fu_202_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_202_p0 <= grp_fu_202_p00(35 - 1 downto 0);
    grp_fu_202_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(radiiDivisionList_load_reg_320),64));
    i_cast_fu_85_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i),4));
    icmp_ln224_1_fu_115_p2 <= "1" when (signed(sub_ln224_fu_93_p2) > signed(ap_const_lv4_0)) else "0";
    icmp_ln224_fu_109_p2 <= "1" when (signed(sub_ln224_1_fu_103_p2) > signed(ap_const_lv4_0)) else "0";
    j_cast_fu_81_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j),4));
    k_cast_fu_89_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k),4));
    neg6_fu_121_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(sub_ln224_1_fu_103_p2));
    neg_fu_127_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(trunc_ln224_reg_281));
    or_ln224_fu_250_p2 <= (and_ln224_fu_225_p2 or and_ln224_1_fu_237_p2);
    radiiDivisionList_address0 <= zext_ln226_1_fu_179_p1(6 - 1 downto 0);

    radiiDivisionList_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            radiiDivisionList_ce0 <= ap_const_logic_1;
        else 
            radiiDivisionList_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_fu_190_p2 <= std_logic_vector(signed(sext_ln215_fu_184_p1) - signed(sext_ln215_1_fu_187_p1));
        sext_ln215_1_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(z_i_read_reg_269_pp0_iter1_reg),33));

        sext_ln215_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(z_j_read_reg_264_pp0_iter1_reg),33));

        sext_ln226_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(abs8_fu_164_p3),6));

    sub_ln224_1_fu_103_p2 <= std_logic_vector(unsigned(j_cast_fu_81_p1) - unsigned(i_cast_fu_85_p1));
    sub_ln224_fu_93_p2 <= std_logic_vector(unsigned(k_cast_fu_89_p1) - unsigned(i_cast_fu_85_p1));
    sub_ln226_fu_158_p2 <= std_logic_vector(unsigned(tmp_fu_138_p3) - unsigned(zext_ln226_fu_154_p1));
    sub_ln69_fu_242_p2 <= std_logic_vector(signed(z_i_read_reg_269_pp0_iter5_reg) - signed(trunc_ln1_reg_335));
    tmp_1_fu_146_p3 <= (abs_fu_132_p3 & ap_const_lv1_0);
    tmp_2_fu_218_p3 <= sub_ln224_reg_276_pp0_iter5_reg(3 downto 3);
    tmp_3_fu_230_p3 <= sub_ln224_1_reg_287_pp0_iter5_reg(3 downto 3);
    tmp_fu_138_p3 <= (abs_fu_132_p3 & ap_const_lv3_0);
    trunc_ln224_fu_99_p1 <= sub_ln224_fu_93_p2(3 - 1 downto 0);
    zext_ln226_1_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln226_fu_173_p2),64));
    zext_ln226_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_146_p3),6));
end behav;
