-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_initializeArrays is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_we0 : OUT STD_LOGIC;
    patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_initializeArrays is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_A00 : STD_LOGIC_VECTOR (11 downto 0) := "101000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_50 : STD_LOGIC_VECTOR (7 downto 0) := "01010000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv12_F00 : STD_LOGIC_VECTOR (11 downto 0) := "111100000000";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln540_1_fu_250_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln540_1_fu_282_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln540_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln544_1_fu_346_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln550_fu_387_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln544_2_fu_399_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln561_1_fu_407_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln561_1_fu_439_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln561_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln565_1_fu_519_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln571_1_fu_593_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln577_fu_656_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln571_2_fu_668_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln565_2_fu_682_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten13_reg_118 : STD_LOGIC_VECTOR (11 downto 0);
    signal a_reg_129 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_reg_140 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_reg_151 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_162 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten59_reg_173 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal a_1_reg_184 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten35_reg_195 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_3_reg_206 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten21_reg_217 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_3_reg_228 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_reg_239 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln555_3_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln582_5_fu_651_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln544_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln540_fu_262_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_294_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln555_fu_290_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln550_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln540_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln540_fu_274_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln540_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln544_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln544_fu_326_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln555_fu_302_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln555_1_fu_354_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln555_1_fu_358_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln544_fu_338_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_23_cast_fu_364_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln555_2_fu_372_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln555_2_fu_376_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln544_1_fu_393_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln565_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln561_fu_419_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_451_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln582_1_fu_459_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln582_fu_447_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln577_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln561_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln561_fu_431_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln561_1_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln565_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln565_fu_499_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln582_fu_463_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln582_2_fu_527_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln582_1_fu_531_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_fu_537_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln565_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln561_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln565_1_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln565_fu_511_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln565_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_1_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln571_fu_567_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln571_fu_545_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln582_3_fu_601_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln582_2_fu_605_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln582_fu_611_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln582_1_fu_623_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_615_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl3_cast_fu_627_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln571_fu_585_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln582_fu_635_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln582_4_fu_641_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln582_3_fu_645_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln571_1_fu_662_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln565_1_fu_676_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    a_1_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                a_1_reg_184 <= ap_const_lv6_0;
            elsif (((icmp_ln561_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                a_1_reg_184 <= select_ln561_1_fu_439_p3;
            end if; 
        end if;
    end process;

    a_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln540_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                a_reg_129 <= select_ln540_1_fu_282_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                a_reg_129 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    b_3_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                b_3_reg_206 <= ap_const_lv3_0;
            elsif (((icmp_ln561_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                b_3_reg_206 <= select_ln565_1_fu_519_p3;
            end if; 
        end if;
    end process;

    b_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln540_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                b_reg_151 <= select_ln544_1_fu_346_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                b_reg_151 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_3_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                c_3_reg_228 <= ap_const_lv3_0;
            elsif (((icmp_ln561_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c_3_reg_228 <= select_ln571_1_fu_593_p3;
            end if; 
        end if;
    end process;

    c_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln540_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_reg_162 <= add_ln550_fu_387_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_reg_162 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    d_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                d_reg_239 <= ap_const_lv3_0;
            elsif (((icmp_ln561_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                d_reg_239 <= add_ln577_fu_656_p2;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln540_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten13_reg_118 <= add_ln540_1_fu_250_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten13_reg_118 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten21_reg_217 <= ap_const_lv6_0;
            elsif (((icmp_ln561_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                indvar_flatten21_reg_217 <= select_ln571_2_fu_668_p3;
            end if; 
        end if;
    end process;

    indvar_flatten35_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten35_reg_195 <= ap_const_lv8_0;
            elsif (((icmp_ln561_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                indvar_flatten35_reg_195 <= select_ln565_2_fu_682_p3;
            end if; 
        end if;
    end process;

    indvar_flatten59_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten59_reg_173 <= ap_const_lv12_0;
            elsif (((icmp_ln561_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                indvar_flatten59_reg_173 <= add_ln561_1_fu_407_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln540_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_140 <= select_ln544_2_fu_399_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_140 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln540_fu_256_p2, ap_CS_fsm_state4, icmp_ln561_fu_413_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln540_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln561_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln540_1_fu_250_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_118) + unsigned(ap_const_lv12_1));
    add_ln540_fu_262_p2 <= std_logic_vector(unsigned(a_reg_129) + unsigned(ap_const_lv6_1));
    add_ln544_1_fu_393_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_140) + unsigned(ap_const_lv8_1));
    add_ln544_fu_326_p2 <= std_logic_vector(unsigned(select_ln540_fu_274_p3) + unsigned(ap_const_lv3_1));
    add_ln550_fu_387_p2 <= std_logic_vector(unsigned(select_ln544_fu_338_p3) + unsigned(ap_const_lv5_1));
    add_ln555_1_fu_358_p2 <= std_logic_vector(unsigned(add_ln555_fu_302_p2) + unsigned(zext_ln555_1_fu_354_p1));
    add_ln555_2_fu_376_p2 <= std_logic_vector(unsigned(tmp_23_cast_fu_364_p3) + unsigned(zext_ln555_2_fu_372_p1));
    add_ln555_fu_302_p2 <= std_logic_vector(unsigned(tmp_fu_294_p3) + unsigned(zext_ln555_fu_290_p1));
    add_ln561_1_fu_407_p2 <= std_logic_vector(unsigned(indvar_flatten59_reg_173) + unsigned(ap_const_lv12_1));
    add_ln561_fu_419_p2 <= std_logic_vector(unsigned(a_1_reg_184) + unsigned(ap_const_lv6_1));
    add_ln565_1_fu_676_p2 <= std_logic_vector(unsigned(indvar_flatten35_reg_195) + unsigned(ap_const_lv8_1));
    add_ln565_fu_499_p2 <= std_logic_vector(unsigned(select_ln561_fu_431_p3) + unsigned(ap_const_lv3_1));
    add_ln571_1_fu_662_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_217) + unsigned(ap_const_lv6_1));
    add_ln571_fu_567_p2 <= std_logic_vector(unsigned(select_ln565_fu_511_p3) + unsigned(ap_const_lv3_1));
    add_ln577_fu_656_p2 <= std_logic_vector(unsigned(select_ln571_fu_585_p3) + unsigned(ap_const_lv3_1));
    add_ln582_1_fu_531_p2 <= std_logic_vector(unsigned(add_ln582_fu_463_p2) + unsigned(zext_ln582_2_fu_527_p1));
    add_ln582_2_fu_605_p2 <= std_logic_vector(unsigned(zext_ln571_fu_545_p1) + unsigned(zext_ln582_3_fu_601_p1));
    add_ln582_3_fu_645_p2 <= std_logic_vector(unsigned(sub_ln582_fu_635_p2) + unsigned(zext_ln582_4_fu_641_p1));
    add_ln582_fu_463_p2 <= std_logic_vector(unsigned(zext_ln582_1_fu_459_p1) + unsigned(zext_ln582_fu_447_p1));
    and_ln540_fu_320_p2 <= (xor_ln540_fu_308_p2 and icmp_ln550_fu_314_p2);
    and_ln561_1_fu_493_p2 <= (xor_ln561_fu_469_p2 and icmp_ln571_fu_487_p2);
    and_ln561_fu_481_p2 <= (xor_ln561_fu_469_p2 and icmp_ln577_fu_475_p2);
    and_ln565_fu_561_p2 <= (or_ln565_1_fu_555_p2 and and_ln561_fu_481_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln540_fu_256_p2 <= "1" when (indvar_flatten13_reg_118 = ap_const_lv12_A00) else "0";
    icmp_ln544_fu_268_p2 <= "1" when (indvar_flatten_reg_140 = ap_const_lv8_50) else "0";
    icmp_ln550_fu_314_p2 <= "1" when (c_reg_162 = ap_const_lv5_10) else "0";
    icmp_ln561_fu_413_p2 <= "1" when (indvar_flatten59_reg_173 = ap_const_lv12_F00) else "0";
    icmp_ln565_fu_425_p2 <= "1" when (indvar_flatten35_reg_195 = ap_const_lv8_78) else "0";
    icmp_ln571_fu_487_p2 <= "1" when (indvar_flatten21_reg_217 = ap_const_lv6_18) else "0";
    icmp_ln577_fu_475_p2 <= "1" when (d_reg_239 = ap_const_lv3_6) else "0";
    or_ln544_fu_332_p2 <= (icmp_ln544_fu_268_p2 or and_ln540_fu_320_p2);
    or_ln565_1_fu_555_p2 <= (xor_ln565_fu_549_p2 or icmp_ln565_fu_425_p2);
    or_ln565_fu_505_p2 <= (icmp_ln565_fu_425_p2 or and_ln561_1_fu_493_p2);
    or_ln571_1_fu_579_p2 <= (or_ln571_fu_573_p2 or icmp_ln565_fu_425_p2);
    or_ln571_fu_573_p2 <= (and_ln565_fu_561_p2 or and_ln561_1_fu_493_p2);
    p_shl2_cast_fu_615_p3 <= (trunc_ln582_fu_611_p1 & ap_const_lv3_0);
    p_shl3_cast_fu_627_p3 <= (trunc_ln582_1_fu_623_p1 & ap_const_lv1_0);
    patches_parameters_address0 <= zext_ln582_5_fu_651_p1(12 - 1 downto 0);

    patches_parameters_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            patches_parameters_ce0 <= ap_const_logic_1;
        else 
            patches_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_parameters_d0 <= ap_const_lv32_0;

    patches_parameters_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln561_fu_413_p2)
    begin
        if (((icmp_ln561_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            patches_parameters_we0 <= ap_const_logic_1;
        else 
            patches_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_superpoints_address0 <= zext_ln555_3_fu_382_p1(12 - 1 downto 0);

    patches_superpoints_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patches_superpoints_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_superpoints_d0 <= ap_const_lv32_0;

    patches_superpoints_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln540_fu_256_p2)
    begin
        if (((icmp_ln540_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            patches_superpoints_we0 <= ap_const_logic_1;
        else 
            patches_superpoints_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln540_1_fu_282_p3 <= 
        add_ln540_fu_262_p2 when (icmp_ln544_fu_268_p2(0) = '1') else 
        a_reg_129;
    select_ln540_fu_274_p3 <= 
        ap_const_lv3_0 when (icmp_ln544_fu_268_p2(0) = '1') else 
        b_reg_151;
    select_ln544_1_fu_346_p3 <= 
        add_ln544_fu_326_p2 when (and_ln540_fu_320_p2(0) = '1') else 
        select_ln540_fu_274_p3;
    select_ln544_2_fu_399_p3 <= 
        ap_const_lv8_1 when (icmp_ln544_fu_268_p2(0) = '1') else 
        add_ln544_1_fu_393_p2;
    select_ln544_fu_338_p3 <= 
        ap_const_lv5_0 when (or_ln544_fu_332_p2(0) = '1') else 
        c_reg_162;
    select_ln561_1_fu_439_p3 <= 
        add_ln561_fu_419_p2 when (icmp_ln565_fu_425_p2(0) = '1') else 
        a_1_reg_184;
    select_ln561_fu_431_p3 <= 
        ap_const_lv3_0 when (icmp_ln565_fu_425_p2(0) = '1') else 
        b_3_reg_206;
    select_ln565_1_fu_519_p3 <= 
        add_ln565_fu_499_p2 when (and_ln561_1_fu_493_p2(0) = '1') else 
        select_ln561_fu_431_p3;
    select_ln565_2_fu_682_p3 <= 
        ap_const_lv8_1 when (icmp_ln565_fu_425_p2(0) = '1') else 
        add_ln565_1_fu_676_p2;
    select_ln565_fu_511_p3 <= 
        ap_const_lv3_0 when (or_ln565_fu_505_p2(0) = '1') else 
        c_3_reg_228;
    select_ln571_1_fu_593_p3 <= 
        add_ln571_fu_567_p2 when (and_ln565_fu_561_p2(0) = '1') else 
        select_ln565_fu_511_p3;
    select_ln571_2_fu_668_p3 <= 
        ap_const_lv6_1 when (or_ln565_fu_505_p2(0) = '1') else 
        add_ln571_1_fu_662_p2;
    select_ln571_fu_585_p3 <= 
        ap_const_lv3_0 when (or_ln571_1_fu_579_p2(0) = '1') else 
        d_reg_239;
    sub_ln582_fu_635_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_615_p3) - unsigned(p_shl3_cast_fu_627_p3));
    tmp_23_cast_fu_364_p3 <= (add_ln555_1_fu_358_p2 & ap_const_lv4_0);
    tmp_3_fu_537_p3 <= (add_ln582_1_fu_531_p2 & ap_const_lv2_0);
    tmp_fu_294_p3 <= (select_ln540_1_fu_282_p3 & ap_const_lv2_0);
    tmp_s_fu_451_p3 <= (select_ln561_1_fu_439_p3 & ap_const_lv2_0);
    trunc_ln582_1_fu_623_p1 <= add_ln582_2_fu_605_p2(11 - 1 downto 0);
    trunc_ln582_fu_611_p1 <= add_ln582_2_fu_605_p2(9 - 1 downto 0);
    xor_ln540_fu_308_p2 <= (icmp_ln544_fu_268_p2 xor ap_const_lv1_1);
    xor_ln561_fu_469_p2 <= (icmp_ln565_fu_425_p2 xor ap_const_lv1_1);
    xor_ln565_fu_549_p2 <= (icmp_ln571_fu_487_p2 xor ap_const_lv1_1);
    zext_ln555_1_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln544_1_fu_346_p3),8));
    zext_ln555_2_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln544_fu_338_p3),12));
    zext_ln555_3_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln555_2_fu_376_p2),64));
    zext_ln555_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln540_1_fu_282_p3),8));
    zext_ln571_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_537_p3),63));
    zext_ln582_1_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_451_p3),9));
    zext_ln582_2_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln565_1_fu_519_p3),9));
    zext_ln582_3_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln571_1_fu_593_p3),63));
    zext_ln582_4_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln571_fu_585_p3),12));
    zext_ln582_5_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln582_3_fu_645_p2),64));
    zext_ln582_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln561_1_fu_439_p3),9));
end behav;
