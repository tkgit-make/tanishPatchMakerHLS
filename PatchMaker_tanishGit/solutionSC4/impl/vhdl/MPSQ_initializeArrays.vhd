-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_initializeArrays is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_we0 : OUT STD_LOGIC;
    patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_initializeArrays is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_F0 : STD_LOGIC_VECTOR (7 downto 0) := "11110000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_50 : STD_LOGIC_VECTOR (7 downto 0) := "01010000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_48 : STD_LOGIC_VECTOR (6 downto 0) := "1001000";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten13_reg_118 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_reg_129 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_140 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_reg_151 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_162 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten59_reg_173 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten35_reg_184 : STD_LOGIC_VECTOR (5 downto 0);
    signal a_1_reg_195 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_3_reg_206 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten21_reg_217 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_3_reg_228 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_reg_239 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln637_1_fu_250_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln637_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln637_reg_660 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln637_1_fu_282_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln637_1_reg_664 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln641_fu_338_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln641_reg_669 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln641_1_fu_346_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln641_1_reg_674 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln652_1_fu_358_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln652_1_reg_679 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln647_fu_364_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln641_2_fu_376_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln658_1_fu_405_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln658_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln658_reg_699 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln658_reg_699_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln662_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln662_reg_703 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln662_2_fu_429_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln658_1_fu_450_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln658_1_reg_718 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal select_ln662_1_fu_531_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln662_1_reg_723 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln679_fu_543_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln679_reg_728 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln668_fu_583_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln668_reg_733 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln668_1_fu_591_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln668_1_reg_738 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln674_fu_599_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln668_2_fu_611_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_flush_enable : STD_LOGIC;
    signal ap_condition_pp1_exit_iter1_state6 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_a_phi_fu_133_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_b_phi_fu_155_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_a_1_phi_fu_199_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_b_3_phi_fu_210_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_c_3_phi_fu_232_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln652_3_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln679_5_fu_650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln641_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln637_fu_262_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_294_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln652_fu_290_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln647_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln637_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln637_fu_274_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln637_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln641_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln641_fu_326_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln652_fu_302_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln652_1_fu_354_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln641_1_fu_370_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_cast_fu_384_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln652_2_fu_391_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln652_2_fu_394_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln662_1_fu_423_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln658_fu_437_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_461_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln679_1_fu_469_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln679_fu_457_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln679_fu_473_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln674_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln658_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln668_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln658_fu_443_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln658_1_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln662_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln662_fu_512_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln662_fu_479_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln679_2_fu_539_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln662_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln658_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln662_1_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln662_fu_523_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln662_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln668_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln668_1_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln668_fu_566_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln668_1_fu_605_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln679_fu_619_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln679_3_fu_624_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln679_1_fu_627_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_30_cast_fu_633_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln679_4_fu_641_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln679_2_fu_644_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp1_flush_enable)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter1_state6) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter1_state6))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_1_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                a_1_reg_195 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln658_reg_699_pp1_iter1_reg = ap_const_lv1_0))) then 
                a_1_reg_195 <= select_ln658_1_reg_718;
            end if; 
        end if;
    end process;

    a_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln637_reg_660 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                a_reg_129 <= select_ln637_1_reg_664;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                a_reg_129 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    b_3_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                b_3_reg_206 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln658_reg_699_pp1_iter1_reg = ap_const_lv1_0))) then 
                b_3_reg_206 <= select_ln662_1_reg_723;
            end if; 
        end if;
    end process;

    b_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln637_reg_660 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                b_reg_151 <= select_ln641_1_reg_674;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                b_reg_151 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_3_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                c_3_reg_228 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln658_reg_699_pp1_iter1_reg = ap_const_lv1_0))) then 
                c_3_reg_228 <= select_ln668_1_reg_738;
            end if; 
        end if;
    end process;

    c_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln637_fu_256_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c_reg_162 <= add_ln647_fu_364_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_reg_162 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    d_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                d_reg_239 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln658_reg_699 = ap_const_lv1_0))) then 
                d_reg_239 <= add_ln674_fu_599_p2;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln637_fu_256_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten13_reg_118 <= add_ln637_1_fu_250_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten13_reg_118 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten21_reg_217 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln658_reg_699 = ap_const_lv1_0))) then 
                indvar_flatten21_reg_217 <= select_ln668_2_fu_611_p3;
            end if; 
        end if;
    end process;

    indvar_flatten35_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten35_reg_184 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln658_fu_411_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten35_reg_184 <= select_ln662_2_fu_429_p3;
            end if; 
        end if;
    end process;

    indvar_flatten59_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten59_reg_173 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln658_fu_411_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten59_reg_173 <= add_ln658_1_fu_405_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln637_fu_256_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_140 <= select_ln641_2_fu_376_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_140 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln637_fu_256_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln652_1_reg_679 <= add_ln652_1_fu_358_p2;
                select_ln641_reg_669 <= select_ln641_fu_338_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln658_reg_699 = ap_const_lv1_0))) then
                add_ln679_reg_728 <= add_ln679_fu_543_p2;
                select_ln668_reg_733 <= select_ln668_fu_583_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln637_reg_660 <= icmp_ln637_fu_256_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln658_reg_699 <= icmp_ln658_fu_411_p2;
                icmp_ln658_reg_699_pp1_iter1_reg <= icmp_ln658_reg_699;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln658_fu_411_p2 = ap_const_lv1_0))) then
                icmp_ln662_reg_703 <= icmp_ln662_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln637_fu_256_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln637_1_reg_664 <= select_ln637_1_fu_282_p3;
                select_ln641_1_reg_674 <= select_ln641_1_fu_346_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln658_reg_699 = ap_const_lv1_0))) then
                select_ln658_1_reg_718 <= select_ln658_1_fu_450_p3;
                select_ln662_1_reg_723 <= select_ln662_1_fu_531_p3;
                select_ln668_1_reg_738 <= select_ln668_1_fu_591_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln637_fu_256_p2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln637_fu_256_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln637_fu_256_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln637_1_fu_250_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_118) + unsigned(ap_const_lv8_1));
    add_ln637_fu_262_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_phi_fu_133_p4) + unsigned(ap_const_lv2_1));
    add_ln641_1_fu_370_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_140) + unsigned(ap_const_lv8_1));
    add_ln641_fu_326_p2 <= std_logic_vector(unsigned(select_ln637_fu_274_p3) + unsigned(ap_const_lv3_1));
    add_ln647_fu_364_p2 <= std_logic_vector(unsigned(select_ln641_fu_338_p3) + unsigned(ap_const_lv5_1));
    add_ln652_1_fu_358_p2 <= std_logic_vector(unsigned(add_ln652_fu_302_p2) + unsigned(zext_ln652_1_fu_354_p1));
    add_ln652_2_fu_394_p2 <= std_logic_vector(unsigned(tmp_25_cast_fu_384_p3) + unsigned(zext_ln652_2_fu_391_p1));
    add_ln652_fu_302_p2 <= std_logic_vector(unsigned(tmp_fu_294_p3) + unsigned(zext_ln652_fu_290_p1));
    add_ln658_1_fu_405_p2 <= std_logic_vector(unsigned(indvar_flatten59_reg_173) + unsigned(ap_const_lv7_1));
    add_ln658_fu_437_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_1_phi_fu_199_p4) + unsigned(ap_const_lv2_1));
    add_ln662_1_fu_423_p2 <= std_logic_vector(unsigned(indvar_flatten35_reg_184) + unsigned(ap_const_lv6_1));
    add_ln662_fu_512_p2 <= std_logic_vector(unsigned(select_ln658_fu_443_p3) + unsigned(ap_const_lv2_1));
    add_ln668_1_fu_605_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_217) + unsigned(ap_const_lv5_1));
    add_ln668_fu_566_p2 <= std_logic_vector(unsigned(select_ln662_fu_523_p3) + unsigned(ap_const_lv3_1));
    add_ln674_fu_599_p2 <= std_logic_vector(unsigned(select_ln668_fu_583_p3) + unsigned(ap_const_lv2_1));
    add_ln679_1_fu_627_p2 <= std_logic_vector(unsigned(shl_ln679_fu_619_p2) + unsigned(zext_ln679_3_fu_624_p1));
    add_ln679_2_fu_644_p2 <= std_logic_vector(unsigned(tmp_30_cast_fu_633_p3) + unsigned(zext_ln679_4_fu_641_p1));
    add_ln679_fu_543_p2 <= std_logic_vector(signed(sext_ln662_fu_479_p1) + signed(zext_ln679_2_fu_539_p1));
    and_ln637_fu_320_p2 <= (xor_ln637_fu_308_p2 and icmp_ln647_fu_314_p2);
    and_ln658_1_fu_506_p2 <= (xor_ln658_fu_483_p2 and icmp_ln668_fu_500_p2);
    and_ln658_fu_494_p2 <= (xor_ln658_fu_483_p2 and icmp_ln674_fu_488_p2);
    and_ln662_fu_560_p2 <= (or_ln662_1_fu_555_p2 and and_ln658_fu_494_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln637_fu_256_p2)
    begin
        if ((icmp_ln637_fu_256_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter1_state6_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_condition_pp1_exit_iter1_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter1_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_flush_enable_assign_proc : process(ap_CS_fsm_pp1_stage0, icmp_ln658_fu_411_p2, ap_block_pp1_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln658_fu_411_p2 = ap_const_lv1_1))) then 
            ap_condition_pp1_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp1_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_a_1_phi_fu_199_p4_assign_proc : process(a_1_reg_195, icmp_ln658_reg_699_pp1_iter1_reg, select_ln658_1_reg_718, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln658_reg_699_pp1_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_a_1_phi_fu_199_p4 <= select_ln658_1_reg_718;
        else 
            ap_phi_mux_a_1_phi_fu_199_p4 <= a_1_reg_195;
        end if; 
    end process;


    ap_phi_mux_a_phi_fu_133_p4_assign_proc : process(a_reg_129, ap_CS_fsm_pp0_stage0, icmp_ln637_reg_660, select_ln637_1_reg_664, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln637_reg_660 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_a_phi_fu_133_p4 <= select_ln637_1_reg_664;
        else 
            ap_phi_mux_a_phi_fu_133_p4 <= a_reg_129;
        end if; 
    end process;


    ap_phi_mux_b_3_phi_fu_210_p4_assign_proc : process(b_3_reg_206, icmp_ln658_reg_699_pp1_iter1_reg, select_ln662_1_reg_723, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln658_reg_699_pp1_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_b_3_phi_fu_210_p4 <= select_ln662_1_reg_723;
        else 
            ap_phi_mux_b_3_phi_fu_210_p4 <= b_3_reg_206;
        end if; 
    end process;


    ap_phi_mux_b_phi_fu_155_p4_assign_proc : process(b_reg_151, ap_CS_fsm_pp0_stage0, icmp_ln637_reg_660, select_ln641_1_reg_674, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln637_reg_660 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_b_phi_fu_155_p4 <= select_ln641_1_reg_674;
        else 
            ap_phi_mux_b_phi_fu_155_p4 <= b_reg_151;
        end if; 
    end process;


    ap_phi_mux_c_3_phi_fu_232_p4_assign_proc : process(c_3_reg_228, icmp_ln658_reg_699_pp1_iter1_reg, select_ln668_1_reg_738, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln658_reg_699_pp1_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_c_3_phi_fu_232_p4 <= select_ln668_1_reg_738;
        else 
            ap_phi_mux_c_3_phi_fu_232_p4 <= c_3_reg_228;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln637_fu_256_p2 <= "1" when (indvar_flatten13_reg_118 = ap_const_lv8_F0) else "0";
    icmp_ln641_fu_268_p2 <= "1" when (indvar_flatten_reg_140 = ap_const_lv8_50) else "0";
    icmp_ln647_fu_314_p2 <= "1" when (c_reg_162 = ap_const_lv5_10) else "0";
    icmp_ln658_fu_411_p2 <= "1" when (indvar_flatten59_reg_173 = ap_const_lv7_48) else "0";
    icmp_ln662_fu_417_p2 <= "1" when (indvar_flatten35_reg_184 = ap_const_lv6_18) else "0";
    icmp_ln668_fu_500_p2 <= "1" when (indvar_flatten21_reg_217 = ap_const_lv5_8) else "0";
    icmp_ln674_fu_488_p2 <= "1" when (d_reg_239 = ap_const_lv2_2) else "0";
    or_ln641_fu_332_p2 <= (icmp_ln641_fu_268_p2 or and_ln637_fu_320_p2);
    or_ln662_1_fu_555_p2 <= (xor_ln662_fu_549_p2 or icmp_ln662_reg_703);
    or_ln662_fu_518_p2 <= (icmp_ln662_reg_703 or and_ln658_1_fu_506_p2);
    or_ln668_1_fu_578_p2 <= (or_ln668_fu_572_p2 or icmp_ln662_reg_703);
    or_ln668_fu_572_p2 <= (and_ln662_fu_560_p2 or and_ln658_1_fu_506_p2);
    patches_parameters_address0 <= zext_ln679_5_fu_650_p1(7 - 1 downto 0);

    patches_parameters_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            patches_parameters_ce0 <= ap_const_logic_1;
        else 
            patches_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_parameters_d0 <= ap_const_lv32_0;

    patches_parameters_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln658_reg_699_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln658_reg_699_pp1_iter1_reg = ap_const_lv1_0))) then 
            patches_parameters_we0 <= ap_const_logic_1;
        else 
            patches_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_superpoints_address0 <= zext_ln652_3_fu_400_p1(8 - 1 downto 0);

    patches_superpoints_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            patches_superpoints_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_superpoints_d0 <= ap_const_lv64_0;

    patches_superpoints_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln637_reg_660, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln637_reg_660 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            patches_superpoints_we0 <= ap_const_logic_1;
        else 
            patches_superpoints_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln637_1_fu_282_p3 <= 
        add_ln637_fu_262_p2 when (icmp_ln641_fu_268_p2(0) = '1') else 
        ap_phi_mux_a_phi_fu_133_p4;
    select_ln637_fu_274_p3 <= 
        ap_const_lv3_0 when (icmp_ln641_fu_268_p2(0) = '1') else 
        ap_phi_mux_b_phi_fu_155_p4;
    select_ln641_1_fu_346_p3 <= 
        add_ln641_fu_326_p2 when (and_ln637_fu_320_p2(0) = '1') else 
        select_ln637_fu_274_p3;
    select_ln641_2_fu_376_p3 <= 
        ap_const_lv8_1 when (icmp_ln641_fu_268_p2(0) = '1') else 
        add_ln641_1_fu_370_p2;
    select_ln641_fu_338_p3 <= 
        ap_const_lv5_0 when (or_ln641_fu_332_p2(0) = '1') else 
        c_reg_162;
    select_ln658_1_fu_450_p3 <= 
        add_ln658_fu_437_p2 when (icmp_ln662_reg_703(0) = '1') else 
        ap_phi_mux_a_1_phi_fu_199_p4;
    select_ln658_fu_443_p3 <= 
        ap_const_lv2_0 when (icmp_ln662_reg_703(0) = '1') else 
        ap_phi_mux_b_3_phi_fu_210_p4;
    select_ln662_1_fu_531_p3 <= 
        add_ln662_fu_512_p2 when (and_ln658_1_fu_506_p2(0) = '1') else 
        select_ln658_fu_443_p3;
    select_ln662_2_fu_429_p3 <= 
        ap_const_lv6_1 when (icmp_ln662_fu_417_p2(0) = '1') else 
        add_ln662_1_fu_423_p2;
    select_ln662_fu_523_p3 <= 
        ap_const_lv3_0 when (or_ln662_fu_518_p2(0) = '1') else 
        ap_phi_mux_c_3_phi_fu_232_p4;
    select_ln668_1_fu_591_p3 <= 
        add_ln668_fu_566_p2 when (and_ln662_fu_560_p2(0) = '1') else 
        select_ln662_fu_523_p3;
    select_ln668_2_fu_611_p3 <= 
        ap_const_lv5_1 when (or_ln662_fu_518_p2(0) = '1') else 
        add_ln668_1_fu_605_p2;
    select_ln668_fu_583_p3 <= 
        ap_const_lv2_0 when (or_ln668_1_fu_578_p2(0) = '1') else 
        d_reg_239;
        sext_ln662_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln679_fu_473_p2),6));

    shl_ln679_fu_619_p2 <= std_logic_vector(shift_left(unsigned(add_ln679_reg_728),to_integer(unsigned('0' & ap_const_lv6_2(6-1 downto 0)))));
    sub_ln679_fu_473_p2 <= std_logic_vector(unsigned(zext_ln679_1_fu_469_p1) - unsigned(zext_ln679_fu_457_p1));
    tmp_25_cast_fu_384_p3 <= (add_ln652_1_reg_679 & ap_const_lv4_0);
    tmp_30_cast_fu_633_p3 <= (add_ln679_1_fu_627_p2 & ap_const_lv1_0);
    tmp_fu_294_p3 <= (select_ln637_1_fu_282_p3 & ap_const_lv2_0);
    tmp_s_fu_461_p3 <= (select_ln658_1_fu_450_p3 & ap_const_lv2_0);
    xor_ln637_fu_308_p2 <= (icmp_ln641_fu_268_p2 xor ap_const_lv1_1);
    xor_ln658_fu_483_p2 <= (icmp_ln662_reg_703 xor ap_const_lv1_1);
    xor_ln662_fu_549_p2 <= (icmp_ln668_fu_500_p2 xor ap_const_lv1_1);
    zext_ln652_1_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln641_1_fu_346_p3),4));
    zext_ln652_2_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln641_reg_669),8));
    zext_ln652_3_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln652_2_fu_394_p2),64));
    zext_ln652_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln637_1_fu_282_p3),4));
    zext_ln679_1_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_461_p3),5));
    zext_ln679_2_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln662_1_fu_531_p3),6));
    zext_ln679_3_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln668_1_reg_738),6));
    zext_ln679_4_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln668_reg_733),7));
    zext_ln679_5_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln679_2_fu_644_p2),64));
    zext_ln679_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln658_1_fu_450_p3),5));
end behav;
