-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_add_patch9 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n_patches : OUT STD_LOGIC_VECTOR (7 downto 0);
    n_patches_ap_vld : OUT STD_LOGIC;
    n_patches_read : IN STD_LOGIC_VECTOR (7 downto 0);
    wp_superpoints_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    wp_superpoints_ce0 : OUT STD_LOGIC;
    wp_superpoints_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_superpoints_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    wp_superpoints_ce1 : OUT STD_LOGIC;
    wp_superpoints_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    wp_parameters_ce0 : OUT STD_LOGIC;
    wp_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_we0 : OUT STD_LOGIC;
    patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    patches_parameters_ce1 : OUT STD_LOGIC;
    patches_parameters_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_add_patch9 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv56_0 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_1F : STD_LOGIC_VECTOR (7 downto 0) := "00011111";
    constant ap_const_lv12_F : STD_LOGIC_VECTOR (11 downto 0) := "000000001111";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten7_reg_231 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_5_reg_242 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_7_reg_253 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_264 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_reg_275 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_reg_286 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_315 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln408_reg_745 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln874_reg_794 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encodeCoordinates_fu_305_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_319 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_state9_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln424_reg_820 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln424_reg_820_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_state16_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state18_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state19_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln380_reg_862 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln380_reg_862_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln373_fu_324_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln373_reg_731 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln376_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln376_reg_736 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln410_fu_360_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln410_reg_740 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln408_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln408_fu_372_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln408_reg_749 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_382_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_754 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln410_1_fu_405_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln410_1_reg_764 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_44_fu_410_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_44_reg_769 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln69_fu_422_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln69_reg_779 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln874_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln69_2_fu_455_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln69_2_reg_798 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln421_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln421_reg_806 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln435_fu_484_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln435_reg_810 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln424_1_fu_489_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln424_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln424_reg_820_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln424_fu_513_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln424_reg_824 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln424_reg_824_pp1_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln424_1_fu_521_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln424_1_reg_830 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln424_1_reg_830_pp1_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln430_fu_529_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln435_3_fu_604_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln435_3_reg_852 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln380_1_fu_624_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln380_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln380_reg_862_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln380_fu_648_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln380_reg_866 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln380_1_fu_656_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln380_1_reg_871 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln386_fu_664_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln391_fu_684_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln391_reg_882 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln391_reg_882_pp2_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state16 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal grp_add_patch_patches_parameters14_fu_297_ap_start : STD_LOGIC;
    signal grp_add_patch_patches_parameters14_fu_297_ap_done : STD_LOGIC;
    signal grp_add_patch_patches_parameters14_fu_297_ap_idle : STD_LOGIC;
    signal grp_add_patch_patches_parameters14_fu_297_ap_ready : STD_LOGIC;
    signal grp_add_patch_patches_parameters14_fu_297_wp_parameters_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_add_patch_patches_parameters14_fu_297_wp_parameters_ce0 : STD_LOGIC;
    signal grp_add_patch_patches_parameters14_fu_297_patches_parameters_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_add_patch_patches_parameters14_fu_297_patches_parameters_ce0 : STD_LOGIC;
    signal grp_add_patch_patches_parameters14_fu_297_patches_parameters_we0 : STD_LOGIC;
    signal grp_add_patch_patches_parameters14_fu_297_patches_parameters_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_add_patch_patches_parameters14_fu_297_patches_parameters_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_add_patch_patches_parameters14_fu_297_patches_parameters_ce1 : STD_LOGIC;
    signal grp_encodeCoordinates_fu_305_ap_ready : STD_LOGIC;
    signal grp_encodeCoordinates_fu_305_phi : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encodeCoordinates_fu_305_z : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_220 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln874_4_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_a_5_phi_fu_246_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_a_phi_fu_279_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal grp_add_patch_patches_parameters14_fu_297_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_9_fu_396_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln410_2_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_431_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln411_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln435_4_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln435_5_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln435_6_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln391_2_fu_698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln391_3_fu_715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln391_1_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln444_fu_619_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln376_fu_328_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_fu_338_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_348_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln410_1_fu_356_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln410_fu_344_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln874_fu_390_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln874_fu_378_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln874_1_fu_426_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln411_fu_440_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_45_fu_464_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln435_fu_479_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln430_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln424_fu_501_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_fu_535_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln435_1_fu_542_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln435_3_fu_546_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln435_2_fu_549_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_46_fu_555_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln435_1_fu_568_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln435_fu_574_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln435_fu_585_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln435_1_fu_588_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_103_cast_fu_593_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln435_2_fu_601_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln444_fu_614_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln386_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln380_fu_636_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_670_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_92_cast_fu_677_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln391_fu_681_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_fu_690_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln391_fu_703_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln391_fu_709_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_predicate_op122_call_state14 : BOOLEAN;
    signal ap_block_state14_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component MPSQ_add_patch_patches_parameters14 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        wp_parameters_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        wp_parameters_ce0 : OUT STD_LOGIC;
        wp_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        patches_parameters_ce0 : OUT STD_LOGIC;
        patches_parameters_we0 : OUT STD_LOGIC;
        patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        patches_parameters_ce1 : OUT STD_LOGIC;
        patches_parameters_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_encodeCoordinates IS
    port (
        ap_ready : OUT STD_LOGIC;
        phi : IN STD_LOGIC_VECTOR (31 downto 0);
        z : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_add_patch_patches_parameters14_fu_297 : component MPSQ_add_patch_patches_parameters14
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_add_patch_patches_parameters14_fu_297_ap_start,
        ap_done => grp_add_patch_patches_parameters14_fu_297_ap_done,
        ap_idle => grp_add_patch_patches_parameters14_fu_297_ap_idle,
        ap_ready => grp_add_patch_patches_parameters14_fu_297_ap_ready,
        wp_parameters_address0 => grp_add_patch_patches_parameters14_fu_297_wp_parameters_address0,
        wp_parameters_ce0 => grp_add_patch_patches_parameters14_fu_297_wp_parameters_ce0,
        wp_parameters_q0 => wp_parameters_q0,
        patches_parameters_address0 => grp_add_patch_patches_parameters14_fu_297_patches_parameters_address0,
        patches_parameters_ce0 => grp_add_patch_patches_parameters14_fu_297_patches_parameters_ce0,
        patches_parameters_we0 => grp_add_patch_patches_parameters14_fu_297_patches_parameters_we0,
        patches_parameters_d0 => grp_add_patch_patches_parameters14_fu_297_patches_parameters_d0,
        patches_parameters_address1 => grp_add_patch_patches_parameters14_fu_297_patches_parameters_address1,
        patches_parameters_ce1 => grp_add_patch_patches_parameters14_fu_297_patches_parameters_ce1,
        patches_parameters_q1 => patches_parameters_q1);

    grp_encodeCoordinates_fu_305 : component MPSQ_encodeCoordinates
    port map (
        ap_ready => grp_encodeCoordinates_fu_305_ap_ready,
        phi => grp_encodeCoordinates_fu_305_phi,
        z => grp_encodeCoordinates_fu_305_z,
        ap_return => grp_encodeCoordinates_fu_305_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln421_fu_473_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln421_fu_473_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state16) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln376_fu_332_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state16)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state16);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln376_fu_332_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_add_patch_patches_parameters14_fu_297_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_add_patch_patches_parameters14_fu_297_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    grp_add_patch_patches_parameters14_fu_297_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_add_patch_patches_parameters14_fu_297_ap_ready = ap_const_logic_1)) then 
                    grp_add_patch_patches_parameters14_fu_297_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_5_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln424_reg_820 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                a_5_reg_242 <= select_ln424_1_reg_830;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln421_fu_473_p2 = ap_const_lv1_1))) then 
                a_5_reg_242 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    a_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln376_fu_332_p2 = ap_const_lv1_1))) then 
                a_reg_275 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln380_reg_862 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                a_reg_275 <= select_ln380_1_reg_871;
            end if; 
        end if;
    end process;

    b_7_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln424_fu_495_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                b_7_reg_253 <= add_ln430_fu_529_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln421_fu_473_p2 = ap_const_lv1_1))) then 
                b_7_reg_253 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    b_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln376_fu_332_p2 = ap_const_lv1_1))) then 
                b_reg_286 <= ap_const_lv5_0;
            elsif (((icmp_ln380_fu_630_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                b_reg_286 <= add_ln386_fu_664_p2;
            end if; 
        end if;
    end process;

    i_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln874_reg_794 = ap_const_lv1_1) and (icmp_ln408_reg_745 = ap_const_lv1_1) and (icmp_ln874_4_fu_459_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_reg_220 <= add_ln408_reg_749;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln376_fu_332_p2 = ap_const_lv1_0))) then 
                i_reg_220 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln424_fu_495_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten7_reg_231 <= add_ln424_1_fu_489_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln421_fu_473_p2 = ap_const_lv1_1))) then 
                indvar_flatten7_reg_231 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln376_fu_332_p2 = ap_const_lv1_1))) then 
                indvar_flatten_reg_264 <= ap_const_lv7_0;
            elsif (((icmp_ln380_fu_630_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                indvar_flatten_reg_264 <= add_ln380_1_fu_624_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln380_reg_862 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                add_ln391_reg_882 <= add_ln391_fu_684_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                add_ln391_reg_882_pp2_iter2_reg <= add_ln391_reg_882;
                icmp_ln380_reg_862_pp2_iter2_reg <= icmp_ln380_reg_862_pp2_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln408_reg_749 <= add_ln408_fu_372_p2;
                icmp_ln408_reg_745 <= icmp_ln408_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln408_fu_366_p2 = ap_const_lv1_1))) then
                add_ln410_1_reg_764 <= add_ln410_1_fu_405_p2;
                    tmp_8_reg_754(7 downto 5) <= tmp_8_fu_382_p3(7 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln376_fu_332_p2 = ap_const_lv1_0))) then
                add_ln410_reg_740 <= add_ln410_fu_360_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln424_reg_820_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln435_3_reg_852 <= add_ln435_3_fu_604_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln421_fu_473_p2 = ap_const_lv1_1))) then
                add_ln435_reg_810 <= add_ln435_fu_484_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln376_reg_736 <= icmp_ln376_fu_332_p2;
                trunc_ln373_reg_731 <= trunc_ln373_fu_324_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln380_reg_862 <= icmp_ln380_fu_630_p2;
                icmp_ln380_reg_862_pp2_iter1_reg <= icmp_ln380_reg_862;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                icmp_ln421_reg_806 <= icmp_ln421_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln424_reg_820 <= icmp_ln424_fu_495_p2;
                icmp_ln424_reg_820_pp1_iter1_reg <= icmp_ln424_reg_820;
                select_ln424_1_reg_830_pp1_iter1_reg <= select_ln424_1_reg_830;
                select_ln424_reg_824_pp1_iter1_reg <= select_ln424_reg_824;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln424_reg_820_pp1_iter2_reg <= icmp_ln424_reg_820_pp1_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln408_reg_745 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                icmp_ln874_reg_794 <= icmp_ln874_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln874_reg_794 = ap_const_lv1_1) and (icmp_ln408_reg_745 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln408_reg_745 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then
                reg_315 <= wp_superpoints_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln380_reg_862_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((icmp_ln424_reg_820_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then
                reg_319 <= grp_encodeCoordinates_fu_305_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln380_fu_630_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln380_1_reg_871 <= select_ln380_1_fu_656_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln380_fu_630_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln380_reg_866 <= select_ln380_fu_648_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln424_fu_495_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln424_1_reg_830 <= select_ln424_1_fu_521_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln424_fu_495_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln424_reg_824 <= select_ln424_fu_513_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln408_reg_745 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_44_reg_769(11 downto 4) <= tmp_44_fu_410_p3(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln874_reg_794 = ap_const_lv1_1) and (icmp_ln408_reg_745 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                trunc_ln69_2_reg_798 <= trunc_ln69_2_fu_455_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln408_reg_745 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                trunc_ln69_reg_779 <= trunc_ln69_fu_422_p1;
            end if;
        end if;
    end process;
    tmp_8_reg_754(4 downto 0) <= "00000";
    tmp_44_reg_769(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln408_reg_745, icmp_ln874_reg_794, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter2, icmp_ln376_fu_332_p2, icmp_ln421_fu_473_p2, ap_CS_fsm_state8, ap_enable_reg_pp1_iter0, icmp_ln424_fu_495_p2, ap_enable_reg_pp2_iter0, icmp_ln380_fu_630_p2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter3, grp_add_patch_patches_parameters14_fu_297_ap_done, ap_CS_fsm_state7, icmp_ln874_4_fu_459_p2, ap_CS_fsm_state14, ap_CS_fsm_state21, ap_block_state14_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln376_fu_332_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln376_fu_332_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln874_reg_794 = ap_const_lv1_1) and (icmp_ln408_reg_745 = ap_const_lv1_1) and (icmp_ln874_4_fu_459_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((icmp_ln408_reg_745 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln421_fu_473_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln424_fu_495_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln424_fu_495_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln380_fu_630_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln380_fu_630_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_add_patch_patches_parameters14_fu_297_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln380_1_fu_624_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_264) + unsigned(ap_const_lv7_1));
    add_ln380_fu_636_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_phi_fu_279_p4) + unsigned(ap_const_lv3_1));
    add_ln386_fu_664_p2 <= std_logic_vector(unsigned(select_ln380_fu_648_p3) + unsigned(ap_const_lv5_1));
    add_ln391_fu_684_p2 <= std_logic_vector(unsigned(tmp_92_cast_fu_677_p1) + unsigned(zext_ln391_fu_681_p1));
    add_ln408_fu_372_p2 <= std_logic_vector(unsigned(i_reg_220) + unsigned(ap_const_lv3_1));
    add_ln410_1_fu_405_p2 <= std_logic_vector(unsigned(add_ln410_reg_740) + unsigned(zext_ln874_fu_378_p1));
    add_ln410_fu_360_p2 <= std_logic_vector(unsigned(zext_ln410_1_fu_356_p1) + unsigned(zext_ln410_fu_344_p1));
    add_ln424_1_fu_489_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_231) + unsigned(ap_const_lv7_1));
    add_ln424_fu_501_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_5_phi_fu_246_p4) + unsigned(ap_const_lv3_1));
    add_ln430_fu_529_p2 <= std_logic_vector(unsigned(select_ln424_fu_513_p3) + unsigned(ap_const_lv5_1));
    add_ln435_1_fu_588_p2 <= std_logic_vector(unsigned(add_ln435_reg_810) + unsigned(zext_ln435_fu_585_p1));
    add_ln435_2_fu_549_p2 <= std_logic_vector(unsigned(zext_ln435_1_fu_542_p1) + unsigned(zext_ln435_3_fu_546_p1));
    add_ln435_3_fu_604_p2 <= std_logic_vector(unsigned(tmp_103_cast_fu_593_p3) + unsigned(zext_ln435_2_fu_601_p1));
    add_ln435_fu_484_p2 <= std_logic_vector(unsigned(shl_ln435_fu_479_p2) + unsigned(n_patches_read));
    add_ln444_fu_614_p2 <= std_logic_vector(unsigned(trunc_ln373_reg_731) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(13);
    ap_CS_fsm_state21 <= ap_CS_fsm(14);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_on_subcall_done_assign_proc : process(grp_add_patch_patches_parameters14_fu_297_ap_done, ap_predicate_op122_call_state14)
    begin
                ap_block_state14_on_subcall_done <= ((ap_predicate_op122_call_state14 = ap_const_boolean_1) and (grp_add_patch_patches_parameters14_fu_297_ap_done = ap_const_logic_0));
    end process;

        ap_block_state16_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state9_assign_proc : process(icmp_ln424_fu_495_p2)
    begin
        if ((icmp_ln424_fu_495_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state16_assign_proc : process(icmp_ln380_fu_630_p2)
    begin
        if ((icmp_ln380_fu_630_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state16 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14, ap_block_state14_on_subcall_done)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_on_subcall_done)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_a_5_phi_fu_246_p4_assign_proc : process(a_5_reg_242, icmp_ln424_reg_820, ap_CS_fsm_pp1_stage0, select_ln424_1_reg_830, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln424_reg_820 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_a_5_phi_fu_246_p4 <= select_ln424_1_reg_830;
        else 
            ap_phi_mux_a_5_phi_fu_246_p4 <= a_5_reg_242;
        end if; 
    end process;


    ap_phi_mux_a_phi_fu_279_p4_assign_proc : process(a_reg_275, icmp_ln380_reg_862, ap_CS_fsm_pp2_stage0, select_ln380_1_reg_871, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln380_reg_862 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_a_phi_fu_279_p4 <= select_ln380_1_reg_871;
        else 
            ap_phi_mux_a_phi_fu_279_p4 <= a_reg_275;
        end if; 
    end process;


    ap_predicate_op122_call_state14_assign_proc : process(icmp_ln408_reg_745, icmp_ln376_reg_736, icmp_ln421_reg_806)
    begin
                ap_predicate_op122_call_state14 <= ((icmp_ln408_reg_745 = ap_const_lv1_1) and (icmp_ln421_reg_806 = ap_const_lv1_1) and (icmp_ln376_reg_736 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14, ap_block_state14_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_on_subcall_done))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_add_patch_patches_parameters14_fu_297_ap_start <= grp_add_patch_patches_parameters14_fu_297_ap_start_reg;

    grp_encodeCoordinates_fu_305_phi_assign_proc : process(wp_superpoints_q0, wp_superpoints_q1, ap_enable_reg_pp1_iter2, icmp_ln424_reg_820_pp1_iter1_reg, ap_enable_reg_pp2_iter2, icmp_ln380_reg_862_pp2_iter1_reg, ap_block_pp1_stage0, ap_block_pp2_stage0)
    begin
        if (((icmp_ln380_reg_862_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_encodeCoordinates_fu_305_phi <= wp_superpoints_q0;
        elsif (((icmp_ln424_reg_820_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            grp_encodeCoordinates_fu_305_phi <= wp_superpoints_q1;
        else 
            grp_encodeCoordinates_fu_305_phi <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_encodeCoordinates_fu_305_z_assign_proc : process(wp_superpoints_q0, wp_superpoints_q1, ap_enable_reg_pp1_iter2, icmp_ln424_reg_820_pp1_iter1_reg, ap_enable_reg_pp2_iter2, icmp_ln380_reg_862_pp2_iter1_reg, ap_block_pp1_stage0, ap_block_pp2_stage0)
    begin
        if (((icmp_ln380_reg_862_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_encodeCoordinates_fu_305_z <= wp_superpoints_q1;
        elsif (((icmp_ln424_reg_820_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            grp_encodeCoordinates_fu_305_z <= wp_superpoints_q0;
        else 
            grp_encodeCoordinates_fu_305_z <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln376_fu_332_p2 <= "1" when (n_patches_read = ap_const_lv8_0) else "0";
    icmp_ln380_fu_630_p2 <= "1" when (indvar_flatten_reg_264 = ap_const_lv7_50) else "0";
    icmp_ln386_fu_642_p2 <= "1" when (b_reg_286 = ap_const_lv5_10) else "0";
    icmp_ln408_fu_366_p2 <= "1" when (unsigned(i_reg_220) < unsigned(ap_const_lv3_5)) else "0";
    icmp_ln421_fu_473_p2 <= "1" when (tmp_45_fu_464_p4 = ap_const_lv3_0) else "0";
    icmp_ln424_fu_495_p2 <= "1" when (indvar_flatten7_reg_231 = ap_const_lv7_50) else "0";
    icmp_ln430_fu_507_p2 <= "1" when (b_7_reg_253 = ap_const_lv5_10) else "0";
    icmp_ln874_4_fu_459_p2 <= "1" when (trunc_ln69_2_reg_798 = reg_315) else "0";
    icmp_ln874_fu_450_p2 <= "1" when (trunc_ln69_reg_779 = reg_315) else "0";

    n_patches_assign_proc : process(grp_add_patch_patches_parameters14_fu_297_ap_done, ap_CS_fsm_state13, ap_CS_fsm_state21, zext_ln444_fu_619_p1)
    begin
        if (((grp_add_patch_patches_parameters14_fu_297_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            n_patches <= ap_const_lv8_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            n_patches <= zext_ln444_fu_619_p1;
        else 
            n_patches <= "XXXXXXXX";
        end if; 
    end process;


    n_patches_ap_vld_assign_proc : process(grp_add_patch_patches_parameters14_fu_297_ap_done, ap_CS_fsm_state13, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((grp_add_patch_patches_parameters14_fu_297_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            n_patches_ap_vld <= ap_const_logic_1;
        else 
            n_patches_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln391_fu_709_p2 <= (shl_ln391_fu_703_p2 or ap_const_lv8_1);
    or_ln411_fu_440_p2 <= (tmp_44_reg_769 or ap_const_lv12_F);
    or_ln435_fu_574_p2 <= (shl_ln435_1_fu_568_p2 or ap_const_lv8_1);
    or_ln874_1_fu_426_p2 <= (tmp_8_reg_754 or ap_const_lv8_1F);
    or_ln874_fu_390_p2 <= (tmp_8_fu_382_p3 or ap_const_lv8_1);
    patches_parameters_address0 <= grp_add_patch_patches_parameters14_fu_297_patches_parameters_address0;
    patches_parameters_address1 <= grp_add_patch_patches_parameters14_fu_297_patches_parameters_address1;

    patches_parameters_ce0_assign_proc : process(icmp_ln408_reg_745, icmp_ln376_reg_736, icmp_ln421_reg_806, grp_add_patch_patches_parameters14_fu_297_patches_parameters_ce0, ap_CS_fsm_state14, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((icmp_ln408_reg_745 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln421_reg_806 = ap_const_lv1_1) and (icmp_ln376_reg_736 = ap_const_lv1_0)))) then 
            patches_parameters_ce0 <= grp_add_patch_patches_parameters14_fu_297_patches_parameters_ce0;
        else 
            patches_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_ce1_assign_proc : process(icmp_ln408_reg_745, icmp_ln376_reg_736, icmp_ln421_reg_806, grp_add_patch_patches_parameters14_fu_297_patches_parameters_ce1, ap_CS_fsm_state14, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((icmp_ln408_reg_745 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln421_reg_806 = ap_const_lv1_1) and (icmp_ln376_reg_736 = ap_const_lv1_0)))) then 
            patches_parameters_ce1 <= grp_add_patch_patches_parameters14_fu_297_patches_parameters_ce1;
        else 
            patches_parameters_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    patches_parameters_d0 <= grp_add_patch_patches_parameters14_fu_297_patches_parameters_d0;

    patches_parameters_we0_assign_proc : process(icmp_ln408_reg_745, icmp_ln376_reg_736, icmp_ln421_reg_806, grp_add_patch_patches_parameters14_fu_297_patches_parameters_we0, ap_CS_fsm_state14, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((icmp_ln408_reg_745 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln421_reg_806 = ap_const_lv1_1) and (icmp_ln376_reg_736 = ap_const_lv1_0)))) then 
            patches_parameters_we0 <= grp_add_patch_patches_parameters14_fu_297_patches_parameters_we0;
        else 
            patches_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_enable_reg_pp1_iter3, ap_enable_reg_pp2_iter3, ap_block_pp1_stage0, ap_block_pp2_stage0, zext_ln410_2_fu_417_p1, zext_ln411_fu_445_p1, zext_ln435_6_fu_610_p1, zext_ln391_1_fu_720_p1)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            patches_superpoints_address0 <= zext_ln391_1_fu_720_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            patches_superpoints_address0 <= zext_ln435_6_fu_610_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            patches_superpoints_address0 <= zext_ln411_fu_445_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            patches_superpoints_address0 <= zext_ln410_2_fu_417_p1(12 - 1 downto 0);
        else 
            patches_superpoints_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_ce0_assign_proc : process(ap_CS_fsm_state3, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp1_iter3, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            patches_superpoints_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_superpoints_d0 <= reg_319;

    patches_superpoints_we0_assign_proc : process(ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, icmp_ln424_reg_820_pp1_iter2_reg, icmp_ln380_reg_862_pp2_iter2_reg, ap_enable_reg_pp1_iter3, ap_enable_reg_pp2_iter3)
    begin
        if ((((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (icmp_ln380_reg_862_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln424_reg_820_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            patches_superpoints_we0 <= ap_const_logic_1;
        else 
            patches_superpoints_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln380_1_fu_656_p3 <= 
        add_ln380_fu_636_p2 when (icmp_ln386_fu_642_p2(0) = '1') else 
        ap_phi_mux_a_phi_fu_279_p4;
    select_ln380_fu_648_p3 <= 
        ap_const_lv5_0 when (icmp_ln386_fu_642_p2(0) = '1') else 
        b_reg_286;
    select_ln424_1_fu_521_p3 <= 
        add_ln424_fu_501_p2 when (icmp_ln430_fu_507_p2(0) = '1') else 
        ap_phi_mux_a_5_phi_fu_246_p4;
    select_ln424_fu_513_p3 <= 
        ap_const_lv5_0 when (icmp_ln430_fu_507_p2(0) = '1') else 
        b_7_reg_253;
    shl_ln391_fu_703_p2 <= std_logic_vector(shift_left(unsigned(add_ln391_fu_684_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln435_1_fu_568_p2 <= std_logic_vector(shift_left(unsigned(add_ln435_2_fu_549_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln435_fu_479_p2 <= std_logic_vector(shift_left(unsigned(n_patches_read),to_integer(unsigned('0' & ap_const_lv8_2(8-1 downto 0)))));
    sub_fu_338_p2 <= std_logic_vector(unsigned(trunc_ln376_fu_328_p1) + unsigned(ap_const_lv5_1F));
    tmp_103_cast_fu_593_p3 <= (add_ln435_1_fu_588_p2 & ap_const_lv4_0);
    tmp_10_fu_431_p3 <= (ap_const_lv56_0 & or_ln874_1_fu_426_p2);
    tmp_11_fu_535_p3 <= (select_ln424_1_reg_830 & ap_const_lv4_0);
    tmp_43_fu_690_p3 <= (add_ln391_fu_684_p2 & ap_const_lv1_0);
    tmp_44_fu_410_p3 <= (add_ln410_1_reg_764 & ap_const_lv4_0);
    tmp_45_fu_464_p4 <= n_patches_read(7 downto 5);
    tmp_46_fu_555_p3 <= (add_ln435_2_fu_549_p2 & ap_const_lv1_0);
    tmp_8_fu_382_p3 <= (i_reg_220 & ap_const_lv5_0);
    tmp_92_cast_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_670_p3),8));
    tmp_9_fu_396_p3 <= (ap_const_lv56_0 & or_ln874_fu_390_p2);
    tmp_fu_348_p3 <= (sub_fu_338_p2 & ap_const_lv2_0);
    tmp_s_fu_670_p3 <= (select_ln380_1_reg_871 & ap_const_lv4_0);
    trunc_ln373_fu_324_p1 <= n_patches_read(6 - 1 downto 0);
    trunc_ln376_fu_328_p1 <= n_patches_read(5 - 1 downto 0);
    trunc_ln69_2_fu_455_p1 <= patches_superpoints_q0(32 - 1 downto 0);
    trunc_ln69_fu_422_p1 <= patches_superpoints_q0(32 - 1 downto 0);
    wp_parameters_address0 <= grp_add_patch_patches_parameters14_fu_297_wp_parameters_address0;

    wp_parameters_ce0_assign_proc : process(icmp_ln408_reg_745, icmp_ln376_reg_736, icmp_ln421_reg_806, grp_add_patch_patches_parameters14_fu_297_wp_parameters_ce0, ap_CS_fsm_state14, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((icmp_ln408_reg_745 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln421_reg_806 = ap_const_lv1_1) and (icmp_ln376_reg_736 = ap_const_lv1_0)))) then 
            wp_parameters_ce0 <= grp_add_patch_patches_parameters14_fu_297_wp_parameters_ce0;
        else 
            wp_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_superpoints_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_block_pp1_stage0, ap_block_pp2_stage0, tmp_9_fu_396_p3, tmp_10_fu_431_p3, zext_ln435_5_fu_580_p1, zext_ln391_2_fu_698_p1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            wp_superpoints_address0 <= zext_ln391_2_fu_698_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            wp_superpoints_address0 <= zext_ln435_5_fu_580_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            wp_superpoints_address0 <= tmp_10_fu_431_p3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_superpoints_address0 <= tmp_9_fu_396_p3(8 - 1 downto 0);
        else 
            wp_superpoints_address0 <= "XXXXXXXX";
        end if; 
    end process;


    wp_superpoints_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_block_pp1_stage0, ap_block_pp2_stage0, zext_ln435_4_fu_563_p1, zext_ln391_3_fu_715_p1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            wp_superpoints_address1 <= zext_ln391_3_fu_715_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            wp_superpoints_address1 <= zext_ln435_4_fu_563_p1(8 - 1 downto 0);
        else 
            wp_superpoints_address1 <= "XXXXXXXX";
        end if; 
    end process;


    wp_superpoints_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            wp_superpoints_ce0 <= ap_const_logic_1;
        else 
            wp_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_superpoints_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            wp_superpoints_ce1 <= ap_const_logic_1;
        else 
            wp_superpoints_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln391_1_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln391_reg_882_pp2_iter2_reg),64));
    zext_ln391_2_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_fu_690_p3),64));
    zext_ln391_3_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln391_fu_709_p2),64));
    zext_ln391_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln380_reg_866),8));
    zext_ln410_1_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_348_p3),8));
    zext_ln410_2_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_fu_410_p3),64));
    zext_ln410_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_fu_338_p2),8));
    zext_ln411_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln411_fu_440_p2),64));
    zext_ln435_1_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_535_p3),8));
    zext_ln435_2_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln424_reg_824_pp1_iter1_reg),12));
    zext_ln435_3_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln424_reg_824),8));
    zext_ln435_4_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_555_p3),64));
    zext_ln435_5_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln435_fu_574_p2),64));
    zext_ln435_6_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln435_3_reg_852),64));
    zext_ln435_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln424_1_reg_830_pp1_iter1_reg),8));
    zext_ln444_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln444_fu_614_p2),8));
    zext_ln874_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_220),8));
end behav;
