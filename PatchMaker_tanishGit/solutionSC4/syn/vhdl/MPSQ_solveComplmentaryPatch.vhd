-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_solveComplmentaryPatch is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n_patches_i : IN STD_LOGIC_VECTOR (7 downto 0);
    n_patches_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    n_patches_o_ap_vld : OUT STD_LOGIC;
    GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    GDn_points_ce0 : OUT STD_LOGIC;
    GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ppl : IN STD_LOGIC_VECTOR (31 downto 0);
    nPatchesAtOriginal : IN STD_LOGIC_VECTOR (7 downto 0);
    previous_z_top_min_read : IN STD_LOGIC_VECTOR (31 downto 0);
    complementary_apexZ0 : IN STD_LOGIC_VECTOR (31 downto 0);
    white_space_height_read : IN STD_LOGIC_VECTOR (63 downto 0);
    original_c : IN STD_LOGIC_VECTOR (31 downto 0);
    original_d : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (31 downto 0);
    z_top_min_read : IN STD_LOGIC_VECTOR (31 downto 0);
    GDarrayDecoded_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    GDarrayDecoded_ce0 : OUT STD_LOGIC;
    GDarrayDecoded_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_we0 : OUT STD_LOGIC;
    patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce1 : OUT STD_LOGIC;
    patches_superpoints_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    patches_parameters_ce1 : OUT STD_LOGIC;
    patches_parameters_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_531_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_531_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_531_p_din3 : OUT STD_LOGIC_VECTOR (2 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_531_p_din4 : OUT STD_LOGIC_VECTOR (2 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_531_p_din5 : OUT STD_LOGIC_VECTOR (2 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_531_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_531_p_ce : OUT STD_LOGIC;
    grp_fu_1144_p_din0 : OUT STD_LOGIC_VECTOR (32 downto 0);
    grp_fu_1144_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1144_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1144_p_ce : OUT STD_LOGIC );
end;


architecture behav of MPSQ_solveComplmentaryPatch is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state145 : STD_LOGIC_VECTOR (96 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (96 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (96 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state148 : STD_LOGIC_VECTOR (96 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state149 : STD_LOGIC_VECTOR (96 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state150 : STD_LOGIC_VECTOR (96 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state151 : STD_LOGIC_VECTOR (96 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state152 : STD_LOGIC_VECTOR (96 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state153 : STD_LOGIC_VECTOR (96 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state154 : STD_LOGIC_VECTOR (96 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv64_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv12_801 : STD_LOGIC_VECTOR (11 downto 0) := "100000000001";
    constant ap_const_lv12_601 : STD_LOGIC_VECTOR (11 downto 0) := "011000000001";
    constant ap_const_lv12_401 : STD_LOGIC_VECTOR (11 downto 0) := "010000000001";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_reg_468 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_488 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_499 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_reg_540 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_5_reg_551 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_6_reg_563 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_574 : STD_LOGIC_VECTOR (2 downto 0);
    signal layerSMin_reg_585 : STD_LOGIC_VECTOR (63 downto 0);
    signal layerWithSmallestShift_reg_596 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_735 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp4_iter3 : STD_LOGIC := '0';
    signal ap_block_state65_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state66_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state67_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state68_pp4_stage0_iter3 : BOOLEAN;
    signal ap_block_state69_pp4_stage0_iter4 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal icmp_ln1252_reg_1729 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1252_reg_1729_pp4_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state125 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state125 : signal is "none";
    signal reg_740 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state133 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state133 : signal is "none";
    signal ap_CS_fsm_state140 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state140 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln1194_fu_745_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1194_reg_1554 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1200_fu_749_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1200_reg_1560 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln1198_fu_756_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1198_reg_1566 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1198_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_reg_1575 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1205_fu_770_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1205_reg_1579 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_665_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_tmp7_reg_1584 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal add_ln1207_fu_775_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state51_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1207_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1207_reg_1594 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_cast_fu_787_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast_reg_1598 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_792_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_1608 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal add_ln1227_fu_799_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1227_reg_1612 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1230_fu_810_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1230_reg_1617 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1217_fu_814_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1217_reg_1622 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1220_fu_825_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1220_reg_1627 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1230_fu_829_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state54_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state55_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln1230_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1230_reg_1637 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_cast_fu_841_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1641 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal add_ln1220_fu_846_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state57_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state58_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln1220_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1220_reg_1661 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_cast_fu_858_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_1665 : STD_LOGIC_VECTOR (63 downto 0);
    signal GDn_points_load_reg_1675 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal select_ln1236_fu_885_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1236_reg_1680 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal add_ln1239_fu_893_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state61_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state62_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state63_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln1239_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1239_reg_1693 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1239_reg_1693_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal new_z_i_index_addr_3_reg_1697 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_1697_pp3_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_z_i_index_load_reg_1708 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal trunc_ln1241_fu_911_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1241_reg_1714 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1241_fu_915_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1241_reg_1719 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1252_fu_942_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1252_reg_1724 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal icmp_ln1252_fu_948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1252_reg_1729_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1252_reg_1729_pp4_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_cast_fu_954_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_cast_reg_1733 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_cast_reg_1733_pp4_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_cast_reg_1733_pp4_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_cast_reg_1733_pp4_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_959_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_reg_1743 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1260_fu_983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1260_reg_1783 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_block_state71_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state72_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state73_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_state74_pp5_stage0_iter3 : BOOLEAN;
    signal ap_block_state75_pp5_stage0_iter4 : BOOLEAN;
    signal ap_block_state76_pp5_stage0_iter5 : BOOLEAN;
    signal ap_block_state77_pp5_stage0_iter6 : BOOLEAN;
    signal ap_block_state78_pp5_stage0_iter7 : BOOLEAN;
    signal ap_block_state79_pp5_stage0_iter8 : BOOLEAN;
    signal ap_block_state80_pp5_stage0_iter9 : BOOLEAN;
    signal ap_block_state81_pp5_stage0_iter10 : BOOLEAN;
    signal ap_block_state82_pp5_stage0_iter11 : BOOLEAN;
    signal ap_block_state83_pp5_stage0_iter12 : BOOLEAN;
    signal ap_block_state84_pp5_stage0_iter13 : BOOLEAN;
    signal ap_block_state85_pp5_stage0_iter14 : BOOLEAN;
    signal ap_block_state86_pp5_stage0_iter15 : BOOLEAN;
    signal ap_block_state87_pp5_stage0_iter16 : BOOLEAN;
    signal ap_block_state88_pp5_stage0_iter17 : BOOLEAN;
    signal ap_block_state89_pp5_stage0_iter18 : BOOLEAN;
    signal ap_block_state90_pp5_stage0_iter19 : BOOLEAN;
    signal ap_block_state91_pp5_stage0_iter20 : BOOLEAN;
    signal ap_block_state92_pp5_stage0_iter21 : BOOLEAN;
    signal ap_block_state93_pp5_stage0_iter22 : BOOLEAN;
    signal ap_block_state94_pp5_stage0_iter23 : BOOLEAN;
    signal ap_block_state95_pp5_stage0_iter24 : BOOLEAN;
    signal ap_block_state96_pp5_stage0_iter25 : BOOLEAN;
    signal ap_block_state97_pp5_stage0_iter26 : BOOLEAN;
    signal ap_block_state98_pp5_stage0_iter27 : BOOLEAN;
    signal ap_block_state99_pp5_stage0_iter28 : BOOLEAN;
    signal ap_block_state100_pp5_stage0_iter29 : BOOLEAN;
    signal ap_block_state101_pp5_stage0_iter30 : BOOLEAN;
    signal ap_block_state102_pp5_stage0_iter31 : BOOLEAN;
    signal ap_block_state103_pp5_stage0_iter32 : BOOLEAN;
    signal ap_block_state104_pp5_stage0_iter33 : BOOLEAN;
    signal ap_block_state105_pp5_stage0_iter34 : BOOLEAN;
    signal ap_block_state106_pp5_stage0_iter35 : BOOLEAN;
    signal ap_block_state107_pp5_stage0_iter36 : BOOLEAN;
    signal ap_block_state108_pp5_stage0_iter37 : BOOLEAN;
    signal ap_block_state109_pp5_stage0_iter38 : BOOLEAN;
    signal ap_block_state110_pp5_stage0_iter39 : BOOLEAN;
    signal ap_block_state111_pp5_stage0_iter40 : BOOLEAN;
    signal ap_block_state112_pp5_stage0_iter41 : BOOLEAN;
    signal ap_block_state113_pp5_stage0_iter42 : BOOLEAN;
    signal ap_block_state114_pp5_stage0_iter43 : BOOLEAN;
    signal ap_block_state115_pp5_stage0_iter44 : BOOLEAN;
    signal ap_block_state116_pp5_stage0_iter45 : BOOLEAN;
    signal ap_block_state117_pp5_stage0_iter46 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal add_ln1265_fu_989_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1265_reg_1787 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal trunc_ln1262_fu_1000_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter12_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter13_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter14_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter15_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter16_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter17_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter18_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter19_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter20_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter21_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter22_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter23_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter24_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter25_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter26_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter27_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter28_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter29_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter30_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter31_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter32_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter33_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter34_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter35_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter36_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter37_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter38_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter39_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter40_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter41_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter42_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter43_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter44_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1262_reg_1798_pp5_iter45_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal new_z_i_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal sext_ln1273_fu_1029_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1273_reg_1807 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal add_ln1273_fu_1032_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal ap_block_state119_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state120_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state121_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal icmp_ln1273_fu_1038_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1273_reg_1821 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1273_reg_1821_pp6_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln534_fu_1044_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln534_reg_1825 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln534_reg_1825_pp6_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_1048_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1830 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln180_1_fu_1084_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln180_1_reg_1835 : STD_LOGIC_VECTOR (32 downto 0);
    signal layerWithSmallestShift_1_fu_1104_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal layerSMin_1_fu_1112_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1282_fu_1120_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1282_reg_1850 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state122 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state122 : signal is "none";
    signal tmp_5_cast_fu_1127_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_cast_reg_1855 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1297_fu_1135_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1297_reg_1861 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_fu_1141_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_reg_1866 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state123 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state123 : signal is "none";
    signal ret_2_fu_1158_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_2_reg_1873 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln1302_fu_1167_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1302_reg_1885 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1307_fu_1172_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1307_reg_1890 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state124 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state124 : signal is "none";
    signal lhs_2_fu_1206_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_2_reg_1900 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_3_fu_1216_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_3_reg_1906 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln180_2_fu_1221_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln180_2_reg_1912 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal lhs_3_fu_1250_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_3_reg_1922 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_4_fu_1261_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_4_reg_1927 : STD_LOGIC_VECTOR (32 downto 0);
    signal lhs_4_fu_1291_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_4_reg_1934 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state127 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state127 : signal is "none";
    signal ret_fu_1301_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_reg_1940 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state128 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state128 : signal is "none";
    signal sext_ln534_fu_1306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state129 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state129 : signal is "none";
    signal tmp_8_reg_1950 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1327_fu_1322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1327_reg_1955 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1310_fu_1330_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1310_reg_1959 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state134 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state134 : signal is "none";
    signal zext_ln1346_fu_1342_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1346_reg_1966 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_makePatch_alignedToLine_fu_642_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ppl_assign2_reg_1971 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state137 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state137 : signal is "none";
    signal ret_5_fu_1354_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_5_reg_1976 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state139 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state139 : signal is "none";
    signal ret_6_fu_1367_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_6_reg_1982 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln534_1_fu_1393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln534_1_reg_1988 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1380_fu_1407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1383_fu_1413_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1383_reg_1997 : STD_LOGIC_VECTOR (8 downto 0);
    signal thirdLastPatchIdx_fu_1417_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal thirdLastPatchIdx_reg_2002 : STD_LOGIC_VECTOR (4 downto 0);
    signal lastPatchIdx_cast_fu_1423_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal lastPatchIdx_cast_reg_2007 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1390_fu_1429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1390_reg_2012 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state141 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state141 : signal is "none";
    signal add_ln1390_fu_1435_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1390_reg_2016 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1410_fu_1441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state153 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state153 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state51 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state54 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state57 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state61 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state65 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter4 : STD_LOGIC := '0';
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state71 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter46 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal current_z_i_index_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal current_z_i_index_ce0 : STD_LOGIC;
    signal current_z_i_index_we0 : STD_LOGIC;
    signal current_z_i_index_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_z_i_index_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_ce0 : STD_LOGIC;
    signal new_z_i_index_we0 : STD_LOGIC;
    signal new_z_i_index_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_z_i_index_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_ce1 : STD_LOGIC;
    signal new_z_i_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_V_ce0 : STD_LOGIC;
    signal new_z_i_V_we0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_642_ap_start : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_642_ap_done : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_642_ap_idle : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_642_ap_ready : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_642_n_patches_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_makePatch_alignedToLine_fu_642_n_patches_o_ap_vld : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_642_GDn_points_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_makePatch_alignedToLine_fu_642_GDn_points_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_642_z_top : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_makePatch_alignedToLine_fu_642_p_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_makePatch_alignedToLine_fu_642_GDarrayDecoded_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_makePatch_alignedToLine_fu_642_GDarrayDecoded_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_642_patches_superpoints_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_makePatch_alignedToLine_fu_642_patches_superpoints_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_642_patches_superpoints_we0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_642_patches_superpoints_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_makePatch_alignedToLine_fu_642_patches_parameters_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_makePatch_alignedToLine_fu_642_patches_parameters_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_642_patches_parameters_we0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_642_patches_parameters_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_665_z_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_665_z_j : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_665_i : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_665_j : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_665_k : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_665_ap_ce : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_block_state71_pp5_stage0_iter0_ignore_call5 : BOOLEAN;
    signal ap_block_state72_pp5_stage0_iter1_ignore_call5 : BOOLEAN;
    signal ap_block_state73_pp5_stage0_iter2_ignore_call5 : BOOLEAN;
    signal ap_block_state74_pp5_stage0_iter3_ignore_call5 : BOOLEAN;
    signal ap_block_state75_pp5_stage0_iter4_ignore_call5 : BOOLEAN;
    signal ap_block_state76_pp5_stage0_iter5_ignore_call5 : BOOLEAN;
    signal ap_block_state77_pp5_stage0_iter6_ignore_call5 : BOOLEAN;
    signal ap_block_state78_pp5_stage0_iter7_ignore_call5 : BOOLEAN;
    signal ap_block_state79_pp5_stage0_iter8_ignore_call5 : BOOLEAN;
    signal ap_block_state80_pp5_stage0_iter9_ignore_call5 : BOOLEAN;
    signal ap_block_state81_pp5_stage0_iter10_ignore_call5 : BOOLEAN;
    signal ap_block_state82_pp5_stage0_iter11_ignore_call5 : BOOLEAN;
    signal ap_block_state83_pp5_stage0_iter12_ignore_call5 : BOOLEAN;
    signal ap_block_state84_pp5_stage0_iter13_ignore_call5 : BOOLEAN;
    signal ap_block_state85_pp5_stage0_iter14_ignore_call5 : BOOLEAN;
    signal ap_block_state86_pp5_stage0_iter15_ignore_call5 : BOOLEAN;
    signal ap_block_state87_pp5_stage0_iter16_ignore_call5 : BOOLEAN;
    signal ap_block_state88_pp5_stage0_iter17_ignore_call5 : BOOLEAN;
    signal ap_block_state89_pp5_stage0_iter18_ignore_call5 : BOOLEAN;
    signal ap_block_state90_pp5_stage0_iter19_ignore_call5 : BOOLEAN;
    signal ap_block_state91_pp5_stage0_iter20_ignore_call5 : BOOLEAN;
    signal ap_block_state92_pp5_stage0_iter21_ignore_call5 : BOOLEAN;
    signal ap_block_state93_pp5_stage0_iter22_ignore_call5 : BOOLEAN;
    signal ap_block_state94_pp5_stage0_iter23_ignore_call5 : BOOLEAN;
    signal ap_block_state95_pp5_stage0_iter24_ignore_call5 : BOOLEAN;
    signal ap_block_state96_pp5_stage0_iter25_ignore_call5 : BOOLEAN;
    signal ap_block_state97_pp5_stage0_iter26_ignore_call5 : BOOLEAN;
    signal ap_block_state98_pp5_stage0_iter27_ignore_call5 : BOOLEAN;
    signal ap_block_state99_pp5_stage0_iter28_ignore_call5 : BOOLEAN;
    signal ap_block_state100_pp5_stage0_iter29_ignore_call5 : BOOLEAN;
    signal ap_block_state101_pp5_stage0_iter30_ignore_call5 : BOOLEAN;
    signal ap_block_state102_pp5_stage0_iter31_ignore_call5 : BOOLEAN;
    signal ap_block_state103_pp5_stage0_iter32_ignore_call5 : BOOLEAN;
    signal ap_block_state104_pp5_stage0_iter33_ignore_call5 : BOOLEAN;
    signal ap_block_state105_pp5_stage0_iter34_ignore_call5 : BOOLEAN;
    signal ap_block_state106_pp5_stage0_iter35_ignore_call5 : BOOLEAN;
    signal ap_block_state107_pp5_stage0_iter36_ignore_call5 : BOOLEAN;
    signal ap_block_state108_pp5_stage0_iter37_ignore_call5 : BOOLEAN;
    signal ap_block_state109_pp5_stage0_iter38_ignore_call5 : BOOLEAN;
    signal ap_block_state110_pp5_stage0_iter39_ignore_call5 : BOOLEAN;
    signal ap_block_state111_pp5_stage0_iter40_ignore_call5 : BOOLEAN;
    signal ap_block_state112_pp5_stage0_iter41_ignore_call5 : BOOLEAN;
    signal ap_block_state113_pp5_stage0_iter42_ignore_call5 : BOOLEAN;
    signal ap_block_state114_pp5_stage0_iter43_ignore_call5 : BOOLEAN;
    signal ap_block_state115_pp5_stage0_iter44_ignore_call5 : BOOLEAN;
    signal ap_block_state116_pp5_stage0_iter45_ignore_call5 : BOOLEAN;
    signal ap_block_state117_pp5_stage0_iter46_ignore_call5 : BOOLEAN;
    signal ap_block_pp5_stage0_11001_ignoreCallOp369 : BOOLEAN;
    signal grp_delete_patch_fu_678_ap_start : STD_LOGIC;
    signal grp_delete_patch_fu_678_ap_done : STD_LOGIC;
    signal grp_delete_patch_fu_678_ap_idle : STD_LOGIC;
    signal grp_delete_patch_fu_678_ap_ready : STD_LOGIC;
    signal grp_delete_patch_fu_678_n_patches : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_delete_patch_fu_678_n_patches_ap_vld : STD_LOGIC;
    signal grp_delete_patch_fu_678_index : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_delete_patch_fu_678_patches_superpoints_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_delete_patch_fu_678_patches_superpoints_ce0 : STD_LOGIC;
    signal grp_delete_patch_fu_678_patches_superpoints_we0 : STD_LOGIC;
    signal grp_delete_patch_fu_678_patches_superpoints_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_delete_patch_fu_678_patches_superpoints_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_delete_patch_fu_678_patches_superpoints_ce1 : STD_LOGIC;
    signal grp_delete_patch_fu_678_patches_parameters_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_delete_patch_fu_678_patches_parameters_ce0 : STD_LOGIC;
    signal grp_delete_patch_fu_678_patches_parameters_we0 : STD_LOGIC;
    signal grp_delete_patch_fu_678_patches_parameters_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_delete_patch_fu_678_patches_parameters_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_delete_patch_fu_678_patches_parameters_ce1 : STD_LOGIC;
    signal grp_get_index_from_z_fu_690_ap_start : STD_LOGIC;
    signal grp_get_index_from_z_fu_690_ap_done : STD_LOGIC;
    signal grp_get_index_from_z_fu_690_ap_idle : STD_LOGIC;
    signal grp_get_index_from_z_fu_690_ap_ready : STD_LOGIC;
    signal grp_get_index_from_z_fu_690_GDn_points_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_get_index_from_z_fu_690_GDn_points_ce0 : STD_LOGIC;
    signal grp_get_index_from_z_fu_690_layer : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_get_index_from_z_fu_690_z_value : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_get_index_from_z_fu_690_GDarrayDecoded_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_get_index_from_z_fu_690_GDarrayDecoded_ce0 : STD_LOGIC;
    signal grp_get_index_from_z_fu_690_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_areWedgeSuperPointsEqual_fu_704_ap_start : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_704_ap_done : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_704_ap_idle : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_704_ap_ready : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_704_wsp2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_areWedgeSuperPointsEqual_fu_704_wsp2_ce0 : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_704_wsp2_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_areWedgeSuperPointsEqual_fu_704_wsp2_ce1 : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_704_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_456 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_phi_mux_empty_60_phi_fu_482_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_60_reg_479 : STD_LOGIC_VECTOR (8 downto 0);
    signal counter_0_reg_510 : STD_LOGIC_VECTOR (31 downto 0);
    signal counterUpshift_0_reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_63_reg_530 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_i_5_phi_fu_555_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal ap_phi_mux_i_6_phi_fu_567_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal i_8_reg_608 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state146 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state146 : signal is "none";
    signal current_z_top_index_0_reg_620 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state147 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state147 : signal is "none";
    signal z_top_min_4_reg_631 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_makePatch_alignedToLine_fu_642_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state136 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state136 : signal is "none";
    signal ap_CS_fsm_state150 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state150 : signal is "none";
    signal ap_CS_fsm_state151 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state151 : signal is "none";
    signal grp_delete_patch_fu_678_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state148 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state148 : signal is "none";
    signal ap_CS_fsm_state135 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state135 : signal is "none";
    signal ap_CS_fsm_state149 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state149 : signal is "none";
    signal grp_get_index_from_z_fu_690_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_areWedgeSuperPointsEqual_fu_704_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (96 downto 0);
    signal ap_NS_fsm_state142 : STD_LOGIC;
    signal ap_CS_fsm_state143 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state143 : signal is "none";
    signal ap_CS_fsm_state144 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state144 : signal is "none";
    signal ap_CS_fsm_state145 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state145 : signal is "none";
    signal ap_CS_fsm_state142 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state142 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal i_4_cast_fu_905_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal tmp_4_fu_974_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1265_cast_fu_995_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1297_fu_1163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1302_fu_1202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1307_fu_1227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal new_z_i_atTop_V_3_fu_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_atTop_V_3_1_fu_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal new_z_i_atTop_V_3_2_fu_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_atTop_V_3_3_fu_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_atTop_V_3_4_fu_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_716_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1222_fu_863_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1241_fu_934_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state138 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state138 : signal is "none";
    signal icmp_ln870_fu_766_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_792_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1228_fu_804_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1218_fu_819_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1236_fu_870_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1236_fu_874_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1236_fu_879_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1241_fu_921_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1241_fu_924_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1241_1_fu_929_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln1254_fu_969_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1273_fu_1029_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1048_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln1275_fu_1062_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln1275_fu_1065_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_9_fu_1076_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln180_1_fu_1070_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1275_1_fu_1092_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1275_fu_1095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1275_fu_1101_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1297_fu_1124_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln215_fu_1154_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_5_fu_1182_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln180_fu_1177_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln180_fu_1189_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln1295_fu_1196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln215_5_fu_1213_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_6_fu_1231_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln180_2_fu_1238_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln1300_fu_1244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln215_6_fu_1257_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_7_fu_1271_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln180_3_fu_1266_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln180_3_fu_1278_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln1305_fu_1285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln215_7_fu_1298_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1309_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1309_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1326_fu_1336_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln215_8_fu_1347_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_9_fu_1350_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_10_fu_1360_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_11_fu_1363_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln878_fu_1383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1364_fu_1387_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_10_fu_1397_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal lastPatchIdx_fu_1377_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1355_fu_1373_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state154 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state154 : signal is "none";
    signal grp_fu_1309_ce : STD_LOGIC;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_state135_on_subcall_done : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component MPSQ_makePatch_alignedToLine IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        n_patches_i : IN STD_LOGIC_VECTOR (7 downto 0);
        n_patches_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        n_patches_o_ap_vld : OUT STD_LOGIC;
        GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        GDn_points_ce0 : OUT STD_LOGIC;
        GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        apexZ0 : IN STD_LOGIC_VECTOR (31 downto 0);
        z_top : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        leftRight : IN STD_LOGIC_VECTOR (0 downto 0);
        GDarrayDecoded_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        GDarrayDecoded_ce0 : OUT STD_LOGIC;
        GDarrayDecoded_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_superpoints_ce0 : OUT STD_LOGIC;
        patches_superpoints_we0 : OUT STD_LOGIC;
        patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        patches_superpoints_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        patches_parameters_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        patches_parameters_ce0 : OUT STD_LOGIC;
        patches_parameters_we0 : OUT STD_LOGIC;
        patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_straightLineProjectorFromLayerIJtoK IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        z_i : IN STD_LOGIC_VECTOR (31 downto 0);
        z_j : IN STD_LOGIC_VECTOR (31 downto 0);
        i : IN STD_LOGIC_VECTOR (2 downto 0);
        j : IN STD_LOGIC_VECTOR (2 downto 0);
        k : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component MPSQ_delete_patch IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        n_patches : OUT STD_LOGIC_VECTOR (7 downto 0);
        n_patches_ap_vld : OUT STD_LOGIC;
        n_patches_read : IN STD_LOGIC_VECTOR (7 downto 0);
        index : IN STD_LOGIC_VECTOR (8 downto 0);
        patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_superpoints_ce0 : OUT STD_LOGIC;
        patches_superpoints_we0 : OUT STD_LOGIC;
        patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        patches_superpoints_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_superpoints_ce1 : OUT STD_LOGIC;
        patches_superpoints_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        patches_parameters_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        patches_parameters_ce0 : OUT STD_LOGIC;
        patches_parameters_we0 : OUT STD_LOGIC;
        patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        patches_parameters_ce1 : OUT STD_LOGIC;
        patches_parameters_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_get_index_from_z IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        GDn_points_ce0 : OUT STD_LOGIC;
        GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        layer : IN STD_LOGIC_VECTOR (2 downto 0);
        z_value : IN STD_LOGIC_VECTOR (31 downto 0);
        GDarrayDecoded_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        GDarrayDecoded_ce0 : OUT STD_LOGIC;
        GDarrayDecoded_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component MPSQ_areWedgeSuperPointsEqual IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        wsp2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        wsp2_ce0 : OUT STD_LOGIC;
        wsp2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        wsp2_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        wsp2_ce1 : OUT STD_LOGIC;
        wsp2_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        wsp1_offset : IN STD_LOGIC_VECTOR (4 downto 0);
        wsp1_offset1 : IN STD_LOGIC_VECTOR (2 downto 0);
        wsp2_offset : IN STD_LOGIC_VECTOR (4 downto 0);
        wsp2_offset3 : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component MPSQ_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_mul_33s_64s_64_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MPSQ_solveComplmentaryPatch_current_z_i_index IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component MPSQ_solveComplmentaryPatch_new_z_i_index IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component MPSQ_solveComplmentaryPatch_new_z_i_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    current_z_i_index_U : component MPSQ_solveComplmentaryPatch_current_z_i_index
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => current_z_i_index_address0,
        ce0 => current_z_i_index_ce0,
        we0 => current_z_i_index_we0,
        d0 => grp_get_index_from_z_fu_690_ap_return,
        q0 => current_z_i_index_q0);

    new_z_i_index_U : component MPSQ_solveComplmentaryPatch_new_z_i_index
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => new_z_i_index_address0,
        ce0 => new_z_i_index_ce0,
        we0 => new_z_i_index_we0,
        d0 => new_z_i_index_d0,
        address1 => new_z_i_index_address1,
        ce1 => new_z_i_index_ce1,
        q1 => new_z_i_index_q1);

    new_z_i_V_U : component MPSQ_solveComplmentaryPatch_new_z_i_V
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => new_z_i_V_address0,
        ce0 => new_z_i_V_ce0,
        we0 => new_z_i_V_we0,
        d0 => reg_735,
        q0 => new_z_i_V_q0);

    grp_makePatch_alignedToLine_fu_642 : component MPSQ_makePatch_alignedToLine
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_makePatch_alignedToLine_fu_642_ap_start,
        ap_done => grp_makePatch_alignedToLine_fu_642_ap_done,
        ap_idle => grp_makePatch_alignedToLine_fu_642_ap_idle,
        ap_ready => grp_makePatch_alignedToLine_fu_642_ap_ready,
        n_patches_i => n_patches_i,
        n_patches_o => grp_makePatch_alignedToLine_fu_642_n_patches_o,
        n_patches_o_ap_vld => grp_makePatch_alignedToLine_fu_642_n_patches_o_ap_vld,
        GDn_points_address0 => grp_makePatch_alignedToLine_fu_642_GDn_points_address0,
        GDn_points_ce0 => grp_makePatch_alignedToLine_fu_642_GDn_points_ce0,
        GDn_points_q0 => GDn_points_q0,
        apexZ0 => complementary_apexZ0,
        z_top => grp_makePatch_alignedToLine_fu_642_z_top,
        p_read => grp_makePatch_alignedToLine_fu_642_p_read,
        leftRight => ap_const_lv1_1,
        GDarrayDecoded_address0 => grp_makePatch_alignedToLine_fu_642_GDarrayDecoded_address0,
        GDarrayDecoded_ce0 => grp_makePatch_alignedToLine_fu_642_GDarrayDecoded_ce0,
        GDarrayDecoded_q0 => GDarrayDecoded_q0,
        patches_superpoints_address0 => grp_makePatch_alignedToLine_fu_642_patches_superpoints_address0,
        patches_superpoints_ce0 => grp_makePatch_alignedToLine_fu_642_patches_superpoints_ce0,
        patches_superpoints_we0 => grp_makePatch_alignedToLine_fu_642_patches_superpoints_we0,
        patches_superpoints_d0 => grp_makePatch_alignedToLine_fu_642_patches_superpoints_d0,
        patches_superpoints_q0 => patches_superpoints_q0,
        patches_parameters_address0 => grp_makePatch_alignedToLine_fu_642_patches_parameters_address0,
        patches_parameters_ce0 => grp_makePatch_alignedToLine_fu_642_patches_parameters_ce0,
        patches_parameters_we0 => grp_makePatch_alignedToLine_fu_642_patches_parameters_we0,
        patches_parameters_d0 => grp_makePatch_alignedToLine_fu_642_patches_parameters_d0,
        patches_parameters_q0 => patches_parameters_q0,
        ap_return => grp_makePatch_alignedToLine_fu_642_ap_return);

    grp_delete_patch_fu_678 : component MPSQ_delete_patch
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_delete_patch_fu_678_ap_start,
        ap_done => grp_delete_patch_fu_678_ap_done,
        ap_idle => grp_delete_patch_fu_678_ap_idle,
        ap_ready => grp_delete_patch_fu_678_ap_ready,
        n_patches => grp_delete_patch_fu_678_n_patches,
        n_patches_ap_vld => grp_delete_patch_fu_678_n_patches_ap_vld,
        n_patches_read => reg_740,
        index => grp_delete_patch_fu_678_index,
        patches_superpoints_address0 => grp_delete_patch_fu_678_patches_superpoints_address0,
        patches_superpoints_ce0 => grp_delete_patch_fu_678_patches_superpoints_ce0,
        patches_superpoints_we0 => grp_delete_patch_fu_678_patches_superpoints_we0,
        patches_superpoints_d0 => grp_delete_patch_fu_678_patches_superpoints_d0,
        patches_superpoints_address1 => grp_delete_patch_fu_678_patches_superpoints_address1,
        patches_superpoints_ce1 => grp_delete_patch_fu_678_patches_superpoints_ce1,
        patches_superpoints_q1 => patches_superpoints_q1,
        patches_parameters_address0 => grp_delete_patch_fu_678_patches_parameters_address0,
        patches_parameters_ce0 => grp_delete_patch_fu_678_patches_parameters_ce0,
        patches_parameters_we0 => grp_delete_patch_fu_678_patches_parameters_we0,
        patches_parameters_d0 => grp_delete_patch_fu_678_patches_parameters_d0,
        patches_parameters_address1 => grp_delete_patch_fu_678_patches_parameters_address1,
        patches_parameters_ce1 => grp_delete_patch_fu_678_patches_parameters_ce1,
        patches_parameters_q1 => patches_parameters_q1);

    grp_get_index_from_z_fu_690 : component MPSQ_get_index_from_z
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_get_index_from_z_fu_690_ap_start,
        ap_done => grp_get_index_from_z_fu_690_ap_done,
        ap_idle => grp_get_index_from_z_fu_690_ap_idle,
        ap_ready => grp_get_index_from_z_fu_690_ap_ready,
        GDn_points_address0 => grp_get_index_from_z_fu_690_GDn_points_address0,
        GDn_points_ce0 => grp_get_index_from_z_fu_690_GDn_points_ce0,
        GDn_points_q0 => GDn_points_q0,
        layer => grp_get_index_from_z_fu_690_layer,
        z_value => grp_get_index_from_z_fu_690_z_value,
        GDarrayDecoded_address0 => grp_get_index_from_z_fu_690_GDarrayDecoded_address0,
        GDarrayDecoded_ce0 => grp_get_index_from_z_fu_690_GDarrayDecoded_ce0,
        GDarrayDecoded_q0 => GDarrayDecoded_q0,
        ap_return => grp_get_index_from_z_fu_690_ap_return);

    grp_areWedgeSuperPointsEqual_fu_704 : component MPSQ_areWedgeSuperPointsEqual
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_areWedgeSuperPointsEqual_fu_704_ap_start,
        ap_done => grp_areWedgeSuperPointsEqual_fu_704_ap_done,
        ap_idle => grp_areWedgeSuperPointsEqual_fu_704_ap_idle,
        ap_ready => grp_areWedgeSuperPointsEqual_fu_704_ap_ready,
        wsp2_address0 => grp_areWedgeSuperPointsEqual_fu_704_wsp2_address0,
        wsp2_ce0 => grp_areWedgeSuperPointsEqual_fu_704_wsp2_ce0,
        wsp2_q0 => patches_superpoints_q0,
        wsp2_address1 => grp_areWedgeSuperPointsEqual_fu_704_wsp2_address1,
        wsp2_ce1 => grp_areWedgeSuperPointsEqual_fu_704_wsp2_ce1,
        wsp2_q1 => patches_superpoints_q1,
        wsp1_offset => lastPatchIdx_cast_reg_2007,
        wsp1_offset1 => i_8_reg_608,
        wsp2_offset => thirdLastPatchIdx_reg_2002,
        wsp2_offset3 => i_8_reg_608,
        ap_return => grp_areWedgeSuperPointsEqual_fu_704_ap_return);

    mux_42_32_1_1_U89 : component MPSQ_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => new_z_i_atTop_V_3_1_fu_194,
        din1 => new_z_i_atTop_V_3_2_fu_198,
        din2 => new_z_i_atTop_V_3_3_fu_202,
        din3 => new_z_i_atTop_V_3_4_fu_206,
        din4 => tmp_3_fu_1048_p5,
        dout => tmp_3_fu_1048_p6);

    mux_42_32_1_1_U90 : component MPSQ_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => new_z_i_atTop_V_3_1_fu_194,
        din1 => new_z_i_atTop_V_3_2_fu_198,
        din2 => new_z_i_atTop_V_3_3_fu_202,
        din3 => new_z_i_atTop_V_3_4_fu_206,
        din4 => trunc_ln1282_reg_1850,
        dout => lhs_fu_1141_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state51) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln870_fu_766_p2 = ap_const_lv1_1) and (icmp_ln1198_fu_760_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state51))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state51);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln870_fu_766_p2 = ap_const_lv1_1) and (icmp_ln1198_fu_760_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state54) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((tmp_2_fu_792_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state54))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state54);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((tmp_2_fu_792_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state57) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((tmp_2_fu_792_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state57))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state57);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((tmp_2_fu_792_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state61) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state61)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state61);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state65) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state65)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state65);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                    ap_enable_reg_pp4_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state71))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state71)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state71);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter10 <= ap_enable_reg_pp5_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter11 <= ap_enable_reg_pp5_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter12 <= ap_enable_reg_pp5_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter13 <= ap_enable_reg_pp5_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter14 <= ap_enable_reg_pp5_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter15 <= ap_enable_reg_pp5_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter16 <= ap_enable_reg_pp5_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter17 <= ap_enable_reg_pp5_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter18 <= ap_enable_reg_pp5_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter19 <= ap_enable_reg_pp5_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter20 <= ap_enable_reg_pp5_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter21 <= ap_enable_reg_pp5_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter22 <= ap_enable_reg_pp5_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter23 <= ap_enable_reg_pp5_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter24 <= ap_enable_reg_pp5_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter25 <= ap_enable_reg_pp5_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter26 <= ap_enable_reg_pp5_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter27 <= ap_enable_reg_pp5_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter28 <= ap_enable_reg_pp5_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter29 <= ap_enable_reg_pp5_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter30 <= ap_enable_reg_pp5_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter31 <= ap_enable_reg_pp5_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter32 <= ap_enable_reg_pp5_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter33 <= ap_enable_reg_pp5_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter34 <= ap_enable_reg_pp5_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter35 <= ap_enable_reg_pp5_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter36 <= ap_enable_reg_pp5_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter37 <= ap_enable_reg_pp5_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter38 <= ap_enable_reg_pp5_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter39 <= ap_enable_reg_pp5_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter4 <= ap_enable_reg_pp5_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter40 <= ap_enable_reg_pp5_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter41 <= ap_enable_reg_pp5_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter42 <= ap_enable_reg_pp5_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter43 <= ap_enable_reg_pp5_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter44 <= ap_enable_reg_pp5_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter45 <= ap_enable_reg_pp5_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter46 <= ap_enable_reg_pp5_iter45;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                    ap_enable_reg_pp5_iter46 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter5 <= ap_enable_reg_pp5_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter6 <= ap_enable_reg_pp5_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter7 <= ap_enable_reg_pp5_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter8 <= ap_enable_reg_pp5_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter9 <= ap_enable_reg_pp5_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp6_flush_enable)) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
                    ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state154)) then 
                    ap_return_0_preg <= white_space_height_read;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state154)) then 
                    ap_return_1_preg <= current_z_top_index_0_reg_620;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state154)) then 
                    ap_return_2_preg <= counter_0_reg_510;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state154)) then 
                    ap_return_3_preg <= counterUpshift_0_reg_520;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state154)) then 
                    ap_return_4_preg <= z_top_min_read;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state154)) then 
                    ap_return_5_preg <= sext_ln534_1_reg_1988;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state154)) then 
                    ap_return_6_preg <= z_top_min_4_reg_631;
                end if; 
            end if;
        end if;
    end process;


    grp_areWedgeSuperPointsEqual_fu_704_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_areWedgeSuperPointsEqual_fu_704_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln1390_fu_1429_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state141) and (ap_const_logic_1 = ap_NS_fsm_state142))) then 
                    grp_areWedgeSuperPointsEqual_fu_704_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_areWedgeSuperPointsEqual_fu_704_ap_ready = ap_const_logic_1)) then 
                    grp_areWedgeSuperPointsEqual_fu_704_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_delete_patch_fu_678_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_delete_patch_fu_678_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state148) or ((icmp_ln1327_reg_1955 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state134)))) then 
                    grp_delete_patch_fu_678_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_delete_patch_fu_678_ap_ready = ap_const_logic_1)) then 
                    grp_delete_patch_fu_678_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_get_index_from_z_fu_690_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_get_index_from_z_fu_690_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state49) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                    grp_get_index_from_z_fu_690_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_get_index_from_z_fu_690_ap_ready = ap_const_logic_1)) then 
                    grp_get_index_from_z_fu_690_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_makePatch_alignedToLine_fu_642_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_makePatch_alignedToLine_fu_642_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state150) or (ap_const_logic_1 = ap_CS_fsm_state136))) then 
                    grp_makePatch_alignedToLine_fu_642_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_makePatch_alignedToLine_fu_642_ap_ready = ap_const_logic_1)) then 
                    grp_makePatch_alignedToLine_fu_642_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    counterUpshift_0_reg_520_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                if ((tmp_2_reg_1608 = ap_const_lv1_1)) then 
                    counterUpshift_0_reg_520 <= p_read13;
                elsif ((tmp_2_reg_1608 = ap_const_lv1_0)) then 
                    counterUpshift_0_reg_520 <= add_ln1227_reg_1612;
                end if;
            end if; 
        end if;
    end process;

    counter_0_reg_510_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                if ((tmp_2_reg_1608 = ap_const_lv1_1)) then 
                    counter_0_reg_510 <= add_ln1217_reg_1622;
                elsif ((tmp_2_reg_1608 = ap_const_lv1_0)) then 
                    counter_0_reg_510 <= p_read12;
                end if;
            end if; 
        end if;
    end process;

    current_z_top_index_0_reg_620_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state147) or ((icmp_ln1380_fu_1407_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state140)))) then 
                current_z_top_index_0_reg_620 <= select_ln1236_reg_1680;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state153)) then 
                current_z_top_index_0_reg_620 <= add_ln1410_fu_1441_p2;
            end if; 
        end if;
    end process;

    empty_60_reg_479_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln870_reg_1575 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                empty_60_reg_479 <= add_ln1205_reg_1579;
            elsif (((icmp_ln870_fu_766_p2 = ap_const_lv1_0) and (icmp_ln1198_fu_760_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                empty_60_reg_479 <= zext_ln1194_reg_1554;
            end if; 
        end if;
    end process;

    empty_63_reg_530_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                if ((tmp_2_reg_1608 = ap_const_lv1_1)) then 
                    empty_63_reg_530 <= sext_ln1220_reg_1627;
                elsif ((tmp_2_reg_1608 = ap_const_lv1_0)) then 
                    empty_63_reg_530 <= zext_ln1230_reg_1617;
                end if;
            end if; 
        end if;
    end process;

    i_1_reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln870_fu_766_p2 = ap_const_lv1_1) and (icmp_ln1198_fu_760_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_1_reg_468 <= ap_const_lv3_0;
            elsif (((icmp_ln1207_fu_781_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_1_reg_468 <= add_ln1207_fu_775_p2;
            end if; 
        end if;
    end process;

    i_2_reg_499_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_792_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                i_2_reg_499 <= ap_const_lv3_0;
            elsif (((icmp_ln1220_fu_852_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_2_reg_499 <= add_ln1220_fu_846_p2;
            end if; 
        end if;
    end process;

    i_3_reg_488_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_792_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                i_3_reg_488 <= ap_const_lv3_0;
            elsif (((icmp_ln1230_fu_835_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_3_reg_488 <= add_ln1230_fu_829_p2;
            end if; 
        end if;
    end process;

    i_4_reg_540_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1239_fu_899_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                i_4_reg_540 <= add_ln1239_fu_893_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                i_4_reg_540 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_5_reg_551_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                i_5_reg_551 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln1252_reg_1729 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                i_5_reg_551 <= add_ln1252_reg_1724;
            end if; 
        end if;
    end process;

    i_6_reg_563_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                i_6_reg_563 <= ap_const_lv3_1;
            elsif (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln1260_reg_1783 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                i_6_reg_563 <= add_ln1265_reg_1787;
            end if; 
        end if;
    end process;

    i_7_reg_574_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1273_fu_1038_p2 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
                i_7_reg_574 <= add_ln1273_fu_1032_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
                i_7_reg_574 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_8_reg_608_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1390_reg_2012 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state146) and (grp_areWedgeSuperPointsEqual_fu_704_ap_return = ap_const_lv1_1))) then 
                i_8_reg_608 <= add_ln1390_reg_2016;
            elsif (((icmp_ln1380_fu_1407_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state140))) then 
                i_8_reg_608 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_get_index_from_z_fu_690_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                    i_reg_456 <= add_ln1200_reg_1560;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    i_reg_456 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    layerSMin_reg_585_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (icmp_ln1273_reg_1821_pp6_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then 
                layerSMin_reg_585 <= layerSMin_1_fu_1112_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
                layerSMin_reg_585 <= ap_const_lv64_7FFFFFFFFFFFFFFF;
            end if; 
        end if;
    end process;

    layerWithSmallestShift_reg_596_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (icmp_ln1273_reg_1821_pp6_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then 
                layerWithSmallestShift_reg_596 <= layerWithSmallestShift_1_fu_1104_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
                layerWithSmallestShift_reg_596 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    z_top_min_4_reg_631_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state147) or ((icmp_ln1380_fu_1407_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state140)))) then 
                z_top_min_4_reg_631 <= select_ln1310_reg_1959;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state153)) then 
                z_top_min_4_reg_631 <= lhs_reg_1866;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                GDn_points_load_reg_1675 <= GDn_points_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln1200_reg_1560 <= add_ln1200_fu_749_p2;
                    zext_ln1198_reg_1566(2 downto 0) <= zext_ln1198_fu_756_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln870_fu_766_p2 = ap_const_lv1_1) and (icmp_ln1198_fu_760_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln1205_reg_1579 <= add_ln1205_fu_770_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_792_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                add_ln1217_reg_1622 <= add_ln1217_fu_814_p2;
                sext_ln1220_reg_1627 <= sext_ln1220_fu_825_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_792_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                add_ln1227_reg_1612 <= add_ln1227_fu_799_p2;
                    zext_ln1230_reg_1617(8 downto 0) <= zext_ln1230_fu_810_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1239_reg_1693 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                add_ln1241_reg_1719 <= add_ln1241_fu_915_p2;
                trunc_ln1241_reg_1714 <= trunc_ln1241_fu_911_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                add_ln1252_reg_1724 <= add_ln1252_fu_942_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln1260_fu_983_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                add_ln1265_reg_1787 <= add_ln1265_fu_989_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state122)) then
                    add_ln1297_reg_1861(11 downto 1) <= add_ln1297_fu_1135_p2(11 downto 1);
                    tmp_5_cast_reg_1855(11 downto 1) <= tmp_5_cast_fu_1127_p3(11 downto 1);
                trunc_ln1282_reg_1850 <= trunc_ln1282_fu_1120_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state123)) then
                    add_ln1302_reg_1885(11 downto 1) <= add_ln1302_fu_1167_p2(11 downto 1);
                    add_ln1307_reg_1890(11 downto 1) <= add_ln1307_fu_1172_p2(11 downto 1);
                lhs_reg_1866 <= lhs_fu_1141_p6;
                ret_2_reg_1873 <= ret_2_fu_1158_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state141)) then
                add_ln1390_reg_2016 <= add_ln1390_fu_1435_p2;
                icmp_ln1390_reg_2012 <= icmp_ln1390_fu_1429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                agg_tmp7_reg_1584 <= grp_straightLineProjectorFromLayerIJtoK_fu_531_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1207_fu_781_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    i_1_cast_reg_1598(2 downto 0) <= i_1_cast_fu_787_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1220_fu_852_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                    i_2_cast_reg_1665(2 downto 0) <= i_2_cast_fu_858_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1230_fu_835_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    i_3_cast_reg_1641(2 downto 0) <= i_3_cast_fu_841_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1252_fu_948_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                    i_5_cast_reg_1733(2 downto 0) <= i_5_cast_fu_954_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                    i_5_cast_reg_1733_pp4_iter1_reg(2 downto 0) <= i_5_cast_reg_1733(2 downto 0);
                icmp_ln1252_reg_1729 <= icmp_ln1252_fu_948_p2;
                icmp_ln1252_reg_1729_pp4_iter1_reg <= icmp_ln1252_reg_1729;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp4_stage0_11001)) then
                    i_5_cast_reg_1733_pp4_iter2_reg(2 downto 0) <= i_5_cast_reg_1733_pp4_iter1_reg(2 downto 0);
                    i_5_cast_reg_1733_pp4_iter3_reg(2 downto 0) <= i_5_cast_reg_1733_pp4_iter2_reg(2 downto 0);
                icmp_ln1252_reg_1729_pp4_iter2_reg <= icmp_ln1252_reg_1729_pp4_iter1_reg;
                icmp_ln1252_reg_1729_pp4_iter3_reg <= icmp_ln1252_reg_1729_pp4_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1207_reg_1594 <= icmp_ln1207_fu_781_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln1220_reg_1661 <= icmp_ln1220_fu_852_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln1230_reg_1637 <= icmp_ln1230_fu_835_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln1239_reg_1693 <= icmp_ln1239_fu_899_p2;
                icmp_ln1239_reg_1693_pp3_iter1_reg <= icmp_ln1239_reg_1693;
                new_z_i_index_addr_3_reg_1697_pp3_iter1_reg <= new_z_i_index_addr_3_reg_1697;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                icmp_ln1260_reg_1783 <= icmp_ln1260_fu_983_p2;
                trunc_ln1262_reg_1798_pp5_iter1_reg <= trunc_ln1262_reg_1798;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                icmp_ln1273_reg_1821 <= icmp_ln1273_fu_1038_p2;
                icmp_ln1273_reg_1821_pp6_iter1_reg <= icmp_ln1273_reg_1821;
                trunc_ln534_reg_1825_pp6_iter1_reg <= trunc_ln534_reg_1825;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state133)) then
                icmp_ln1327_reg_1955 <= icmp_ln1327_fu_1322_p2;
                tmp_8_reg_1950 <= grp_fu_1144_p_dout0(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1198_fu_760_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                icmp_ln870_reg_1575 <= icmp_ln870_fu_766_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1380_fu_1407_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state140))) then
                lastPatchIdx_cast_reg_2007 <= lastPatchIdx_cast_fu_1423_p2;
                thirdLastPatchIdx_reg_2002 <= thirdLastPatchIdx_fu_1417_p2;
                    zext_ln1383_reg_1997(7 downto 0) <= zext_ln1383_fu_1413_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state124)) then
                lhs_2_reg_1900 <= lhs_2_fu_1206_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state126)) then
                lhs_3_reg_1922 <= lhs_3_fu_1250_p3;
                ret_4_reg_1927 <= ret_4_fu_1261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state127)) then
                lhs_4_reg_1934 <= lhs_4_fu_1291_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln1262_reg_1798_pp5_iter45_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter46 = ap_const_logic_1))) then
                new_z_i_atTop_V_3_1_fu_194 <= grp_straightLineProjectorFromLayerIJtoK_fu_531_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln1262_reg_1798_pp5_iter45_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter46 = ap_const_logic_1))) then
                new_z_i_atTop_V_3_2_fu_198 <= grp_straightLineProjectorFromLayerIJtoK_fu_531_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln1262_reg_1798_pp5_iter45_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter46 = ap_const_logic_1))) then
                new_z_i_atTop_V_3_3_fu_202 <= grp_straightLineProjectorFromLayerIJtoK_fu_531_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln1262_reg_1798_pp5_iter45_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter46 = ap_const_logic_1))) then
                new_z_i_atTop_V_3_4_fu_206 <= grp_straightLineProjectorFromLayerIJtoK_fu_531_p_dout0;
                new_z_i_atTop_V_3_fu_190 <= grp_straightLineProjectorFromLayerIJtoK_fu_531_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1239_fu_899_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                new_z_i_index_addr_3_reg_1697 <= i_4_cast_fu_905_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln1239_reg_1693 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                new_z_i_index_load_reg_1708 <= new_z_i_index_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state137)) then
                ppl_assign2_reg_1971 <= grp_makePatch_alignedToLine_fu_642_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state125) or ((icmp_ln1252_reg_1729_pp4_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter3 = ap_const_logic_1)))) then
                reg_735 <= GDarrayDecoded_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state140) or (ap_const_logic_1 = ap_CS_fsm_state133))) then
                reg_740 <= n_patches_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state125)) then
                ret_3_reg_1906 <= ret_3_fu_1216_p2;
                sub_ln180_2_reg_1912 <= sub_ln180_2_fu_1221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state139)) then
                ret_5_reg_1976 <= ret_5_fu_1354_p2;
                ret_6_reg_1982 <= ret_6_fu_1367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state128)) then
                ret_reg_1940 <= ret_fu_1301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                select_ln1236_reg_1680 <= select_ln1236_fu_885_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state134)) then
                select_ln1310_reg_1959 <= select_ln1310_fu_1330_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1273_reg_1821 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                select_ln180_1_reg_1835 <= select_ln180_1_fu_1084_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state118)) then
                sext_ln1273_reg_1807 <= sext_ln1273_fu_1029_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state140)) then
                sext_ln534_1_reg_1988 <= sext_ln534_1_fu_1393_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                tmp_2_reg_1608 <= tmp_2_fu_792_p1(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1273_fu_1038_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                tmp_3_reg_1830 <= tmp_3_fu_1048_p6;
                trunc_ln534_reg_1825 <= trunc_ln534_fu_1044_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1252_reg_1729 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                    tmp_reg_1743(11 downto 1) <= tmp_fu_959_p4(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1260_fu_983_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                trunc_ln1262_reg_1798 <= trunc_ln1262_fu_1000_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp5_stage0_11001)) then
                trunc_ln1262_reg_1798_pp5_iter10_reg <= trunc_ln1262_reg_1798_pp5_iter9_reg;
                trunc_ln1262_reg_1798_pp5_iter11_reg <= trunc_ln1262_reg_1798_pp5_iter10_reg;
                trunc_ln1262_reg_1798_pp5_iter12_reg <= trunc_ln1262_reg_1798_pp5_iter11_reg;
                trunc_ln1262_reg_1798_pp5_iter13_reg <= trunc_ln1262_reg_1798_pp5_iter12_reg;
                trunc_ln1262_reg_1798_pp5_iter14_reg <= trunc_ln1262_reg_1798_pp5_iter13_reg;
                trunc_ln1262_reg_1798_pp5_iter15_reg <= trunc_ln1262_reg_1798_pp5_iter14_reg;
                trunc_ln1262_reg_1798_pp5_iter16_reg <= trunc_ln1262_reg_1798_pp5_iter15_reg;
                trunc_ln1262_reg_1798_pp5_iter17_reg <= trunc_ln1262_reg_1798_pp5_iter16_reg;
                trunc_ln1262_reg_1798_pp5_iter18_reg <= trunc_ln1262_reg_1798_pp5_iter17_reg;
                trunc_ln1262_reg_1798_pp5_iter19_reg <= trunc_ln1262_reg_1798_pp5_iter18_reg;
                trunc_ln1262_reg_1798_pp5_iter20_reg <= trunc_ln1262_reg_1798_pp5_iter19_reg;
                trunc_ln1262_reg_1798_pp5_iter21_reg <= trunc_ln1262_reg_1798_pp5_iter20_reg;
                trunc_ln1262_reg_1798_pp5_iter22_reg <= trunc_ln1262_reg_1798_pp5_iter21_reg;
                trunc_ln1262_reg_1798_pp5_iter23_reg <= trunc_ln1262_reg_1798_pp5_iter22_reg;
                trunc_ln1262_reg_1798_pp5_iter24_reg <= trunc_ln1262_reg_1798_pp5_iter23_reg;
                trunc_ln1262_reg_1798_pp5_iter25_reg <= trunc_ln1262_reg_1798_pp5_iter24_reg;
                trunc_ln1262_reg_1798_pp5_iter26_reg <= trunc_ln1262_reg_1798_pp5_iter25_reg;
                trunc_ln1262_reg_1798_pp5_iter27_reg <= trunc_ln1262_reg_1798_pp5_iter26_reg;
                trunc_ln1262_reg_1798_pp5_iter28_reg <= trunc_ln1262_reg_1798_pp5_iter27_reg;
                trunc_ln1262_reg_1798_pp5_iter29_reg <= trunc_ln1262_reg_1798_pp5_iter28_reg;
                trunc_ln1262_reg_1798_pp5_iter2_reg <= trunc_ln1262_reg_1798_pp5_iter1_reg;
                trunc_ln1262_reg_1798_pp5_iter30_reg <= trunc_ln1262_reg_1798_pp5_iter29_reg;
                trunc_ln1262_reg_1798_pp5_iter31_reg <= trunc_ln1262_reg_1798_pp5_iter30_reg;
                trunc_ln1262_reg_1798_pp5_iter32_reg <= trunc_ln1262_reg_1798_pp5_iter31_reg;
                trunc_ln1262_reg_1798_pp5_iter33_reg <= trunc_ln1262_reg_1798_pp5_iter32_reg;
                trunc_ln1262_reg_1798_pp5_iter34_reg <= trunc_ln1262_reg_1798_pp5_iter33_reg;
                trunc_ln1262_reg_1798_pp5_iter35_reg <= trunc_ln1262_reg_1798_pp5_iter34_reg;
                trunc_ln1262_reg_1798_pp5_iter36_reg <= trunc_ln1262_reg_1798_pp5_iter35_reg;
                trunc_ln1262_reg_1798_pp5_iter37_reg <= trunc_ln1262_reg_1798_pp5_iter36_reg;
                trunc_ln1262_reg_1798_pp5_iter38_reg <= trunc_ln1262_reg_1798_pp5_iter37_reg;
                trunc_ln1262_reg_1798_pp5_iter39_reg <= trunc_ln1262_reg_1798_pp5_iter38_reg;
                trunc_ln1262_reg_1798_pp5_iter3_reg <= trunc_ln1262_reg_1798_pp5_iter2_reg;
                trunc_ln1262_reg_1798_pp5_iter40_reg <= trunc_ln1262_reg_1798_pp5_iter39_reg;
                trunc_ln1262_reg_1798_pp5_iter41_reg <= trunc_ln1262_reg_1798_pp5_iter40_reg;
                trunc_ln1262_reg_1798_pp5_iter42_reg <= trunc_ln1262_reg_1798_pp5_iter41_reg;
                trunc_ln1262_reg_1798_pp5_iter43_reg <= trunc_ln1262_reg_1798_pp5_iter42_reg;
                trunc_ln1262_reg_1798_pp5_iter44_reg <= trunc_ln1262_reg_1798_pp5_iter43_reg;
                trunc_ln1262_reg_1798_pp5_iter45_reg <= trunc_ln1262_reg_1798_pp5_iter44_reg;
                trunc_ln1262_reg_1798_pp5_iter4_reg <= trunc_ln1262_reg_1798_pp5_iter3_reg;
                trunc_ln1262_reg_1798_pp5_iter5_reg <= trunc_ln1262_reg_1798_pp5_iter4_reg;
                trunc_ln1262_reg_1798_pp5_iter6_reg <= trunc_ln1262_reg_1798_pp5_iter5_reg;
                trunc_ln1262_reg_1798_pp5_iter7_reg <= trunc_ln1262_reg_1798_pp5_iter6_reg;
                trunc_ln1262_reg_1798_pp5_iter8_reg <= trunc_ln1262_reg_1798_pp5_iter7_reg;
                trunc_ln1262_reg_1798_pp5_iter9_reg <= trunc_ln1262_reg_1798_pp5_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    zext_ln1194_reg_1554(7 downto 0) <= zext_ln1194_fu_745_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1327_reg_1955 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state134))) then
                    zext_ln1346_reg_1966(7 downto 0) <= zext_ln1346_fu_1342_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln1194_reg_1554(8) <= '0';
    zext_ln1198_reg_1566(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_1_cast_reg_1598(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln1230_reg_1617(9) <= '0';
    i_3_cast_reg_1641(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_1665(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_5_cast_reg_1733(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_5_cast_reg_1733_pp4_iter1_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_5_cast_reg_1733_pp4_iter2_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_5_cast_reg_1733_pp4_iter3_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    tmp_reg_1743(0) <= '0';
    tmp_5_cast_reg_1855(0) <= '0';
    add_ln1297_reg_1861(0) <= '1';
    add_ln1302_reg_1885(0) <= '1';
    add_ln1307_reg_1890(0) <= '1';
    zext_ln1346_reg_1966(8) <= '0';
    zext_ln1383_reg_1997(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp4_iter3, ap_CS_fsm_state140, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln1198_fu_760_p2, icmp_ln870_fu_766_p2, ap_enable_reg_pp0_iter0, icmp_ln1207_fu_781_p2, tmp_2_fu_792_p3, ap_CS_fsm_state53, ap_enable_reg_pp1_iter0, icmp_ln1230_fu_835_p2, ap_enable_reg_pp2_iter0, icmp_ln1220_fu_852_p2, ap_enable_reg_pp3_iter0, icmp_ln1239_fu_899_p2, ap_enable_reg_pp3_iter1, ap_enable_reg_pp4_iter0, icmp_ln1252_fu_948_p2, icmp_ln1260_fu_983_p2, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1, ap_enable_reg_pp6_iter2, ap_CS_fsm_state137, icmp_ln1380_fu_1407_p2, icmp_ln1390_reg_2012, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter2, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter4, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter45, ap_enable_reg_pp5_iter46, ap_block_pp6_stage0_subdone, ap_enable_reg_pp6_iter1, grp_makePatch_alignedToLine_fu_642_ap_done, grp_delete_patch_fu_678_ap_done, grp_get_index_from_z_fu_690_ap_done, grp_areWedgeSuperPointsEqual_fu_704_ap_return, ap_CS_fsm_state50, ap_CS_fsm_state146, ap_CS_fsm_state151, ap_CS_fsm_state135, ap_CS_fsm_state149, ap_block_state135_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_get_index_from_z_fu_690_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln870_fu_766_p2 = ap_const_lv1_1) and (icmp_ln1198_fu_760_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln870_fu_766_p2 = ap_const_lv1_0) and (icmp_ln1198_fu_760_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state50) and (grp_get_index_from_z_fu_690_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln1207_fu_781_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln1207_fu_781_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state53 => 
                if (((tmp_2_fu_792_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln1230_fu_835_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln1230_fu_835_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((icmp_ln1220_fu_852_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln1220_fu_852_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln1239_fu_899_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln1239_fu_899_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (icmp_ln1252_fu_948_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) and not(((ap_enable_reg_pp4_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter3 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (icmp_ln1252_fu_948_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) or ((ap_enable_reg_pp4_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter3 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln1260_fu_983_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) and not(((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter46 = ap_const_logic_1) and (ap_enable_reg_pp5_iter45 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln1260_fu_983_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter46 = ap_const_logic_1) and (ap_enable_reg_pp5_iter45 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state118;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
            when ap_ST_fsm_pp6_stage0 => 
                if (not(((ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif (((ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state122;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                if (((ap_const_boolean_0 = ap_block_state135_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state135))) then
                    ap_NS_fsm <= ap_ST_fsm_state136;
                else
                    ap_NS_fsm <= ap_ST_fsm_state135;
                end if;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state137) and (grp_makePatch_alignedToLine_fu_642_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state138;
                else
                    ap_NS_fsm <= ap_ST_fsm_state137;
                end if;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state139;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                if (((icmp_ln1380_fu_1407_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state140))) then
                    ap_NS_fsm <= ap_ST_fsm_state141;
                else
                    ap_NS_fsm <= ap_ST_fsm_state154;
                end if;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state143;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state144;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_state145;
            when ap_ST_fsm_state145 => 
                ap_NS_fsm <= ap_ST_fsm_state146;
            when ap_ST_fsm_state146 => 
                if (((icmp_ln1390_reg_2012 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state146) and (grp_areWedgeSuperPointsEqual_fu_704_ap_return = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state141;
                elsif (((icmp_ln1390_reg_2012 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state146))) then
                    ap_NS_fsm <= ap_ST_fsm_state148;
                else
                    ap_NS_fsm <= ap_ST_fsm_state147;
                end if;
            when ap_ST_fsm_state147 => 
                ap_NS_fsm <= ap_ST_fsm_state154;
            when ap_ST_fsm_state148 => 
                ap_NS_fsm <= ap_ST_fsm_state149;
            when ap_ST_fsm_state149 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state149) and (grp_delete_patch_fu_678_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state150;
                else
                    ap_NS_fsm <= ap_ST_fsm_state149;
                end if;
            when ap_ST_fsm_state150 => 
                ap_NS_fsm <= ap_ST_fsm_state151;
            when ap_ST_fsm_state151 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state151) and (grp_makePatch_alignedToLine_fu_642_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state152;
                else
                    ap_NS_fsm <= ap_ST_fsm_state151;
                end if;
            when ap_ST_fsm_state152 => 
                ap_NS_fsm <= ap_ST_fsm_state153;
            when ap_ST_fsm_state153 => 
                ap_NS_fsm <= ap_ST_fsm_state154;
            when ap_ST_fsm_state154 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    GDarrayDecoded_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state126, ap_CS_fsm_state137, ap_enable_reg_pp4_iter2, grp_makePatch_alignedToLine_fu_642_GDarrayDecoded_address0, grp_get_index_from_z_fu_690_GDarrayDecoded_address0, ap_CS_fsm_state50, ap_block_pp4_stage0, ap_CS_fsm_state151, tmp_4_fu_974_p3, zext_ln1297_fu_1163_p1, zext_ln1302_fu_1202_p1, zext_ln1307_fu_1227_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state126)) then 
            GDarrayDecoded_address0 <= zext_ln1307_fu_1227_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state124)) then 
            GDarrayDecoded_address0 <= zext_ln1302_fu_1202_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            GDarrayDecoded_address0 <= zext_ln1297_fu_1163_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            GDarrayDecoded_address0 <= tmp_4_fu_974_p3(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            GDarrayDecoded_address0 <= grp_get_index_from_z_fu_690_GDarrayDecoded_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state151))) then 
            GDarrayDecoded_address0 <= grp_makePatch_alignedToLine_fu_642_GDarrayDecoded_address0;
        else 
            GDarrayDecoded_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    GDarrayDecoded_ce0_assign_proc : process(ap_block_pp4_stage0_11001, ap_CS_fsm_state2, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state126, ap_CS_fsm_state137, ap_enable_reg_pp4_iter2, grp_makePatch_alignedToLine_fu_642_GDarrayDecoded_ce0, grp_get_index_from_z_fu_690_GDarrayDecoded_ce0, ap_CS_fsm_state50, ap_CS_fsm_state151)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state123) or ((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)))) then 
            GDarrayDecoded_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            GDarrayDecoded_ce0 <= grp_get_index_from_z_fu_690_GDarrayDecoded_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state151))) then 
            GDarrayDecoded_ce0 <= grp_makePatch_alignedToLine_fu_642_GDarrayDecoded_ce0;
        else 
            GDarrayDecoded_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    GDn_points_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state56, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_state137, grp_makePatch_alignedToLine_fu_642_GDn_points_address0, grp_get_index_from_z_fu_690_GDn_points_address0, ap_CS_fsm_state50, ap_CS_fsm_state151, i_4_cast_fu_905_p1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            GDn_points_address0 <= i_4_cast_fu_905_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            GDn_points_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            GDn_points_address0 <= grp_get_index_from_z_fu_690_GDn_points_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state151))) then 
            GDn_points_address0 <= grp_makePatch_alignedToLine_fu_642_GDn_points_address0;
        else 
            GDn_points_address0 <= "XXX";
        end if; 
    end process;


    GDn_points_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state56, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001, ap_CS_fsm_state137, grp_makePatch_alignedToLine_fu_642_GDn_points_ce0, grp_get_index_from_z_fu_690_GDn_points_ce0, ap_CS_fsm_state50, ap_CS_fsm_state151)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            GDn_points_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            GDn_points_ce0 <= grp_get_index_from_z_fu_690_GDn_points_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state151))) then 
            GDn_points_ce0 <= grp_makePatch_alignedToLine_fu_642_GDn_points_ce0;
        else 
            GDn_points_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1200_fu_749_p2 <= std_logic_vector(unsigned(i_reg_456) + unsigned(ap_const_lv3_1));
    add_ln1205_fu_770_p2 <= std_logic_vector(unsigned(zext_ln1194_reg_1554) + unsigned(ap_const_lv9_1));
    add_ln1207_fu_775_p2 <= std_logic_vector(unsigned(i_1_reg_468) + unsigned(ap_const_lv3_1));
    add_ln1217_fu_814_p2 <= std_logic_vector(unsigned(p_read12) + unsigned(ap_const_lv32_1));
    add_ln1218_fu_819_p2 <= std_logic_vector(unsigned(ap_phi_mux_empty_60_phi_fu_482_p4) + unsigned(ap_const_lv9_1FF));
    add_ln1220_fu_846_p2 <= std_logic_vector(unsigned(i_2_reg_499) + unsigned(ap_const_lv3_1));
    add_ln1222_fu_863_p2 <= std_logic_vector(unsigned(current_z_i_index_q0) + unsigned(ap_const_lv8_FF));
    add_ln1227_fu_799_p2 <= std_logic_vector(unsigned(p_read13) + unsigned(ap_const_lv32_1));
    add_ln1228_fu_804_p2 <= std_logic_vector(unsigned(ap_phi_mux_empty_60_phi_fu_482_p4) + unsigned(ap_const_lv9_1));
    add_ln1230_fu_829_p2 <= std_logic_vector(unsigned(i_3_reg_488) + unsigned(ap_const_lv3_1));
    add_ln1236_fu_874_p2 <= std_logic_vector(unsigned(GDn_points_load_reg_1675) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln1239_fu_893_p2 <= std_logic_vector(unsigned(i_4_reg_540) + unsigned(ap_const_lv3_1));
    add_ln1241_1_fu_929_p2 <= std_logic_vector(unsigned(trunc_ln1241_reg_1714) + unsigned(ap_const_lv8_FF));
    add_ln1241_fu_915_p2 <= std_logic_vector(unsigned(GDn_points_q0) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln1252_fu_942_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_5_phi_fu_555_p4) + unsigned(ap_const_lv3_1));
    add_ln1265_fu_989_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_6_phi_fu_567_p4) + unsigned(ap_const_lv3_1));
    add_ln1273_fu_1032_p2 <= std_logic_vector(unsigned(i_7_reg_574) + unsigned(ap_const_lv3_1));
    add_ln1297_fu_1135_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_1127_p3) + unsigned(ap_const_lv12_801));
    add_ln1302_fu_1167_p2 <= std_logic_vector(unsigned(tmp_5_cast_reg_1855) + unsigned(ap_const_lv12_601));
    add_ln1307_fu_1172_p2 <= std_logic_vector(unsigned(tmp_5_cast_reg_1855) + unsigned(ap_const_lv12_401));
    add_ln1326_fu_1336_p2 <= std_logic_vector(unsigned(reg_740) + unsigned(ap_const_lv8_FF));
    add_ln1390_fu_1435_p2 <= std_logic_vector(unsigned(i_8_reg_608) + unsigned(ap_const_lv3_1));
    add_ln1410_fu_1441_p2 <= std_logic_vector(unsigned(select_ln1236_reg_1680) + unsigned(ap_const_lv32_FFFFFFFF));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(50);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(52);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(54);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(57);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(59);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(61);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(63);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state118 <= ap_CS_fsm(62);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state122 <= ap_CS_fsm(64);
    ap_CS_fsm_state123 <= ap_CS_fsm(65);
    ap_CS_fsm_state124 <= ap_CS_fsm(66);
    ap_CS_fsm_state125 <= ap_CS_fsm(67);
    ap_CS_fsm_state126 <= ap_CS_fsm(68);
    ap_CS_fsm_state127 <= ap_CS_fsm(69);
    ap_CS_fsm_state128 <= ap_CS_fsm(70);
    ap_CS_fsm_state129 <= ap_CS_fsm(71);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state133 <= ap_CS_fsm(75);
    ap_CS_fsm_state134 <= ap_CS_fsm(76);
    ap_CS_fsm_state135 <= ap_CS_fsm(77);
    ap_CS_fsm_state136 <= ap_CS_fsm(78);
    ap_CS_fsm_state137 <= ap_CS_fsm(79);
    ap_CS_fsm_state138 <= ap_CS_fsm(80);
    ap_CS_fsm_state139 <= ap_CS_fsm(81);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state140 <= ap_CS_fsm(82);
    ap_CS_fsm_state141 <= ap_CS_fsm(83);
    ap_CS_fsm_state142 <= ap_CS_fsm(84);
    ap_CS_fsm_state143 <= ap_CS_fsm(85);
    ap_CS_fsm_state144 <= ap_CS_fsm(86);
    ap_CS_fsm_state145 <= ap_CS_fsm(87);
    ap_CS_fsm_state146 <= ap_CS_fsm(88);
    ap_CS_fsm_state147 <= ap_CS_fsm(89);
    ap_CS_fsm_state148 <= ap_CS_fsm(90);
    ap_CS_fsm_state149 <= ap_CS_fsm(91);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state150 <= ap_CS_fsm(92);
    ap_CS_fsm_state151 <= ap_CS_fsm(93);
    ap_CS_fsm_state153 <= ap_CS_fsm(95);
    ap_CS_fsm_state154 <= ap_CS_fsm(96);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state53 <= ap_CS_fsm(51);
    ap_CS_fsm_state56 <= ap_CS_fsm(53);
    ap_CS_fsm_state59 <= ap_CS_fsm(55);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(56);
    ap_CS_fsm_state64 <= ap_CS_fsm(58);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(60);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state142 <= ap_NS_fsm(84);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001_ignoreCallOp369 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state100_pp5_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state100_pp5_stage0_iter29_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state101_pp5_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state101_pp5_stage0_iter30_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state102_pp5_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state102_pp5_stage0_iter31_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state103_pp5_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state103_pp5_stage0_iter32_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state104_pp5_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state104_pp5_stage0_iter33_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state105_pp5_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state105_pp5_stage0_iter34_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state106_pp5_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state106_pp5_stage0_iter35_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state107_pp5_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state107_pp5_stage0_iter36_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state108_pp5_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state108_pp5_stage0_iter37_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state109_pp5_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state109_pp5_stage0_iter38_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state110_pp5_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state110_pp5_stage0_iter39_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state111_pp5_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state111_pp5_stage0_iter40_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state112_pp5_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state112_pp5_stage0_iter41_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state113_pp5_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state113_pp5_stage0_iter42_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state114_pp5_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state114_pp5_stage0_iter43_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state115_pp5_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state115_pp5_stage0_iter44_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state116_pp5_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state116_pp5_stage0_iter45_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state117_pp5_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state117_pp5_stage0_iter46_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state119_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state120_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state121_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state135_on_subcall_done_assign_proc : process(icmp_ln1327_reg_1955, grp_delete_patch_fu_678_ap_done)
    begin
                ap_block_state135_on_subcall_done <= ((icmp_ln1327_reg_1955 = ap_const_lv1_1) and (grp_delete_patch_fu_678_ap_done = ap_const_logic_0));
    end process;

        ap_block_state51_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp4_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp4_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp5_stage0_iter0_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp5_stage0_iter1_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp5_stage0_iter2_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp5_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp5_stage0_iter3_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp5_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp5_stage0_iter4_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp5_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp5_stage0_iter5_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp5_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp5_stage0_iter6_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp5_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp5_stage0_iter7_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp5_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp5_stage0_iter8_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp5_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp5_stage0_iter9_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp5_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp5_stage0_iter10_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp5_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp5_stage0_iter11_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp5_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp5_stage0_iter12_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp5_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp5_stage0_iter13_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp5_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp5_stage0_iter14_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp5_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp5_stage0_iter15_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp5_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp5_stage0_iter16_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp5_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp5_stage0_iter17_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state89_pp5_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state89_pp5_stage0_iter18_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state90_pp5_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state90_pp5_stage0_iter19_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state91_pp5_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state91_pp5_stage0_iter20_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state92_pp5_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state92_pp5_stage0_iter21_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state93_pp5_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state93_pp5_stage0_iter22_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state94_pp5_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state94_pp5_stage0_iter23_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state95_pp5_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state95_pp5_stage0_iter24_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state96_pp5_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state96_pp5_stage0_iter25_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state97_pp5_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state97_pp5_stage0_iter26_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state98_pp5_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state98_pp5_stage0_iter27_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state99_pp5_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state99_pp5_stage0_iter28_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state51_assign_proc : process(icmp_ln1207_fu_781_p2)
    begin
        if ((icmp_ln1207_fu_781_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state51 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state51 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state54_assign_proc : process(icmp_ln1230_fu_835_p2)
    begin
        if ((icmp_ln1230_fu_835_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state54 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state54 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state57_assign_proc : process(icmp_ln1220_fu_852_p2)
    begin
        if ((icmp_ln1220_fu_852_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state57 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state57 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state61_assign_proc : process(icmp_ln1239_fu_899_p2)
    begin
        if ((icmp_ln1239_fu_899_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state61 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state61 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state65_assign_proc : process(icmp_ln1252_fu_948_p2)
    begin
        if ((icmp_ln1252_fu_948_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state65 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state65 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state71_assign_proc : process(icmp_ln1260_fu_983_p2)
    begin
        if ((icmp_ln1260_fu_983_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state71 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state71 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_flush_enable_assign_proc : process(ap_CS_fsm_pp6_stage0, icmp_ln1273_fu_1038_p2, ap_block_pp6_stage0_subdone)
    begin
        if (((icmp_ln1273_fu_1038_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            ap_condition_pp6_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp6_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state154)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state154) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter3, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter4)
    begin
        if (((ap_enable_reg_pp4_iter4 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter3 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2, ap_enable_reg_pp5_iter3, ap_enable_reg_pp5_iter4, ap_enable_reg_pp5_iter5, ap_enable_reg_pp5_iter6, ap_enable_reg_pp5_iter7, ap_enable_reg_pp5_iter8, ap_enable_reg_pp5_iter9, ap_enable_reg_pp5_iter10, ap_enable_reg_pp5_iter11, ap_enable_reg_pp5_iter12, ap_enable_reg_pp5_iter13, ap_enable_reg_pp5_iter14, ap_enable_reg_pp5_iter15, ap_enable_reg_pp5_iter16, ap_enable_reg_pp5_iter17, ap_enable_reg_pp5_iter18, ap_enable_reg_pp5_iter19, ap_enable_reg_pp5_iter20, ap_enable_reg_pp5_iter21, ap_enable_reg_pp5_iter22, ap_enable_reg_pp5_iter23, ap_enable_reg_pp5_iter24, ap_enable_reg_pp5_iter25, ap_enable_reg_pp5_iter26, ap_enable_reg_pp5_iter27, ap_enable_reg_pp5_iter28, ap_enable_reg_pp5_iter29, ap_enable_reg_pp5_iter30, ap_enable_reg_pp5_iter31, ap_enable_reg_pp5_iter32, ap_enable_reg_pp5_iter33, ap_enable_reg_pp5_iter34, ap_enable_reg_pp5_iter35, ap_enable_reg_pp5_iter36, ap_enable_reg_pp5_iter37, ap_enable_reg_pp5_iter38, ap_enable_reg_pp5_iter39, ap_enable_reg_pp5_iter40, ap_enable_reg_pp5_iter41, ap_enable_reg_pp5_iter42, ap_enable_reg_pp5_iter43, ap_enable_reg_pp5_iter44, ap_enable_reg_pp5_iter45, ap_enable_reg_pp5_iter46)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_enable_reg_pp5_iter46 = ap_const_logic_0) and (ap_enable_reg_pp5_iter45 = ap_const_logic_0) and (ap_enable_reg_pp5_iter44 = ap_const_logic_0) and (ap_enable_reg_pp5_iter43 = ap_const_logic_0) and (ap_enable_reg_pp5_iter42 = ap_const_logic_0) and (ap_enable_reg_pp5_iter41 = ap_const_logic_0) and (ap_enable_reg_pp5_iter40 = ap_const_logic_0) and (ap_enable_reg_pp5_iter39 = ap_const_logic_0) and (ap_enable_reg_pp5_iter38 = ap_const_logic_0) and (ap_enable_reg_pp5_iter37 = ap_const_logic_0) and (ap_enable_reg_pp5_iter36 = ap_const_logic_0) and (ap_enable_reg_pp5_iter35 = ap_const_logic_0) and (ap_enable_reg_pp5_iter34 = ap_const_logic_0) and (ap_enable_reg_pp5_iter33 = ap_const_logic_0) and (ap_enable_reg_pp5_iter32 = ap_const_logic_0) and (ap_enable_reg_pp5_iter31 = ap_const_logic_0) and (ap_enable_reg_pp5_iter30 = ap_const_logic_0) and (ap_enable_reg_pp5_iter29 = ap_const_logic_0) and (ap_enable_reg_pp5_iter28 = ap_const_logic_0) and (ap_enable_reg_pp5_iter27 = ap_const_logic_0) and (ap_enable_reg_pp5_iter26 = ap_const_logic_0) and (ap_enable_reg_pp5_iter25 = ap_const_logic_0) and (ap_enable_reg_pp5_iter24 = ap_const_logic_0) and (ap_enable_reg_pp5_iter23 = ap_const_logic_0) and (ap_enable_reg_pp5_iter22 = ap_const_logic_0) and (ap_enable_reg_pp5_iter21 = ap_const_logic_0) and (ap_enable_reg_pp5_iter20 = ap_const_logic_0) and (ap_enable_reg_pp5_iter19 = ap_const_logic_0) and (ap_enable_reg_pp5_iter18 = ap_const_logic_0) and (ap_enable_reg_pp5_iter17 = ap_const_logic_0) and (ap_enable_reg_pp5_iter16 = ap_const_logic_0) and (ap_enable_reg_pp5_iter15 = ap_const_logic_0) and (ap_enable_reg_pp5_iter14 = ap_const_logic_0) and (ap_enable_reg_pp5_iter13 = ap_const_logic_0) and (ap_enable_reg_pp5_iter12 = ap_const_logic_0) and (ap_enable_reg_pp5_iter11 = ap_const_logic_0) and (ap_enable_reg_pp5_iter10 = ap_const_logic_0) and (ap_enable_reg_pp5_iter9 = ap_const_logic_0) and (ap_enable_reg_pp5_iter8 = ap_const_logic_0) and (ap_enable_reg_pp5_iter7 = ap_const_logic_0) and (ap_enable_reg_pp5_iter6 = ap_const_logic_0) and (ap_enable_reg_pp5_iter5 = ap_const_logic_0) and (ap_enable_reg_pp5_iter4 = ap_const_logic_0) and (ap_enable_reg_pp5_iter3 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter2, ap_enable_reg_pp6_iter1)
    begin
        if (((ap_enable_reg_pp6_iter2 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_empty_60_phi_fu_482_p4_assign_proc : process(icmp_ln870_reg_1575, add_ln1205_reg_1579, ap_CS_fsm_state53, empty_60_reg_479)
    begin
        if (((icmp_ln870_reg_1575 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            ap_phi_mux_empty_60_phi_fu_482_p4 <= add_ln1205_reg_1579;
        else 
            ap_phi_mux_empty_60_phi_fu_482_p4 <= empty_60_reg_479;
        end if; 
    end process;


    ap_phi_mux_i_5_phi_fu_555_p4_assign_proc : process(i_5_reg_551, icmp_ln1252_reg_1729, add_ln1252_reg_1724, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln1252_reg_1729 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            ap_phi_mux_i_5_phi_fu_555_p4 <= add_ln1252_reg_1724;
        else 
            ap_phi_mux_i_5_phi_fu_555_p4 <= i_5_reg_551;
        end if; 
    end process;


    ap_phi_mux_i_6_phi_fu_567_p4_assign_proc : process(i_6_reg_563, icmp_ln1260_reg_1783, ap_CS_fsm_pp5_stage0, add_ln1265_reg_1787, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln1260_reg_1783 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            ap_phi_mux_i_6_phi_fu_567_p4 <= add_ln1265_reg_1787;
        else 
            ap_phi_mux_i_6_phi_fu_567_p4 <= i_6_reg_563;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state154)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state154)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(white_space_height_read, ap_CS_fsm_state154, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state154)) then 
            ap_return_0 <= white_space_height_read;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(current_z_top_index_0_reg_620, ap_CS_fsm_state154, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state154)) then 
            ap_return_1 <= current_z_top_index_0_reg_620;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(counter_0_reg_510, ap_CS_fsm_state154, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state154)) then 
            ap_return_2 <= counter_0_reg_510;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(counterUpshift_0_reg_520, ap_CS_fsm_state154, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state154)) then 
            ap_return_3 <= counterUpshift_0_reg_520;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(z_top_min_read, ap_CS_fsm_state154, ap_return_4_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state154)) then 
            ap_return_4 <= z_top_min_read;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(sext_ln534_1_reg_1988, ap_CS_fsm_state154, ap_return_5_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state154)) then 
            ap_return_5 <= sext_ln534_1_reg_1988;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(z_top_min_4_reg_631, ap_CS_fsm_state154, ap_return_6_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state154)) then 
            ap_return_6 <= z_top_min_4_reg_631;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    current_z_i_index_address0_assign_proc : process(zext_ln1198_reg_1566, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, i_1_cast_fu_787_p1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, i_3_cast_fu_841_p1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, i_2_cast_fu_858_p1, ap_CS_fsm_state50, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            current_z_i_index_address0 <= i_2_cast_fu_858_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            current_z_i_index_address0 <= i_3_cast_fu_841_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            current_z_i_index_address0 <= i_1_cast_fu_787_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            current_z_i_index_address0 <= zext_ln1198_reg_1566(3 - 1 downto 0);
        else 
            current_z_i_index_address0 <= "XXX";
        end if; 
    end process;


    current_z_i_index_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, grp_get_index_from_z_fu_690_ap_done, ap_CS_fsm_state50)
    begin
        if ((((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (grp_get_index_from_z_fu_690_ap_done = ap_const_logic_1)))) then 
            current_z_i_index_ce0 <= ap_const_logic_1;
        else 
            current_z_i_index_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    current_z_i_index_we0_assign_proc : process(grp_get_index_from_z_fu_690_ap_done, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) and (grp_get_index_from_z_fu_690_ap_done = ap_const_logic_1))) then 
            current_z_i_index_we0 <= ap_const_logic_1;
        else 
            current_z_i_index_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_areWedgeSuperPointsEqual_fu_704_ap_start <= grp_areWedgeSuperPointsEqual_fu_704_ap_start_reg;
    grp_delete_patch_fu_678_ap_start <= grp_delete_patch_fu_678_ap_start_reg;

    grp_delete_patch_fu_678_index_assign_proc : process(icmp_ln1327_reg_1955, zext_ln1346_reg_1966, zext_ln1383_reg_1997, ap_CS_fsm_state135, ap_CS_fsm_state149)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            grp_delete_patch_fu_678_index <= zext_ln1383_reg_1997;
        elsif (((icmp_ln1327_reg_1955 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state135))) then 
            grp_delete_patch_fu_678_index <= zext_ln1346_reg_1966;
        else 
            grp_delete_patch_fu_678_index <= "XXXXXXXXX";
        end if; 
    end process;

    grp_fu_1144_p_ce <= ap_const_logic_1;
    grp_fu_1144_p_din0 <= sext_ln534_fu_1306_p1(33 - 1 downto 0);
    grp_fu_1144_p_din1 <= white_space_height_read;
    grp_fu_1309_ce <= ap_const_logic_1;
    grp_fu_1309_p0 <= sext_ln534_fu_1306_p1(33 - 1 downto 0);
    grp_fu_1309_p1 <= white_space_height_read;
    grp_fu_1309_p2 <= grp_fu_1144_p_dout0;
    grp_fu_716_p2 <= std_logic_vector(unsigned(current_z_i_index_q0) + unsigned(ap_const_lv8_1));
    grp_get_index_from_z_fu_690_ap_start <= grp_get_index_from_z_fu_690_ap_start_reg;

    grp_get_index_from_z_fu_690_layer_assign_proc : process(ap_CS_fsm_state2, i_reg_456, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_get_index_from_z_fu_690_layer <= i_reg_456;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_get_index_from_z_fu_690_layer <= ap_const_lv3_4;
        else 
            grp_get_index_from_z_fu_690_layer <= "XXX";
        end if; 
    end process;


    grp_get_index_from_z_fu_690_z_value_assign_proc : process(z_top_min_read, ap_CS_fsm_state2, agg_tmp7_reg_1584, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_get_index_from_z_fu_690_z_value <= agg_tmp7_reg_1584;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_get_index_from_z_fu_690_z_value <= z_top_min_read;
        else 
            grp_get_index_from_z_fu_690_z_value <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_makePatch_alignedToLine_fu_642_ap_start <= grp_makePatch_alignedToLine_fu_642_ap_start_reg;

    grp_makePatch_alignedToLine_fu_642_p_read_assign_proc : process(ppl, ppl_assign2_reg_1971, ap_CS_fsm_state137, ap_CS_fsm_state151)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state151)) then 
            grp_makePatch_alignedToLine_fu_642_p_read <= ppl_assign2_reg_1971;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state137)) then 
            grp_makePatch_alignedToLine_fu_642_p_read <= ppl;
        else 
            grp_makePatch_alignedToLine_fu_642_p_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_makePatch_alignedToLine_fu_642_z_top_assign_proc : process(lhs_reg_1866, select_ln1310_reg_1959, ap_CS_fsm_state137, ap_CS_fsm_state151)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state151)) then 
            grp_makePatch_alignedToLine_fu_642_z_top <= lhs_reg_1866;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state137)) then 
            grp_makePatch_alignedToLine_fu_642_z_top <= select_ln1310_reg_1959;
        else 
            grp_makePatch_alignedToLine_fu_642_z_top <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_straightLineProjectorFromLayerIJtoK_fu_531_p_ce <= grp_straightLineProjectorFromLayerIJtoK_fu_665_ap_ce;
    grp_straightLineProjectorFromLayerIJtoK_fu_531_p_din1 <= complementary_apexZ0;
    grp_straightLineProjectorFromLayerIJtoK_fu_531_p_din2 <= grp_straightLineProjectorFromLayerIJtoK_fu_665_z_j;
    grp_straightLineProjectorFromLayerIJtoK_fu_531_p_din3 <= ap_const_lv3_1;
    grp_straightLineProjectorFromLayerIJtoK_fu_531_p_din4 <= grp_straightLineProjectorFromLayerIJtoK_fu_665_j;
    grp_straightLineProjectorFromLayerIJtoK_fu_531_p_din5 <= grp_straightLineProjectorFromLayerIJtoK_fu_665_k;

    grp_straightLineProjectorFromLayerIJtoK_fu_665_ap_ce_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state48, ap_CS_fsm_pp5_stage0, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_block_pp5_stage0_11001_ignoreCallOp369)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001_ignoreCallOp369) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_665_ap_ce <= ap_const_logic_1;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_665_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_straightLineProjectorFromLayerIJtoK_fu_665_ap_return <= grp_straightLineProjectorFromLayerIJtoK_fu_531_p_dout0;
    grp_straightLineProjectorFromLayerIJtoK_fu_665_i <= ap_const_lv3_1;

    grp_straightLineProjectorFromLayerIJtoK_fu_665_j_assign_proc : process(ap_CS_fsm_state3, icmp_ln1198_fu_760_p2, icmp_ln1260_reg_1783, ap_CS_fsm_pp5_stage0, add_ln1265_reg_1787, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln1260_reg_1783 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_665_j <= add_ln1265_reg_1787;
        elsif (((icmp_ln1198_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_665_j <= ap_const_lv3_5;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_665_j <= "XXX";
        end if; 
    end process;


    grp_straightLineProjectorFromLayerIJtoK_fu_665_k_assign_proc : process(add_ln1200_fu_749_p2, ap_CS_fsm_state3, icmp_ln1198_fu_760_p2, icmp_ln1260_reg_1783, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln1260_reg_1783 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_665_k <= ap_const_lv3_5;
        elsif (((icmp_ln1198_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_665_k <= add_ln1200_fu_749_p2;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_665_k <= "XXX";
        end if; 
    end process;

    grp_straightLineProjectorFromLayerIJtoK_fu_665_z_i <= complementary_apexZ0;

    grp_straightLineProjectorFromLayerIJtoK_fu_665_z_j_assign_proc : process(z_top_min_read, ap_CS_fsm_state3, icmp_ln1198_fu_760_p2, icmp_ln1260_reg_1783, ap_CS_fsm_pp5_stage0, new_z_i_V_q0, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln1260_reg_1783 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_665_z_j <= new_z_i_V_q0;
        elsif (((icmp_ln1198_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_665_z_j <= z_top_min_read;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_665_z_j <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_cast_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_468),64));
    i_2_cast_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_499),64));
    i_3_cast_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_488),64));
    i_4_cast_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_540),64));
    i_5_cast_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_5_phi_fu_555_p4),64));
    icmp_ln1198_fu_760_p2 <= "1" when (i_reg_456 = ap_const_lv3_5) else "0";
    icmp_ln1207_fu_781_p2 <= "1" when (i_1_reg_468 = ap_const_lv3_5) else "0";
    icmp_ln1220_fu_852_p2 <= "1" when (i_2_reg_499 = ap_const_lv3_5) else "0";
    icmp_ln1230_fu_835_p2 <= "1" when (i_3_reg_488 = ap_const_lv3_5) else "0";
    icmp_ln1236_fu_879_p2 <= "1" when (signed(sext_ln1236_fu_870_p1) < signed(add_ln1236_fu_874_p2)) else "0";
    icmp_ln1239_fu_899_p2 <= "1" when (i_4_reg_540 = ap_const_lv3_5) else "0";
    icmp_ln1241_fu_924_p2 <= "1" when (signed(zext_ln1241_fu_921_p1) < signed(add_ln1241_reg_1719)) else "0";
    icmp_ln1252_fu_948_p2 <= "1" when (ap_phi_mux_i_5_phi_fu_555_p4 = ap_const_lv3_5) else "0";
    icmp_ln1260_fu_983_p2 <= "1" when (ap_phi_mux_i_6_phi_fu_567_p4 = ap_const_lv3_5) else "0";
    icmp_ln1273_fu_1038_p2 <= "1" when (i_7_reg_574 = ap_const_lv3_4) else "0";
    icmp_ln1275_fu_1095_p2 <= "1" when (signed(sext_ln1275_1_fu_1092_p1) < signed(layerSMin_reg_585)) else "0";
    icmp_ln1295_fu_1196_p2 <= "1" when (signed(select_ln180_fu_1189_p3) < signed(ap_const_lv33_1)) else "0";
    icmp_ln1300_fu_1244_p2 <= "1" when (signed(select_ln180_2_fu_1238_p3) < signed(ap_const_lv33_1)) else "0";
    icmp_ln1305_fu_1285_p2 <= "1" when (signed(select_ln180_3_fu_1278_p3) < signed(ap_const_lv33_1)) else "0";
    icmp_ln1327_fu_1322_p2 <= "1" when (unsigned(n_patches_i) > unsigned(nPatchesAtOriginal)) else "0";
    icmp_ln1380_fu_1407_p2 <= "1" when (tmp_10_fu_1397_p4 = ap_const_lv6_0) else "0";
    icmp_ln1390_fu_1429_p2 <= "1" when (unsigned(i_8_reg_608) < unsigned(ap_const_lv3_5)) else "0";
    icmp_ln870_fu_766_p0 <= z_top_min_read;
    icmp_ln870_fu_766_p2 <= "1" when (icmp_ln870_fu_766_p0 = previous_z_top_min_read) else "0";
    icmp_ln878_fu_1383_p2 <= "1" when (signed(ret_5_reg_1976) < signed(ret_6_reg_1982)) else "0";
    lastPatchIdx_cast_fu_1423_p2 <= std_logic_vector(unsigned(trunc_ln1355_fu_1373_p1) + unsigned(ap_const_lv5_1F));
    lastPatchIdx_fu_1377_p2 <= std_logic_vector(unsigned(n_patches_i) + unsigned(ap_const_lv8_FF));
    layerSMin_1_fu_1112_p3 <= 
        sext_ln1275_1_fu_1092_p1 when (icmp_ln1275_fu_1095_p2(0) = '1') else 
        layerSMin_reg_585;
    layerWithSmallestShift_1_fu_1104_p3 <= 
        zext_ln1275_fu_1101_p1 when (icmp_ln1275_fu_1095_p2(0) = '1') else 
        layerWithSmallestShift_reg_596;
    lhs_2_fu_1206_p3 <= 
        GDarrayDecoded_q0 when (icmp_ln1295_fu_1196_p2(0) = '1') else 
        lhs_reg_1866;
    lhs_3_fu_1250_p3 <= 
        reg_735 when (icmp_ln1300_fu_1244_p2(0) = '1') else 
        lhs_2_reg_1900;
    lhs_4_fu_1291_p3 <= 
        GDarrayDecoded_q0 when (icmp_ln1305_fu_1285_p2(0) = '1') else 
        lhs_3_reg_1922;

    n_patches_o_assign_proc : process(n_patches_i, icmp_ln1327_reg_1955, ap_CS_fsm_state137, grp_makePatch_alignedToLine_fu_642_n_patches_o, grp_makePatch_alignedToLine_fu_642_n_patches_o_ap_vld, grp_delete_patch_fu_678_n_patches, grp_delete_patch_fu_678_n_patches_ap_vld, ap_CS_fsm_state151, ap_CS_fsm_state135, ap_CS_fsm_state149)
    begin
        if ((((icmp_ln1327_reg_1955 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state135) and (grp_delete_patch_fu_678_n_patches_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state149) and (grp_delete_patch_fu_678_n_patches_ap_vld = ap_const_logic_1)))) then 
            n_patches_o <= grp_delete_patch_fu_678_n_patches;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state137) and (grp_makePatch_alignedToLine_fu_642_n_patches_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state151) and (grp_makePatch_alignedToLine_fu_642_n_patches_o_ap_vld = ap_const_logic_1)))) then 
            n_patches_o <= grp_makePatch_alignedToLine_fu_642_n_patches_o;
        else 
            n_patches_o <= n_patches_i;
        end if; 
    end process;


    n_patches_o_ap_vld_assign_proc : process(icmp_ln1327_reg_1955, ap_CS_fsm_state137, grp_makePatch_alignedToLine_fu_642_n_patches_o_ap_vld, grp_delete_patch_fu_678_n_patches_ap_vld, ap_CS_fsm_state151, ap_CS_fsm_state135, ap_CS_fsm_state149)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state149) or ((icmp_ln1327_reg_1955 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state135)))) then 
            n_patches_o_ap_vld <= grp_delete_patch_fu_678_n_patches_ap_vld;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state151))) then 
            n_patches_o_ap_vld <= grp_makePatch_alignedToLine_fu_642_n_patches_o_ap_vld;
        else 
            n_patches_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_V_address0_assign_proc : process(i_5_cast_reg_1733_pp4_iter3_reg, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_enable_reg_pp4_iter4, ap_block_pp4_stage0, ap_block_pp5_stage0, trunc_ln1265_cast_fu_995_p1)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            new_z_i_V_address0 <= trunc_ln1265_cast_fu_995_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            new_z_i_V_address0 <= i_5_cast_reg_1733_pp4_iter3_reg(3 - 1 downto 0);
        else 
            new_z_i_V_address0 <= "XXX";
        end if; 
    end process;


    new_z_i_V_ce0_assign_proc : process(ap_block_pp4_stage0_11001, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, ap_enable_reg_pp4_iter4)
    begin
        if ((((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((ap_enable_reg_pp4_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)))) then 
            new_z_i_V_ce0 <= ap_const_logic_1;
        else 
            new_z_i_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_V_we0_assign_proc : process(ap_block_pp4_stage0_11001, icmp_ln1252_reg_1729_pp4_iter3_reg, ap_enable_reg_pp4_iter4)
    begin
        if (((ap_enable_reg_pp4_iter4 = ap_const_logic_1) and (icmp_ln1252_reg_1729_pp4_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
            new_z_i_V_we0 <= ap_const_logic_1;
        else 
            new_z_i_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_1_cast_reg_1598, ap_CS_fsm_pp1_stage0, i_3_cast_reg_1641, ap_CS_fsm_pp2_stage0, i_2_cast_reg_1665, new_z_i_index_addr_3_reg_1697_pp3_iter1_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter2, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            new_z_i_index_address0 <= new_z_i_index_addr_3_reg_1697_pp3_iter1_reg;
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            new_z_i_index_address0 <= i_2_cast_reg_1665(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            new_z_i_index_address0 <= i_3_cast_reg_1641(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            new_z_i_index_address0 <= i_1_cast_reg_1598(3 - 1 downto 0);
        else 
            new_z_i_index_address0 <= "XXX";
        end if; 
    end process;


    new_z_i_index_address1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, i_5_cast_fu_954_p1, ap_block_pp4_stage0, i_4_cast_fu_905_p1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            new_z_i_index_address1 <= i_5_cast_fu_954_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            new_z_i_index_address1 <= i_4_cast_fu_905_p1(3 - 1 downto 0);
        else 
            new_z_i_index_address1 <= "XXX";
        end if; 
    end process;


    new_z_i_index_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter2)
    begin
        if ((((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            new_z_i_index_ce0 <= ap_const_logic_1;
        else 
            new_z_i_index_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_ce1_assign_proc : process(ap_block_pp4_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0)
    begin
        if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            new_z_i_index_ce1 <= ap_const_logic_1;
        else 
            new_z_i_index_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter2, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp3_stage0, grp_fu_716_p2, add_ln1222_fu_863_p2, select_ln1241_fu_934_p3)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            new_z_i_index_d0 <= select_ln1241_fu_934_p3;
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            new_z_i_index_d0 <= add_ln1222_fu_863_p2;
        elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            new_z_i_index_d0 <= grp_fu_716_p2;
        else 
            new_z_i_index_d0 <= "XXXXXXXX";
        end if; 
    end process;


    new_z_i_index_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln1207_reg_1594, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln1230_reg_1637, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln1220_reg_1661, ap_block_pp3_stage0_11001, icmp_ln1239_reg_1693_pp3_iter1_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter2)
    begin
        if ((((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (icmp_ln1239_reg_1693_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln1220_reg_1661 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln1230_reg_1637 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1207_reg_1594 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            new_z_i_index_we0 <= ap_const_logic_1;
        else 
            new_z_i_index_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1254_fu_969_p2 <= (tmp_reg_1743 or ap_const_lv12_1);

    patches_parameters_address0_assign_proc : process(icmp_ln1327_reg_1955, ap_CS_fsm_state137, grp_makePatch_alignedToLine_fu_642_patches_parameters_address0, grp_delete_patch_fu_678_patches_parameters_address0, ap_CS_fsm_state151, ap_CS_fsm_state135, ap_CS_fsm_state149, ap_CS_fsm_state138)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state138)) then 
            patches_parameters_address0 <= ap_const_lv64_B(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state149) or ((icmp_ln1327_reg_1955 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state135)))) then 
            patches_parameters_address0 <= grp_delete_patch_fu_678_patches_parameters_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state151))) then 
            patches_parameters_address0 <= grp_makePatch_alignedToLine_fu_642_patches_parameters_address0;
        else 
            patches_parameters_address0 <= "XXXXXXX";
        end if; 
    end process;


    patches_parameters_address1_assign_proc : process(icmp_ln1327_reg_1955, grp_delete_patch_fu_678_patches_parameters_address1, ap_CS_fsm_state135, ap_CS_fsm_state149, ap_CS_fsm_state138)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state138)) then 
            patches_parameters_address1 <= ap_const_lv64_9(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state149) or ((icmp_ln1327_reg_1955 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state135)))) then 
            patches_parameters_address1 <= grp_delete_patch_fu_678_patches_parameters_address1;
        else 
            patches_parameters_address1 <= "XXXXXXX";
        end if; 
    end process;


    patches_parameters_ce0_assign_proc : process(icmp_ln1327_reg_1955, ap_CS_fsm_state137, grp_makePatch_alignedToLine_fu_642_patches_parameters_ce0, grp_delete_patch_fu_678_patches_parameters_ce0, ap_CS_fsm_state151, ap_CS_fsm_state135, ap_CS_fsm_state149, ap_CS_fsm_state138)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state138)) then 
            patches_parameters_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state149) or ((icmp_ln1327_reg_1955 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state135)))) then 
            patches_parameters_ce0 <= grp_delete_patch_fu_678_patches_parameters_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state151))) then 
            patches_parameters_ce0 <= grp_makePatch_alignedToLine_fu_642_patches_parameters_ce0;
        else 
            patches_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_ce1_assign_proc : process(icmp_ln1327_reg_1955, grp_delete_patch_fu_678_patches_parameters_ce1, ap_CS_fsm_state135, ap_CS_fsm_state149, ap_CS_fsm_state138)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state138)) then 
            patches_parameters_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state149) or ((icmp_ln1327_reg_1955 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state135)))) then 
            patches_parameters_ce1 <= grp_delete_patch_fu_678_patches_parameters_ce1;
        else 
            patches_parameters_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_d0_assign_proc : process(icmp_ln1327_reg_1955, ap_CS_fsm_state137, grp_makePatch_alignedToLine_fu_642_patches_parameters_d0, grp_delete_patch_fu_678_patches_parameters_d0, ap_CS_fsm_state151, ap_CS_fsm_state135, ap_CS_fsm_state149)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state149) or ((icmp_ln1327_reg_1955 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state135)))) then 
            patches_parameters_d0 <= grp_delete_patch_fu_678_patches_parameters_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state151))) then 
            patches_parameters_d0 <= grp_makePatch_alignedToLine_fu_642_patches_parameters_d0;
        else 
            patches_parameters_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_we0_assign_proc : process(icmp_ln1327_reg_1955, ap_CS_fsm_state137, grp_makePatch_alignedToLine_fu_642_patches_parameters_we0, grp_delete_patch_fu_678_patches_parameters_we0, ap_CS_fsm_state151, ap_CS_fsm_state135, ap_CS_fsm_state149)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state149) or ((icmp_ln1327_reg_1955 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state135)))) then 
            patches_parameters_we0 <= grp_delete_patch_fu_678_patches_parameters_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state151))) then 
            patches_parameters_we0 <= grp_makePatch_alignedToLine_fu_642_patches_parameters_we0;
        else 
            patches_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_address0_assign_proc : process(icmp_ln1327_reg_1955, ap_CS_fsm_state137, icmp_ln1390_reg_2012, grp_makePatch_alignedToLine_fu_642_patches_superpoints_address0, grp_delete_patch_fu_678_patches_superpoints_address0, grp_areWedgeSuperPointsEqual_fu_704_wsp2_address0, ap_CS_fsm_state151, ap_CS_fsm_state135, ap_CS_fsm_state149, ap_CS_fsm_state143, ap_CS_fsm_state144, ap_CS_fsm_state145)
    begin
        if ((((icmp_ln1390_reg_2012 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state145)) or ((icmp_ln1390_reg_2012 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state144)) or ((icmp_ln1390_reg_2012 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state143)))) then 
            patches_superpoints_address0 <= grp_areWedgeSuperPointsEqual_fu_704_wsp2_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state149) or ((icmp_ln1327_reg_1955 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state135)))) then 
            patches_superpoints_address0 <= grp_delete_patch_fu_678_patches_superpoints_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state151))) then 
            patches_superpoints_address0 <= grp_makePatch_alignedToLine_fu_642_patches_superpoints_address0;
        else 
            patches_superpoints_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_address1_assign_proc : process(icmp_ln1327_reg_1955, icmp_ln1390_reg_2012, grp_delete_patch_fu_678_patches_superpoints_address1, grp_areWedgeSuperPointsEqual_fu_704_wsp2_address1, ap_CS_fsm_state135, ap_CS_fsm_state149, ap_CS_fsm_state143, ap_CS_fsm_state144, ap_CS_fsm_state145)
    begin
        if ((((icmp_ln1390_reg_2012 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state145)) or ((icmp_ln1390_reg_2012 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state144)) or ((icmp_ln1390_reg_2012 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state143)))) then 
            patches_superpoints_address1 <= grp_areWedgeSuperPointsEqual_fu_704_wsp2_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state149) or ((icmp_ln1327_reg_1955 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state135)))) then 
            patches_superpoints_address1 <= grp_delete_patch_fu_678_patches_superpoints_address1;
        else 
            patches_superpoints_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_ce0_assign_proc : process(icmp_ln1327_reg_1955, ap_CS_fsm_state137, icmp_ln1390_reg_2012, grp_makePatch_alignedToLine_fu_642_patches_superpoints_ce0, grp_delete_patch_fu_678_patches_superpoints_ce0, grp_areWedgeSuperPointsEqual_fu_704_wsp2_ce0, ap_CS_fsm_state151, ap_CS_fsm_state135, ap_CS_fsm_state149, ap_CS_fsm_state143, ap_CS_fsm_state144, ap_CS_fsm_state145)
    begin
        if ((((icmp_ln1390_reg_2012 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state145)) or ((icmp_ln1390_reg_2012 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state144)) or ((icmp_ln1390_reg_2012 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state143)))) then 
            patches_superpoints_ce0 <= grp_areWedgeSuperPointsEqual_fu_704_wsp2_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state149) or ((icmp_ln1327_reg_1955 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state135)))) then 
            patches_superpoints_ce0 <= grp_delete_patch_fu_678_patches_superpoints_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state151))) then 
            patches_superpoints_ce0 <= grp_makePatch_alignedToLine_fu_642_patches_superpoints_ce0;
        else 
            patches_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_ce1_assign_proc : process(icmp_ln1327_reg_1955, icmp_ln1390_reg_2012, grp_delete_patch_fu_678_patches_superpoints_ce1, grp_areWedgeSuperPointsEqual_fu_704_wsp2_ce1, ap_CS_fsm_state135, ap_CS_fsm_state149, ap_CS_fsm_state143, ap_CS_fsm_state144, ap_CS_fsm_state145)
    begin
        if ((((icmp_ln1390_reg_2012 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state145)) or ((icmp_ln1390_reg_2012 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state144)) or ((icmp_ln1390_reg_2012 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state143)))) then 
            patches_superpoints_ce1 <= grp_areWedgeSuperPointsEqual_fu_704_wsp2_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state149) or ((icmp_ln1327_reg_1955 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state135)))) then 
            patches_superpoints_ce1 <= grp_delete_patch_fu_678_patches_superpoints_ce1;
        else 
            patches_superpoints_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_d0_assign_proc : process(icmp_ln1327_reg_1955, ap_CS_fsm_state137, grp_makePatch_alignedToLine_fu_642_patches_superpoints_d0, grp_delete_patch_fu_678_patches_superpoints_d0, ap_CS_fsm_state151, ap_CS_fsm_state135, ap_CS_fsm_state149)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state149) or ((icmp_ln1327_reg_1955 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state135)))) then 
            patches_superpoints_d0 <= grp_delete_patch_fu_678_patches_superpoints_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state151))) then 
            patches_superpoints_d0 <= grp_makePatch_alignedToLine_fu_642_patches_superpoints_d0;
        else 
            patches_superpoints_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_we0_assign_proc : process(icmp_ln1327_reg_1955, ap_CS_fsm_state137, grp_makePatch_alignedToLine_fu_642_patches_superpoints_we0, grp_delete_patch_fu_678_patches_superpoints_we0, ap_CS_fsm_state151, ap_CS_fsm_state135, ap_CS_fsm_state149)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state149) or ((icmp_ln1327_reg_1955 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state135)))) then 
            patches_superpoints_we0 <= grp_delete_patch_fu_678_patches_superpoints_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state151))) then 
            patches_superpoints_we0 <= grp_makePatch_alignedToLine_fu_642_patches_superpoints_we0;
        else 
            patches_superpoints_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_2_fu_1158_p2 <= std_logic_vector(signed(sext_ln215_fu_1154_p1) - signed(sext_ln1273_reg_1807));
    ret_3_fu_1216_p2 <= std_logic_vector(signed(sext_ln215_5_fu_1213_p1) - signed(sext_ln1273_reg_1807));
    ret_4_fu_1261_p2 <= std_logic_vector(signed(sext_ln215_6_fu_1257_p1) - signed(sext_ln1273_reg_1807));
    ret_5_fu_1354_p2 <= std_logic_vector(signed(sext_ln215_8_fu_1347_p1) - signed(sext_ln215_9_fu_1350_p1));
    ret_6_fu_1367_p2 <= std_logic_vector(signed(sext_ln215_10_fu_1360_p1) - signed(sext_ln215_11_fu_1363_p1));
    ret_fu_1301_p2 <= std_logic_vector(signed(sext_ln215_7_fu_1298_p1) - signed(sext_ln1273_reg_1807));
    select_ln1236_fu_885_p3 <= 
        sext_ln1236_fu_870_p1 when (icmp_ln1236_fu_879_p2(0) = '1') else 
        add_ln1236_fu_874_p2;
    select_ln1241_fu_934_p3 <= 
        new_z_i_index_load_reg_1708 when (icmp_ln1241_fu_924_p2(0) = '1') else 
        add_ln1241_1_fu_929_p2;
    select_ln1310_fu_1330_p3 <= 
        new_z_i_atTop_V_3_fu_190 when (tmp_8_reg_1950(0) = '1') else 
        lhs_4_reg_1934;
    select_ln1364_fu_1387_p3 <= 
        ret_6_reg_1982 when (icmp_ln878_fu_1383_p2(0) = '1') else 
        ret_5_reg_1976;
    select_ln180_1_fu_1084_p3 <= 
        sub_ln180_1_fu_1070_p2 when (tmp_9_fu_1076_p3(0) = '1') else 
        sub_ln1275_fu_1065_p2;
    select_ln180_2_fu_1238_p3 <= 
        sub_ln180_2_reg_1912 when (tmp_6_fu_1231_p3(0) = '1') else 
        ret_3_reg_1906;
    select_ln180_3_fu_1278_p3 <= 
        sub_ln180_3_fu_1266_p2 when (tmp_7_fu_1271_p3(0) = '1') else 
        ret_4_reg_1927;
    select_ln180_fu_1189_p3 <= 
        sub_ln180_fu_1177_p2 when (tmp_5_fu_1182_p3(0) = '1') else 
        ret_2_reg_1873;
        sext_ln1220_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1218_fu_819_p2),10));

        sext_ln1236_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_63_reg_530),32));

    sext_ln1273_fu_1029_p0 <= z_top_min_read;
        sext_ln1273_fu_1029_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1273_fu_1029_p0),33));

        sext_ln1275_1_fu_1092_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln180_1_reg_1835),64));

        sext_ln1275_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_reg_1830),33));

        sext_ln215_10_fu_1360_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(original_d),33));

        sext_ln215_11_fu_1363_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(patches_parameters_q0),33));

        sext_ln215_5_fu_1213_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_2_reg_1900),33));

        sext_ln215_6_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_3_fu_1250_p3),33));

        sext_ln215_7_fu_1298_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_4_reg_1934),33));

        sext_ln215_8_fu_1347_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(original_c),33));

        sext_ln215_9_fu_1350_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(patches_parameters_q1),33));

        sext_ln215_fu_1154_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_fu_1141_p6),33));

        sext_ln534_1_fu_1393_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln1364_fu_1387_p3),64));

        sext_ln534_fu_1306_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_reg_1940),64));

    sub_ln1275_fu_1065_p2 <= std_logic_vector(signed(sext_ln1275_fu_1062_p1) - signed(sext_ln1273_reg_1807));
    sub_ln180_1_fu_1070_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(sub_ln1275_fu_1065_p2));
    sub_ln180_2_fu_1221_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(ret_3_fu_1216_p2));
    sub_ln180_3_fu_1266_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(ret_4_reg_1927));
    sub_ln180_fu_1177_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(ret_2_reg_1873));
    thirdLastPatchIdx_fu_1417_p2 <= std_logic_vector(unsigned(trunc_ln1355_fu_1373_p1) + unsigned(ap_const_lv5_1D));
    tmp_10_fu_1397_p4 <= n_patches_i(7 downto 2);
    tmp_2_fu_792_p1 <= white_space_height_read;
    tmp_2_fu_792_p3 <= tmp_2_fu_792_p1(63 downto 63);
    tmp_3_fu_1048_p5 <= i_7_reg_574(2 - 1 downto 0);
    tmp_4_fu_974_p3 <= (ap_const_lv52_0 & or_ln1254_fu_969_p2);
    tmp_5_cast_fu_1127_p3 <= (trunc_ln1297_fu_1124_p1 & ap_const_lv1_0);
    tmp_5_fu_1182_p3 <= ret_2_reg_1873(32 downto 32);
    tmp_6_fu_1231_p3 <= ret_3_reg_1906(32 downto 32);
    tmp_7_fu_1271_p3 <= ret_4_reg_1927(32 downto 32);
    tmp_9_fu_1076_p3 <= sub_ln1275_fu_1065_p2(32 downto 32);
    tmp_fu_959_p4 <= ((i_5_reg_551 & new_z_i_index_q1) & ap_const_lv1_0);
    trunc_ln1241_fu_911_p1 <= GDn_points_q0(8 - 1 downto 0);
    trunc_ln1262_fu_1000_p1 <= ap_phi_mux_i_6_phi_fu_567_p4(2 - 1 downto 0);
    trunc_ln1265_cast_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_6_phi_fu_567_p4),64));
    trunc_ln1282_fu_1120_p1 <= layerWithSmallestShift_reg_596(2 - 1 downto 0);
    trunc_ln1297_fu_1124_p1 <= select_ln1236_reg_1680(11 - 1 downto 0);
    trunc_ln1355_fu_1373_p1 <= n_patches_i(5 - 1 downto 0);
    trunc_ln534_fu_1044_p1 <= i_7_reg_574(2 - 1 downto 0);
    zext_ln1194_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_get_index_from_z_fu_690_ap_return),9));
    zext_ln1198_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_456),64));
    zext_ln1230_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1228_fu_804_p2),10));
    zext_ln1241_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_z_i_index_load_reg_1708),32));
    zext_ln1275_fu_1101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln534_reg_1825_pp6_iter1_reg),8));
    zext_ln1297_fu_1163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1297_reg_1861),64));
    zext_ln1302_fu_1202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1302_reg_1885),64));
    zext_ln1307_fu_1227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1307_reg_1890),64));
    zext_ln1346_fu_1342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1326_fu_1336_p2),9));
    zext_ln1383_fu_1413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lastPatchIdx_fu_1377_p2),9));
end behav;
