-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_solveComplmentaryPatch is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n_patches_i : IN STD_LOGIC_VECTOR (7 downto 0);
    n_patches_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    n_patches_o_ap_vld : OUT STD_LOGIC;
    GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    GDn_points_ce0 : OUT STD_LOGIC;
    GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_patch_stream_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_patch_stream_V_full_n : IN STD_LOGIC;
    output_patch_stream_V_write : OUT STD_LOGIC;
    ppl : IN STD_LOGIC_VECTOR (31 downto 0);
    nPatchesAtOriginal : IN STD_LOGIC_VECTOR (7 downto 0);
    previous_z_top_min_read : IN STD_LOGIC_VECTOR (31 downto 0);
    complementary_apexZ0 : IN STD_LOGIC_VECTOR (31 downto 0);
    white_space_height_read : IN STD_LOGIC_VECTOR (63 downto 0);
    original_c : IN STD_LOGIC_VECTOR (31 downto 0);
    original_d : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (31 downto 0);
    z_top_min_read : IN STD_LOGIC_VECTOR (31 downto 0);
    GDarrayDecoded_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    GDarrayDecoded_ce0 : OUT STD_LOGIC;
    GDarrayDecoded_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_we0 : OUT STD_LOGIC;
    patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    patches_superpoints_ce1 : OUT STD_LOGIC;
    patches_superpoints_we1 : OUT STD_LOGIC;
    patches_superpoints_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    patches_parameters_ce1 : OUT STD_LOGIC;
    patches_parameters_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_537_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_537_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_537_p_din3 : OUT STD_LOGIC_VECTOR (2 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_537_p_din4 : OUT STD_LOGIC_VECTOR (2 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_537_p_din5 : OUT STD_LOGIC_VECTOR (2 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_537_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_537_p_ce : OUT STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_537_p_start : OUT STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_537_p_ready : IN STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_537_p_done : IN STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_537_p_idle : IN STD_LOGIC;
    grp_fu_1068_p_din0 : OUT STD_LOGIC_VECTOR (32 downto 0);
    grp_fu_1068_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1068_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1068_p_ce : OUT STD_LOGIC );
end;


architecture behav of MPSQ_solveComplmentaryPatch is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (54 downto 0) := "0000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (54 downto 0) := "0000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (54 downto 0) := "0000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (54 downto 0) := "0000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (54 downto 0) := "0000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (54 downto 0) := "0000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (54 downto 0) := "0001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (54 downto 0) := "0010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (54 downto 0) := "0100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (54 downto 0) := "1000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv64_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv12_801 : STD_LOGIC_VECTOR (11 downto 0) := "100000000001";
    constant ap_const_lv12_601 : STD_LOGIC_VECTOR (11 downto 0) := "011000000001";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv12_401 : STD_LOGIC_VECTOR (11 downto 0) := "010000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_reg_472 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_492 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_503 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_reg_544 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_5_reg_555 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_6_reg_567 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_578 : STD_LOGIC_VECTOR (2 downto 0);
    signal layerSMin_reg_589 : STD_LOGIC_VECTOR (63 downto 0);
    signal layerWithSmallestShift_reg_601 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp4_iter3 : STD_LOGIC := '0';
    signal ap_block_state27_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state28_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state29_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state30_pp4_stage0_iter3 : BOOLEAN;
    signal ap_block_state31_pp4_stage0_iter4 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal icmp_ln1312_reg_1701 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1312_reg_1701_pp4_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal reg_749 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln1254_fu_754_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1254_reg_1526 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1260_fu_758_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1260_reg_1532 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln1258_fu_764_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1258_reg_1538 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1258_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln870_reg_1547 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1265_fu_778_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1265_reg_1551 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_687_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_tmp7_reg_1556 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln1267_fu_783_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state13_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1267_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1267_reg_1566 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_cast_fu_795_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast_reg_1570 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_800_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1580 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln1287_fu_807_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1287_reg_1584 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1290_fu_818_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1290_reg_1589 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1277_fu_822_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1277_reg_1594 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1280_fu_833_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1280_reg_1599 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1290_fu_837_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state16_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln1290_fu_843_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1290_reg_1609 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_cast_fu_849_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1613 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln1280_fu_854_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state19_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state20_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln1280_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1280_reg_1633 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_cast_fu_866_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_1637 : STD_LOGIC_VECTOR (63 downto 0);
    signal GDn_points_load_reg_1647 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal select_ln1296_fu_893_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1296_reg_1652 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal add_ln1299_fu_901_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state23_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state24_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state25_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln1299_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1299_reg_1665 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1299_reg_1665_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal new_z_i_index_addr_3_reg_1669 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_addr_3_reg_1669_pp3_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_z_i_index_load_reg_1680 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal trunc_ln1301_fu_919_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1301_reg_1686 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1301_fu_923_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1301_reg_1691 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1312_fu_950_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1312_reg_1696 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal icmp_ln1312_fu_956_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1312_reg_1701_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1312_reg_1701_pp4_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_cast_fu_962_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_cast_reg_1705 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_cast_reg_1705_pp4_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_cast_reg_1705_pp4_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_cast_reg_1705_pp4_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_967_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_reg_1715 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1320_fu_991_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1320_reg_1755 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_block_state33_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state34_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state35_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_state36_pp5_stage0_iter3 : BOOLEAN;
    signal ap_block_state37_pp5_stage0_iter4 : BOOLEAN;
    signal ap_block_state38_pp5_stage0_iter5 : BOOLEAN;
    signal ap_block_state39_pp5_stage0_iter6 : BOOLEAN;
    signal ap_block_state40_pp5_stage0_iter7 : BOOLEAN;
    signal ap_block_state41_pp5_stage0_iter8 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal icmp_ln1320_reg_1755_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1325_fu_997_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1325_reg_1759 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal add_ln1325_reg_1759_pp5_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1322_fu_1008_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1322_reg_1770 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1322_reg_1770_pp5_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1322_reg_1770_pp5_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1322_reg_1770_pp5_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1322_reg_1770_pp5_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1322_reg_1770_pp5_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1322_reg_1770_pp5_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1322_reg_1770_pp5_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal new_z_i_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_V_load_reg_1774 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal sext_ln1333_fu_1037_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1333_reg_1779 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal add_ln1333_fu_1040_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal ap_block_state43_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state44_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state45_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal icmp_ln1333_fu_1046_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1333_reg_1793 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1333_reg_1793_pp6_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln534_fu_1052_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln534_reg_1797 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln534_reg_1797_pp6_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_1056_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1802 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln180_1_fu_1092_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln180_1_reg_1807 : STD_LOGIC_VECTOR (32 downto 0);
    signal layerWithSmallestShift_1_fu_1112_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal layerSMin_1_fu_1120_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_cast_fu_1131_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_cast_reg_1822 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal add_ln1357_fu_1139_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1357_reg_1828 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_fu_1149_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_reg_1833 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ret_2_fu_1167_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_2_reg_1840 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln1362_fu_1176_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1362_reg_1852 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal lhs_2_fu_1210_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_2_reg_1862 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1367_fu_1217_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1367_reg_1868 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_3_fu_1225_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_3_reg_1873 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln180_2_fu_1230_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln180_2_reg_1879 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal lhs_3_fu_1259_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_3_reg_1889 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_4_fu_1270_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_4_reg_1894 : STD_LOGIC_VECTOR (32 downto 0);
    signal lhs_4_fu_1300_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_4_reg_1901 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ret_fu_1310_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_reg_1907 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal sext_ln534_fu_1315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal tmp_9_reg_1917 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1387_fu_1331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1387_reg_1922 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1370_fu_1339_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1370_reg_1926 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal grp_makePatch_alignedToLine_fu_647_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ppl_assign2_reg_1933 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ret_5_fu_1352_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_5_reg_1938 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ret_6_fu_1365_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_6_reg_1944 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln534_1_fu_1381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln534_1_reg_1950 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1440_fu_1395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1440_reg_1955 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1450_fu_1401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1450_reg_1959 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal add_ln1450_fu_1407_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1450_reg_1963 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1470_fu_1452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state13 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state16 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state19 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state23 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state27 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter4 : STD_LOGIC := '0';
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state33 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter8 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state43 : STD_LOGIC;
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal current_z_i_index_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal current_z_i_index_ce0 : STD_LOGIC;
    signal current_z_i_index_we0 : STD_LOGIC;
    signal current_z_i_index_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_z_i_index_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_ce0 : STD_LOGIC;
    signal new_z_i_index_we0 : STD_LOGIC;
    signal new_z_i_index_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_z_i_index_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_index_ce1 : STD_LOGIC;
    signal new_z_i_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal new_z_i_V_ce0 : STD_LOGIC;
    signal new_z_i_V_we0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_647_ap_start : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_647_ap_done : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_647_ap_idle : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_647_ap_ready : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_647_n_patches_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_makePatch_alignedToLine_fu_647_n_patches_o_ap_vld : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_647_GDn_points_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_makePatch_alignedToLine_fu_647_GDn_points_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_647_output_patch_stream_V_din : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_makePatch_alignedToLine_fu_647_output_patch_stream_V_write : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_647_z_top : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_makePatch_alignedToLine_fu_647_p_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_makePatch_alignedToLine_fu_647_GDarrayDecoded_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_makePatch_alignedToLine_fu_647_GDarrayDecoded_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_647_patches_superpoints_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_makePatch_alignedToLine_fu_647_patches_superpoints_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_647_patches_superpoints_we0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_647_patches_superpoints_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_makePatch_alignedToLine_fu_647_patches_superpoints_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_makePatch_alignedToLine_fu_647_patches_superpoints_ce1 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_647_patches_superpoints_we1 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_647_patches_superpoints_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_makePatch_alignedToLine_fu_647_patches_parameters_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_makePatch_alignedToLine_fu_647_patches_parameters_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_647_patches_parameters_we0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_647_patches_parameters_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_delete_patch_fu_674_ap_start : STD_LOGIC;
    signal grp_delete_patch_fu_674_ap_done : STD_LOGIC;
    signal grp_delete_patch_fu_674_ap_idle : STD_LOGIC;
    signal grp_delete_patch_fu_674_ap_ready : STD_LOGIC;
    signal grp_delete_patch_fu_674_n_patches : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_delete_patch_fu_674_n_patches_ap_vld : STD_LOGIC;
    signal grp_delete_patch_fu_674_patches_superpoints_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_delete_patch_fu_674_patches_superpoints_ce0 : STD_LOGIC;
    signal grp_delete_patch_fu_674_patches_superpoints_we0 : STD_LOGIC;
    signal grp_delete_patch_fu_674_patches_superpoints_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_delete_patch_fu_674_patches_superpoints_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_delete_patch_fu_674_patches_superpoints_ce1 : STD_LOGIC;
    signal grp_delete_patch_fu_674_patches_parameters_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_delete_patch_fu_674_patches_parameters_ce0 : STD_LOGIC;
    signal grp_delete_patch_fu_674_patches_parameters_we0 : STD_LOGIC;
    signal grp_delete_patch_fu_674_patches_parameters_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_delete_patch_fu_674_patches_parameters_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_delete_patch_fu_674_patches_parameters_ce1 : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_687_ap_start : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_687_ap_done : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_687_ap_idle : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_687_ap_ready : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_687_ap_ce : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_687_z_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_687_z_j : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_687_i : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_687_j : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_687_k : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_get_index_from_z_fu_701_ap_start : STD_LOGIC;
    signal grp_get_index_from_z_fu_701_ap_done : STD_LOGIC;
    signal grp_get_index_from_z_fu_701_ap_idle : STD_LOGIC;
    signal grp_get_index_from_z_fu_701_ap_ready : STD_LOGIC;
    signal grp_get_index_from_z_fu_701_GDn_points_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_get_index_from_z_fu_701_GDn_points_ce0 : STD_LOGIC;
    signal grp_get_index_from_z_fu_701_layer : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_get_index_from_z_fu_701_z_value : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_get_index_from_z_fu_701_GDarrayDecoded_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_get_index_from_z_fu_701_GDarrayDecoded_ce0 : STD_LOGIC;
    signal grp_get_index_from_z_fu_701_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_areWedgeSuperPointsEqual_fu_715_ap_start : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_715_ap_done : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_715_ap_idle : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_715_ap_ready : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_715_wsp2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_areWedgeSuperPointsEqual_fu_715_wsp2_ce0 : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_715_wsp2_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_areWedgeSuperPointsEqual_fu_715_wsp2_ce1 : STD_LOGIC;
    signal grp_areWedgeSuperPointsEqual_fu_715_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_460 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_phi_mux_empty_68_phi_fu_486_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_68_reg_483 : STD_LOGIC_VECTOR (8 downto 0);
    signal counter_0_reg_514 : STD_LOGIC_VECTOR (31 downto 0);
    signal counterUpshift_0_reg_524 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_71_reg_534 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_i_5_phi_fu_559_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal ap_phi_mux_i_6_phi_fu_571_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal i_8_reg_613 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_phi_mux_current_z_top_index_0_phi_fu_628_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_z_top_index_0_reg_625 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_phi_mux_z_top_min_4_phi_fu_639_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_top_min_4_reg_636 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_makePatch_alignedToLine_fu_647_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal grp_delete_patch_fu_674_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal grp_straightLineProjectorFromLayerIJtoK_fu_687_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_NS_fsm_state4 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_get_index_from_z_fu_701_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_areWedgeSuperPointsEqual_fu_715_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm_state66 : STD_LOGIC;
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal i_4_cast_fu_913_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal tmp_4_fu_982_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1325_cast_fu_1003_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1357_fu_1172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1362_fu_1206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1367_fu_1236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal new_z_i_atTop_V_3_fu_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_atTop_V_3_1_fu_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal new_z_i_atTop_V_3_2_fu_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_atTop_V_3_3_fu_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_z_i_atTop_V_3_4_fu_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_725_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1282_fu_871_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1301_fu_942_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal icmp_ln870_fu_774_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_800_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1288_fu_812_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1278_fu_827_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1296_fu_878_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1296_fu_882_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1296_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1301_fu_929_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1301_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1301_1_fu_937_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln1314_fu_977_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1333_fu_1037_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1056_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln1335_fu_1070_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln1335_fu_1073_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_10_fu_1084_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln180_1_fu_1078_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1335_1_fu_1100_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1335_fu_1103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1335_fu_1109_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1357_fu_1128_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_fu_1149_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln215_fu_1163_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_6_fu_1186_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln180_fu_1181_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln180_fu_1193_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln1355_fu_1200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln215_5_fu_1222_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_7_fu_1240_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln180_2_fu_1247_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln1360_fu_1253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln215_6_fu_1266_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_8_fu_1280_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln180_3_fu_1275_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln180_3_fu_1287_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln1365_fu_1294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln215_7_fu_1307_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1318_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1318_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln215_8_fu_1345_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_9_fu_1348_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_10_fu_1358_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_11_fu_1361_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln878_fu_1371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1424_fu_1375_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_11_fu_1385_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1318_ce : STD_LOGIC;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_state59_on_subcall_done : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component MPSQ_makePatch_alignedToLine IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        n_patches_i : IN STD_LOGIC_VECTOR (7 downto 0);
        n_patches_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        n_patches_o_ap_vld : OUT STD_LOGIC;
        GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        GDn_points_ce0 : OUT STD_LOGIC;
        GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_patch_stream_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_patch_stream_V_full_n : IN STD_LOGIC;
        output_patch_stream_V_write : OUT STD_LOGIC;
        apexZ0 : IN STD_LOGIC_VECTOR (31 downto 0);
        z_top : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        leftRight : IN STD_LOGIC_VECTOR (0 downto 0);
        GDarrayDecoded_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        GDarrayDecoded_ce0 : OUT STD_LOGIC;
        GDarrayDecoded_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        patches_superpoints_ce0 : OUT STD_LOGIC;
        patches_superpoints_we0 : OUT STD_LOGIC;
        patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        patches_superpoints_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        patches_superpoints_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        patches_superpoints_ce1 : OUT STD_LOGIC;
        patches_superpoints_we1 : OUT STD_LOGIC;
        patches_superpoints_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        patches_superpoints_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        patches_parameters_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        patches_parameters_ce0 : OUT STD_LOGIC;
        patches_parameters_we0 : OUT STD_LOGIC;
        patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_delete_patch IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        n_patches : OUT STD_LOGIC_VECTOR (7 downto 0);
        n_patches_ap_vld : OUT STD_LOGIC;
        n_patches_read : IN STD_LOGIC_VECTOR (7 downto 0);
        index : IN STD_LOGIC_VECTOR (1 downto 0);
        patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        patches_superpoints_ce0 : OUT STD_LOGIC;
        patches_superpoints_we0 : OUT STD_LOGIC;
        patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        patches_superpoints_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        patches_superpoints_ce1 : OUT STD_LOGIC;
        patches_superpoints_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        patches_parameters_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        patches_parameters_ce0 : OUT STD_LOGIC;
        patches_parameters_we0 : OUT STD_LOGIC;
        patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        patches_parameters_ce1 : OUT STD_LOGIC;
        patches_parameters_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_straightLineProjectorFromLayerIJtoK IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        z_i : IN STD_LOGIC_VECTOR (31 downto 0);
        z_j : IN STD_LOGIC_VECTOR (31 downto 0);
        i : IN STD_LOGIC_VECTOR (2 downto 0);
        j : IN STD_LOGIC_VECTOR (2 downto 0);
        k : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_get_index_from_z IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        GDn_points_ce0 : OUT STD_LOGIC;
        GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        layer : IN STD_LOGIC_VECTOR (2 downto 0);
        z_value : IN STD_LOGIC_VECTOR (31 downto 0);
        GDarrayDecoded_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        GDarrayDecoded_ce0 : OUT STD_LOGIC;
        GDarrayDecoded_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component MPSQ_areWedgeSuperPointsEqual IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        wsp2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        wsp2_ce0 : OUT STD_LOGIC;
        wsp2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        wsp2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        wsp2_ce1 : OUT STD_LOGIC;
        wsp2_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        wsp1_offset1 : IN STD_LOGIC_VECTOR (2 downto 0);
        wsp2_offset3 : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component MPSQ_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_mul_33s_64s_64_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MPSQ_solveComplmentaryPatch_current_z_i_index IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component MPSQ_solveComplmentaryPatch_new_z_i_index IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component MPSQ_solveComplmentaryPatch_new_z_i_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    current_z_i_index_U : component MPSQ_solveComplmentaryPatch_current_z_i_index
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => current_z_i_index_address0,
        ce0 => current_z_i_index_ce0,
        we0 => current_z_i_index_we0,
        d0 => grp_get_index_from_z_fu_701_ap_return,
        q0 => current_z_i_index_q0);

    new_z_i_index_U : component MPSQ_solveComplmentaryPatch_new_z_i_index
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => new_z_i_index_address0,
        ce0 => new_z_i_index_ce0,
        we0 => new_z_i_index_we0,
        d0 => new_z_i_index_d0,
        address1 => new_z_i_index_address1,
        ce1 => new_z_i_index_ce1,
        q1 => new_z_i_index_q1);

    new_z_i_V_U : component MPSQ_solveComplmentaryPatch_new_z_i_V
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => new_z_i_V_address0,
        ce0 => new_z_i_V_ce0,
        we0 => new_z_i_V_we0,
        d0 => reg_744,
        q0 => new_z_i_V_q0);

    grp_makePatch_alignedToLine_fu_647 : component MPSQ_makePatch_alignedToLine
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_makePatch_alignedToLine_fu_647_ap_start,
        ap_done => grp_makePatch_alignedToLine_fu_647_ap_done,
        ap_idle => grp_makePatch_alignedToLine_fu_647_ap_idle,
        ap_ready => grp_makePatch_alignedToLine_fu_647_ap_ready,
        n_patches_i => n_patches_i,
        n_patches_o => grp_makePatch_alignedToLine_fu_647_n_patches_o,
        n_patches_o_ap_vld => grp_makePatch_alignedToLine_fu_647_n_patches_o_ap_vld,
        GDn_points_address0 => grp_makePatch_alignedToLine_fu_647_GDn_points_address0,
        GDn_points_ce0 => grp_makePatch_alignedToLine_fu_647_GDn_points_ce0,
        GDn_points_q0 => GDn_points_q0,
        output_patch_stream_V_din => grp_makePatch_alignedToLine_fu_647_output_patch_stream_V_din,
        output_patch_stream_V_full_n => output_patch_stream_V_full_n,
        output_patch_stream_V_write => grp_makePatch_alignedToLine_fu_647_output_patch_stream_V_write,
        apexZ0 => complementary_apexZ0,
        z_top => grp_makePatch_alignedToLine_fu_647_z_top,
        p_read => grp_makePatch_alignedToLine_fu_647_p_read,
        leftRight => ap_const_lv1_1,
        GDarrayDecoded_address0 => grp_makePatch_alignedToLine_fu_647_GDarrayDecoded_address0,
        GDarrayDecoded_ce0 => grp_makePatch_alignedToLine_fu_647_GDarrayDecoded_ce0,
        GDarrayDecoded_q0 => GDarrayDecoded_q0,
        patches_superpoints_address0 => grp_makePatch_alignedToLine_fu_647_patches_superpoints_address0,
        patches_superpoints_ce0 => grp_makePatch_alignedToLine_fu_647_patches_superpoints_ce0,
        patches_superpoints_we0 => grp_makePatch_alignedToLine_fu_647_patches_superpoints_we0,
        patches_superpoints_d0 => grp_makePatch_alignedToLine_fu_647_patches_superpoints_d0,
        patches_superpoints_q0 => patches_superpoints_q0,
        patches_superpoints_address1 => grp_makePatch_alignedToLine_fu_647_patches_superpoints_address1,
        patches_superpoints_ce1 => grp_makePatch_alignedToLine_fu_647_patches_superpoints_ce1,
        patches_superpoints_we1 => grp_makePatch_alignedToLine_fu_647_patches_superpoints_we1,
        patches_superpoints_d1 => grp_makePatch_alignedToLine_fu_647_patches_superpoints_d1,
        patches_superpoints_q1 => patches_superpoints_q1,
        patches_parameters_address0 => grp_makePatch_alignedToLine_fu_647_patches_parameters_address0,
        patches_parameters_ce0 => grp_makePatch_alignedToLine_fu_647_patches_parameters_ce0,
        patches_parameters_we0 => grp_makePatch_alignedToLine_fu_647_patches_parameters_we0,
        patches_parameters_d0 => grp_makePatch_alignedToLine_fu_647_patches_parameters_d0,
        patches_parameters_q0 => patches_parameters_q0,
        ap_return => grp_makePatch_alignedToLine_fu_647_ap_return);

    grp_delete_patch_fu_674 : component MPSQ_delete_patch
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_delete_patch_fu_674_ap_start,
        ap_done => grp_delete_patch_fu_674_ap_done,
        ap_idle => grp_delete_patch_fu_674_ap_idle,
        ap_ready => grp_delete_patch_fu_674_ap_ready,
        n_patches => grp_delete_patch_fu_674_n_patches,
        n_patches_ap_vld => grp_delete_patch_fu_674_n_patches_ap_vld,
        n_patches_read => reg_749,
        index => ap_const_lv2_0,
        patches_superpoints_address0 => grp_delete_patch_fu_674_patches_superpoints_address0,
        patches_superpoints_ce0 => grp_delete_patch_fu_674_patches_superpoints_ce0,
        patches_superpoints_we0 => grp_delete_patch_fu_674_patches_superpoints_we0,
        patches_superpoints_d0 => grp_delete_patch_fu_674_patches_superpoints_d0,
        patches_superpoints_address1 => grp_delete_patch_fu_674_patches_superpoints_address1,
        patches_superpoints_ce1 => grp_delete_patch_fu_674_patches_superpoints_ce1,
        patches_superpoints_q1 => patches_superpoints_q1,
        patches_parameters_address0 => grp_delete_patch_fu_674_patches_parameters_address0,
        patches_parameters_ce0 => grp_delete_patch_fu_674_patches_parameters_ce0,
        patches_parameters_we0 => grp_delete_patch_fu_674_patches_parameters_we0,
        patches_parameters_d0 => grp_delete_patch_fu_674_patches_parameters_d0,
        patches_parameters_address1 => grp_delete_patch_fu_674_patches_parameters_address1,
        patches_parameters_ce1 => grp_delete_patch_fu_674_patches_parameters_ce1,
        patches_parameters_q1 => patches_parameters_q1);

    grp_get_index_from_z_fu_701 : component MPSQ_get_index_from_z
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_get_index_from_z_fu_701_ap_start,
        ap_done => grp_get_index_from_z_fu_701_ap_done,
        ap_idle => grp_get_index_from_z_fu_701_ap_idle,
        ap_ready => grp_get_index_from_z_fu_701_ap_ready,
        GDn_points_address0 => grp_get_index_from_z_fu_701_GDn_points_address0,
        GDn_points_ce0 => grp_get_index_from_z_fu_701_GDn_points_ce0,
        GDn_points_q0 => GDn_points_q0,
        layer => grp_get_index_from_z_fu_701_layer,
        z_value => grp_get_index_from_z_fu_701_z_value,
        GDarrayDecoded_address0 => grp_get_index_from_z_fu_701_GDarrayDecoded_address0,
        GDarrayDecoded_ce0 => grp_get_index_from_z_fu_701_GDarrayDecoded_ce0,
        GDarrayDecoded_q0 => GDarrayDecoded_q0,
        ap_return => grp_get_index_from_z_fu_701_ap_return);

    grp_areWedgeSuperPointsEqual_fu_715 : component MPSQ_areWedgeSuperPointsEqual
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_areWedgeSuperPointsEqual_fu_715_ap_start,
        ap_done => grp_areWedgeSuperPointsEqual_fu_715_ap_done,
        ap_idle => grp_areWedgeSuperPointsEqual_fu_715_ap_idle,
        ap_ready => grp_areWedgeSuperPointsEqual_fu_715_ap_ready,
        wsp2_address0 => grp_areWedgeSuperPointsEqual_fu_715_wsp2_address0,
        wsp2_ce0 => grp_areWedgeSuperPointsEqual_fu_715_wsp2_ce0,
        wsp2_q0 => patches_superpoints_q0,
        wsp2_address1 => grp_areWedgeSuperPointsEqual_fu_715_wsp2_address1,
        wsp2_ce1 => grp_areWedgeSuperPointsEqual_fu_715_wsp2_ce1,
        wsp2_q1 => patches_superpoints_q1,
        wsp1_offset1 => i_8_reg_613,
        wsp2_offset3 => i_8_reg_613,
        ap_return => grp_areWedgeSuperPointsEqual_fu_715_ap_return);

    mux_42_32_1_1_U87 : component MPSQ_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => new_z_i_atTop_V_3_1_fu_198,
        din1 => new_z_i_atTop_V_3_2_fu_202,
        din2 => new_z_i_atTop_V_3_3_fu_206,
        din3 => new_z_i_atTop_V_3_4_fu_210,
        din4 => tmp_3_fu_1056_p5,
        dout => tmp_3_fu_1056_p6);

    mux_42_32_1_1_U88 : component MPSQ_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => new_z_i_atTop_V_3_1_fu_198,
        din1 => new_z_i_atTop_V_3_2_fu_202,
        din2 => new_z_i_atTop_V_3_3_fu_206,
        din3 => new_z_i_atTop_V_3_4_fu_210,
        din4 => lhs_fu_1149_p5,
        dout => lhs_fu_1149_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln870_fu_774_p2 = ap_const_lv1_1) and (icmp_ln1258_fu_768_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state13);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln870_fu_774_p2 = ap_const_lv1_1) and (icmp_ln1258_fu_768_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state16) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((tmp_5_fu_800_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state16) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state16);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((tmp_5_fu_800_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state19) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((tmp_5_fu_800_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state19) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state19);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((tmp_5_fu_800_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state23) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state23)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state23);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state27) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state27)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state27);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    ap_enable_reg_pp4_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state33) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state33)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state33);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter4 <= ap_enable_reg_pp5_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter5 <= ap_enable_reg_pp5_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter6 <= ap_enable_reg_pp5_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter7 <= ap_enable_reg_pp5_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter8 <= ap_enable_reg_pp5_iter7;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                    ap_enable_reg_pp5_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state43) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state43)) then 
                        ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state43);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                    ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                    ap_return_0_preg <= white_space_height_read;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                    ap_return_1_preg <= ap_phi_mux_current_z_top_index_0_phi_fu_628_p6;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                    ap_return_2_preg <= counter_0_reg_514;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                    ap_return_3_preg <= counterUpshift_0_reg_524;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                    ap_return_4_preg <= z_top_min_read;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                    ap_return_5_preg <= sext_ln534_1_reg_1950;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                    ap_return_6_preg <= ap_phi_mux_z_top_min_4_phi_fu_639_p6;
                end if; 
            end if;
        end if;
    end process;


    grp_areWedgeSuperPointsEqual_fu_715_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_areWedgeSuperPointsEqual_fu_715_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln1450_fu_1401_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state65) and (ap_const_logic_1 = ap_NS_fsm_state66))) then 
                    grp_areWedgeSuperPointsEqual_fu_715_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_areWedgeSuperPointsEqual_fu_715_ap_ready = ap_const_logic_1)) then 
                    grp_areWedgeSuperPointsEqual_fu_715_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_delete_patch_fu_674_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_delete_patch_fu_674_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state71) or ((icmp_ln1387_reg_1922 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58)))) then 
                    grp_delete_patch_fu_674_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_delete_patch_fu_674_ap_ready = ap_const_logic_1)) then 
                    grp_delete_patch_fu_674_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_get_index_from_z_fu_701_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_get_index_from_z_fu_701_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_get_index_from_z_fu_701_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_get_index_from_z_fu_701_ap_ready = ap_const_logic_1)) then 
                    grp_get_index_from_z_fu_701_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_makePatch_alignedToLine_fu_647_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_makePatch_alignedToLine_fu_647_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
                    grp_makePatch_alignedToLine_fu_647_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_makePatch_alignedToLine_fu_647_ap_ready = ap_const_logic_1)) then 
                    grp_makePatch_alignedToLine_fu_647_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_straightLineProjectorFromLayerIJtoK_fu_687_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_straightLineProjectorFromLayerIJtoK_fu_687_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln1320_reg_1755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_NS_fsm_state4)))) then 
                    grp_straightLineProjectorFromLayerIJtoK_fu_687_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_straightLineProjectorFromLayerIJtoK_fu_687_ap_ready = ap_const_logic_1)) then 
                    grp_straightLineProjectorFromLayerIJtoK_fu_687_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    counterUpshift_0_reg_524_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                if ((tmp_5_reg_1580 = ap_const_lv1_1)) then 
                    counterUpshift_0_reg_524 <= p_read13;
                elsif ((tmp_5_reg_1580 = ap_const_lv1_0)) then 
                    counterUpshift_0_reg_524 <= add_ln1287_reg_1584;
                end if;
            end if; 
        end if;
    end process;

    counter_0_reg_514_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                if ((tmp_5_reg_1580 = ap_const_lv1_1)) then 
                    counter_0_reg_514 <= add_ln1277_reg_1594;
                elsif ((tmp_5_reg_1580 = ap_const_lv1_0)) then 
                    counter_0_reg_514 <= p_read12;
                end if;
            end if; 
        end if;
    end process;

    current_z_top_index_0_reg_625_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln1450_reg_1959 = ap_const_lv1_1) and (icmp_ln1440_reg_1955 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state70)) or ((icmp_ln1440_fu_1395_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state64)))) then 
                current_z_top_index_0_reg_625 <= select_ln1296_reg_1652;
            elsif (((grp_makePatch_alignedToLine_fu_647_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state74))) then 
                current_z_top_index_0_reg_625 <= add_ln1470_fu_1452_p2;
            end if; 
        end if;
    end process;

    empty_68_reg_483_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln870_reg_1547 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                empty_68_reg_483 <= add_ln1265_reg_1551;
            elsif (((icmp_ln870_fu_774_p2 = ap_const_lv1_0) and (icmp_ln1258_fu_768_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                empty_68_reg_483 <= zext_ln1254_reg_1526;
            end if; 
        end if;
    end process;

    empty_71_reg_534_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                if ((tmp_5_reg_1580 = ap_const_lv1_1)) then 
                    empty_71_reg_534 <= sext_ln1280_reg_1599;
                elsif ((tmp_5_reg_1580 = ap_const_lv1_0)) then 
                    empty_71_reg_534 <= zext_ln1290_reg_1589;
                end if;
            end if; 
        end if;
    end process;

    i_1_reg_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln870_fu_774_p2 = ap_const_lv1_1) and (icmp_ln1258_fu_768_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_1_reg_472 <= ap_const_lv3_0;
            elsif (((icmp_ln1267_fu_789_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_1_reg_472 <= add_ln1267_fu_783_p2;
            end if; 
        end if;
    end process;

    i_2_reg_503_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_5_fu_800_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                i_2_reg_503 <= ap_const_lv3_0;
            elsif (((icmp_ln1280_fu_860_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i_2_reg_503 <= add_ln1280_fu_854_p2;
            end if; 
        end if;
    end process;

    i_3_reg_492_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_5_fu_800_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                i_3_reg_492 <= ap_const_lv3_0;
            elsif (((icmp_ln1290_fu_843_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_3_reg_492 <= add_ln1290_fu_837_p2;
            end if; 
        end if;
    end process;

    i_4_reg_544_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1299_fu_907_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                i_4_reg_544 <= add_ln1299_fu_901_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                i_4_reg_544 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_5_reg_555_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                i_5_reg_555 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln1312_reg_1701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                i_5_reg_555 <= add_ln1312_reg_1696;
            end if; 
        end if;
    end process;

    i_6_reg_567_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                i_6_reg_567 <= ap_const_lv3_1;
            elsif (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln1320_reg_1755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
                i_6_reg_567 <= add_ln1325_reg_1759;
            end if; 
        end if;
    end process;

    i_7_reg_578_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1333_fu_1046_p2 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then 
                i_7_reg_578 <= add_ln1333_fu_1040_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                i_7_reg_578 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_8_reg_613_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1440_fu_1395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state64))) then 
                i_8_reg_613 <= ap_const_lv3_0;
            elsif (((grp_areWedgeSuperPointsEqual_fu_715_ap_return = ap_const_lv1_1) and (icmp_ln1450_reg_1959 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then 
                i_8_reg_613 <= add_ln1450_reg_1963;
            end if; 
        end if;
    end process;

    i_reg_460_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_get_index_from_z_fu_701_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    i_reg_460 <= add_ln1260_reg_1532;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    i_reg_460 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    layerSMin_reg_589_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (icmp_ln1333_reg_1793_pp6_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then 
                layerSMin_reg_589 <= layerSMin_1_fu_1120_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                layerSMin_reg_589 <= ap_const_lv64_7FFFFFFFFFFFFFFF;
            end if; 
        end if;
    end process;

    layerWithSmallestShift_reg_601_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (icmp_ln1333_reg_1793_pp6_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then 
                layerWithSmallestShift_reg_601 <= layerWithSmallestShift_1_fu_1112_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                layerWithSmallestShift_reg_601 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    z_top_min_4_reg_636_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln1450_reg_1959 = ap_const_lv1_1) and (icmp_ln1440_reg_1955 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state70)) or ((icmp_ln1440_fu_1395_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state64)))) then 
                z_top_min_4_reg_636 <= select_ln1370_reg_1926;
            elsif (((grp_makePatch_alignedToLine_fu_647_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state74))) then 
                z_top_min_4_reg_636 <= lhs_reg_1833;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                GDn_points_load_reg_1647 <= GDn_points_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln1260_reg_1532 <= add_ln1260_fu_758_p2;
                    zext_ln1258_reg_1538(2 downto 0) <= zext_ln1258_fu_764_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln870_fu_774_p2 = ap_const_lv1_1) and (icmp_ln1258_fu_768_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln1265_reg_1551 <= add_ln1265_fu_778_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_5_fu_800_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                add_ln1277_reg_1594 <= add_ln1277_fu_822_p2;
                sext_ln1280_reg_1599 <= sext_ln1280_fu_833_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_5_fu_800_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                add_ln1287_reg_1584 <= add_ln1287_fu_807_p2;
                    zext_ln1290_reg_1589(8 downto 0) <= zext_ln1290_fu_818_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1299_reg_1665 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                add_ln1301_reg_1691 <= add_ln1301_fu_923_p2;
                trunc_ln1301_reg_1686 <= trunc_ln1301_fu_919_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                add_ln1312_reg_1696 <= add_ln1312_fu_950_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln1320_fu_991_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                add_ln1325_reg_1759 <= add_ln1325_fu_997_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                add_ln1325_reg_1759_pp5_iter1_reg <= add_ln1325_reg_1759;
                icmp_ln1320_reg_1755 <= icmp_ln1320_fu_991_p2;
                icmp_ln1320_reg_1755_pp5_iter1_reg <= icmp_ln1320_reg_1755;
                trunc_ln1322_reg_1770_pp5_iter1_reg <= trunc_ln1322_reg_1770;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                    add_ln1357_reg_1828(11 downto 1) <= add_ln1357_fu_1139_p2(11 downto 1);
                    tmp_5_cast_reg_1822(11 downto 1) <= tmp_5_cast_fu_1131_p3(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                    add_ln1362_reg_1852(11 downto 1) <= add_ln1362_fu_1176_p2(11 downto 1);
                lhs_reg_1833 <= lhs_fu_1149_p6;
                ret_2_reg_1840 <= ret_2_fu_1167_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                    add_ln1367_reg_1868(11 downto 1) <= add_ln1367_fu_1217_p2(11 downto 1);
                ret_3_reg_1873 <= ret_3_fu_1225_p2;
                sub_ln180_2_reg_1879 <= sub_ln180_2_fu_1230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                add_ln1450_reg_1963 <= add_ln1450_fu_1407_p2;
                icmp_ln1450_reg_1959 <= icmp_ln1450_fu_1401_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                agg_tmp7_reg_1556 <= grp_straightLineProjectorFromLayerIJtoK_fu_537_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1267_fu_789_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    i_1_cast_reg_1570(2 downto 0) <= i_1_cast_fu_795_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1280_fu_860_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                    i_2_cast_reg_1637(2 downto 0) <= i_2_cast_fu_866_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1290_fu_843_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    i_3_cast_reg_1613(2 downto 0) <= i_3_cast_fu_849_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1312_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                    i_5_cast_reg_1705(2 downto 0) <= i_5_cast_fu_962_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                    i_5_cast_reg_1705_pp4_iter1_reg(2 downto 0) <= i_5_cast_reg_1705(2 downto 0);
                icmp_ln1312_reg_1701 <= icmp_ln1312_fu_956_p2;
                icmp_ln1312_reg_1701_pp4_iter1_reg <= icmp_ln1312_reg_1701;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp4_stage0_11001)) then
                    i_5_cast_reg_1705_pp4_iter2_reg(2 downto 0) <= i_5_cast_reg_1705_pp4_iter1_reg(2 downto 0);
                    i_5_cast_reg_1705_pp4_iter3_reg(2 downto 0) <= i_5_cast_reg_1705_pp4_iter2_reg(2 downto 0);
                icmp_ln1312_reg_1701_pp4_iter2_reg <= icmp_ln1312_reg_1701_pp4_iter1_reg;
                icmp_ln1312_reg_1701_pp4_iter3_reg <= icmp_ln1312_reg_1701_pp4_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1267_reg_1566 <= icmp_ln1267_fu_789_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln1280_reg_1633 <= icmp_ln1280_fu_860_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln1290_reg_1609 <= icmp_ln1290_fu_843_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln1299_reg_1665 <= icmp_ln1299_fu_907_p2;
                icmp_ln1299_reg_1665_pp3_iter1_reg <= icmp_ln1299_reg_1665;
                new_z_i_index_addr_3_reg_1669_pp3_iter1_reg <= new_z_i_index_addr_3_reg_1669;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                icmp_ln1333_reg_1793 <= icmp_ln1333_fu_1046_p2;
                icmp_ln1333_reg_1793_pp6_iter1_reg <= icmp_ln1333_reg_1793;
                trunc_ln534_reg_1797_pp6_iter1_reg <= trunc_ln534_reg_1797;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                icmp_ln1387_reg_1922 <= icmp_ln1387_fu_1331_p2;
                tmp_9_reg_1917 <= grp_fu_1068_p_dout0(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                icmp_ln1440_reg_1955 <= icmp_ln1440_fu_1395_p2;
                sext_ln534_1_reg_1950 <= sext_ln534_1_fu_1381_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1258_fu_768_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                icmp_ln870_reg_1547 <= icmp_ln870_fu_774_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                lhs_2_reg_1862 <= lhs_2_fu_1210_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                lhs_3_reg_1889 <= lhs_3_fu_1259_p3;
                ret_4_reg_1894 <= ret_4_fu_1270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                lhs_4_reg_1901 <= lhs_4_fu_1300_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln1320_reg_1755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                new_z_i_V_load_reg_1774 <= new_z_i_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp5_iter8 = ap_const_logic_1) and (trunc_ln1322_reg_1770_pp5_iter7_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                new_z_i_atTop_V_3_1_fu_198 <= grp_straightLineProjectorFromLayerIJtoK_fu_537_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp5_iter8 = ap_const_logic_1) and (trunc_ln1322_reg_1770_pp5_iter7_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                new_z_i_atTop_V_3_2_fu_202 <= grp_straightLineProjectorFromLayerIJtoK_fu_537_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp5_iter8 = ap_const_logic_1) and (trunc_ln1322_reg_1770_pp5_iter7_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                new_z_i_atTop_V_3_3_fu_206 <= grp_straightLineProjectorFromLayerIJtoK_fu_537_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp5_iter8 = ap_const_logic_1) and (trunc_ln1322_reg_1770_pp5_iter7_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                new_z_i_atTop_V_3_4_fu_210 <= grp_straightLineProjectorFromLayerIJtoK_fu_537_p_dout0;
                new_z_i_atTop_V_3_fu_194 <= grp_straightLineProjectorFromLayerIJtoK_fu_537_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1299_fu_907_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                new_z_i_index_addr_3_reg_1669 <= i_4_cast_fu_913_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln1299_reg_1665 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                new_z_i_index_load_reg_1680 <= new_z_i_index_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                ppl_assign2_reg_1933 <= grp_makePatch_alignedToLine_fu_647_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) or ((icmp_ln1312_reg_1701_pp4_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter3 = ap_const_logic_1)))) then
                reg_744 <= GDarrayDecoded_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state57))) then
                reg_749 <= n_patches_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                ret_5_reg_1938 <= ret_5_fu_1352_p2;
                ret_6_reg_1944 <= ret_6_fu_1365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                ret_reg_1907 <= ret_fu_1310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                select_ln1296_reg_1652 <= select_ln1296_fu_893_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                select_ln1370_reg_1926 <= select_ln1370_fu_1339_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1333_reg_1793 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                select_ln180_1_reg_1807 <= select_ln180_1_fu_1092_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                sext_ln1333_reg_1779 <= sext_ln1333_fu_1037_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1333_fu_1046_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                tmp_3_reg_1802 <= tmp_3_fu_1056_p6;
                trunc_ln534_reg_1797 <= trunc_ln534_fu_1052_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_5_reg_1580 <= tmp_5_fu_800_p1(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln1312_reg_1701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                    tmp_reg_1715(11 downto 1) <= tmp_fu_967_p4(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1320_fu_991_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                trunc_ln1322_reg_1770 <= trunc_ln1322_fu_1008_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp5_stage0_11001)) then
                trunc_ln1322_reg_1770_pp5_iter2_reg <= trunc_ln1322_reg_1770_pp5_iter1_reg;
                trunc_ln1322_reg_1770_pp5_iter3_reg <= trunc_ln1322_reg_1770_pp5_iter2_reg;
                trunc_ln1322_reg_1770_pp5_iter4_reg <= trunc_ln1322_reg_1770_pp5_iter3_reg;
                trunc_ln1322_reg_1770_pp5_iter5_reg <= trunc_ln1322_reg_1770_pp5_iter4_reg;
                trunc_ln1322_reg_1770_pp5_iter6_reg <= trunc_ln1322_reg_1770_pp5_iter5_reg;
                trunc_ln1322_reg_1770_pp5_iter7_reg <= trunc_ln1322_reg_1770_pp5_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    zext_ln1254_reg_1526(7 downto 0) <= zext_ln1254_fu_754_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln1254_reg_1526(8) <= '0';
    zext_ln1258_reg_1538(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_1_cast_reg_1570(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln1290_reg_1589(9) <= '0';
    i_3_cast_reg_1613(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_1637(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_5_cast_reg_1705(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_5_cast_reg_1705_pp4_iter1_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_5_cast_reg_1705_pp4_iter2_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_5_cast_reg_1705_pp4_iter3_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    tmp_reg_1715(0) <= '0';
    tmp_5_cast_reg_1822(0) <= '0';
    add_ln1357_reg_1828(0) <= '1';
    add_ln1362_reg_1852(0) <= '1';
    add_ln1367_reg_1868(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp4_iter3, ap_CS_fsm_state64, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln1258_fu_768_p2, icmp_ln870_fu_774_p2, ap_enable_reg_pp0_iter0, icmp_ln1267_fu_789_p2, tmp_5_fu_800_p3, ap_CS_fsm_state15, ap_enable_reg_pp1_iter0, icmp_ln1290_fu_843_p2, ap_enable_reg_pp2_iter0, icmp_ln1280_fu_860_p2, ap_enable_reg_pp3_iter0, icmp_ln1299_fu_907_p2, ap_enable_reg_pp3_iter1, ap_enable_reg_pp4_iter0, icmp_ln1312_fu_956_p2, icmp_ln1320_fu_991_p2, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1, ap_enable_reg_pp6_iter0, icmp_ln1333_fu_1046_p2, ap_enable_reg_pp6_iter2, ap_CS_fsm_state61, icmp_ln1440_fu_1395_p2, icmp_ln1450_reg_1959, ap_CS_fsm_state74, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter2, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter4, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter7, ap_enable_reg_pp5_iter8, ap_block_pp6_stage0_subdone, ap_enable_reg_pp6_iter1, grp_makePatch_alignedToLine_fu_647_ap_done, grp_delete_patch_fu_674_ap_done, grp_get_index_from_z_fu_701_ap_done, grp_areWedgeSuperPointsEqual_fu_715_ap_return, ap_CS_fsm_state12, ap_CS_fsm_state69, ap_CS_fsm_state59, ap_CS_fsm_state72, ap_block_state59_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_get_index_from_z_fu_701_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln870_fu_774_p2 = ap_const_lv1_1) and (icmp_ln1258_fu_768_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln870_fu_774_p2 = ap_const_lv1_0) and (icmp_ln1258_fu_768_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_get_index_from_z_fu_701_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln1267_fu_789_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln1267_fu_789_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                if (((tmp_5_fu_800_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln1290_fu_843_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln1290_fu_843_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((icmp_ln1280_fu_860_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln1280_fu_860_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln1299_fu_907_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln1299_fu_907_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (icmp_ln1312_fu_956_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) and not(((ap_enable_reg_pp4_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter3 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (icmp_ln1312_fu_956_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) or ((ap_enable_reg_pp4_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter3 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln1320_fu_991_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) and not(((ap_enable_reg_pp5_iter8 = ap_const_logic_1) and (ap_enable_reg_pp5_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln1320_fu_991_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) or ((ap_enable_reg_pp5_iter8 = ap_const_logic_1) and (ap_enable_reg_pp5_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
            when ap_ST_fsm_pp6_stage0 => 
                if ((not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (icmp_ln1333_fu_1046_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) and not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif ((((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (icmp_ln1333_fu_1046_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) or ((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state59) and (ap_const_boolean_0 = ap_block_state59_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                if (((grp_makePatch_alignedToLine_fu_647_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                if (((icmp_ln1440_fu_1395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state64))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                if (((grp_areWedgeSuperPointsEqual_fu_715_ap_return = ap_const_lv1_1) and (icmp_ln1450_reg_1959 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                elsif (((icmp_ln1450_reg_1959 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                if (((grp_delete_patch_fu_674_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                if (((grp_makePatch_alignedToLine_fu_647_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state74))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    GDarrayDecoded_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state61, ap_CS_fsm_state74, ap_enable_reg_pp4_iter2, grp_makePatch_alignedToLine_fu_647_GDarrayDecoded_address0, grp_get_index_from_z_fu_701_GDarrayDecoded_address0, ap_CS_fsm_state12, ap_block_pp4_stage0, tmp_4_fu_982_p3, zext_ln1357_fu_1172_p1, zext_ln1362_fu_1206_p1, zext_ln1367_fu_1236_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            GDarrayDecoded_address0 <= zext_ln1367_fu_1236_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            GDarrayDecoded_address0 <= zext_ln1362_fu_1206_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            GDarrayDecoded_address0 <= zext_ln1357_fu_1172_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            GDarrayDecoded_address0 <= tmp_4_fu_982_p3(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            GDarrayDecoded_address0 <= grp_get_index_from_z_fu_701_GDarrayDecoded_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            GDarrayDecoded_address0 <= grp_makePatch_alignedToLine_fu_647_GDarrayDecoded_address0;
        else 
            GDarrayDecoded_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    GDarrayDecoded_ce0_assign_proc : process(ap_block_pp4_stage0_11001, ap_CS_fsm_state2, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state61, ap_CS_fsm_state74, ap_enable_reg_pp4_iter2, grp_makePatch_alignedToLine_fu_647_GDarrayDecoded_ce0, grp_get_index_from_z_fu_701_GDarrayDecoded_ce0, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or ((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)))) then 
            GDarrayDecoded_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            GDarrayDecoded_ce0 <= grp_get_index_from_z_fu_701_GDarrayDecoded_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            GDarrayDecoded_ce0 <= grp_makePatch_alignedToLine_fu_647_GDarrayDecoded_ce0;
        else 
            GDarrayDecoded_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    GDn_points_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state18, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_state61, ap_CS_fsm_state74, grp_makePatch_alignedToLine_fu_647_GDn_points_address0, grp_get_index_from_z_fu_701_GDn_points_address0, ap_CS_fsm_state12, i_4_cast_fu_913_p1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            GDn_points_address0 <= i_4_cast_fu_913_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            GDn_points_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            GDn_points_address0 <= grp_get_index_from_z_fu_701_GDn_points_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            GDn_points_address0 <= grp_makePatch_alignedToLine_fu_647_GDn_points_address0;
        else 
            GDn_points_address0 <= "XXX";
        end if; 
    end process;


    GDn_points_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state18, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001, ap_CS_fsm_state61, ap_CS_fsm_state74, grp_makePatch_alignedToLine_fu_647_GDn_points_ce0, grp_get_index_from_z_fu_701_GDn_points_ce0, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            GDn_points_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            GDn_points_ce0 <= grp_get_index_from_z_fu_701_GDn_points_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            GDn_points_ce0 <= grp_makePatch_alignedToLine_fu_647_GDn_points_ce0;
        else 
            GDn_points_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1260_fu_758_p2 <= std_logic_vector(unsigned(i_reg_460) + unsigned(ap_const_lv3_1));
    add_ln1265_fu_778_p2 <= std_logic_vector(unsigned(zext_ln1254_reg_1526) + unsigned(ap_const_lv9_1));
    add_ln1267_fu_783_p2 <= std_logic_vector(unsigned(i_1_reg_472) + unsigned(ap_const_lv3_1));
    add_ln1277_fu_822_p2 <= std_logic_vector(unsigned(p_read12) + unsigned(ap_const_lv32_1));
    add_ln1278_fu_827_p2 <= std_logic_vector(unsigned(ap_phi_mux_empty_68_phi_fu_486_p4) + unsigned(ap_const_lv9_1FF));
    add_ln1280_fu_854_p2 <= std_logic_vector(unsigned(i_2_reg_503) + unsigned(ap_const_lv3_1));
    add_ln1282_fu_871_p2 <= std_logic_vector(unsigned(current_z_i_index_q0) + unsigned(ap_const_lv8_FF));
    add_ln1287_fu_807_p2 <= std_logic_vector(unsigned(p_read13) + unsigned(ap_const_lv32_1));
    add_ln1288_fu_812_p2 <= std_logic_vector(unsigned(ap_phi_mux_empty_68_phi_fu_486_p4) + unsigned(ap_const_lv9_1));
    add_ln1290_fu_837_p2 <= std_logic_vector(unsigned(i_3_reg_492) + unsigned(ap_const_lv3_1));
    add_ln1296_fu_882_p2 <= std_logic_vector(unsigned(GDn_points_load_reg_1647) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln1299_fu_901_p2 <= std_logic_vector(unsigned(i_4_reg_544) + unsigned(ap_const_lv3_1));
    add_ln1301_1_fu_937_p2 <= std_logic_vector(unsigned(trunc_ln1301_reg_1686) + unsigned(ap_const_lv8_FF));
    add_ln1301_fu_923_p2 <= std_logic_vector(unsigned(GDn_points_q0) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln1312_fu_950_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_5_phi_fu_559_p4) + unsigned(ap_const_lv3_1));
    add_ln1325_fu_997_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_6_phi_fu_571_p4) + unsigned(ap_const_lv3_1));
    add_ln1333_fu_1040_p2 <= std_logic_vector(unsigned(i_7_reg_578) + unsigned(ap_const_lv3_1));
    add_ln1357_fu_1139_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_1131_p3) + unsigned(ap_const_lv12_801));
    add_ln1362_fu_1176_p2 <= std_logic_vector(unsigned(tmp_5_cast_reg_1822) + unsigned(ap_const_lv12_601));
    add_ln1367_fu_1217_p2 <= std_logic_vector(unsigned(tmp_5_cast_reg_1822) + unsigned(ap_const_lv12_401));
    add_ln1450_fu_1407_p2 <= std_logic_vector(unsigned(i_8_reg_613) + unsigned(ap_const_lv3_1));
    add_ln1470_fu_1452_p2 <= std_logic_vector(unsigned(select_ln1296_reg_1652) + unsigned(ap_const_lv32_FFFFFFFF));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(14);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(19);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(21);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(23);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(25);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(17);
    ap_CS_fsm_state22 <= ap_CS_fsm(18);
    ap_CS_fsm_state26 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(22);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state42 <= ap_CS_fsm(24);
    ap_CS_fsm_state46 <= ap_CS_fsm(26);
    ap_CS_fsm_state47 <= ap_CS_fsm(27);
    ap_CS_fsm_state48 <= ap_CS_fsm(28);
    ap_CS_fsm_state49 <= ap_CS_fsm(29);
    ap_CS_fsm_state50 <= ap_CS_fsm(30);
    ap_CS_fsm_state51 <= ap_CS_fsm(31);
    ap_CS_fsm_state52 <= ap_CS_fsm(32);
    ap_CS_fsm_state53 <= ap_CS_fsm(33);
    ap_CS_fsm_state57 <= ap_CS_fsm(37);
    ap_CS_fsm_state58 <= ap_CS_fsm(38);
    ap_CS_fsm_state59 <= ap_CS_fsm(39);
    ap_CS_fsm_state60 <= ap_CS_fsm(40);
    ap_CS_fsm_state61 <= ap_CS_fsm(41);
    ap_CS_fsm_state62 <= ap_CS_fsm(42);
    ap_CS_fsm_state63 <= ap_CS_fsm(43);
    ap_CS_fsm_state64 <= ap_CS_fsm(44);
    ap_CS_fsm_state65 <= ap_CS_fsm(45);
    ap_CS_fsm_state66 <= ap_CS_fsm(46);
    ap_CS_fsm_state67 <= ap_CS_fsm(47);
    ap_CS_fsm_state68 <= ap_CS_fsm(48);
    ap_CS_fsm_state69 <= ap_CS_fsm(49);
    ap_CS_fsm_state70 <= ap_CS_fsm(50);
    ap_CS_fsm_state71 <= ap_CS_fsm(51);
    ap_CS_fsm_state72 <= ap_CS_fsm(52);
    ap_CS_fsm_state73 <= ap_CS_fsm(53);
    ap_CS_fsm_state74 <= ap_CS_fsm(54);
    ap_NS_fsm_state4 <= ap_NS_fsm(3);
    ap_NS_fsm_state66 <= ap_NS_fsm(46);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp4_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp4_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp5_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp5_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp5_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp5_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp5_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp5_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state59_on_subcall_done_assign_proc : process(icmp_ln1387_reg_1922, grp_delete_patch_fu_674_ap_done)
    begin
                ap_block_state59_on_subcall_done <= ((grp_delete_patch_fu_674_ap_done = ap_const_logic_0) and (icmp_ln1387_reg_1922 = ap_const_lv1_1));
    end process;


    ap_condition_pp0_exit_iter0_state13_assign_proc : process(icmp_ln1267_fu_789_p2)
    begin
        if ((icmp_ln1267_fu_789_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state16_assign_proc : process(icmp_ln1290_fu_843_p2)
    begin
        if ((icmp_ln1290_fu_843_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state16 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state19_assign_proc : process(icmp_ln1280_fu_860_p2)
    begin
        if ((icmp_ln1280_fu_860_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state23_assign_proc : process(icmp_ln1299_fu_907_p2)
    begin
        if ((icmp_ln1299_fu_907_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state23 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state27_assign_proc : process(icmp_ln1312_fu_956_p2)
    begin
        if ((icmp_ln1312_fu_956_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state27 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state27 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state33_assign_proc : process(icmp_ln1320_fu_991_p2)
    begin
        if ((icmp_ln1320_fu_991_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state33 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state33 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state43_assign_proc : process(icmp_ln1333_fu_1046_p2)
    begin
        if ((icmp_ln1333_fu_1046_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state43 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state43 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state70)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state70) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter3, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter4)
    begin
        if (((ap_enable_reg_pp4_iter4 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter3 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2, ap_enable_reg_pp5_iter3, ap_enable_reg_pp5_iter4, ap_enable_reg_pp5_iter5, ap_enable_reg_pp5_iter6, ap_enable_reg_pp5_iter7, ap_enable_reg_pp5_iter8)
    begin
        if (((ap_enable_reg_pp5_iter8 = ap_const_logic_0) and (ap_enable_reg_pp5_iter7 = ap_const_logic_0) and (ap_enable_reg_pp5_iter6 = ap_const_logic_0) and (ap_enable_reg_pp5_iter5 = ap_const_logic_0) and (ap_enable_reg_pp5_iter4 = ap_const_logic_0) and (ap_enable_reg_pp5_iter3 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter2, ap_enable_reg_pp6_iter1)
    begin
        if (((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_current_z_top_index_0_phi_fu_628_p6_assign_proc : process(select_ln1296_reg_1652, icmp_ln1440_reg_1955, icmp_ln1450_reg_1959, current_z_top_index_0_reg_625, ap_CS_fsm_state70)
    begin
        if (((icmp_ln1450_reg_1959 = ap_const_lv1_1) and (icmp_ln1440_reg_1955 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            ap_phi_mux_current_z_top_index_0_phi_fu_628_p6 <= select_ln1296_reg_1652;
        else 
            ap_phi_mux_current_z_top_index_0_phi_fu_628_p6 <= current_z_top_index_0_reg_625;
        end if; 
    end process;


    ap_phi_mux_empty_68_phi_fu_486_p4_assign_proc : process(icmp_ln870_reg_1547, add_ln1265_reg_1551, ap_CS_fsm_state15, empty_68_reg_483)
    begin
        if (((icmp_ln870_reg_1547 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_phi_mux_empty_68_phi_fu_486_p4 <= add_ln1265_reg_1551;
        else 
            ap_phi_mux_empty_68_phi_fu_486_p4 <= empty_68_reg_483;
        end if; 
    end process;


    ap_phi_mux_i_5_phi_fu_559_p4_assign_proc : process(i_5_reg_555, icmp_ln1312_reg_1701, add_ln1312_reg_1696, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln1312_reg_1701 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            ap_phi_mux_i_5_phi_fu_559_p4 <= add_ln1312_reg_1696;
        else 
            ap_phi_mux_i_5_phi_fu_559_p4 <= i_5_reg_555;
        end if; 
    end process;


    ap_phi_mux_i_6_phi_fu_571_p4_assign_proc : process(i_6_reg_567, icmp_ln1320_reg_1755, ap_CS_fsm_pp5_stage0, add_ln1325_reg_1759, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (icmp_ln1320_reg_1755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            ap_phi_mux_i_6_phi_fu_571_p4 <= add_ln1325_reg_1759;
        else 
            ap_phi_mux_i_6_phi_fu_571_p4 <= i_6_reg_567;
        end if; 
    end process;


    ap_phi_mux_z_top_min_4_phi_fu_639_p6_assign_proc : process(select_ln1370_reg_1926, icmp_ln1440_reg_1955, icmp_ln1450_reg_1959, ap_CS_fsm_state70, z_top_min_4_reg_636)
    begin
        if (((icmp_ln1450_reg_1959 = ap_const_lv1_1) and (icmp_ln1440_reg_1955 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
            ap_phi_mux_z_top_min_4_phi_fu_639_p6 <= select_ln1370_reg_1926;
        else 
            ap_phi_mux_z_top_min_4_phi_fu_639_p6 <= z_top_min_4_reg_636;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(white_space_height_read, ap_CS_fsm_state70, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            ap_return_0 <= white_space_height_read;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_phi_mux_current_z_top_index_0_phi_fu_628_p6, ap_CS_fsm_state70, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            ap_return_1 <= ap_phi_mux_current_z_top_index_0_phi_fu_628_p6;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(counter_0_reg_514, ap_CS_fsm_state70, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            ap_return_2 <= counter_0_reg_514;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(counterUpshift_0_reg_524, ap_CS_fsm_state70, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            ap_return_3 <= counterUpshift_0_reg_524;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(z_top_min_read, ap_CS_fsm_state70, ap_return_4_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            ap_return_4 <= z_top_min_read;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(sext_ln534_1_reg_1950, ap_CS_fsm_state70, ap_return_5_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            ap_return_5 <= sext_ln534_1_reg_1950;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(ap_CS_fsm_state70, ap_phi_mux_z_top_min_4_phi_fu_639_p6, ap_return_6_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            ap_return_6 <= ap_phi_mux_z_top_min_4_phi_fu_639_p6;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    current_z_i_index_address0_assign_proc : process(zext_ln1258_reg_1538, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, i_1_cast_fu_795_p1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, i_3_cast_fu_849_p1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, i_2_cast_fu_866_p1, ap_CS_fsm_state12, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            current_z_i_index_address0 <= i_2_cast_fu_866_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            current_z_i_index_address0 <= i_3_cast_fu_849_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            current_z_i_index_address0 <= i_1_cast_fu_795_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            current_z_i_index_address0 <= zext_ln1258_reg_1538(3 - 1 downto 0);
        else 
            current_z_i_index_address0 <= "XXX";
        end if; 
    end process;


    current_z_i_index_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, grp_get_index_from_z_fu_701_ap_done, ap_CS_fsm_state12)
    begin
        if ((((grp_get_index_from_z_fu_701_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            current_z_i_index_ce0 <= ap_const_logic_1;
        else 
            current_z_i_index_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    current_z_i_index_we0_assign_proc : process(grp_get_index_from_z_fu_701_ap_done, ap_CS_fsm_state12)
    begin
        if (((grp_get_index_from_z_fu_701_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            current_z_i_index_we0 <= ap_const_logic_1;
        else 
            current_z_i_index_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_areWedgeSuperPointsEqual_fu_715_ap_start <= grp_areWedgeSuperPointsEqual_fu_715_ap_start_reg;
    grp_delete_patch_fu_674_ap_start <= grp_delete_patch_fu_674_ap_start_reg;
    grp_fu_1068_p_ce <= ap_const_logic_1;
    grp_fu_1068_p_din0 <= sext_ln534_fu_1315_p1(33 - 1 downto 0);
    grp_fu_1068_p_din1 <= white_space_height_read;
    grp_fu_1318_ce <= ap_const_logic_1;
    grp_fu_1318_p0 <= sext_ln534_fu_1315_p1(33 - 1 downto 0);
    grp_fu_1318_p1 <= white_space_height_read;
    grp_fu_1318_p2 <= grp_fu_1068_p_dout0;
    grp_fu_725_p2 <= std_logic_vector(unsigned(current_z_i_index_q0) + unsigned(ap_const_lv8_1));
    grp_get_index_from_z_fu_701_ap_start <= grp_get_index_from_z_fu_701_ap_start_reg;

    grp_get_index_from_z_fu_701_layer_assign_proc : process(ap_CS_fsm_state2, i_reg_460, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_get_index_from_z_fu_701_layer <= i_reg_460;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_get_index_from_z_fu_701_layer <= ap_const_lv3_4;
        else 
            grp_get_index_from_z_fu_701_layer <= "XXX";
        end if; 
    end process;


    grp_get_index_from_z_fu_701_z_value_assign_proc : process(z_top_min_read, ap_CS_fsm_state2, agg_tmp7_reg_1556, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_get_index_from_z_fu_701_z_value <= agg_tmp7_reg_1556;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_get_index_from_z_fu_701_z_value <= z_top_min_read;
        else 
            grp_get_index_from_z_fu_701_z_value <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_makePatch_alignedToLine_fu_647_ap_start <= grp_makePatch_alignedToLine_fu_647_ap_start_reg;

    grp_makePatch_alignedToLine_fu_647_p_read_assign_proc : process(ppl, ppl_assign2_reg_1933, ap_CS_fsm_state61, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_makePatch_alignedToLine_fu_647_p_read <= ppl_assign2_reg_1933;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_makePatch_alignedToLine_fu_647_p_read <= ppl;
        else 
            grp_makePatch_alignedToLine_fu_647_p_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_makePatch_alignedToLine_fu_647_z_top_assign_proc : process(lhs_reg_1833, select_ln1370_reg_1926, ap_CS_fsm_state61, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_makePatch_alignedToLine_fu_647_z_top <= lhs_reg_1833;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_makePatch_alignedToLine_fu_647_z_top <= select_ln1370_reg_1926;
        else 
            grp_makePatch_alignedToLine_fu_647_z_top <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_straightLineProjectorFromLayerIJtoK_fu_537_p_ce <= ap_const_logic_1;
    grp_straightLineProjectorFromLayerIJtoK_fu_537_p_din1 <= complementary_apexZ0;
    grp_straightLineProjectorFromLayerIJtoK_fu_537_p_din2 <= grp_straightLineProjectorFromLayerIJtoK_fu_687_z_j;
    grp_straightLineProjectorFromLayerIJtoK_fu_537_p_din3 <= ap_const_lv3_1;
    grp_straightLineProjectorFromLayerIJtoK_fu_537_p_din4 <= grp_straightLineProjectorFromLayerIJtoK_fu_687_j;
    grp_straightLineProjectorFromLayerIJtoK_fu_537_p_din5 <= grp_straightLineProjectorFromLayerIJtoK_fu_687_k;
    grp_straightLineProjectorFromLayerIJtoK_fu_537_p_start <= grp_straightLineProjectorFromLayerIJtoK_fu_687_ap_start_reg;
    grp_straightLineProjectorFromLayerIJtoK_fu_687_ap_ce <= ap_const_logic_1;
    grp_straightLineProjectorFromLayerIJtoK_fu_687_ap_done <= grp_straightLineProjectorFromLayerIJtoK_fu_537_p_done;
    grp_straightLineProjectorFromLayerIJtoK_fu_687_ap_idle <= grp_straightLineProjectorFromLayerIJtoK_fu_537_p_idle;
    grp_straightLineProjectorFromLayerIJtoK_fu_687_ap_ready <= grp_straightLineProjectorFromLayerIJtoK_fu_537_p_ready;
    grp_straightLineProjectorFromLayerIJtoK_fu_687_ap_return <= grp_straightLineProjectorFromLayerIJtoK_fu_537_p_dout0;
    grp_straightLineProjectorFromLayerIJtoK_fu_687_ap_start <= grp_straightLineProjectorFromLayerIJtoK_fu_687_ap_start_reg;
    grp_straightLineProjectorFromLayerIJtoK_fu_687_i <= ap_const_lv3_1;

    grp_straightLineProjectorFromLayerIJtoK_fu_687_j_assign_proc : process(icmp_ln1320_reg_1755_pp5_iter1_reg, add_ln1325_reg_1759_pp5_iter1_reg, ap_enable_reg_pp5_iter2, ap_block_pp5_stage0, ap_CS_fsm_state4)
    begin
        if (((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (icmp_ln1320_reg_1755_pp5_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_687_j <= add_ln1325_reg_1759_pp5_iter1_reg;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_687_j <= ap_const_lv3_5;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_687_j <= "XXX";
        end if; 
    end process;


    grp_straightLineProjectorFromLayerIJtoK_fu_687_k_assign_proc : process(add_ln1260_reg_1532, icmp_ln1320_reg_1755_pp5_iter1_reg, ap_enable_reg_pp5_iter2, ap_block_pp5_stage0, ap_CS_fsm_state4)
    begin
        if (((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (icmp_ln1320_reg_1755_pp5_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_687_k <= ap_const_lv3_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_687_k <= add_ln1260_reg_1532;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_687_k <= "XXX";
        end if; 
    end process;

    grp_straightLineProjectorFromLayerIJtoK_fu_687_z_i <= complementary_apexZ0;

    grp_straightLineProjectorFromLayerIJtoK_fu_687_z_j_assign_proc : process(z_top_min_read, icmp_ln1320_reg_1755_pp5_iter1_reg, new_z_i_V_load_reg_1774, ap_enable_reg_pp5_iter2, ap_block_pp5_stage0, ap_CS_fsm_state4)
    begin
        if (((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (icmp_ln1320_reg_1755_pp5_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_687_z_j <= new_z_i_V_load_reg_1774;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_straightLineProjectorFromLayerIJtoK_fu_687_z_j <= z_top_min_read;
        else 
            grp_straightLineProjectorFromLayerIJtoK_fu_687_z_j <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_cast_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_472),64));
    i_2_cast_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_503),64));
    i_3_cast_fu_849_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_492),64));
    i_4_cast_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_544),64));
    i_5_cast_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_5_phi_fu_559_p4),64));
    icmp_ln1258_fu_768_p2 <= "1" when (i_reg_460 = ap_const_lv3_5) else "0";
    icmp_ln1267_fu_789_p2 <= "1" when (i_1_reg_472 = ap_const_lv3_5) else "0";
    icmp_ln1280_fu_860_p2 <= "1" when (i_2_reg_503 = ap_const_lv3_5) else "0";
    icmp_ln1290_fu_843_p2 <= "1" when (i_3_reg_492 = ap_const_lv3_5) else "0";
    icmp_ln1296_fu_887_p2 <= "1" when (signed(sext_ln1296_fu_878_p1) < signed(add_ln1296_fu_882_p2)) else "0";
    icmp_ln1299_fu_907_p2 <= "1" when (i_4_reg_544 = ap_const_lv3_5) else "0";
    icmp_ln1301_fu_932_p2 <= "1" when (signed(zext_ln1301_fu_929_p1) < signed(add_ln1301_reg_1691)) else "0";
    icmp_ln1312_fu_956_p2 <= "1" when (ap_phi_mux_i_5_phi_fu_559_p4 = ap_const_lv3_5) else "0";
    icmp_ln1320_fu_991_p2 <= "1" when (ap_phi_mux_i_6_phi_fu_571_p4 = ap_const_lv3_5) else "0";
    icmp_ln1333_fu_1046_p2 <= "1" when (i_7_reg_578 = ap_const_lv3_4) else "0";
    icmp_ln1335_fu_1103_p2 <= "1" when (signed(sext_ln1335_1_fu_1100_p1) < signed(layerSMin_reg_589)) else "0";
    icmp_ln1355_fu_1200_p2 <= "1" when (signed(select_ln180_fu_1193_p3) < signed(ap_const_lv33_1)) else "0";
    icmp_ln1360_fu_1253_p2 <= "1" when (signed(select_ln180_2_fu_1247_p3) < signed(ap_const_lv33_1)) else "0";
    icmp_ln1365_fu_1294_p2 <= "1" when (signed(select_ln180_3_fu_1287_p3) < signed(ap_const_lv33_1)) else "0";
    icmp_ln1387_fu_1331_p2 <= "1" when (unsigned(n_patches_i) > unsigned(nPatchesAtOriginal)) else "0";
    icmp_ln1440_fu_1395_p2 <= "1" when (tmp_11_fu_1385_p4 = ap_const_lv6_0) else "0";
    icmp_ln1450_fu_1401_p2 <= "1" when (unsigned(i_8_reg_613) < unsigned(ap_const_lv3_5)) else "0";
    icmp_ln870_fu_774_p0 <= z_top_min_read;
    icmp_ln870_fu_774_p2 <= "1" when (icmp_ln870_fu_774_p0 = previous_z_top_min_read) else "0";
    icmp_ln878_fu_1371_p2 <= "1" when (signed(ret_5_reg_1938) < signed(ret_6_reg_1944)) else "0";
    layerSMin_1_fu_1120_p3 <= 
        sext_ln1335_1_fu_1100_p1 when (icmp_ln1335_fu_1103_p2(0) = '1') else 
        layerSMin_reg_589;
    layerWithSmallestShift_1_fu_1112_p3 <= 
        zext_ln1335_fu_1109_p1 when (icmp_ln1335_fu_1103_p2(0) = '1') else 
        layerWithSmallestShift_reg_601;
    lhs_2_fu_1210_p3 <= 
        GDarrayDecoded_q0 when (icmp_ln1355_fu_1200_p2(0) = '1') else 
        lhs_reg_1833;
    lhs_3_fu_1259_p3 <= 
        reg_744 when (icmp_ln1360_fu_1253_p2(0) = '1') else 
        lhs_2_reg_1862;
    lhs_4_fu_1300_p3 <= 
        GDarrayDecoded_q0 when (icmp_ln1365_fu_1294_p2(0) = '1') else 
        lhs_3_reg_1889;
    lhs_fu_1149_p5 <= layerWithSmallestShift_reg_601(2 - 1 downto 0);

    n_patches_o_assign_proc : process(n_patches_i, icmp_ln1387_reg_1922, ap_CS_fsm_state61, ap_CS_fsm_state74, grp_makePatch_alignedToLine_fu_647_n_patches_o, grp_makePatch_alignedToLine_fu_647_n_patches_o_ap_vld, grp_delete_patch_fu_674_n_patches, grp_delete_patch_fu_674_n_patches_ap_vld, ap_CS_fsm_state59, ap_CS_fsm_state72)
    begin
        if ((((grp_delete_patch_fu_674_n_patches_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72)) or ((grp_delete_patch_fu_674_n_patches_ap_vld = ap_const_logic_1) and (icmp_ln1387_reg_1922 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then 
            n_patches_o <= grp_delete_patch_fu_674_n_patches;
        elsif ((((grp_makePatch_alignedToLine_fu_647_n_patches_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state74)) or ((grp_makePatch_alignedToLine_fu_647_n_patches_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61)))) then 
            n_patches_o <= grp_makePatch_alignedToLine_fu_647_n_patches_o;
        else 
            n_patches_o <= n_patches_i;
        end if; 
    end process;


    n_patches_o_ap_vld_assign_proc : process(icmp_ln1387_reg_1922, ap_CS_fsm_state61, ap_CS_fsm_state74, grp_makePatch_alignedToLine_fu_647_n_patches_o_ap_vld, grp_delete_patch_fu_674_n_patches_ap_vld, ap_CS_fsm_state59, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or ((icmp_ln1387_reg_1922 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then 
            n_patches_o_ap_vld <= grp_delete_patch_fu_674_n_patches_ap_vld;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            n_patches_o_ap_vld <= grp_makePatch_alignedToLine_fu_647_n_patches_o_ap_vld;
        else 
            n_patches_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_V_address0_assign_proc : process(i_5_cast_reg_1705_pp4_iter3_reg, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_enable_reg_pp4_iter4, ap_block_pp4_stage0, ap_block_pp5_stage0, trunc_ln1325_cast_fu_1003_p1)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            new_z_i_V_address0 <= trunc_ln1325_cast_fu_1003_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            new_z_i_V_address0 <= i_5_cast_reg_1705_pp4_iter3_reg(3 - 1 downto 0);
        else 
            new_z_i_V_address0 <= "XXX";
        end if; 
    end process;


    new_z_i_V_ce0_assign_proc : process(ap_block_pp4_stage0_11001, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, ap_enable_reg_pp4_iter4)
    begin
        if ((((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)) or ((ap_enable_reg_pp4_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)))) then 
            new_z_i_V_ce0 <= ap_const_logic_1;
        else 
            new_z_i_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_V_we0_assign_proc : process(ap_block_pp4_stage0_11001, icmp_ln1312_reg_1701_pp4_iter3_reg, ap_enable_reg_pp4_iter4)
    begin
        if (((ap_enable_reg_pp4_iter4 = ap_const_logic_1) and (icmp_ln1312_reg_1701_pp4_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
            new_z_i_V_we0 <= ap_const_logic_1;
        else 
            new_z_i_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, i_1_cast_reg_1570, ap_CS_fsm_pp1_stage0, i_3_cast_reg_1613, ap_CS_fsm_pp2_stage0, i_2_cast_reg_1637, new_z_i_index_addr_3_reg_1669_pp3_iter1_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter2, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            new_z_i_index_address0 <= new_z_i_index_addr_3_reg_1669_pp3_iter1_reg;
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            new_z_i_index_address0 <= i_2_cast_reg_1637(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            new_z_i_index_address0 <= i_3_cast_reg_1613(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            new_z_i_index_address0 <= i_1_cast_reg_1570(3 - 1 downto 0);
        else 
            new_z_i_index_address0 <= "XXX";
        end if; 
    end process;


    new_z_i_index_address1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, i_5_cast_fu_962_p1, ap_block_pp4_stage0, i_4_cast_fu_913_p1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            new_z_i_index_address1 <= i_5_cast_fu_962_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            new_z_i_index_address1 <= i_4_cast_fu_913_p1(3 - 1 downto 0);
        else 
            new_z_i_index_address1 <= "XXX";
        end if; 
    end process;


    new_z_i_index_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter2)
    begin
        if ((((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            new_z_i_index_ce0 <= ap_const_logic_1;
        else 
            new_z_i_index_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_ce1_assign_proc : process(ap_block_pp4_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0)
    begin
        if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            new_z_i_index_ce1 <= ap_const_logic_1;
        else 
            new_z_i_index_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    new_z_i_index_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter2, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp3_stage0, grp_fu_725_p2, add_ln1282_fu_871_p2, select_ln1301_fu_942_p3)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            new_z_i_index_d0 <= select_ln1301_fu_942_p3;
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            new_z_i_index_d0 <= add_ln1282_fu_871_p2;
        elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            new_z_i_index_d0 <= grp_fu_725_p2;
        else 
            new_z_i_index_d0 <= "XXXXXXXX";
        end if; 
    end process;


    new_z_i_index_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln1267_reg_1566, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln1290_reg_1609, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln1280_reg_1633, ap_block_pp3_stage0_11001, icmp_ln1299_reg_1665_pp3_iter1_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter2)
    begin
        if ((((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (icmp_ln1299_reg_1665_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln1280_reg_1633 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln1290_reg_1609 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1267_reg_1566 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            new_z_i_index_we0 <= ap_const_logic_1;
        else 
            new_z_i_index_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1314_fu_977_p2 <= (tmp_reg_1715 or ap_const_lv12_1);
    output_patch_stream_V_din <= grp_makePatch_alignedToLine_fu_647_output_patch_stream_V_din;

    output_patch_stream_V_write_assign_proc : process(ap_CS_fsm_state61, ap_CS_fsm_state74, grp_makePatch_alignedToLine_fu_647_output_patch_stream_V_write)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            output_patch_stream_V_write <= grp_makePatch_alignedToLine_fu_647_output_patch_stream_V_write;
        else 
            output_patch_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_address0_assign_proc : process(icmp_ln1387_reg_1922, ap_CS_fsm_state61, ap_CS_fsm_state74, grp_makePatch_alignedToLine_fu_647_patches_parameters_address0, grp_delete_patch_fu_674_patches_parameters_address0, ap_CS_fsm_state59, ap_CS_fsm_state72, ap_CS_fsm_state62)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            patches_parameters_address0 <= ap_const_lv64_B(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or ((icmp_ln1387_reg_1922 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then 
            patches_parameters_address0 <= grp_delete_patch_fu_674_patches_parameters_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            patches_parameters_address0 <= grp_makePatch_alignedToLine_fu_647_patches_parameters_address0;
        else 
            patches_parameters_address0 <= "XXXXXXX";
        end if; 
    end process;


    patches_parameters_address1_assign_proc : process(icmp_ln1387_reg_1922, grp_delete_patch_fu_674_patches_parameters_address1, ap_CS_fsm_state59, ap_CS_fsm_state72, ap_CS_fsm_state62)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            patches_parameters_address1 <= ap_const_lv64_9(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or ((icmp_ln1387_reg_1922 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then 
            patches_parameters_address1 <= grp_delete_patch_fu_674_patches_parameters_address1;
        else 
            patches_parameters_address1 <= "XXXXXXX";
        end if; 
    end process;


    patches_parameters_ce0_assign_proc : process(icmp_ln1387_reg_1922, ap_CS_fsm_state61, ap_CS_fsm_state74, grp_makePatch_alignedToLine_fu_647_patches_parameters_ce0, grp_delete_patch_fu_674_patches_parameters_ce0, ap_CS_fsm_state59, ap_CS_fsm_state72, ap_CS_fsm_state62)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            patches_parameters_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or ((icmp_ln1387_reg_1922 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then 
            patches_parameters_ce0 <= grp_delete_patch_fu_674_patches_parameters_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            patches_parameters_ce0 <= grp_makePatch_alignedToLine_fu_647_patches_parameters_ce0;
        else 
            patches_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_ce1_assign_proc : process(icmp_ln1387_reg_1922, grp_delete_patch_fu_674_patches_parameters_ce1, ap_CS_fsm_state59, ap_CS_fsm_state72, ap_CS_fsm_state62)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            patches_parameters_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or ((icmp_ln1387_reg_1922 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then 
            patches_parameters_ce1 <= grp_delete_patch_fu_674_patches_parameters_ce1;
        else 
            patches_parameters_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_d0_assign_proc : process(icmp_ln1387_reg_1922, ap_CS_fsm_state61, ap_CS_fsm_state74, grp_makePatch_alignedToLine_fu_647_patches_parameters_d0, grp_delete_patch_fu_674_patches_parameters_d0, ap_CS_fsm_state59, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or ((icmp_ln1387_reg_1922 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then 
            patches_parameters_d0 <= grp_delete_patch_fu_674_patches_parameters_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            patches_parameters_d0 <= grp_makePatch_alignedToLine_fu_647_patches_parameters_d0;
        else 
            patches_parameters_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_we0_assign_proc : process(icmp_ln1387_reg_1922, ap_CS_fsm_state61, ap_CS_fsm_state74, grp_makePatch_alignedToLine_fu_647_patches_parameters_we0, grp_delete_patch_fu_674_patches_parameters_we0, ap_CS_fsm_state59, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or ((icmp_ln1387_reg_1922 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then 
            patches_parameters_we0 <= grp_delete_patch_fu_674_patches_parameters_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            patches_parameters_we0 <= grp_makePatch_alignedToLine_fu_647_patches_parameters_we0;
        else 
            patches_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_address0_assign_proc : process(icmp_ln1387_reg_1922, ap_CS_fsm_state61, icmp_ln1450_reg_1959, ap_CS_fsm_state74, grp_makePatch_alignedToLine_fu_647_patches_superpoints_address0, grp_delete_patch_fu_674_patches_superpoints_address0, grp_areWedgeSuperPointsEqual_fu_715_wsp2_address0, ap_CS_fsm_state59, ap_CS_fsm_state72, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68)
    begin
        if ((((icmp_ln1450_reg_1959 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state68)) or ((icmp_ln1450_reg_1959 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state67)) or ((icmp_ln1450_reg_1959 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66)))) then 
            patches_superpoints_address0 <= grp_areWedgeSuperPointsEqual_fu_715_wsp2_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or ((icmp_ln1387_reg_1922 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then 
            patches_superpoints_address0 <= grp_delete_patch_fu_674_patches_superpoints_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            patches_superpoints_address0 <= grp_makePatch_alignedToLine_fu_647_patches_superpoints_address0;
        else 
            patches_superpoints_address0 <= "XXXXXXXX";
        end if; 
    end process;


    patches_superpoints_address1_assign_proc : process(icmp_ln1387_reg_1922, ap_CS_fsm_state61, icmp_ln1450_reg_1959, ap_CS_fsm_state74, grp_makePatch_alignedToLine_fu_647_patches_superpoints_address1, grp_delete_patch_fu_674_patches_superpoints_address1, grp_areWedgeSuperPointsEqual_fu_715_wsp2_address1, ap_CS_fsm_state59, ap_CS_fsm_state72, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68)
    begin
        if ((((icmp_ln1450_reg_1959 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state68)) or ((icmp_ln1450_reg_1959 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state67)) or ((icmp_ln1450_reg_1959 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66)))) then 
            patches_superpoints_address1 <= grp_areWedgeSuperPointsEqual_fu_715_wsp2_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or ((icmp_ln1387_reg_1922 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then 
            patches_superpoints_address1 <= grp_delete_patch_fu_674_patches_superpoints_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            patches_superpoints_address1 <= grp_makePatch_alignedToLine_fu_647_patches_superpoints_address1;
        else 
            patches_superpoints_address1 <= "XXXXXXXX";
        end if; 
    end process;


    patches_superpoints_ce0_assign_proc : process(icmp_ln1387_reg_1922, ap_CS_fsm_state61, icmp_ln1450_reg_1959, ap_CS_fsm_state74, grp_makePatch_alignedToLine_fu_647_patches_superpoints_ce0, grp_delete_patch_fu_674_patches_superpoints_ce0, grp_areWedgeSuperPointsEqual_fu_715_wsp2_ce0, ap_CS_fsm_state59, ap_CS_fsm_state72, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68)
    begin
        if ((((icmp_ln1450_reg_1959 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state68)) or ((icmp_ln1450_reg_1959 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state67)) or ((icmp_ln1450_reg_1959 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66)))) then 
            patches_superpoints_ce0 <= grp_areWedgeSuperPointsEqual_fu_715_wsp2_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or ((icmp_ln1387_reg_1922 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then 
            patches_superpoints_ce0 <= grp_delete_patch_fu_674_patches_superpoints_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            patches_superpoints_ce0 <= grp_makePatch_alignedToLine_fu_647_patches_superpoints_ce0;
        else 
            patches_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_ce1_assign_proc : process(icmp_ln1387_reg_1922, ap_CS_fsm_state61, icmp_ln1450_reg_1959, ap_CS_fsm_state74, grp_makePatch_alignedToLine_fu_647_patches_superpoints_ce1, grp_delete_patch_fu_674_patches_superpoints_ce1, grp_areWedgeSuperPointsEqual_fu_715_wsp2_ce1, ap_CS_fsm_state59, ap_CS_fsm_state72, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68)
    begin
        if ((((icmp_ln1450_reg_1959 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state68)) or ((icmp_ln1450_reg_1959 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state67)) or ((icmp_ln1450_reg_1959 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66)))) then 
            patches_superpoints_ce1 <= grp_areWedgeSuperPointsEqual_fu_715_wsp2_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or ((icmp_ln1387_reg_1922 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then 
            patches_superpoints_ce1 <= grp_delete_patch_fu_674_patches_superpoints_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            patches_superpoints_ce1 <= grp_makePatch_alignedToLine_fu_647_patches_superpoints_ce1;
        else 
            patches_superpoints_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_d0_assign_proc : process(icmp_ln1387_reg_1922, ap_CS_fsm_state61, ap_CS_fsm_state74, grp_makePatch_alignedToLine_fu_647_patches_superpoints_d0, grp_delete_patch_fu_674_patches_superpoints_d0, ap_CS_fsm_state59, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or ((icmp_ln1387_reg_1922 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then 
            patches_superpoints_d0 <= grp_delete_patch_fu_674_patches_superpoints_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            patches_superpoints_d0 <= grp_makePatch_alignedToLine_fu_647_patches_superpoints_d0;
        else 
            patches_superpoints_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    patches_superpoints_d1 <= grp_makePatch_alignedToLine_fu_647_patches_superpoints_d1;

    patches_superpoints_we0_assign_proc : process(icmp_ln1387_reg_1922, ap_CS_fsm_state61, ap_CS_fsm_state74, grp_makePatch_alignedToLine_fu_647_patches_superpoints_we0, grp_delete_patch_fu_674_patches_superpoints_we0, ap_CS_fsm_state59, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or ((icmp_ln1387_reg_1922 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then 
            patches_superpoints_we0 <= grp_delete_patch_fu_674_patches_superpoints_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            patches_superpoints_we0 <= grp_makePatch_alignedToLine_fu_647_patches_superpoints_we0;
        else 
            patches_superpoints_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_we1_assign_proc : process(ap_CS_fsm_state61, ap_CS_fsm_state74, grp_makePatch_alignedToLine_fu_647_patches_superpoints_we1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            patches_superpoints_we1 <= grp_makePatch_alignedToLine_fu_647_patches_superpoints_we1;
        else 
            patches_superpoints_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ret_2_fu_1167_p2 <= std_logic_vector(signed(sext_ln215_fu_1163_p1) - signed(sext_ln1333_reg_1779));
    ret_3_fu_1225_p2 <= std_logic_vector(signed(sext_ln215_5_fu_1222_p1) - signed(sext_ln1333_reg_1779));
    ret_4_fu_1270_p2 <= std_logic_vector(signed(sext_ln215_6_fu_1266_p1) - signed(sext_ln1333_reg_1779));
    ret_5_fu_1352_p2 <= std_logic_vector(signed(sext_ln215_8_fu_1345_p1) - signed(sext_ln215_9_fu_1348_p1));
    ret_6_fu_1365_p2 <= std_logic_vector(signed(sext_ln215_10_fu_1358_p1) - signed(sext_ln215_11_fu_1361_p1));
    ret_fu_1310_p2 <= std_logic_vector(signed(sext_ln215_7_fu_1307_p1) - signed(sext_ln1333_reg_1779));
    select_ln1296_fu_893_p3 <= 
        sext_ln1296_fu_878_p1 when (icmp_ln1296_fu_887_p2(0) = '1') else 
        add_ln1296_fu_882_p2;
    select_ln1301_fu_942_p3 <= 
        new_z_i_index_load_reg_1680 when (icmp_ln1301_fu_932_p2(0) = '1') else 
        add_ln1301_1_fu_937_p2;
    select_ln1370_fu_1339_p3 <= 
        new_z_i_atTop_V_3_fu_194 when (tmp_9_reg_1917(0) = '1') else 
        lhs_4_reg_1901;
    select_ln1424_fu_1375_p3 <= 
        ret_6_reg_1944 when (icmp_ln878_fu_1371_p2(0) = '1') else 
        ret_5_reg_1938;
    select_ln180_1_fu_1092_p3 <= 
        sub_ln180_1_fu_1078_p2 when (tmp_10_fu_1084_p3(0) = '1') else 
        sub_ln1335_fu_1073_p2;
    select_ln180_2_fu_1247_p3 <= 
        sub_ln180_2_reg_1879 when (tmp_7_fu_1240_p3(0) = '1') else 
        ret_3_reg_1873;
    select_ln180_3_fu_1287_p3 <= 
        sub_ln180_3_fu_1275_p2 when (tmp_8_fu_1280_p3(0) = '1') else 
        ret_4_reg_1894;
    select_ln180_fu_1193_p3 <= 
        sub_ln180_fu_1181_p2 when (tmp_6_fu_1186_p3(0) = '1') else 
        ret_2_reg_1840;
        sext_ln1280_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1278_fu_827_p2),10));

        sext_ln1296_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_71_reg_534),32));

    sext_ln1333_fu_1037_p0 <= z_top_min_read;
        sext_ln1333_fu_1037_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1333_fu_1037_p0),33));

        sext_ln1335_1_fu_1100_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln180_1_reg_1807),64));

        sext_ln1335_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_reg_1802),33));

        sext_ln215_10_fu_1358_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(original_d),33));

        sext_ln215_11_fu_1361_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(patches_parameters_q0),33));

        sext_ln215_5_fu_1222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_2_reg_1862),33));

        sext_ln215_6_fu_1266_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_3_fu_1259_p3),33));

        sext_ln215_7_fu_1307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_4_reg_1901),33));

        sext_ln215_8_fu_1345_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(original_c),33));

        sext_ln215_9_fu_1348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(patches_parameters_q1),33));

        sext_ln215_fu_1163_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_fu_1149_p6),33));

        sext_ln534_1_fu_1381_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln1424_fu_1375_p3),64));

        sext_ln534_fu_1315_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_reg_1907),64));

    sub_ln1335_fu_1073_p2 <= std_logic_vector(signed(sext_ln1335_fu_1070_p1) - signed(sext_ln1333_reg_1779));
    sub_ln180_1_fu_1078_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(sub_ln1335_fu_1073_p2));
    sub_ln180_2_fu_1230_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(ret_3_fu_1225_p2));
    sub_ln180_3_fu_1275_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(ret_4_reg_1894));
    sub_ln180_fu_1181_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(ret_2_reg_1840));
    tmp_10_fu_1084_p3 <= sub_ln1335_fu_1073_p2(32 downto 32);
    tmp_11_fu_1385_p4 <= n_patches_i(7 downto 2);
    tmp_3_fu_1056_p5 <= i_7_reg_578(2 - 1 downto 0);
    tmp_4_fu_982_p3 <= (ap_const_lv52_0 & or_ln1314_fu_977_p2);
    tmp_5_cast_fu_1131_p3 <= (trunc_ln1357_fu_1128_p1 & ap_const_lv1_0);
    tmp_5_fu_800_p1 <= white_space_height_read;
    tmp_5_fu_800_p3 <= tmp_5_fu_800_p1(63 downto 63);
    tmp_6_fu_1186_p3 <= ret_2_reg_1840(32 downto 32);
    tmp_7_fu_1240_p3 <= ret_3_reg_1873(32 downto 32);
    tmp_8_fu_1280_p3 <= ret_4_reg_1894(32 downto 32);
    tmp_fu_967_p4 <= ((i_5_reg_555 & new_z_i_index_q1) & ap_const_lv1_0);
    trunc_ln1301_fu_919_p1 <= GDn_points_q0(8 - 1 downto 0);
    trunc_ln1322_fu_1008_p1 <= ap_phi_mux_i_6_phi_fu_571_p4(2 - 1 downto 0);
    trunc_ln1325_cast_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_6_phi_fu_571_p4),64));
    trunc_ln1357_fu_1128_p1 <= select_ln1296_reg_1652(11 - 1 downto 0);
    trunc_ln534_fu_1052_p1 <= i_7_reg_578(2 - 1 downto 0);
    zext_ln1254_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_get_index_from_z_fu_701_ap_return),9));
    zext_ln1258_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_460),64));
    zext_ln1290_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1288_fu_812_p2),10));
    zext_ln1301_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_z_i_index_load_reg_1680),32));
    zext_ln1335_fu_1109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln534_reg_1797_pp6_iter1_reg),8));
    zext_ln1357_fu_1172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1357_reg_1828),64));
    zext_ln1362_fu_1206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1362_reg_1852),64));
    zext_ln1367_fu_1236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1367_reg_1868),64));
end behav;
