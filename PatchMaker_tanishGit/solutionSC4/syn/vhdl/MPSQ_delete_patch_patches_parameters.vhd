-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_delete_patch_patches_parameters is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    index : IN STD_LOGIC_VECTOR (7 downto 0);
    n_patches : IN STD_LOGIC_VECTOR (7 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    patches_parameters_ce1 : OUT STD_LOGIC;
    patches_parameters_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_delete_patch_patches_parameters is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_28 : STD_LOGIC_VECTOR (6 downto 0) := "0101000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten38_reg_148 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_10_reg_159 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten13_reg_168 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_reg_179 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_190 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_reg_201 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_213 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten60_reg_225 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_2_reg_236 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten46_reg_247 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_4_reg_258 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_4_reg_269 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln454_1_fu_306_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln454_1_reg_910 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_316_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal bound19_fu_352_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal bound19_reg_920 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln454_5_fu_358_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln454_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln454_reg_930 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln454_reg_930_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln454_reg_930_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln454_reg_930_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln457_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln457_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln454_1_fu_389_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln454_1_reg_940 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln454_fu_397_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln454_reg_947 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln454_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln454_reg_952 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln463_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln463_reg_957 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln454_1_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln454_1_reg_962 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln457_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln457_reg_967 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln457_1_fu_431_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln457_1_reg_972 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln463_2_fu_445_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln457_2_fu_459_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln463_fu_606_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln463_reg_989 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln463_1_fu_614_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln463_1_reg_994 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal trunc_ln474_fu_632_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln474_reg_999 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln474_1_fu_636_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln474_1_reg_1004 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln474_2_fu_646_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln474_2_reg_1009 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln474_3_fu_650_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln474_3_reg_1014 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln469_fu_654_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln469_reg_1019 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln474_7_fu_714_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln474_7_reg_1029 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln474_7_reg_1029_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal patches_parameters_load_reg_1034 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal add_ln481_1_fu_724_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state9_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln481_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln481_reg_1044 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln481_reg_1044_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln481_1_fu_756_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln481_1_reg_1048 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln487_fu_794_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln487_reg_1054 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln487_1_fu_802_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln487_1_reg_1059 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln493_fu_810_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln487_2_fu_822_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln498_2_fu_889_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln498_2_reg_1075 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_i_10_phi_fu_162_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_a_phi_fu_183_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_b_phi_fu_205_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_c_phi_fu_217_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_a_2_phi_fu_240_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_b_4_phi_fu_262_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln474_9_fu_709_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln474_10_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln498_4_fu_895_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln454_fu_280_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln454_fu_286_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal umax16_fu_298_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln453_fu_312_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln454_2_fu_322_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln454_1_fu_327_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_340_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_fu_332_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl2_fu_348_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_12_fu_369_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln454_fu_381_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln457_fu_419_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln463_1_fu_439_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln457_1_fu_453_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln454_4_fu_467_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_476_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln474_1_fu_484_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln474_fu_472_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_497_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln474_3_fu_504_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln474_2_fu_494_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln469_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln474_fu_488_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln474_5_fu_535_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln474_2_fu_538_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_35_fu_544_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln474_1_fu_508_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln474_4_fu_532_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln474_3_fu_556_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_36_fu_562_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal xor_ln457_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln454_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln457_1_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln457_fu_525_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln457_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln463_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln463_1_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln463_fu_590_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln474_6_fu_552_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln474_7_fu_622_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln474_4_fu_626_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln463_fu_570_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln474_5_fu_640_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_shl5_cast_fu_660_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl6_cast_fu_667_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_cast_fu_680_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_cast_fu_687_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln474_fu_674_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln474_8_fu_700_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln474_6_fu_703_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln474_1_fu_694_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln487_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln481_fu_736_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln493_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln481_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln481_fu_748_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln481_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln487_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln487_fu_782_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln487_1_fu_816_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_830_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln498_fu_837_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln498_fu_841_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln498_1_fu_847_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln498_1_fu_850_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln498_fu_856_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_37_fu_868_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl9_cast_fu_860_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln498_2_fu_876_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln498_fu_880_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln498_3_fu_886_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_2_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                a_2_reg_236 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln481_reg_1044 = ap_const_lv1_0))) then 
                a_2_reg_236 <= select_ln481_1_reg_1048;
            end if; 
        end if;
    end process;

    a_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln454_reg_930 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                a_reg_179 <= select_ln457_1_reg_972;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                a_reg_179 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    b_4_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                b_4_reg_258 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln481_reg_1044 = ap_const_lv1_0))) then 
                b_4_reg_258 <= select_ln487_1_reg_1059;
            end if; 
        end if;
    end process;

    b_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln454_reg_930_pp0_iter1_reg = ap_const_lv1_0))) then 
                b_reg_201 <= select_ln463_1_reg_994;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                b_reg_201 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_4_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                c_4_reg_269 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln481_fu_730_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                c_4_reg_269 <= add_ln493_fu_810_p2;
            end if; 
        end if;
    end process;

    c_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln454_reg_930_pp0_iter1_reg = ap_const_lv1_0))) then 
                c_reg_213 <= add_ln469_reg_1019;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                c_reg_213 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_10_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln454_reg_930 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_10_reg_159 <= select_ln454_1_reg_940;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_10_reg_159 <= i_fu_316_p2;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln454_fu_364_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten13_reg_168 <= select_ln457_2_fu_459_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten13_reg_168 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten38_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln454_fu_364_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten38_reg_148 <= add_ln454_5_fu_358_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten38_reg_148 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten46_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten46_reg_247 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln481_fu_730_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten46_reg_247 <= select_ln487_2_fu_822_p3;
            end if; 
        end if;
    end process;

    indvar_flatten60_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten60_reg_225 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln481_fu_730_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten60_reg_225 <= add_ln481_1_fu_724_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln454_fu_364_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_190 <= select_ln463_2_fu_445_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_190 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                add_ln454_1_reg_910 <= add_ln454_1_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln454_reg_930 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                add_ln469_reg_1019 <= add_ln469_fu_654_p2;
                select_ln463_1_reg_994 <= select_ln463_1_fu_614_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln454_reg_930_pp0_iter1_reg = ap_const_lv1_0))) then
                add_ln474_7_reg_1029 <= add_ln474_7_fu_714_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln474_7_reg_1029_pp0_iter3_reg <= add_ln474_7_reg_1029;
                icmp_ln454_reg_930_pp0_iter2_reg <= icmp_ln454_reg_930_pp0_iter1_reg;
                icmp_ln454_reg_930_pp0_iter3_reg <= icmp_ln454_reg_930_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln481_reg_1044 = ap_const_lv1_0))) then
                add_ln498_2_reg_1075 <= add_ln498_2_fu_889_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln454_fu_364_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln454_1_reg_962 <= and_ln454_1_fu_413_p2;
                icmp_ln457_reg_934 <= icmp_ln457_fu_375_p2;
                icmp_ln463_reg_957 <= icmp_ln463_fu_407_p2;
                or_ln457_reg_967 <= or_ln457_fu_425_p2;
                trunc_ln454_reg_947 <= trunc_ln454_fu_397_p1;
                xor_ln454_reg_952 <= xor_ln454_fu_401_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    bound19_reg_920(14 downto 3) <= bound19_fu_352_p2(14 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln454_reg_930 <= icmp_ln454_fu_364_p2;
                icmp_ln454_reg_930_pp0_iter1_reg <= icmp_ln454_reg_930;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln481_reg_1044 <= icmp_ln481_fu_730_p2;
                icmp_ln481_reg_1044_pp1_iter1_reg <= icmp_ln481_reg_1044;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln454_reg_930_pp0_iter2_reg = ap_const_lv1_0))) then
                patches_parameters_load_reg_1034 <= patches_parameters_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln454_fu_364_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln454_1_reg_940 <= select_ln454_1_fu_389_p3;
                select_ln457_1_reg_972 <= select_ln457_1_fu_431_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln454_reg_930 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln463_reg_989 <= select_ln463_fu_606_p3;
                trunc_ln474_1_reg_1004 <= trunc_ln474_1_fu_636_p1;
                trunc_ln474_2_reg_1009 <= trunc_ln474_2_fu_646_p1;
                trunc_ln474_3_reg_1014 <= trunc_ln474_3_fu_650_p1;
                trunc_ln474_reg_999 <= trunc_ln474_fu_632_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln481_fu_730_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                select_ln481_1_reg_1048 <= select_ln481_1_fu_756_p3;
                select_ln487_1_reg_1059 <= select_ln487_1_fu_802_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln481_fu_730_p2 = ap_const_lv1_0))) then
                select_ln487_reg_1054 <= select_ln487_fu_794_p3;
            end if;
        end if;
    end process;
    bound19_reg_920(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln454_fu_364_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp1_iter0, icmp_ln481_fu_730_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter4, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln454_fu_364_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln454_fu_364_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln481_fu_730_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln481_fu_730_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln454_1_fu_306_p2 <= std_logic_vector(unsigned(umax16_fu_298_p3) + unsigned(index));
    add_ln454_2_fu_322_p2 <= std_logic_vector(unsigned(add_ln454_1_reg_910) + unsigned(ap_const_lv8_1));
    add_ln454_4_fu_467_p2 <= std_logic_vector(unsigned(trunc_ln454_reg_947) + unsigned(ap_const_lv2_1));
    add_ln454_5_fu_358_p2 <= std_logic_vector(unsigned(indvar_flatten38_reg_148) + unsigned(ap_const_lv15_1));
    add_ln454_fu_280_p2 <= std_logic_vector(unsigned(n_patches) + unsigned(ap_const_lv8_FF));
    add_ln457_1_fu_453_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_168) + unsigned(ap_const_lv8_1));
    add_ln457_fu_419_p2 <= std_logic_vector(unsigned(select_ln454_fu_381_p3) + unsigned(ap_const_lv3_1));
    add_ln463_1_fu_439_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_190) + unsigned(ap_const_lv6_1));
    add_ln463_fu_590_p2 <= std_logic_vector(unsigned(select_ln457_fu_525_p3) + unsigned(ap_const_lv3_1));
    add_ln469_fu_654_p2 <= std_logic_vector(unsigned(select_ln463_fu_606_p3) + unsigned(ap_const_lv3_1));
    add_ln474_1_fu_508_p2 <= std_logic_vector(unsigned(zext_ln474_3_fu_504_p1) + unsigned(zext_ln474_2_fu_494_p1));
    add_ln474_2_fu_538_p2 <= std_logic_vector(unsigned(add_ln474_fu_488_p2) + unsigned(zext_ln474_5_fu_535_p1));
    add_ln474_3_fu_556_p2 <= std_logic_vector(unsigned(add_ln474_1_fu_508_p2) + unsigned(zext_ln474_4_fu_532_p1));
    add_ln474_4_fu_626_p2 <= std_logic_vector(unsigned(zext_ln474_6_fu_552_p1) + unsigned(zext_ln474_7_fu_622_p1));
    add_ln474_5_fu_640_p2 <= std_logic_vector(unsigned(zext_ln463_fu_570_p1) + unsigned(zext_ln474_7_fu_622_p1));
    add_ln474_6_fu_703_p2 <= std_logic_vector(unsigned(sub_ln474_fu_674_p2) + unsigned(zext_ln474_8_fu_700_p1));
    add_ln474_7_fu_714_p2 <= std_logic_vector(unsigned(sub_ln474_1_fu_694_p2) + unsigned(zext_ln474_8_fu_700_p1));
    add_ln474_fu_488_p2 <= std_logic_vector(unsigned(zext_ln474_1_fu_484_p1) + unsigned(zext_ln474_fu_472_p1));
    add_ln481_1_fu_724_p2 <= std_logic_vector(unsigned(indvar_flatten60_reg_225) + unsigned(ap_const_lv7_1));
    add_ln481_fu_736_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_2_phi_fu_240_p4) + unsigned(ap_const_lv3_1));
    add_ln487_1_fu_816_p2 <= std_logic_vector(unsigned(indvar_flatten46_reg_247) + unsigned(ap_const_lv6_1));
    add_ln487_fu_782_p2 <= std_logic_vector(unsigned(select_ln481_fu_748_p3) + unsigned(ap_const_lv3_1));
    add_ln493_fu_810_p2 <= std_logic_vector(unsigned(select_ln487_fu_794_p3) + unsigned(ap_const_lv3_1));
    add_ln498_1_fu_850_p2 <= std_logic_vector(unsigned(add_ln498_fu_841_p2) + unsigned(zext_ln498_1_fu_847_p1));
    add_ln498_2_fu_889_p2 <= std_logic_vector(unsigned(sub_ln498_fu_880_p2) + unsigned(zext_ln498_3_fu_886_p1));
    add_ln498_fu_841_p2 <= std_logic_vector(unsigned(zext_ln498_fu_837_p1) + unsigned(ap_const_lv7_28));
    and_ln454_1_fu_413_p2 <= (xor_ln454_fu_401_p2 and icmp_ln463_fu_407_p2);
    and_ln454_fu_520_p2 <= (xor_ln454_reg_952 and icmp_ln469_fu_514_p2);
    and_ln457_fu_584_p2 <= (or_ln457_1_fu_579_p2 and and_ln454_fu_520_p2);
    and_ln481_fu_776_p2 <= (xor_ln481_fu_764_p2 and icmp_ln493_fu_770_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(5);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln454_fu_364_p2)
    begin
        if ((icmp_ln454_fu_364_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state9_assign_proc : process(icmp_ln481_fu_730_p2)
    begin
        if ((icmp_ln481_fu_730_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_a_2_phi_fu_240_p4_assign_proc : process(a_2_reg_236, ap_CS_fsm_pp1_stage0, icmp_ln481_reg_1044, select_ln481_1_reg_1048, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln481_reg_1044 = ap_const_lv1_0))) then 
            ap_phi_mux_a_2_phi_fu_240_p4 <= select_ln481_1_reg_1048;
        else 
            ap_phi_mux_a_2_phi_fu_240_p4 <= a_2_reg_236;
        end if; 
    end process;


    ap_phi_mux_a_phi_fu_183_p4_assign_proc : process(a_reg_179, ap_CS_fsm_pp0_stage0, icmp_ln454_reg_930, select_ln457_1_reg_972, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln454_reg_930 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_a_phi_fu_183_p4 <= select_ln457_1_reg_972;
        else 
            ap_phi_mux_a_phi_fu_183_p4 <= a_reg_179;
        end if; 
    end process;


    ap_phi_mux_b_4_phi_fu_262_p4_assign_proc : process(b_4_reg_258, ap_CS_fsm_pp1_stage0, icmp_ln481_reg_1044, select_ln487_1_reg_1059, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln481_reg_1044 = ap_const_lv1_0))) then 
            ap_phi_mux_b_4_phi_fu_262_p4 <= select_ln487_1_reg_1059;
        else 
            ap_phi_mux_b_4_phi_fu_262_p4 <= b_4_reg_258;
        end if; 
    end process;


    ap_phi_mux_b_phi_fu_205_p4_assign_proc : process(b_reg_201, icmp_ln454_reg_930_pp0_iter1_reg, select_ln463_1_reg_994, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln454_reg_930_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_b_phi_fu_205_p4 <= select_ln463_1_reg_994;
        else 
            ap_phi_mux_b_phi_fu_205_p4 <= b_reg_201;
        end if; 
    end process;


    ap_phi_mux_c_phi_fu_217_p4_assign_proc : process(c_reg_213, icmp_ln454_reg_930_pp0_iter1_reg, add_ln469_reg_1019, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln454_reg_930_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_c_phi_fu_217_p4 <= add_ln469_reg_1019;
        else 
            ap_phi_mux_c_phi_fu_217_p4 <= c_reg_213;
        end if; 
    end process;


    ap_phi_mux_i_10_phi_fu_162_p4_assign_proc : process(i_10_reg_159, ap_CS_fsm_pp0_stage0, icmp_ln454_reg_930, select_ln454_1_reg_940, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln454_reg_930 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_10_phi_fu_162_p4 <= select_ln454_1_reg_940;
        else 
            ap_phi_mux_i_10_phi_fu_162_p4 <= i_10_reg_159;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound19_fu_352_p2 <= std_logic_vector(unsigned(p_shl_fu_332_p3) - unsigned(p_shl2_fu_348_p1));
    empty_fu_292_p2 <= "1" when (unsigned(sub_ln454_fu_286_p2) > unsigned(ap_const_lv8_2)) else "0";
    i_12_fu_369_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_10_phi_fu_162_p4) + unsigned(ap_const_lv8_1));
    i_fu_316_p2 <= std_logic_vector(unsigned(sub_ln453_fu_312_p2) + unsigned(ap_const_lv8_FF));
    icmp_ln454_fu_364_p2 <= "1" when (indvar_flatten38_reg_148 = bound19_reg_920) else "0";
    icmp_ln457_fu_375_p2 <= "1" when (indvar_flatten13_reg_168 = ap_const_lv8_78) else "0";
    icmp_ln463_fu_407_p2 <= "1" when (indvar_flatten_reg_190 = ap_const_lv6_18) else "0";
    icmp_ln469_fu_514_p2 <= "1" when (ap_phi_mux_c_phi_fu_217_p4 = ap_const_lv3_6) else "0";
    icmp_ln481_fu_730_p2 <= "1" when (indvar_flatten60_reg_225 = ap_const_lv7_78) else "0";
    icmp_ln487_fu_742_p2 <= "1" when (indvar_flatten46_reg_247 = ap_const_lv6_18) else "0";
    icmp_ln493_fu_770_p2 <= "1" when (c_4_reg_269 = ap_const_lv3_6) else "0";
    or_ln457_1_fu_579_p2 <= (xor_ln457_fu_574_p2 or icmp_ln457_reg_934);
    or_ln457_fu_425_p2 <= (icmp_ln457_fu_375_p2 or and_ln454_1_fu_413_p2);
    or_ln463_1_fu_601_p2 <= (or_ln463_fu_596_p2 or icmp_ln457_reg_934);
    or_ln463_fu_596_p2 <= (and_ln457_fu_584_p2 or and_ln454_1_reg_962);
    or_ln487_fu_788_p2 <= (icmp_ln487_fu_742_p2 or and_ln481_fu_776_p2);
    p_shl2_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_340_p3),15));
    p_shl3_cast_fu_680_p3 <= (trunc_ln474_2_reg_1009 & ap_const_lv3_0);
    p_shl4_cast_fu_687_p3 <= (trunc_ln474_3_reg_1014 & ap_const_lv1_0);
    p_shl5_cast_fu_660_p3 <= (trunc_ln474_reg_999 & ap_const_lv3_0);
    p_shl6_cast_fu_667_p3 <= (trunc_ln474_1_reg_1004 & ap_const_lv1_0);
    p_shl9_cast_fu_860_p3 <= (trunc_ln498_fu_856_p1 & ap_const_lv3_0);
    p_shl_fu_332_p3 <= (sub_ln454_1_fu_327_p2 & ap_const_lv7_0);

    patches_parameters_address0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp1_iter2, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln474_10_fu_720_p1, zext_ln498_4_fu_895_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            patches_parameters_address0 <= zext_ln498_4_fu_895_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            patches_parameters_address0 <= zext_ln474_10_fu_720_p1(9 - 1 downto 0);
        else 
            patches_parameters_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    patches_parameters_address1 <= zext_ln474_9_fu_709_p1(9 - 1 downto 0);

    patches_parameters_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter4, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            patches_parameters_ce0 <= ap_const_logic_1;
        else 
            patches_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            patches_parameters_ce1 <= ap_const_logic_1;
        else 
            patches_parameters_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_d0_assign_proc : process(patches_parameters_load_reg_1034, ap_enable_reg_pp0_iter4, ap_enable_reg_pp1_iter2, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            patches_parameters_d0 <= ap_const_lv32_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            patches_parameters_d0 <= patches_parameters_load_reg_1034;
        else 
            patches_parameters_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln454_reg_930_pp0_iter3_reg, ap_block_pp1_stage0_11001, icmp_ln481_reg_1044_pp1_iter1_reg, ap_enable_reg_pp0_iter4, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln454_reg_930_pp0_iter3_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln481_reg_1044_pp1_iter1_reg = ap_const_lv1_0)))) then 
            patches_parameters_we0 <= ap_const_logic_1;
        else 
            patches_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln454_1_fu_389_p3 <= 
        i_12_fu_369_p2 when (icmp_ln457_fu_375_p2(0) = '1') else 
        ap_phi_mux_i_10_phi_fu_162_p4;
    select_ln454_fu_381_p3 <= 
        ap_const_lv3_0 when (icmp_ln457_fu_375_p2(0) = '1') else 
        ap_phi_mux_a_phi_fu_183_p4;
    select_ln457_1_fu_431_p3 <= 
        add_ln457_fu_419_p2 when (and_ln454_1_fu_413_p2(0) = '1') else 
        select_ln454_fu_381_p3;
    select_ln457_2_fu_459_p3 <= 
        ap_const_lv8_1 when (icmp_ln457_fu_375_p2(0) = '1') else 
        add_ln457_1_fu_453_p2;
    select_ln457_fu_525_p3 <= 
        ap_const_lv3_0 when (or_ln457_reg_967(0) = '1') else 
        ap_phi_mux_b_phi_fu_205_p4;
    select_ln463_1_fu_614_p3 <= 
        add_ln463_fu_590_p2 when (and_ln457_fu_584_p2(0) = '1') else 
        select_ln457_fu_525_p3;
    select_ln463_2_fu_445_p3 <= 
        ap_const_lv6_1 when (or_ln457_fu_425_p2(0) = '1') else 
        add_ln463_1_fu_439_p2;
    select_ln463_fu_606_p3 <= 
        ap_const_lv3_0 when (or_ln463_1_fu_601_p2(0) = '1') else 
        ap_phi_mux_c_phi_fu_217_p4;
    select_ln481_1_fu_756_p3 <= 
        add_ln481_fu_736_p2 when (icmp_ln487_fu_742_p2(0) = '1') else 
        ap_phi_mux_a_2_phi_fu_240_p4;
    select_ln481_fu_748_p3 <= 
        ap_const_lv3_0 when (icmp_ln487_fu_742_p2(0) = '1') else 
        ap_phi_mux_b_4_phi_fu_262_p4;
    select_ln487_1_fu_802_p3 <= 
        add_ln487_fu_782_p2 when (and_ln481_fu_776_p2(0) = '1') else 
        select_ln481_fu_748_p3;
    select_ln487_2_fu_822_p3 <= 
        ap_const_lv6_1 when (icmp_ln487_fu_742_p2(0) = '1') else 
        add_ln487_1_fu_816_p2;
    select_ln487_fu_794_p3 <= 
        ap_const_lv3_0 when (or_ln487_fu_788_p2(0) = '1') else 
        c_4_reg_269;
    sub_ln453_fu_312_p2 <= std_logic_vector(unsigned(n_patches) - unsigned(index));
    sub_ln454_1_fu_327_p2 <= std_logic_vector(unsigned(add_ln454_2_fu_322_p2) - unsigned(n_patches));
    sub_ln454_fu_286_p2 <= std_logic_vector(unsigned(add_ln454_fu_280_p2) - unsigned(index));
    sub_ln474_1_fu_694_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_680_p3) - unsigned(p_shl4_cast_fu_687_p3));
    sub_ln474_fu_674_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_660_p3) - unsigned(p_shl6_cast_fu_667_p3));
    sub_ln498_fu_880_p2 <= std_logic_vector(unsigned(p_shl9_cast_fu_860_p3) - unsigned(zext_ln498_2_fu_876_p1));
    tmp_35_fu_544_p3 <= (add_ln474_2_fu_538_p2 & ap_const_lv2_0);
    tmp_36_fu_562_p3 <= (add_ln474_3_fu_556_p2 & ap_const_lv2_0);
    tmp_37_fu_868_p3 <= (add_ln498_1_fu_850_p2 & ap_const_lv1_0);
    tmp_5_fu_497_p3 <= (select_ln454_1_reg_940 & ap_const_lv2_0);
    tmp_6_fu_830_p3 <= (select_ln481_1_reg_1048 & ap_const_lv2_0);
    tmp_fu_340_p3 <= (sub_ln454_1_fu_327_p2 & ap_const_lv3_0);
    tmp_s_fu_476_p3 <= (add_ln454_4_fu_467_p2 & ap_const_lv2_0);
    trunc_ln454_fu_397_p1 <= select_ln454_1_fu_389_p3(2 - 1 downto 0);
    trunc_ln474_1_fu_636_p1 <= add_ln474_4_fu_626_p2(8 - 1 downto 0);
    trunc_ln474_2_fu_646_p1 <= add_ln474_5_fu_640_p2(6 - 1 downto 0);
    trunc_ln474_3_fu_650_p1 <= add_ln474_5_fu_640_p2(8 - 1 downto 0);
    trunc_ln474_fu_632_p1 <= add_ln474_4_fu_626_p2(6 - 1 downto 0);
    trunc_ln498_fu_856_p1 <= add_ln498_1_fu_850_p2(6 - 1 downto 0);
    umax16_fu_298_p3 <= 
        sub_ln454_fu_286_p2 when (empty_fu_292_p2(0) = '1') else 
        ap_const_lv8_2;
    xor_ln454_fu_401_p2 <= (icmp_ln457_fu_375_p2 xor ap_const_lv1_1);
    xor_ln457_fu_574_p2 <= (icmp_ln463_reg_957 xor ap_const_lv1_1);
    xor_ln481_fu_764_p2 <= (icmp_ln487_fu_742_p2 xor ap_const_lv1_1);
    zext_ln463_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_562_p3),63));
    zext_ln474_10_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln474_7_reg_1029_pp0_iter3_reg),64));
    zext_ln474_1_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_476_p3),5));
    zext_ln474_2_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln454_1_reg_940),11));
    zext_ln474_3_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_497_p3),11));
    zext_ln474_4_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln457_1_reg_972),11));
    zext_ln474_5_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln457_1_reg_972),5));
    zext_ln474_6_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_544_p3),63));
    zext_ln474_7_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln463_1_fu_614_p3),63));
    zext_ln474_8_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln463_reg_989),9));
    zext_ln474_9_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln474_6_fu_703_p2),64));
    zext_ln474_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln454_4_fu_467_p2),5));
    zext_ln498_1_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln487_1_reg_1059),7));
    zext_ln498_2_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_868_p3),9));
    zext_ln498_3_fu_886_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln487_reg_1054),9));
    zext_ln498_4_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln498_2_reg_1075),64));
    zext_ln498_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_830_p3),7));
end behav;
