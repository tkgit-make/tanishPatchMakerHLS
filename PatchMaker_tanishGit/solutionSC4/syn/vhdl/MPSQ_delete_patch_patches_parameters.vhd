-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_delete_patch_patches_parameters is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    index : IN STD_LOGIC_VECTOR (7 downto 0);
    n_patches : IN STD_LOGIC_VECTOR (7 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    patches_parameters_ce1 : OUT STD_LOGIC;
    patches_parameters_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_delete_patch_patches_parameters is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten38_reg_139 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_11_reg_150 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten13_reg_159 : STD_LOGIC_VECTOR (5 downto 0);
    signal a_reg_170 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_182 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_reg_194 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_206 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten60_reg_218 : STD_LOGIC_VECTOR (4 downto 0);
    signal a_2_reg_229 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten46_reg_240 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_4_reg_251 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_4_reg_262 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln450_1_fu_299_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln450_1_reg_847 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_309_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal bound19_fu_345_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bound19_reg_857 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln450_5_fu_351_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln450_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln450_reg_867 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln450_reg_867_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln450_reg_867_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln453_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln453_reg_871 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln450_1_fu_374_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln450_1_reg_880 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln450_fu_382_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln450_reg_887 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln453_2_fu_392_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln453_1_fu_510_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln453_1_reg_897 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal add_ln470_fu_526_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln470_reg_902 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln459_fu_538_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln459_reg_907 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln459_fu_576_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln459_reg_912 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln459_1_fu_584_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln459_1_reg_917 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln465_fu_592_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln465_reg_924 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln459_2_fu_604_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln459_2_reg_929 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln470_5_fu_672_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln470_5_reg_939 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln477_1_fu_682_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state8_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln477_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln477_reg_949 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln477_1_fu_714_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln477_1_reg_953 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln483_fu_752_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln483_reg_959 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln483_1_fu_760_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln483_1_reg_964 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln489_fu_768_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln483_2_fu_780_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_phi_mux_i_11_phi_fu_153_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_a_phi_fu_174_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_186_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_b_phi_fu_198_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_c_phi_fu_210_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_a_2_phi_fu_233_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_b_4_phi_fu_255_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln470_9_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln470_10_fu_678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln494_3_fu_831_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln450_fu_273_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln450_fu_279_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal umax16_fu_291_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln449_fu_305_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln450_2_fu_315_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln450_1_fu_320_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_333_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_fu_325_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl2_fu_341_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_13_fu_362_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln453_1_fu_386_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln450_4_fu_407_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_416_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln470_1_fu_424_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln470_fu_412_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln470_fu_428_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_441_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln470_3_fu_448_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln470_2_fu_438_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln470_1_fu_452_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln465_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln450_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln459_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln450_fu_400_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln450_1_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln453_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln453_fu_491_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln450_fu_434_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln470_5_fu_522_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln453_fu_458_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln470_4_fu_518_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln470_1_fu_532_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln453_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln450_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln453_1_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln453_fu_502_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln453_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln459_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln459_1_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln459_fu_559_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln459_1_fu_598_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln470_fu_612_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln470_6_fu_617_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln470_2_fu_620_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_22_fu_634_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln470_7_fu_641_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln470_3_fu_644_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_44_cast_fu_626_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln470_8_fu_658_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln470_4_fu_661_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_46_cast_fu_650_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln483_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln477_fu_694_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln489_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln477_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln477_fu_706_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln477_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln483_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln483_fu_740_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln483_1_fu_774_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_788_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln494_fu_795_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln494_fu_799_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln494_1_fu_805_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln494_1_fu_808_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_49_cast_fu_814_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln494_2_fu_822_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln494_2_fu_825_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state8);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_2_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                a_2_reg_229 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln477_reg_949 = ap_const_lv1_0))) then 
                a_2_reg_229 <= select_ln477_1_reg_953;
            end if; 
        end if;
    end process;

    a_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln450_reg_867_pp0_iter1_reg = ap_const_lv1_0))) then 
                a_reg_170 <= select_ln453_1_reg_897;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                a_reg_170 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    b_4_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                b_4_reg_251 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln477_reg_949 = ap_const_lv1_0))) then 
                b_4_reg_251 <= select_ln483_1_reg_964;
            end if; 
        end if;
    end process;

    b_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln450_reg_867_pp0_iter1_reg = ap_const_lv1_0))) then 
                b_reg_194 <= select_ln459_1_reg_917;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                b_reg_194 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_4_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                c_4_reg_262 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln477_fu_688_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                c_4_reg_262 <= add_ln489_fu_768_p2;
            end if; 
        end if;
    end process;

    c_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln450_reg_867_pp0_iter1_reg = ap_const_lv1_0))) then 
                c_reg_206 <= add_ln465_reg_924;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                c_reg_206 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_11_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln450_reg_867 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_11_reg_150 <= select_ln450_1_reg_880;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_11_reg_150 <= i_fu_309_p2;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln450_fu_357_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten13_reg_159 <= select_ln453_2_fu_392_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten13_reg_159 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten38_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln450_fu_357_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten38_reg_139 <= add_ln450_5_fu_351_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten38_reg_139 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    indvar_flatten46_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten46_reg_240 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln477_fu_688_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten46_reg_240 <= select_ln483_2_fu_780_p3;
            end if; 
        end if;
    end process;

    indvar_flatten60_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten60_reg_218 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln477_fu_688_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten60_reg_218 <= add_ln477_1_fu_682_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln450_reg_867_pp0_iter1_reg = ap_const_lv1_0))) then 
                indvar_flatten_reg_182 <= select_ln459_2_reg_929;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_182 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                add_ln450_1_reg_847 <= add_ln450_1_fu_299_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln450_reg_867 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                add_ln465_reg_924 <= add_ln465_fu_592_p2;
                select_ln453_1_reg_897 <= select_ln453_1_fu_510_p3;
                select_ln459_1_reg_917 <= select_ln459_1_fu_584_p3;
                select_ln459_2_reg_929 <= select_ln459_2_fu_604_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln450_reg_867_pp0_iter1_reg = ap_const_lv1_0))) then
                add_ln470_5_reg_939 <= add_ln470_5_fu_672_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln450_reg_867 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln470_reg_902 <= add_ln470_fu_526_p2;
                select_ln459_reg_912 <= select_ln459_fu_576_p3;
                trunc_ln459_reg_907 <= trunc_ln459_fu_538_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    bound19_reg_857(12 downto 3) <= bound19_fu_345_p2(12 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln450_reg_867 <= icmp_ln450_fu_357_p2;
                icmp_ln450_reg_867_pp0_iter1_reg <= icmp_ln450_reg_867;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln450_reg_867_pp0_iter2_reg <= icmp_ln450_reg_867_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln450_fu_357_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln453_reg_871 <= icmp_ln453_fu_368_p2;
                trunc_ln450_reg_887 <= trunc_ln450_fu_382_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln477_reg_949 <= icmp_ln477_fu_688_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln450_fu_357_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln450_1_reg_880 <= select_ln450_1_fu_374_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln477_fu_688_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                select_ln477_1_reg_953 <= select_ln477_1_fu_714_p3;
                select_ln483_1_reg_964 <= select_ln483_1_fu_760_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln477_fu_688_p2 = ap_const_lv1_0))) then
                select_ln483_reg_959 <= select_ln483_fu_752_p3;
            end if;
        end if;
    end process;
    bound19_reg_857(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln450_fu_357_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter0, icmp_ln477_fu_688_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln450_fu_357_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln450_fu_357_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln477_fu_688_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln477_fu_688_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln450_1_fu_299_p2 <= std_logic_vector(unsigned(umax16_fu_291_p3) + unsigned(index));
    add_ln450_2_fu_315_p2 <= std_logic_vector(unsigned(add_ln450_1_reg_847) + unsigned(ap_const_lv8_1));
    add_ln450_4_fu_407_p2 <= std_logic_vector(unsigned(trunc_ln450_reg_887) + unsigned(ap_const_lv2_1));
    add_ln450_5_fu_351_p2 <= std_logic_vector(unsigned(indvar_flatten38_reg_139) + unsigned(ap_const_lv13_1));
    add_ln450_fu_273_p2 <= std_logic_vector(unsigned(n_patches) + unsigned(ap_const_lv8_FF));
    add_ln453_1_fu_386_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_159) + unsigned(ap_const_lv6_1));
    add_ln453_fu_491_p2 <= std_logic_vector(unsigned(select_ln450_fu_400_p3) + unsigned(ap_const_lv2_1));
    add_ln459_1_fu_598_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_186_p4) + unsigned(ap_const_lv5_1));
    add_ln459_fu_559_p2 <= std_logic_vector(unsigned(select_ln453_fu_502_p3) + unsigned(ap_const_lv3_1));
    add_ln465_fu_592_p2 <= std_logic_vector(unsigned(select_ln459_fu_576_p3) + unsigned(ap_const_lv2_1));
    add_ln470_1_fu_532_p2 <= std_logic_vector(signed(sext_ln453_fu_458_p1) + signed(zext_ln470_4_fu_518_p1));
    add_ln470_2_fu_620_p2 <= std_logic_vector(unsigned(shl_ln470_fu_612_p2) + unsigned(zext_ln470_6_fu_617_p1));
    add_ln470_3_fu_644_p2 <= std_logic_vector(unsigned(tmp_22_fu_634_p3) + unsigned(zext_ln470_7_fu_641_p1));
    add_ln470_4_fu_661_p2 <= std_logic_vector(unsigned(tmp_44_cast_fu_626_p3) + unsigned(zext_ln470_8_fu_658_p1));
    add_ln470_5_fu_672_p2 <= std_logic_vector(unsigned(tmp_46_cast_fu_650_p3) + unsigned(zext_ln470_8_fu_658_p1));
    add_ln470_fu_526_p2 <= std_logic_vector(signed(sext_ln450_fu_434_p1) + signed(zext_ln470_5_fu_522_p1));
    add_ln477_1_fu_682_p2 <= std_logic_vector(unsigned(indvar_flatten60_reg_218) + unsigned(ap_const_lv5_1));
    add_ln477_fu_694_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_2_phi_fu_233_p4) + unsigned(ap_const_lv2_1));
    add_ln483_1_fu_774_p2 <= std_logic_vector(unsigned(indvar_flatten46_reg_240) + unsigned(ap_const_lv5_1));
    add_ln483_fu_740_p2 <= std_logic_vector(unsigned(select_ln477_fu_706_p3) + unsigned(ap_const_lv3_1));
    add_ln489_fu_768_p2 <= std_logic_vector(unsigned(select_ln483_fu_752_p3) + unsigned(ap_const_lv2_1));
    add_ln494_1_fu_808_p2 <= std_logic_vector(unsigned(add_ln494_fu_799_p2) + unsigned(zext_ln494_1_fu_805_p1));
    add_ln494_2_fu_825_p2 <= std_logic_vector(unsigned(tmp_49_cast_fu_814_p3) + unsigned(zext_ln494_2_fu_822_p1));
    add_ln494_fu_799_p2 <= std_logic_vector(unsigned(zext_ln494_fu_795_p1) + unsigned(ap_const_lv6_18));
    and_ln450_1_fu_485_p2 <= (xor_ln450_fu_462_p2 and icmp_ln459_fu_479_p2);
    and_ln450_fu_473_p2 <= (xor_ln450_fu_462_p2 and icmp_ln465_fu_467_p2);
    and_ln453_fu_553_p2 <= (or_ln453_1_fu_548_p2 and and_ln450_fu_473_p2);
    and_ln477_fu_734_p2 <= (xor_ln477_fu_722_p2 and icmp_ln489_fu_728_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln450_fu_357_p2)
    begin
        if ((icmp_ln450_fu_357_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state8_assign_proc : process(icmp_ln477_fu_688_p2)
    begin
        if ((icmp_ln477_fu_688_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_a_2_phi_fu_233_p4_assign_proc : process(a_2_reg_229, ap_CS_fsm_pp1_stage0, icmp_ln477_reg_949, select_ln477_1_reg_953, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln477_reg_949 = ap_const_lv1_0))) then 
            ap_phi_mux_a_2_phi_fu_233_p4 <= select_ln477_1_reg_953;
        else 
            ap_phi_mux_a_2_phi_fu_233_p4 <= a_2_reg_229;
        end if; 
    end process;


    ap_phi_mux_a_phi_fu_174_p4_assign_proc : process(a_reg_170, icmp_ln450_reg_867_pp0_iter1_reg, select_ln453_1_reg_897, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln450_reg_867_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_a_phi_fu_174_p4 <= select_ln453_1_reg_897;
        else 
            ap_phi_mux_a_phi_fu_174_p4 <= a_reg_170;
        end if; 
    end process;


    ap_phi_mux_b_4_phi_fu_255_p4_assign_proc : process(b_4_reg_251, ap_CS_fsm_pp1_stage0, icmp_ln477_reg_949, select_ln483_1_reg_964, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln477_reg_949 = ap_const_lv1_0))) then 
            ap_phi_mux_b_4_phi_fu_255_p4 <= select_ln483_1_reg_964;
        else 
            ap_phi_mux_b_4_phi_fu_255_p4 <= b_4_reg_251;
        end if; 
    end process;


    ap_phi_mux_b_phi_fu_198_p4_assign_proc : process(b_reg_194, icmp_ln450_reg_867_pp0_iter1_reg, select_ln459_1_reg_917, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln450_reg_867_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_b_phi_fu_198_p4 <= select_ln459_1_reg_917;
        else 
            ap_phi_mux_b_phi_fu_198_p4 <= b_reg_194;
        end if; 
    end process;


    ap_phi_mux_c_phi_fu_210_p4_assign_proc : process(c_reg_206, icmp_ln450_reg_867_pp0_iter1_reg, add_ln465_reg_924, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln450_reg_867_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_c_phi_fu_210_p4 <= add_ln465_reg_924;
        else 
            ap_phi_mux_c_phi_fu_210_p4 <= c_reg_206;
        end if; 
    end process;


    ap_phi_mux_i_11_phi_fu_153_p4_assign_proc : process(i_11_reg_150, ap_CS_fsm_pp0_stage0, icmp_ln450_reg_867, select_ln450_1_reg_880, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln450_reg_867 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_11_phi_fu_153_p4 <= select_ln450_1_reg_880;
        else 
            ap_phi_mux_i_11_phi_fu_153_p4 <= i_11_reg_150;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_186_p4_assign_proc : process(indvar_flatten_reg_182, icmp_ln450_reg_867_pp0_iter1_reg, select_ln459_2_reg_929, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln450_reg_867_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_186_p4 <= select_ln459_2_reg_929;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_186_p4 <= indvar_flatten_reg_182;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound19_fu_345_p2 <= std_logic_vector(unsigned(p_shl_fu_325_p3) - unsigned(p_shl2_fu_341_p1));
    empty_fu_285_p2 <= "1" when (unsigned(sub_ln450_fu_279_p2) > unsigned(ap_const_lv8_2)) else "0";
    i_13_fu_362_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_11_phi_fu_153_p4) + unsigned(ap_const_lv8_1));
    i_fu_309_p2 <= std_logic_vector(unsigned(sub_ln449_fu_305_p2) + unsigned(ap_const_lv8_FF));
    icmp_ln450_fu_357_p2 <= "1" when (indvar_flatten38_reg_139 = bound19_reg_857) else "0";
    icmp_ln453_fu_368_p2 <= "1" when (indvar_flatten13_reg_159 = ap_const_lv6_18) else "0";
    icmp_ln459_fu_479_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_186_p4 = ap_const_lv5_8) else "0";
    icmp_ln465_fu_467_p2 <= "1" when (ap_phi_mux_c_phi_fu_210_p4 = ap_const_lv2_2) else "0";
    icmp_ln477_fu_688_p2 <= "1" when (indvar_flatten60_reg_218 = ap_const_lv5_18) else "0";
    icmp_ln483_fu_700_p2 <= "1" when (indvar_flatten46_reg_240 = ap_const_lv5_8) else "0";
    icmp_ln489_fu_728_p2 <= "1" when (c_4_reg_262 = ap_const_lv2_2) else "0";
    or_ln453_1_fu_548_p2 <= (xor_ln453_fu_542_p2 or icmp_ln453_reg_871);
    or_ln453_fu_497_p2 <= (icmp_ln453_reg_871 or and_ln450_1_fu_485_p2);
    or_ln459_1_fu_571_p2 <= (or_ln459_fu_565_p2 or icmp_ln453_reg_871);
    or_ln459_fu_565_p2 <= (and_ln453_fu_553_p2 or and_ln450_1_fu_485_p2);
    or_ln483_fu_746_p2 <= (icmp_ln483_fu_700_p2 or and_ln477_fu_734_p2);
    p_shl2_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_333_p3),13));
    p_shl_fu_325_p3 <= (sub_ln450_1_fu_320_p2 & ap_const_lv5_0);

    patches_parameters_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln470_10_fu_678_p1, zext_ln494_3_fu_831_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            patches_parameters_address0 <= zext_ln494_3_fu_831_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            patches_parameters_address0 <= zext_ln470_10_fu_678_p1(7 - 1 downto 0);
        else 
            patches_parameters_address0 <= "XXXXXXX";
        end if; 
    end process;

    patches_parameters_address1 <= zext_ln470_9_fu_667_p1(7 - 1 downto 0);

    patches_parameters_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter3, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            patches_parameters_ce0 <= ap_const_logic_1;
        else 
            patches_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            patches_parameters_ce1 <= ap_const_logic_1;
        else 
            patches_parameters_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_d0_assign_proc : process(patches_parameters_q1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            patches_parameters_d0 <= ap_const_lv32_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            patches_parameters_d0 <= patches_parameters_q1;
        else 
            patches_parameters_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln450_reg_867_pp0_iter2_reg, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln477_reg_949, ap_enable_reg_pp0_iter3, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln450_reg_867_pp0_iter2_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln477_reg_949 = ap_const_lv1_0)))) then 
            patches_parameters_we0 <= ap_const_logic_1;
        else 
            patches_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln450_1_fu_374_p3 <= 
        i_13_fu_362_p2 when (icmp_ln453_fu_368_p2(0) = '1') else 
        ap_phi_mux_i_11_phi_fu_153_p4;
    select_ln450_fu_400_p3 <= 
        ap_const_lv2_0 when (icmp_ln453_reg_871(0) = '1') else 
        ap_phi_mux_a_phi_fu_174_p4;
    select_ln453_1_fu_510_p3 <= 
        add_ln453_fu_491_p2 when (and_ln450_1_fu_485_p2(0) = '1') else 
        select_ln450_fu_400_p3;
    select_ln453_2_fu_392_p3 <= 
        ap_const_lv6_1 when (icmp_ln453_fu_368_p2(0) = '1') else 
        add_ln453_1_fu_386_p2;
    select_ln453_fu_502_p3 <= 
        ap_const_lv3_0 when (or_ln453_fu_497_p2(0) = '1') else 
        ap_phi_mux_b_phi_fu_198_p4;
    select_ln459_1_fu_584_p3 <= 
        add_ln459_fu_559_p2 when (and_ln453_fu_553_p2(0) = '1') else 
        select_ln453_fu_502_p3;
    select_ln459_2_fu_604_p3 <= 
        ap_const_lv5_1 when (or_ln453_fu_497_p2(0) = '1') else 
        add_ln459_1_fu_598_p2;
    select_ln459_fu_576_p3 <= 
        ap_const_lv2_0 when (or_ln459_1_fu_571_p2(0) = '1') else 
        ap_phi_mux_c_phi_fu_210_p4;
    select_ln477_1_fu_714_p3 <= 
        add_ln477_fu_694_p2 when (icmp_ln483_fu_700_p2(0) = '1') else 
        ap_phi_mux_a_2_phi_fu_233_p4;
    select_ln477_fu_706_p3 <= 
        ap_const_lv3_0 when (icmp_ln483_fu_700_p2(0) = '1') else 
        ap_phi_mux_b_4_phi_fu_255_p4;
    select_ln483_1_fu_760_p3 <= 
        add_ln483_fu_740_p2 when (and_ln477_fu_734_p2(0) = '1') else 
        select_ln477_fu_706_p3;
    select_ln483_2_fu_780_p3 <= 
        ap_const_lv5_1 when (icmp_ln483_fu_700_p2(0) = '1') else 
        add_ln483_1_fu_774_p2;
    select_ln483_fu_752_p3 <= 
        ap_const_lv2_0 when (or_ln483_fu_746_p2(0) = '1') else 
        c_4_reg_262;
        sext_ln450_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln470_fu_428_p2),6));

        sext_ln453_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln470_1_fu_452_p2),12));

    shl_ln470_fu_612_p2 <= std_logic_vector(shift_left(unsigned(add_ln470_reg_902),to_integer(unsigned('0' & ap_const_lv6_2(6-1 downto 0)))));
    sub_ln449_fu_305_p2 <= std_logic_vector(unsigned(n_patches) - unsigned(index));
    sub_ln450_1_fu_320_p2 <= std_logic_vector(unsigned(add_ln450_2_fu_315_p2) - unsigned(n_patches));
    sub_ln450_fu_279_p2 <= std_logic_vector(unsigned(add_ln450_fu_273_p2) - unsigned(index));
    sub_ln470_1_fu_452_p2 <= std_logic_vector(unsigned(zext_ln470_3_fu_448_p1) - unsigned(zext_ln470_2_fu_438_p1));
    sub_ln470_fu_428_p2 <= std_logic_vector(unsigned(zext_ln470_1_fu_424_p1) - unsigned(zext_ln470_fu_412_p1));
    tmp_22_fu_634_p3 <= (trunc_ln459_reg_907 & ap_const_lv2_0);
    tmp_44_cast_fu_626_p3 <= (add_ln470_2_fu_620_p2 & ap_const_lv1_0);
    tmp_46_cast_fu_650_p3 <= (add_ln470_3_fu_644_p2 & ap_const_lv1_0);
    tmp_49_cast_fu_814_p3 <= (add_ln494_1_fu_808_p2 & ap_const_lv1_0);
    tmp_4_fu_441_p3 <= (select_ln450_1_reg_880 & ap_const_lv2_0);
    tmp_5_fu_788_p3 <= (select_ln477_1_reg_953 & ap_const_lv2_0);
    tmp_fu_333_p3 <= (sub_ln450_1_fu_320_p2 & ap_const_lv3_0);
    tmp_s_fu_416_p3 <= (add_ln450_4_fu_407_p2 & ap_const_lv2_0);
    trunc_ln450_fu_382_p1 <= select_ln450_1_fu_374_p3(2 - 1 downto 0);
    trunc_ln459_fu_538_p1 <= add_ln470_1_fu_532_p2(4 - 1 downto 0);
    umax16_fu_291_p3 <= 
        sub_ln450_fu_279_p2 when (empty_fu_285_p2(0) = '1') else 
        ap_const_lv8_2;
    xor_ln450_fu_462_p2 <= (icmp_ln453_reg_871 xor ap_const_lv1_1);
    xor_ln453_fu_542_p2 <= (icmp_ln459_fu_479_p2 xor ap_const_lv1_1);
    xor_ln477_fu_722_p2 <= (icmp_ln483_fu_700_p2 xor ap_const_lv1_1);
    zext_ln470_10_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln470_5_reg_939),64));
    zext_ln470_1_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_416_p3),5));
    zext_ln470_2_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln450_1_reg_880),11));
    zext_ln470_3_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_441_p3),11));
    zext_ln470_4_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln453_1_fu_510_p3),12));
    zext_ln470_5_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln453_1_fu_510_p3),6));
    zext_ln470_6_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln459_1_reg_917),6));
    zext_ln470_7_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln459_1_reg_917),6));
    zext_ln470_8_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln459_reg_912),7));
    zext_ln470_9_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln470_4_fu_661_p2),64));
    zext_ln470_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln450_4_fu_407_p2),5));
    zext_ln494_1_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln483_1_reg_964),6));
    zext_ln494_2_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln483_reg_959),7));
    zext_ln494_3_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln494_2_fu_825_p2),64));
    zext_ln494_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_788_p3),6));
end behav;
