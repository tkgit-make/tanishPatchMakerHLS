-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_add_patch_patches_parameters13 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    wp_parameters_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    wp_parameters_ce0 : OUT STD_LOGIC;
    wp_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_add_patch_patches_parameters13 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sext_ln316_fu_195_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln316_reg_441 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln316_fu_205_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln316_reg_449 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln316_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln322_fu_233_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln322_reg_454 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln322_fu_237_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln322_reg_459 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln339_fu_247_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln339_reg_464 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln339_1_fu_252_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln339_1_reg_469 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln328_fu_263_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln328_reg_477 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_74_cast_fu_284_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_74_cast_reg_482 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_76_cast_fu_307_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_76_cast_reg_487 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln334_fu_321_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln334_reg_495 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal patches_parameters_addr_19_reg_505 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln346_fu_357_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln346_reg_513 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln346_fu_371_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln346_reg_518 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln352_fu_381_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln352_reg_526 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln352_fu_404_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln352_reg_531 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln358_fu_414_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln358_reg_539 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal patches_parameters_addr_18_reg_549 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_96 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln322_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_reg_107 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln328_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_reg_118 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln334_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_reg_129 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal a_4_reg_140 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln352_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_6_reg_151 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln358_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln346_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_5_reg_162 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln339_8_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln339_9_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln363_2_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_177_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln339_1_fu_185_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln339_fu_173_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln339_fu_189_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_215_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln339_3_fu_223_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln339_2_fu_211_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln339_1_fu_227_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln339_4_fu_243_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln339_fu_269_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln339_5_fu_274_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln339_2_fu_278_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln339_1_fu_292_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln339_6_fu_297_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln339_3_fu_301_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln339_7_fu_327_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln339_4_fu_331_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln339_5_fu_341_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_363_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln363_fu_387_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln363_fu_391_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_fu_396_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln363_1_fu_420_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln363_1_fu_424_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    a_4_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln316_fu_199_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                a_4_reg_140 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln352_fu_408_p2 = ap_const_lv1_1))) then 
                a_4_reg_140 <= add_ln346_reg_513;
            end if; 
        end if;
    end process;

    a_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln316_fu_199_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                a_reg_107 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln328_fu_315_p2 = ap_const_lv1_1))) then 
                a_reg_107 <= add_ln322_reg_459;
            end if; 
        end if;
    end process;

    b_6_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln346_fu_375_p2 = ap_const_lv1_0))) then 
                b_6_reg_151 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln358_fu_435_p2 = ap_const_lv1_1))) then 
                b_6_reg_151 <= add_ln352_reg_526;
            end if; 
        end if;
    end process;

    b_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln322_fu_257_p2 = ap_const_lv1_0))) then 
                b_reg_118 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln334_fu_351_p2 = ap_const_lv1_1))) then 
                b_reg_118 <= add_ln328_reg_477;
            end if; 
        end if;
    end process;

    c_5_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln352_fu_408_p2 = ap_const_lv1_0))) then 
                c_5_reg_162 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                c_5_reg_162 <= add_ln358_reg_539;
            end if; 
        end if;
    end process;

    c_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln328_fu_315_p2 = ap_const_lv1_0))) then 
                c_reg_129 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                c_reg_129 <= add_ln334_reg_495;
            end if; 
        end if;
    end process;

    i_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_96 <= ap_const_lv2_2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln322_fu_257_p2 = ap_const_lv1_1))) then 
                i_reg_96 <= add_ln316_reg_449;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln316_fu_199_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln316_reg_449 <= add_ln316_fu_205_p2;
                sext_ln322_reg_454 <= sext_ln322_fu_233_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln322_reg_459 <= add_ln322_fu_237_p2;
                add_ln339_1_reg_469 <= add_ln339_1_fu_252_p2;
                add_ln339_reg_464 <= add_ln339_fu_247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln328_reg_477 <= add_ln328_fu_263_p2;
                    tmp_74_cast_reg_482(6 downto 1) <= tmp_74_cast_fu_284_p3(6 downto 1);
                    tmp_76_cast_reg_487(6 downto 1) <= tmp_76_cast_fu_307_p3(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln334_reg_495 <= add_ln334_fu_321_p2;
                patches_parameters_addr_19_reg_505 <= zext_ln339_9_fu_346_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln346_reg_513 <= add_ln346_fu_357_p2;
                    zext_ln346_reg_518(3 downto 2) <= zext_ln346_fu_371_p1(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln352_reg_526 <= add_ln352_fu_381_p2;
                    zext_ln352_reg_531(5 downto 1) <= zext_ln352_fu_404_p1(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln358_reg_539 <= add_ln358_fu_414_p2;
                patches_parameters_addr_18_reg_549 <= zext_ln363_2_fu_429_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                sext_ln316_reg_441 <= sext_ln316_fu_195_p1;
            end if;
        end if;
    end process;
    tmp_74_cast_reg_482(0) <= '0';
    tmp_76_cast_reg_487(0) <= '0';
    zext_ln346_reg_518(1 downto 0) <= "00";
    zext_ln346_reg_518(4) <= '0';
    zext_ln352_reg_531(0) <= '0';
    zext_ln352_reg_531(6) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln316_fu_199_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, icmp_ln322_fu_257_p2, icmp_ln328_fu_315_p2, icmp_ln334_fu_351_p2, icmp_ln352_fu_408_p2, icmp_ln358_fu_435_p2, icmp_ln346_fu_375_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln316_fu_199_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln322_fu_257_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln328_fu_315_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln334_fu_351_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln346_fu_375_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln352_fu_408_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln358_fu_435_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln316_fu_205_p2 <= std_logic_vector(unsigned(i_reg_96) + unsigned(ap_const_lv2_3));
    add_ln322_fu_237_p2 <= std_logic_vector(unsigned(a_reg_107) + unsigned(ap_const_lv2_1));
    add_ln328_fu_263_p2 <= std_logic_vector(unsigned(b_reg_118) + unsigned(ap_const_lv3_1));
    add_ln334_fu_321_p2 <= std_logic_vector(unsigned(c_reg_129) + unsigned(ap_const_lv2_1));
    add_ln339_1_fu_252_p2 <= std_logic_vector(signed(sext_ln316_reg_441) + signed(zext_ln339_4_fu_243_p1));
    add_ln339_2_fu_278_p2 <= std_logic_vector(unsigned(shl_ln339_fu_269_p2) + unsigned(zext_ln339_5_fu_274_p1));
    add_ln339_3_fu_301_p2 <= std_logic_vector(unsigned(shl_ln339_1_fu_292_p2) + unsigned(zext_ln339_6_fu_297_p1));
    add_ln339_4_fu_331_p2 <= std_logic_vector(unsigned(tmp_74_cast_reg_482) + unsigned(zext_ln339_7_fu_327_p1));
    add_ln339_5_fu_341_p2 <= std_logic_vector(unsigned(tmp_76_cast_reg_487) + unsigned(zext_ln339_7_fu_327_p1));
    add_ln339_fu_247_p2 <= std_logic_vector(signed(sext_ln322_reg_454) + signed(zext_ln339_4_fu_243_p1));
    add_ln346_fu_357_p2 <= std_logic_vector(unsigned(a_4_reg_140) + unsigned(ap_const_lv2_1));
    add_ln352_fu_381_p2 <= std_logic_vector(unsigned(b_6_reg_151) + unsigned(ap_const_lv3_1));
    add_ln358_fu_414_p2 <= std_logic_vector(unsigned(c_5_reg_162) + unsigned(ap_const_lv2_1));
    add_ln363_1_fu_424_p2 <= std_logic_vector(unsigned(zext_ln352_reg_531) + unsigned(zext_ln363_1_fu_420_p1));
    add_ln363_fu_391_p2 <= std_logic_vector(unsigned(zext_ln346_reg_518) + unsigned(zext_ln363_fu_387_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, icmp_ln346_fu_375_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln346_fu_375_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, icmp_ln346_fu_375_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln346_fu_375_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln316_fu_199_p2 <= "1" when (i_reg_96 = ap_const_lv2_0) else "0";
    icmp_ln322_fu_257_p2 <= "1" when (a_reg_107 = ap_const_lv2_3) else "0";
    icmp_ln328_fu_315_p2 <= "1" when (b_reg_118 = ap_const_lv3_4) else "0";
    icmp_ln334_fu_351_p2 <= "1" when (c_reg_129 = ap_const_lv2_2) else "0";
    icmp_ln346_fu_375_p2 <= "1" when (a_4_reg_140 = ap_const_lv2_3) else "0";
    icmp_ln352_fu_408_p2 <= "1" when (b_6_reg_151 = ap_const_lv3_4) else "0";
    icmp_ln358_fu_435_p2 <= "1" when (c_5_reg_162 = ap_const_lv2_2) else "0";

    patches_parameters_address0_assign_proc : process(ap_CS_fsm_state5, patches_parameters_addr_19_reg_505, patches_parameters_addr_18_reg_549, ap_CS_fsm_state6, ap_CS_fsm_state10, zext_ln339_8_fu_336_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            patches_parameters_address0 <= patches_parameters_addr_18_reg_549;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            patches_parameters_address0 <= patches_parameters_addr_19_reg_505;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            patches_parameters_address0 <= zext_ln339_8_fu_336_p1(7 - 1 downto 0);
        else 
            patches_parameters_address0 <= "XXXXXXX";
        end if; 
    end process;


    patches_parameters_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            patches_parameters_ce0 <= ap_const_logic_1;
        else 
            patches_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_d0_assign_proc : process(wp_parameters_q0, patches_parameters_q0, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            patches_parameters_d0 <= wp_parameters_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            patches_parameters_d0 <= patches_parameters_q0;
        else 
            patches_parameters_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            patches_parameters_we0 <= ap_const_logic_1;
        else 
            patches_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln316_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln339_fu_189_p2),6));

        sext_ln322_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln339_1_fu_227_p2),6));

    shl_ln339_1_fu_292_p2 <= std_logic_vector(shift_left(unsigned(add_ln339_1_reg_469),to_integer(unsigned('0' & ap_const_lv6_2(6-1 downto 0)))));
    shl_ln339_fu_269_p2 <= std_logic_vector(shift_left(unsigned(add_ln339_reg_464),to_integer(unsigned('0' & ap_const_lv6_2(6-1 downto 0)))));
    sub_ln339_1_fu_227_p2 <= std_logic_vector(unsigned(zext_ln339_3_fu_223_p1) - unsigned(zext_ln339_2_fu_211_p1));
    sub_ln339_fu_189_p2 <= std_logic_vector(unsigned(zext_ln339_1_fu_185_p1) - unsigned(zext_ln339_fu_173_p1));
    tmp_26_fu_396_p3 <= (add_ln363_fu_391_p2 & ap_const_lv1_0);
    tmp_74_cast_fu_284_p3 <= (add_ln339_2_fu_278_p2 & ap_const_lv1_0);
    tmp_76_cast_fu_307_p3 <= (add_ln339_3_fu_301_p2 & ap_const_lv1_0);
    tmp_7_fu_363_p3 <= (a_4_reg_140 & ap_const_lv2_0);
    tmp_fu_177_p3 <= (i_reg_96 & ap_const_lv2_0);
    tmp_s_fu_215_p3 <= (add_ln316_fu_205_p2 & ap_const_lv2_0);
    wp_parameters_address0 <= zext_ln363_2_fu_429_p1(5 - 1 downto 0);

    wp_parameters_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            wp_parameters_ce0 <= ap_const_logic_1;
        else 
            wp_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln339_1_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_177_p3),5));
    zext_ln339_2_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln316_fu_205_p2),5));
    zext_ln339_3_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_215_p3),5));
    zext_ln339_4_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_reg_107),6));
    zext_ln339_5_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_reg_118),6));
    zext_ln339_6_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_reg_118),6));
    zext_ln339_7_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_129),7));
    zext_ln339_8_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln339_4_fu_331_p2),64));
    zext_ln339_9_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln339_5_fu_341_p2),64));
    zext_ln339_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_96),5));
    zext_ln346_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_363_p3),5));
    zext_ln352_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_396_p3),7));
    zext_ln363_1_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_5_reg_162),7));
    zext_ln363_2_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln363_1_fu_424_p2),64));
    zext_ln363_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_6_reg_151),5));
end behav;
