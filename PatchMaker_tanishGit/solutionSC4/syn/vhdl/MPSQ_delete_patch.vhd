-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_delete_patch is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n_patches : OUT STD_LOGIC_VECTOR (7 downto 0);
    n_patches_ap_vld : OUT STD_LOGIC;
    n_patches_read : IN STD_LOGIC_VECTOR (7 downto 0);
    index : IN STD_LOGIC_VECTOR (8 downto 0);
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_we0 : OUT STD_LOGIC;
    patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_superpoints_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce1 : OUT STD_LOGIC;
    patches_superpoints_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_ce1 : OUT STD_LOGIC;
    patches_parameters_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_delete_patch is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_209 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_reg_220 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_reg_231 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten21_reg_242 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_3_reg_253 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten7_reg_264 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_5_reg_275 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_286 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten29_reg_297 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_2_reg_308 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_4_reg_319 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten51_reg_330 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_4_reg_341 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten37_reg_352 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_6_reg_363 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_4_reg_374 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_28_fu_385_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_1104 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln443_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln443_reg_1108 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_403_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_fu_407_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_reg_1117 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln452_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln469_fu_444_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln469_reg_1129 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln469_1_fu_466_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln469_1_reg_1135 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln514_fu_486_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln514_reg_1141 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln458_1_fu_492_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln458_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln458_reg_1152 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln458_reg_1152_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln458_reg_1152_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln458_reg_1152_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln458_fu_516_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln458_reg_1156 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln458_1_fu_524_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln458_1_reg_1161 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln464_fu_532_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln469_4_fu_577_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln469_4_reg_1173 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln469_5_fu_583_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln469_5_reg_1178 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln469_5_reg_1178_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln469_5_reg_1178_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal patches_superpoints_load_reg_1188 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal add_ln474_1_fu_597_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state9_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln474_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln474_reg_1198 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln474_reg_1198_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln474_reg_1198_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln474_reg_1198_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln474_1_fu_629_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln474_1_reg_1202 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln491_1_fu_641_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln491_1_reg_1208 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln480_fu_676_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln480_reg_1213 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln480_1_fu_684_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln480_1_reg_1218 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln486_fu_692_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln480_2_fu_704_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln491_4_fu_821_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln491_4_reg_1234 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln491_5_fu_827_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln491_5_reg_1239 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln491_5_reg_1239_pp1_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln491_5_reg_1239_pp1_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal patches_parameters_load_reg_1249 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal i_11_fu_841_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln503_1_fu_847_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state15_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state17_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln503_fu_853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln503_reg_1264 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln503_reg_1264_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln503_fu_871_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln503_reg_1268 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln503_1_fu_879_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln503_1_reg_1273 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln509_fu_887_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln514_2_fu_916_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln514_2_reg_1284 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln519_1_fu_926_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state19_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state20_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state21_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln519_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln519_reg_1294 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln519_reg_1294_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln519_1_fu_958_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln519_1_reg_1298 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln536_fu_970_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln536_reg_1303 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln525_fu_1005_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln525_reg_1308 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln525_1_fu_1013_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln525_1_reg_1313 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln531_fu_1021_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln525_2_fu_1033_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln536_2_fu_1094_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln536_2_reg_1329 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state15 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state19 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal i_10_reg_199 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_a_phi_fu_224_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_a_3_phi_fu_257_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_b_5_phi_fu_279_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_a_2_phi_fu_312_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_a_4_phi_fu_345_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_phi_mux_b_6_phi_fu_367_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln469_7_fu_589_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln469_8_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln491_5_fu_833_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln491_6_fu_837_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln514_4_fu_922_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln536_3_fu_1100_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal zext_ln443_fu_393_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln452_fu_418_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_fu_422_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_432_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln469_1_fu_440_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln469_fu_428_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_454_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln469_3_fu_462_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln469_2_fu_450_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_27_fu_475_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln514_1_fu_482_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln514_fu_472_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln464_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln458_fu_504_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln469_4_fu_538_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln469_2_fu_541_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln469_fu_554_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln469_5_fu_557_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln469_3_fu_560_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_62_cast_fu_546_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln469_6_fu_574_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_64_cast_fu_566_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln480_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln474_fu_609_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln491_fu_637_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln486_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln474_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln474_fu_621_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln474_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln480_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln480_fu_664_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln480_1_fu_698_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln491_1_fu_712_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln491_fu_715_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_720_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_30_fu_732_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln491_2_fu_728_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln491_3_fu_743_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln491_2_fu_746_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln491_fu_752_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln491_1_fu_764_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_756_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl5_cast_fu_768_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln480_fu_739_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln491_3_fu_782_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln491_2_fu_788_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln491_3_fu_800_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_792_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl3_cast_fu_804_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln491_fu_776_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln491_4_fu_818_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln491_1_fu_812_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln509_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln503_fu_859_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln514_fu_893_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln514_2_fu_896_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln514_1_fu_899_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_cast_fu_905_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln514_3_fu_913_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln525_fu_944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln519_fu_938_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln536_fu_966_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln531_fu_981_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln519_fu_975_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln519_fu_950_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln519_fu_987_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln525_fu_999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln525_fu_993_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln525_1_fu_1027_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_31_fu_1041_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln525_fu_1048_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln536_1_fu_1052_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln536_1_fu_1055_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln536_fu_1061_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln536_1_fu_1073_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_cast_fu_1065_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl8_cast_fu_1077_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln536_fu_1085_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln536_2_fu_1091_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln452_fu_413_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln452_fu_413_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state15) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln452_fu_413_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state15)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state15);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln452_fu_413_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state19) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state19)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state19);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_2_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln503_reg_1264 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                a_2_reg_308 <= select_ln503_1_reg_1273;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln452_fu_413_p2 = ap_const_lv1_0))) then 
                a_2_reg_308 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    a_3_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                a_3_reg_253 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln474_reg_1198 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                a_3_reg_253 <= select_ln474_1_reg_1202;
            end if; 
        end if;
    end process;

    a_4_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                a_4_reg_341 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln519_reg_1294 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                a_4_reg_341 <= select_ln519_1_reg_1298;
            end if; 
        end if;
    end process;

    a_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln458_reg_1152 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                a_reg_220 <= select_ln458_1_reg_1161;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln452_fu_413_p2 = ap_const_lv1_1))) then 
                a_reg_220 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    b_4_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln503_fu_853_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                b_4_reg_319 <= add_ln509_fu_887_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln452_fu_413_p2 = ap_const_lv1_0))) then 
                b_4_reg_319 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    b_5_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                b_5_reg_275 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln474_reg_1198 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                b_5_reg_275 <= select_ln480_1_reg_1218;
            end if; 
        end if;
    end process;

    b_6_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                b_6_reg_363 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln519_reg_1294 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                b_6_reg_363 <= select_ln525_1_reg_1313;
            end if; 
        end if;
    end process;

    b_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln458_fu_498_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                b_reg_231 <= add_ln464_fu_532_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln452_fu_413_p2 = ap_const_lv1_1))) then 
                b_reg_231 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    c_4_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                c_4_reg_374 <= ap_const_lv3_0;
            elsif (((icmp_ln519_fu_932_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                c_4_reg_374 <= add_ln531_fu_1021_p2;
            end if; 
        end if;
    end process;

    c_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                c_reg_286 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln474_fu_603_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                c_reg_286 <= add_ln486_fu_692_p2;
            end if; 
        end if;
    end process;

    i_10_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_10_reg_199 <= i_11_fu_841_p2;
            elsif (((icmp_ln443_fu_397_p2 = ap_const_lv1_1) and (tmp_28_fu_385_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_10_reg_199 <= i_fu_403_p1;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten21_reg_242 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln474_fu_603_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten21_reg_242 <= add_ln474_1_fu_597_p2;
            end if; 
        end if;
    end process;

    indvar_flatten29_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln503_fu_853_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                indvar_flatten29_reg_297 <= add_ln503_1_fu_847_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln452_fu_413_p2 = ap_const_lv1_0))) then 
                indvar_flatten29_reg_297 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten37_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                indvar_flatten37_reg_352 <= ap_const_lv6_0;
            elsif (((icmp_ln519_fu_932_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                indvar_flatten37_reg_352 <= select_ln525_2_fu_1033_p3;
            end if; 
        end if;
    end process;

    indvar_flatten51_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                indvar_flatten51_reg_330 <= ap_const_lv7_0;
            elsif (((icmp_ln519_fu_932_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                indvar_flatten51_reg_330 <= add_ln519_1_fu_926_p2;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten7_reg_264 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln474_fu_603_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten7_reg_264 <= select_ln480_2_fu_704_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln458_fu_498_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_209 <= add_ln458_1_fu_492_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln452_fu_413_p2 = ap_const_lv1_1))) then 
                indvar_flatten_reg_209 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln452_fu_413_p2 = ap_const_lv1_1))) then
                add_ln469_1_reg_1135 <= add_ln469_1_fu_466_p2;
                add_ln469_reg_1129 <= add_ln469_fu_444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln458_reg_1152 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln469_4_reg_1173 <= add_ln469_4_fu_577_p2;
                add_ln469_5_reg_1178 <= add_ln469_5_fu_583_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln469_5_reg_1178_pp0_iter2_reg <= add_ln469_5_reg_1178;
                add_ln469_5_reg_1178_pp0_iter3_reg <= add_ln469_5_reg_1178_pp0_iter2_reg;
                icmp_ln458_reg_1152_pp0_iter2_reg <= icmp_ln458_reg_1152_pp0_iter1_reg;
                icmp_ln458_reg_1152_pp0_iter3_reg <= icmp_ln458_reg_1152_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln474_fu_603_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln491_1_reg_1208 <= add_ln491_1_fu_641_p2;
                select_ln480_reg_1213 <= select_ln480_fu_676_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln474_reg_1198 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln491_4_reg_1234 <= add_ln491_4_fu_821_p2;
                add_ln491_5_reg_1239 <= add_ln491_5_fu_827_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                add_ln491_5_reg_1239_pp1_iter2_reg <= add_ln491_5_reg_1239;
                add_ln491_5_reg_1239_pp1_iter3_reg <= add_ln491_5_reg_1239_pp1_iter2_reg;
                icmp_ln474_reg_1198_pp1_iter2_reg <= icmp_ln474_reg_1198_pp1_iter1_reg;
                icmp_ln474_reg_1198_pp1_iter3_reg <= icmp_ln474_reg_1198_pp1_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln503_reg_1264 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                add_ln514_2_reg_1284 <= add_ln514_2_fu_916_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln452_fu_413_p2 = ap_const_lv1_0))) then
                add_ln514_reg_1141 <= add_ln514_fu_486_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln519_reg_1294 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                add_ln536_2_reg_1329 <= add_ln536_2_fu_1094_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln519_fu_932_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                add_ln536_reg_1303 <= add_ln536_fu_970_p2;
                select_ln525_reg_1308 <= select_ln525_fu_1005_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_28_fu_385_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln443_reg_1108 <= icmp_ln443_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln458_reg_1152 <= icmp_ln458_fu_498_p2;
                icmp_ln458_reg_1152_pp0_iter1_reg <= icmp_ln458_reg_1152;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln474_reg_1198 <= icmp_ln474_fu_603_p2;
                icmp_ln474_reg_1198_pp1_iter1_reg <= icmp_ln474_reg_1198;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln503_reg_1264 <= icmp_ln503_fu_853_p2;
                icmp_ln503_reg_1264_pp2_iter1_reg <= icmp_ln503_reg_1264;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln519_reg_1294 <= icmp_ln519_fu_932_p2;
                icmp_ln519_reg_1294_pp3_iter1_reg <= icmp_ln519_reg_1294;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (icmp_ln474_reg_1198_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                patches_parameters_load_reg_1249 <= patches_parameters_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln458_reg_1152_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                patches_superpoints_load_reg_1188 <= patches_superpoints_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln458_fu_498_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln458_1_reg_1161 <= select_ln458_1_fu_524_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln458_fu_498_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln458_reg_1156 <= select_ln458_fu_516_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln474_fu_603_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln474_1_reg_1202 <= select_ln474_1_fu_629_p3;
                select_ln480_1_reg_1218 <= select_ln480_1_fu_684_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln503_fu_853_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln503_1_reg_1273 <= select_ln503_1_fu_879_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln503_fu_853_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln503_reg_1268 <= select_ln503_fu_871_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln519_fu_932_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                select_ln519_1_reg_1298 <= select_ln519_1_fu_958_p3;
                select_ln525_1_reg_1313 <= select_ln525_1_fu_1013_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln443_fu_397_p2 = ap_const_lv1_1) and (tmp_28_fu_385_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                sub_reg_1117 <= sub_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_28_reg_1104 <= index(8 downto 8);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_28_fu_385_p3, icmp_ln443_fu_397_p2, icmp_ln452_fu_413_p2, ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, icmp_ln458_fu_498_p2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp1_iter0, icmp_ln474_fu_603_p2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp2_iter0, icmp_ln503_fu_853_p2, ap_enable_reg_pp3_iter0, icmp_ln519_fu_932_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter4, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln443_fu_397_p2 = ap_const_lv1_1) and (tmp_28_fu_385_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and ((icmp_ln443_fu_397_p2 = ap_const_lv1_0) or (tmp_28_fu_385_p3 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln452_fu_413_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln458_fu_498_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln458_fu_498_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln474_fu_603_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln474_fu_603_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln503_fu_853_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln503_fu_853_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln519_fu_932_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln519_fu_932_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_fu_422_p2 <= std_logic_vector(unsigned(trunc_ln452_fu_418_p1) + unsigned(ap_const_lv5_1));
    add_ln458_1_fu_492_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_209) + unsigned(ap_const_lv7_1));
    add_ln458_fu_504_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_phi_fu_224_p4) + unsigned(ap_const_lv3_1));
    add_ln464_fu_532_p2 <= std_logic_vector(unsigned(select_ln458_fu_516_p3) + unsigned(ap_const_lv5_1));
    add_ln469_1_fu_466_p2 <= std_logic_vector(unsigned(zext_ln469_3_fu_462_p1) + unsigned(zext_ln469_2_fu_450_p1));
    add_ln469_2_fu_541_p2 <= std_logic_vector(unsigned(add_ln469_reg_1129) + unsigned(zext_ln469_4_fu_538_p1));
    add_ln469_3_fu_560_p2 <= std_logic_vector(unsigned(trunc_ln469_fu_554_p1) + unsigned(zext_ln469_5_fu_557_p1));
    add_ln469_4_fu_577_p2 <= std_logic_vector(unsigned(tmp_62_cast_fu_546_p3) + unsigned(zext_ln469_6_fu_574_p1));
    add_ln469_5_fu_583_p2 <= std_logic_vector(unsigned(tmp_64_cast_fu_566_p3) + unsigned(zext_ln469_6_fu_574_p1));
    add_ln469_fu_444_p2 <= std_logic_vector(unsigned(zext_ln469_1_fu_440_p1) + unsigned(zext_ln469_fu_428_p1));
    add_ln474_1_fu_597_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_242) + unsigned(ap_const_lv7_1));
    add_ln474_fu_609_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_3_phi_fu_257_p4) + unsigned(ap_const_lv3_1));
    add_ln480_1_fu_698_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_264) + unsigned(ap_const_lv6_1));
    add_ln480_fu_664_p2 <= std_logic_vector(unsigned(select_ln474_fu_621_p3) + unsigned(ap_const_lv3_1));
    add_ln486_fu_692_p2 <= std_logic_vector(unsigned(select_ln480_fu_676_p3) + unsigned(ap_const_lv3_1));
    add_ln491_1_fu_641_p2 <= std_logic_vector(unsigned(add_ln469_1_reg_1135) + unsigned(zext_ln491_fu_637_p1));
    add_ln491_2_fu_746_p2 <= std_logic_vector(unsigned(zext_ln491_2_fu_728_p1) + unsigned(zext_ln491_3_fu_743_p1));
    add_ln491_3_fu_782_p2 <= std_logic_vector(unsigned(zext_ln480_fu_739_p1) + unsigned(zext_ln491_3_fu_743_p1));
    add_ln491_4_fu_821_p2 <= std_logic_vector(unsigned(sub_ln491_fu_776_p2) + unsigned(zext_ln491_4_fu_818_p1));
    add_ln491_5_fu_827_p2 <= std_logic_vector(unsigned(sub_ln491_1_fu_812_p2) + unsigned(zext_ln491_4_fu_818_p1));
    add_ln491_fu_715_p2 <= std_logic_vector(unsigned(add_ln469_reg_1129) + unsigned(zext_ln491_1_fu_712_p1));
    add_ln503_1_fu_847_p2 <= std_logic_vector(unsigned(indvar_flatten29_reg_297) + unsigned(ap_const_lv7_1));
    add_ln503_fu_859_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_2_phi_fu_312_p4) + unsigned(ap_const_lv3_1));
    add_ln509_fu_887_p2 <= std_logic_vector(unsigned(select_ln503_fu_871_p3) + unsigned(ap_const_lv5_1));
    add_ln514_1_fu_899_p2 <= std_logic_vector(unsigned(trunc_ln514_fu_893_p1) + unsigned(zext_ln514_2_fu_896_p1));
    add_ln514_2_fu_916_p2 <= std_logic_vector(unsigned(tmp_66_cast_fu_905_p3) + unsigned(zext_ln514_3_fu_913_p1));
    add_ln514_fu_486_p2 <= std_logic_vector(unsigned(zext_ln514_1_fu_482_p1) + unsigned(zext_ln514_fu_472_p1));
    add_ln519_1_fu_926_p2 <= std_logic_vector(unsigned(indvar_flatten51_reg_330) + unsigned(ap_const_lv7_1));
    add_ln519_fu_938_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_4_phi_fu_345_p4) + unsigned(ap_const_lv3_1));
    add_ln525_1_fu_1027_p2 <= std_logic_vector(unsigned(indvar_flatten37_reg_352) + unsigned(ap_const_lv6_1));
    add_ln525_fu_993_p2 <= std_logic_vector(unsigned(select_ln519_fu_950_p3) + unsigned(ap_const_lv3_1));
    add_ln531_fu_1021_p2 <= std_logic_vector(unsigned(select_ln525_fu_1005_p3) + unsigned(ap_const_lv3_1));
    add_ln536_1_fu_1055_p2 <= std_logic_vector(unsigned(zext_ln525_fu_1048_p1) + unsigned(zext_ln536_1_fu_1052_p1));
    add_ln536_2_fu_1094_p2 <= std_logic_vector(unsigned(sub_ln536_fu_1085_p2) + unsigned(zext_ln536_2_fu_1091_p1));
    add_ln536_fu_970_p2 <= std_logic_vector(unsigned(add_ln514_reg_1141) + unsigned(zext_ln536_fu_966_p1));
    and_ln474_fu_658_p2 <= (xor_ln474_fu_646_p2 and icmp_ln486_fu_652_p2);
    and_ln519_fu_987_p2 <= (xor_ln519_fu_975_p2 and icmp_ln531_fu_981_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(5);
    ap_CS_fsm_state18 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(9);
    ap_CS_fsm_state8 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln458_fu_498_p2)
    begin
        if ((icmp_ln458_fu_498_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state9_assign_proc : process(icmp_ln474_fu_603_p2)
    begin
        if ((icmp_ln474_fu_603_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state15_assign_proc : process(icmp_ln503_fu_853_p2)
    begin
        if ((icmp_ln503_fu_853_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state15 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state19_assign_proc : process(icmp_ln519_fu_932_p2)
    begin
        if ((icmp_ln519_fu_932_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_a_2_phi_fu_312_p4_assign_proc : process(a_2_reg_308, ap_CS_fsm_pp2_stage0, icmp_ln503_reg_1264, select_ln503_1_reg_1273, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln503_reg_1264 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_a_2_phi_fu_312_p4 <= select_ln503_1_reg_1273;
        else 
            ap_phi_mux_a_2_phi_fu_312_p4 <= a_2_reg_308;
        end if; 
    end process;


    ap_phi_mux_a_3_phi_fu_257_p4_assign_proc : process(a_3_reg_253, ap_CS_fsm_pp1_stage0, icmp_ln474_reg_1198, select_ln474_1_reg_1202, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln474_reg_1198 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_a_3_phi_fu_257_p4 <= select_ln474_1_reg_1202;
        else 
            ap_phi_mux_a_3_phi_fu_257_p4 <= a_3_reg_253;
        end if; 
    end process;


    ap_phi_mux_a_4_phi_fu_345_p4_assign_proc : process(a_4_reg_341, ap_CS_fsm_pp3_stage0, icmp_ln519_reg_1294, select_ln519_1_reg_1298, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln519_reg_1294 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            ap_phi_mux_a_4_phi_fu_345_p4 <= select_ln519_1_reg_1298;
        else 
            ap_phi_mux_a_4_phi_fu_345_p4 <= a_4_reg_341;
        end if; 
    end process;


    ap_phi_mux_a_phi_fu_224_p4_assign_proc : process(a_reg_220, ap_CS_fsm_pp0_stage0, icmp_ln458_reg_1152, select_ln458_1_reg_1161, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln458_reg_1152 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_a_phi_fu_224_p4 <= select_ln458_1_reg_1161;
        else 
            ap_phi_mux_a_phi_fu_224_p4 <= a_reg_220;
        end if; 
    end process;


    ap_phi_mux_b_5_phi_fu_279_p4_assign_proc : process(b_5_reg_275, ap_CS_fsm_pp1_stage0, icmp_ln474_reg_1198, select_ln480_1_reg_1218, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln474_reg_1198 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_b_5_phi_fu_279_p4 <= select_ln480_1_reg_1218;
        else 
            ap_phi_mux_b_5_phi_fu_279_p4 <= b_5_reg_275;
        end if; 
    end process;


    ap_phi_mux_b_6_phi_fu_367_p4_assign_proc : process(b_6_reg_363, ap_CS_fsm_pp3_stage0, icmp_ln519_reg_1294, select_ln525_1_reg_1313, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln519_reg_1294 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            ap_phi_mux_b_6_phi_fu_367_p4 <= select_ln525_1_reg_1313;
        else 
            ap_phi_mux_b_6_phi_fu_367_p4 <= b_6_reg_363;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_11_fu_841_p2 <= std_logic_vector(unsigned(i_10_reg_199) + unsigned(ap_const_lv8_1));
    i_fu_403_p1 <= index(8 - 1 downto 0);
    icmp_ln443_fu_397_p2 <= "1" when (signed(zext_ln443_fu_393_p1) > signed(index)) else "0";
    icmp_ln452_fu_413_p2 <= "1" when (unsigned(i_10_reg_199) < unsigned(sub_reg_1117)) else "0";
    icmp_ln458_fu_498_p2 <= "1" when (indvar_flatten_reg_209 = ap_const_lv7_50) else "0";
    icmp_ln464_fu_510_p2 <= "1" when (b_reg_231 = ap_const_lv5_10) else "0";
    icmp_ln474_fu_603_p2 <= "1" when (indvar_flatten21_reg_242 = ap_const_lv7_78) else "0";
    icmp_ln480_fu_615_p2 <= "1" when (indvar_flatten7_reg_264 = ap_const_lv6_18) else "0";
    icmp_ln486_fu_652_p2 <= "1" when (c_reg_286 = ap_const_lv3_6) else "0";
    icmp_ln503_fu_853_p2 <= "1" when (indvar_flatten29_reg_297 = ap_const_lv7_50) else "0";
    icmp_ln509_fu_865_p2 <= "1" when (b_4_reg_319 = ap_const_lv5_10) else "0";
    icmp_ln519_fu_932_p2 <= "1" when (indvar_flatten51_reg_330 = ap_const_lv7_78) else "0";
    icmp_ln525_fu_944_p2 <= "1" when (indvar_flatten37_reg_352 = ap_const_lv6_18) else "0";
    icmp_ln531_fu_981_p2 <= "1" when (c_4_reg_374 = ap_const_lv3_6) else "0";
    n_patches <= sub_reg_1117;

    n_patches_ap_vld_assign_proc : process(tmp_28_reg_1104, icmp_ln443_reg_1108, ap_CS_fsm_state22)
    begin
        if (((icmp_ln443_reg_1108 = ap_const_lv1_1) and (tmp_28_reg_1104 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            n_patches_ap_vld <= ap_const_logic_1;
        else 
            n_patches_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln480_fu_670_p2 <= (icmp_ln480_fu_615_p2 or and_ln474_fu_658_p2);
    or_ln525_fu_999_p2 <= (icmp_ln525_fu_944_p2 or and_ln519_fu_987_p2);
    p_shl2_cast_fu_792_p3 <= (trunc_ln491_2_fu_788_p1 & ap_const_lv3_0);
    p_shl3_cast_fu_804_p3 <= (trunc_ln491_3_fu_800_p1 & ap_const_lv1_0);
    p_shl4_cast_fu_756_p3 <= (trunc_ln491_fu_752_p1 & ap_const_lv3_0);
    p_shl5_cast_fu_768_p3 <= (trunc_ln491_1_fu_764_p1 & ap_const_lv1_0);
    p_shl7_cast_fu_1065_p3 <= (trunc_ln536_fu_1061_p1 & ap_const_lv3_0);
    p_shl8_cast_fu_1077_p3 <= (trunc_ln536_1_fu_1073_p1 & ap_const_lv1_0);

    patches_parameters_address0_assign_proc : process(ap_enable_reg_pp1_iter4, ap_enable_reg_pp3_iter2, ap_block_pp1_stage0, ap_block_pp3_stage0, zext_ln491_6_fu_837_p1, zext_ln536_3_fu_1100_p1)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            patches_parameters_address0 <= zext_ln536_3_fu_1100_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            patches_parameters_address0 <= zext_ln491_6_fu_837_p1(12 - 1 downto 0);
        else 
            patches_parameters_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    patches_parameters_address1 <= zext_ln491_5_fu_833_p1(12 - 1 downto 0);

    patches_parameters_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_block_pp3_stage0_11001, ap_enable_reg_pp1_iter4, ap_enable_reg_pp3_iter2)
    begin
        if ((((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            patches_parameters_ce0 <= ap_const_logic_1;
        else 
            patches_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            patches_parameters_ce1 <= ap_const_logic_1;
        else 
            patches_parameters_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_d0_assign_proc : process(patches_parameters_load_reg_1249, ap_enable_reg_pp1_iter4, ap_enable_reg_pp3_iter2, ap_block_pp1_stage0, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            patches_parameters_d0 <= ap_const_lv32_0;
        elsif (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            patches_parameters_d0 <= patches_parameters_load_reg_1249;
        else 
            patches_parameters_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln474_reg_1198_pp1_iter3_reg, ap_block_pp3_stage0_11001, icmp_ln519_reg_1294_pp3_iter1_reg, ap_enable_reg_pp1_iter4, ap_enable_reg_pp3_iter2)
    begin
        if ((((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (icmp_ln519_reg_1294_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (icmp_ln474_reg_1198_pp1_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            patches_parameters_we0 <= ap_const_logic_1;
        else 
            patches_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_address0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp2_iter2, ap_block_pp0_stage0, ap_block_pp2_stage0, zext_ln469_8_fu_593_p1, zext_ln514_4_fu_922_p1)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            patches_superpoints_address0 <= zext_ln514_4_fu_922_p1(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            patches_superpoints_address0 <= zext_ln469_8_fu_593_p1(12 - 1 downto 0);
        else 
            patches_superpoints_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    patches_superpoints_address1 <= zext_ln469_7_fu_589_p1(12 - 1 downto 0);

    patches_superpoints_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp0_iter4, ap_enable_reg_pp2_iter2)
    begin
        if ((((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            patches_superpoints_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            patches_superpoints_ce1 <= ap_const_logic_1;
        else 
            patches_superpoints_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_superpoints_d0_assign_proc : process(patches_superpoints_load_reg_1188, ap_enable_reg_pp0_iter4, ap_enable_reg_pp2_iter2, ap_block_pp0_stage0, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            patches_superpoints_d0 <= ap_const_lv64_0;
        elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            patches_superpoints_d0 <= patches_superpoints_load_reg_1188;
        else 
            patches_superpoints_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_superpoints_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln458_reg_1152_pp0_iter3_reg, ap_block_pp2_stage0_11001, icmp_ln503_reg_1264_pp2_iter1_reg, ap_enable_reg_pp0_iter4, ap_enable_reg_pp2_iter2)
    begin
        if ((((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln503_reg_1264_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln458_reg_1152_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            patches_superpoints_we0 <= ap_const_logic_1;
        else 
            patches_superpoints_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln458_1_fu_524_p3 <= 
        add_ln458_fu_504_p2 when (icmp_ln464_fu_510_p2(0) = '1') else 
        ap_phi_mux_a_phi_fu_224_p4;
    select_ln458_fu_516_p3 <= 
        ap_const_lv5_0 when (icmp_ln464_fu_510_p2(0) = '1') else 
        b_reg_231;
    select_ln474_1_fu_629_p3 <= 
        add_ln474_fu_609_p2 when (icmp_ln480_fu_615_p2(0) = '1') else 
        ap_phi_mux_a_3_phi_fu_257_p4;
    select_ln474_fu_621_p3 <= 
        ap_const_lv3_0 when (icmp_ln480_fu_615_p2(0) = '1') else 
        ap_phi_mux_b_5_phi_fu_279_p4;
    select_ln480_1_fu_684_p3 <= 
        add_ln480_fu_664_p2 when (and_ln474_fu_658_p2(0) = '1') else 
        select_ln474_fu_621_p3;
    select_ln480_2_fu_704_p3 <= 
        ap_const_lv6_1 when (icmp_ln480_fu_615_p2(0) = '1') else 
        add_ln480_1_fu_698_p2;
    select_ln480_fu_676_p3 <= 
        ap_const_lv3_0 when (or_ln480_fu_670_p2(0) = '1') else 
        c_reg_286;
    select_ln503_1_fu_879_p3 <= 
        add_ln503_fu_859_p2 when (icmp_ln509_fu_865_p2(0) = '1') else 
        ap_phi_mux_a_2_phi_fu_312_p4;
    select_ln503_fu_871_p3 <= 
        ap_const_lv5_0 when (icmp_ln509_fu_865_p2(0) = '1') else 
        b_4_reg_319;
    select_ln519_1_fu_958_p3 <= 
        add_ln519_fu_938_p2 when (icmp_ln525_fu_944_p2(0) = '1') else 
        ap_phi_mux_a_4_phi_fu_345_p4;
    select_ln519_fu_950_p3 <= 
        ap_const_lv3_0 when (icmp_ln525_fu_944_p2(0) = '1') else 
        ap_phi_mux_b_6_phi_fu_367_p4;
    select_ln525_1_fu_1013_p3 <= 
        add_ln525_fu_993_p2 when (and_ln519_fu_987_p2(0) = '1') else 
        select_ln519_fu_950_p3;
    select_ln525_2_fu_1033_p3 <= 
        ap_const_lv6_1 when (icmp_ln525_fu_944_p2(0) = '1') else 
        add_ln525_1_fu_1027_p2;
    select_ln525_fu_1005_p3 <= 
        ap_const_lv3_0 when (or_ln525_fu_999_p2(0) = '1') else 
        c_4_reg_374;
    sub_fu_407_p2 <= std_logic_vector(unsigned(n_patches_read) + unsigned(ap_const_lv8_FF));
    sub_ln491_1_fu_812_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_792_p3) - unsigned(p_shl3_cast_fu_804_p3));
    sub_ln491_fu_776_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_756_p3) - unsigned(p_shl5_cast_fu_768_p3));
    sub_ln536_fu_1085_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_1065_p3) - unsigned(p_shl8_cast_fu_1077_p3));
    tmp_27_fu_475_p3 <= (sub_reg_1117 & ap_const_lv2_0);
    tmp_28_fu_385_p3 <= index(8 downto 8);
    tmp_29_fu_720_p3 <= (add_ln491_fu_715_p2 & ap_const_lv2_0);
    tmp_30_fu_732_p3 <= (add_ln491_1_reg_1208 & ap_const_lv2_0);
    tmp_31_fu_1041_p3 <= (add_ln536_reg_1303 & ap_const_lv2_0);
    tmp_62_cast_fu_546_p3 <= (add_ln469_2_fu_541_p2 & ap_const_lv4_0);
    tmp_64_cast_fu_566_p3 <= (add_ln469_3_fu_560_p2 & ap_const_lv4_0);
    tmp_66_cast_fu_905_p3 <= (add_ln514_1_fu_899_p2 & ap_const_lv4_0);
    tmp_fu_432_p3 <= (add_fu_422_p2 & ap_const_lv2_0);
    tmp_s_fu_454_p3 <= (i_10_reg_199 & ap_const_lv2_0);
    trunc_ln452_fu_418_p1 <= i_10_reg_199(5 - 1 downto 0);
    trunc_ln469_fu_554_p1 <= add_ln469_1_reg_1135(8 - 1 downto 0);
    trunc_ln491_1_fu_764_p1 <= add_ln491_2_fu_746_p2(11 - 1 downto 0);
    trunc_ln491_2_fu_788_p1 <= add_ln491_3_fu_782_p2(9 - 1 downto 0);
    trunc_ln491_3_fu_800_p1 <= add_ln491_3_fu_782_p2(11 - 1 downto 0);
    trunc_ln491_fu_752_p1 <= add_ln491_2_fu_746_p2(9 - 1 downto 0);
    trunc_ln514_fu_893_p1 <= add_ln514_reg_1141(8 - 1 downto 0);
    trunc_ln536_1_fu_1073_p1 <= add_ln536_1_fu_1055_p2(11 - 1 downto 0);
    trunc_ln536_fu_1061_p1 <= add_ln536_1_fu_1055_p2(9 - 1 downto 0);
    xor_ln474_fu_646_p2 <= (icmp_ln480_fu_615_p2 xor ap_const_lv1_1);
    xor_ln519_fu_975_p2 <= (icmp_ln525_fu_944_p2 xor ap_const_lv1_1);
    zext_ln443_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_patches_read),9));
    zext_ln469_1_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_432_p3),8));
    zext_ln469_2_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_10_reg_199),11));
    zext_ln469_3_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_454_p3),11));
    zext_ln469_4_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln458_1_reg_1161),8));
    zext_ln469_5_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln458_1_reg_1161),8));
    zext_ln469_6_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln458_reg_1156),12));
    zext_ln469_7_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln469_4_reg_1173),64));
    zext_ln469_8_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln469_5_reg_1178_pp0_iter3_reg),64));
    zext_ln469_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_fu_422_p2),8));
    zext_ln480_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_732_p3),63));
    zext_ln491_1_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln474_1_reg_1202),8));
    zext_ln491_2_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_720_p3),63));
    zext_ln491_3_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln480_1_reg_1218),63));
    zext_ln491_4_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln480_reg_1213),12));
    zext_ln491_5_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln491_4_reg_1234),64));
    zext_ln491_6_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln491_5_reg_1239_pp1_iter3_reg),64));
    zext_ln491_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln474_1_fu_629_p3),11));
    zext_ln514_1_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_475_p3),11));
    zext_ln514_2_fu_896_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln503_1_reg_1273),8));
    zext_ln514_3_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln503_reg_1268),12));
    zext_ln514_4_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln514_2_reg_1284),64));
    zext_ln514_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_reg_1117),11));
    zext_ln525_fu_1048_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_1041_p3),63));
    zext_ln536_1_fu_1052_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln525_1_reg_1313),63));
    zext_ln536_2_fu_1091_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln525_reg_1308),12));
    zext_ln536_3_fu_1100_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln536_2_reg_1329),64));
    zext_ln536_fu_966_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln519_1_fu_958_p3),11));
end behav;
