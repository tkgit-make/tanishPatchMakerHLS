-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_add_patch_patches_parameters14 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    wp_parameters_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    wp_parameters_ce0 : OUT STD_LOGIC;
    wp_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    patches_parameters_ce1 : OUT STD_LOGIC;
    patches_parameters_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_add_patch_patches_parameters14 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv8_F0 : STD_LOGIC_VECTOR (7 downto 0) := "11110000";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten37_reg_133 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_144 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten13_reg_155 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_reg_166 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_177 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_reg_188 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_199 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten59_reg_210 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_4_reg_221 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten45_reg_232 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_6_reg_243 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_5_reg_254 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln320_1_fu_265_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln320_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln320_reg_803 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln320_reg_803_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln320_reg_803_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln320_reg_803_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln320_1_fu_297_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln320_1_reg_807 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln320_2_fu_311_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln320_2_reg_814 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln326_1_fu_369_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln326_1_reg_820 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln332_fu_413_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln332_reg_827 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln332_reg_827_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln332_1_fu_421_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln332_1_reg_832 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln338_fu_429_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln332_2_fu_441_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln326_2_fu_455_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln343_fu_546_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln343_reg_853 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln343_1_fu_550_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln343_1_reg_858 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln343_2_fu_560_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln343_2_reg_863 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln343_3_fu_564_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln343_3_reg_868 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln343_7_fu_622_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln343_7_reg_878 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln343_7_reg_878_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal patches_parameters_load_reg_883 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal add_ln350_1_fu_632_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state8_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln350_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln350_reg_893 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln350_reg_893_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln350_1_fu_664_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln350_1_reg_897 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln356_fu_702_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln356_reg_903 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln356_1_fu_710_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln356_1_reg_908 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln362_fu_718_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln356_2_fu_730_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln367_3_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln367_3_reg_924 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_i_phi_fu_148_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_a_phi_fu_170_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_b_phi_fu_192_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_a_4_phi_fu_225_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_b_6_phi_fu_247_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln343_8_fu_617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln343_9_fu_628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln326_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln320_fu_271_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln320_fu_305_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln338_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln320_1_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln332_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln320_fu_289_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln320_1_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln326_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln326_fu_349_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln326_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln320_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln326_1_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln326_fu_361_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln326_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln332_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln332_1_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln332_fu_395_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln332_1_fu_435_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln326_1_fu_449_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_466_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln343_1_fu_473_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal zext_ln343_fu_463_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_41_fu_486_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln343_3_fu_493_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal zext_ln343_2_fu_483_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal add_ln343_1_fu_497_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal zext_ln343_4_fu_503_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal add_ln343_2_fu_506_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal add_ln343_fu_477_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal zext_ln343_5_fu_520_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal add_ln343_3_fu_523_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_82_cast_fu_512_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln343_6_fu_537_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln343_4_fu_540_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_84_cast_fu_529_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln343_5_fu_554_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_shl3_cast_fu_568_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_cast_fu_575_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_588_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_595_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln343_fu_582_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln343_7_fu_608_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln343_6_fu_611_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln343_1_fu_602_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln356_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln350_fu_644_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln362_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln350_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln350_fu_656_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln350_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln356_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln356_fu_690_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln356_1_fu_724_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_738_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln356_fu_745_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln367_fu_749_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln367_fu_752_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_42_fu_766_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl7_cast_fu_758_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln367_1_fu_774_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln367_fu_778_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln367_2_fu_784_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln367_1_fu_787_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state8);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_4_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                a_4_reg_221 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln350_reg_893 = ap_const_lv1_0))) then 
                a_4_reg_221 <= select_ln350_1_reg_897;
            end if; 
        end if;
    end process;

    a_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln320_reg_803 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                a_reg_166 <= select_ln326_1_reg_820;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                a_reg_166 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    b_6_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                b_6_reg_243 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln350_reg_893 = ap_const_lv1_0))) then 
                b_6_reg_243 <= select_ln356_1_reg_908;
            end if; 
        end if;
    end process;

    b_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln320_reg_803 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                b_reg_188 <= select_ln332_1_reg_832;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                b_reg_188 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_5_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                c_5_reg_254 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln350_fu_638_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                c_5_reg_254 <= add_ln362_fu_718_p2;
            end if; 
        end if;
    end process;

    c_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln320_fu_277_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c_reg_199 <= add_ln338_fu_429_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_reg_199 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln320_reg_803 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_reg_144 <= select_ln320_1_reg_807;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_144 <= ap_const_lv2_2;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln320_fu_277_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten13_reg_155 <= select_ln326_2_fu_455_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten13_reg_155 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten37_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln320_fu_277_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten37_reg_133 <= add_ln320_1_fu_265_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten37_reg_133 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten45_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten45_reg_232 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln350_fu_638_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten45_reg_232 <= select_ln356_2_fu_730_p3;
            end if; 
        end if;
    end process;

    indvar_flatten59_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten59_reg_210 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln350_fu_638_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten59_reg_210 <= add_ln350_1_fu_632_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln320_fu_277_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_177 <= select_ln332_2_fu_441_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_177 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln320_reg_803_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln343_7_reg_878 <= add_ln343_7_fu_622_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln343_7_reg_878_pp0_iter3_reg <= add_ln343_7_reg_878;
                icmp_ln320_reg_803_pp0_iter2_reg <= icmp_ln320_reg_803_pp0_iter1_reg;
                icmp_ln320_reg_803_pp0_iter3_reg <= icmp_ln320_reg_803_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln320_reg_803 <= icmp_ln320_fu_277_p2;
                icmp_ln320_reg_803_pp0_iter1_reg <= icmp_ln320_reg_803;
                select_ln332_reg_827_pp0_iter1_reg <= select_ln332_reg_827;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln350_reg_893 <= icmp_ln350_fu_638_p2;
                icmp_ln350_reg_893_pp1_iter1_reg <= icmp_ln350_reg_893;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln320_reg_803_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                patches_parameters_load_reg_883 <= patches_parameters_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln320_fu_277_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln320_1_reg_807 <= select_ln320_1_fu_297_p3;
                select_ln326_1_reg_820 <= select_ln326_1_fu_369_p3;
                select_ln332_1_reg_832 <= select_ln332_1_fu_421_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln320_fu_277_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln320_2_reg_814 <= select_ln320_2_fu_311_p3;
                select_ln332_reg_827 <= select_ln332_fu_413_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln350_fu_638_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                select_ln350_1_reg_897 <= select_ln350_1_fu_664_p3;
                select_ln356_1_reg_908 <= select_ln356_1_fu_710_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln350_fu_638_p2 = ap_const_lv1_0))) then
                select_ln356_reg_903 <= select_ln356_fu_702_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln320_reg_803 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln343_1_reg_858 <= trunc_ln343_1_fu_550_p1;
                trunc_ln343_2_reg_863 <= trunc_ln343_2_fu_560_p1;
                trunc_ln343_3_reg_868 <= trunc_ln343_3_fu_564_p1;
                trunc_ln343_reg_853 <= trunc_ln343_fu_546_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln350_reg_893 = ap_const_lv1_0))) then
                    zext_ln367_3_reg_924(8 downto 0) <= zext_ln367_3_fu_793_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln367_3_reg_924(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln320_fu_277_p2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp1_iter0, icmp_ln350_fu_638_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln320_fu_277_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln320_fu_277_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln350_fu_638_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln350_fu_638_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln320_1_fu_265_p2 <= std_logic_vector(unsigned(indvar_flatten37_reg_133) + unsigned(ap_const_lv8_1));
    add_ln320_fu_271_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_148_p4) + unsigned(ap_const_lv2_3));
    add_ln326_1_fu_449_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_155) + unsigned(ap_const_lv8_1));
    add_ln326_fu_349_p2 <= std_logic_vector(unsigned(select_ln320_fu_289_p3) + unsigned(ap_const_lv3_1));
    add_ln332_1_fu_435_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_177) + unsigned(ap_const_lv6_1));
    add_ln332_fu_395_p2 <= std_logic_vector(unsigned(select_ln326_fu_361_p3) + unsigned(ap_const_lv3_1));
    add_ln338_fu_429_p2 <= std_logic_vector(unsigned(select_ln332_fu_413_p3) + unsigned(ap_const_lv3_1));
    add_ln343_1_fu_497_p2 <= std_logic_vector(unsigned(zext_ln343_3_fu_493_p1) + unsigned(zext_ln343_2_fu_483_p1));
    add_ln343_2_fu_506_p2 <= std_logic_vector(unsigned(add_ln343_1_fu_497_p2) + unsigned(zext_ln343_4_fu_503_p1));
    add_ln343_3_fu_523_p2 <= std_logic_vector(unsigned(add_ln343_fu_477_p2) + unsigned(zext_ln343_5_fu_520_p1));
    add_ln343_4_fu_540_p2 <= std_logic_vector(unsigned(tmp_82_cast_fu_512_p3) + unsigned(zext_ln343_6_fu_537_p1));
    add_ln343_5_fu_554_p2 <= std_logic_vector(unsigned(tmp_84_cast_fu_529_p3) + unsigned(zext_ln343_6_fu_537_p1));
    add_ln343_6_fu_611_p2 <= std_logic_vector(unsigned(sub_ln343_fu_582_p2) + unsigned(zext_ln343_7_fu_608_p1));
    add_ln343_7_fu_622_p2 <= std_logic_vector(unsigned(sub_ln343_1_fu_602_p2) + unsigned(zext_ln343_7_fu_608_p1));
    add_ln343_fu_477_p2 <= std_logic_vector(unsigned(zext_ln343_1_fu_473_p1) + unsigned(zext_ln343_fu_463_p1));
    add_ln350_1_fu_632_p2 <= std_logic_vector(unsigned(indvar_flatten59_reg_210) + unsigned(ap_const_lv7_1));
    add_ln350_fu_644_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_4_phi_fu_225_p4) + unsigned(ap_const_lv3_1));
    add_ln356_1_fu_724_p2 <= std_logic_vector(unsigned(indvar_flatten45_reg_232) + unsigned(ap_const_lv6_1));
    add_ln356_fu_690_p2 <= std_logic_vector(unsigned(select_ln350_fu_656_p3) + unsigned(ap_const_lv3_1));
    add_ln362_fu_718_p2 <= std_logic_vector(unsigned(select_ln356_fu_702_p3) + unsigned(ap_const_lv3_1));
    add_ln367_1_fu_787_p2 <= std_logic_vector(unsigned(sub_ln367_fu_778_p2) + unsigned(zext_ln367_2_fu_784_p1));
    add_ln367_fu_752_p2 <= std_logic_vector(unsigned(zext_ln356_fu_745_p1) + unsigned(zext_ln367_fu_749_p1));
    and_ln320_1_fu_343_p2 <= (xor_ln320_1_fu_319_p2 and icmp_ln332_fu_337_p2);
    and_ln320_fu_331_p2 <= (xor_ln320_1_fu_319_p2 and icmp_ln338_fu_325_p2);
    and_ln326_fu_389_p2 <= (or_ln326_1_fu_383_p2 and and_ln320_fu_331_p2);
    and_ln350_fu_684_p2 <= (xor_ln350_fu_672_p2 and icmp_ln362_fu_678_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln320_fu_277_p2)
    begin
        if ((icmp_ln320_fu_277_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state8_assign_proc : process(icmp_ln350_fu_638_p2)
    begin
        if ((icmp_ln350_fu_638_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_a_4_phi_fu_225_p4_assign_proc : process(a_4_reg_221, ap_CS_fsm_pp1_stage0, icmp_ln350_reg_893, select_ln350_1_reg_897, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln350_reg_893 = ap_const_lv1_0))) then 
            ap_phi_mux_a_4_phi_fu_225_p4 <= select_ln350_1_reg_897;
        else 
            ap_phi_mux_a_4_phi_fu_225_p4 <= a_4_reg_221;
        end if; 
    end process;


    ap_phi_mux_a_phi_fu_170_p4_assign_proc : process(a_reg_166, ap_CS_fsm_pp0_stage0, icmp_ln320_reg_803, select_ln326_1_reg_820, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln320_reg_803 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_a_phi_fu_170_p4 <= select_ln326_1_reg_820;
        else 
            ap_phi_mux_a_phi_fu_170_p4 <= a_reg_166;
        end if; 
    end process;


    ap_phi_mux_b_6_phi_fu_247_p4_assign_proc : process(b_6_reg_243, ap_CS_fsm_pp1_stage0, icmp_ln350_reg_893, select_ln356_1_reg_908, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln350_reg_893 = ap_const_lv1_0))) then 
            ap_phi_mux_b_6_phi_fu_247_p4 <= select_ln356_1_reg_908;
        else 
            ap_phi_mux_b_6_phi_fu_247_p4 <= b_6_reg_243;
        end if; 
    end process;


    ap_phi_mux_b_phi_fu_192_p4_assign_proc : process(b_reg_188, ap_CS_fsm_pp0_stage0, icmp_ln320_reg_803, select_ln332_1_reg_832, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln320_reg_803 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_b_phi_fu_192_p4 <= select_ln332_1_reg_832;
        else 
            ap_phi_mux_b_phi_fu_192_p4 <= b_reg_188;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_148_p4_assign_proc : process(i_reg_144, ap_CS_fsm_pp0_stage0, icmp_ln320_reg_803, select_ln320_1_reg_807, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln320_reg_803 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_phi_fu_148_p4 <= select_ln320_1_reg_807;
        else 
            ap_phi_mux_i_phi_fu_148_p4 <= i_reg_144;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln320_fu_277_p2 <= "1" when (indvar_flatten37_reg_133 = ap_const_lv8_F0) else "0";
    icmp_ln326_fu_283_p2 <= "1" when (indvar_flatten13_reg_155 = ap_const_lv8_78) else "0";
    icmp_ln332_fu_337_p2 <= "1" when (indvar_flatten_reg_177 = ap_const_lv6_18) else "0";
    icmp_ln338_fu_325_p2 <= "1" when (c_reg_199 = ap_const_lv3_6) else "0";
    icmp_ln350_fu_638_p2 <= "1" when (indvar_flatten59_reg_210 = ap_const_lv7_78) else "0";
    icmp_ln356_fu_650_p2 <= "1" when (indvar_flatten45_reg_232 = ap_const_lv6_18) else "0";
    icmp_ln362_fu_678_p2 <= "1" when (c_5_reg_254 = ap_const_lv3_6) else "0";
    or_ln326_1_fu_383_p2 <= (xor_ln326_fu_377_p2 or icmp_ln326_fu_283_p2);
    or_ln326_fu_355_p2 <= (icmp_ln326_fu_283_p2 or and_ln320_1_fu_343_p2);
    or_ln332_1_fu_407_p2 <= (or_ln332_fu_401_p2 or icmp_ln326_fu_283_p2);
    or_ln332_fu_401_p2 <= (and_ln326_fu_389_p2 or and_ln320_1_fu_343_p2);
    or_ln356_fu_696_p2 <= (icmp_ln356_fu_650_p2 or and_ln350_fu_684_p2);
    p_shl2_cast_fu_595_p3 <= (trunc_ln343_3_reg_868 & ap_const_lv1_0);
    p_shl3_cast_fu_568_p3 <= (trunc_ln343_reg_853 & ap_const_lv3_0);
    p_shl4_cast_fu_575_p3 <= (trunc_ln343_1_reg_858 & ap_const_lv1_0);
    p_shl7_cast_fu_758_p3 <= (add_ln367_fu_752_p2 & ap_const_lv3_0);
    p_shl_cast_fu_588_p3 <= (trunc_ln343_2_reg_863 & ap_const_lv3_0);

    patches_parameters_address0_assign_proc : process(zext_ln367_3_reg_924, ap_enable_reg_pp0_iter4, ap_enable_reg_pp1_iter2, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln343_9_fu_628_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            patches_parameters_address0 <= zext_ln367_3_reg_924(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            patches_parameters_address0 <= zext_ln343_9_fu_628_p1(9 - 1 downto 0);
        else 
            patches_parameters_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    patches_parameters_address1 <= zext_ln343_8_fu_617_p1(9 - 1 downto 0);

    patches_parameters_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter4, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            patches_parameters_ce0 <= ap_const_logic_1;
        else 
            patches_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            patches_parameters_ce1 <= ap_const_logic_1;
        else 
            patches_parameters_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_d0_assign_proc : process(wp_parameters_q0, patches_parameters_load_reg_883, ap_enable_reg_pp0_iter4, ap_enable_reg_pp1_iter2, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            patches_parameters_d0 <= wp_parameters_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            patches_parameters_d0 <= patches_parameters_load_reg_883;
        else 
            patches_parameters_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln320_reg_803_pp0_iter3_reg, ap_block_pp1_stage0_11001, icmp_ln350_reg_893_pp1_iter1_reg, ap_enable_reg_pp0_iter4, ap_enable_reg_pp1_iter2)
    begin
        if ((((icmp_ln320_reg_803_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln350_reg_893_pp1_iter1_reg = ap_const_lv1_0)))) then 
            patches_parameters_we0 <= ap_const_logic_1;
        else 
            patches_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln320_1_fu_297_p3 <= 
        add_ln320_fu_271_p2 when (icmp_ln326_fu_283_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_148_p4;
    select_ln320_2_fu_311_p3 <= 
        xor_ln320_fu_305_p2 when (icmp_ln326_fu_283_p2(0) = '1') else 
        add_ln320_fu_271_p2;
    select_ln320_fu_289_p3 <= 
        ap_const_lv3_0 when (icmp_ln326_fu_283_p2(0) = '1') else 
        ap_phi_mux_a_phi_fu_170_p4;
    select_ln326_1_fu_369_p3 <= 
        add_ln326_fu_349_p2 when (and_ln320_1_fu_343_p2(0) = '1') else 
        select_ln320_fu_289_p3;
    select_ln326_2_fu_455_p3 <= 
        ap_const_lv8_1 when (icmp_ln326_fu_283_p2(0) = '1') else 
        add_ln326_1_fu_449_p2;
    select_ln326_fu_361_p3 <= 
        ap_const_lv3_0 when (or_ln326_fu_355_p2(0) = '1') else 
        ap_phi_mux_b_phi_fu_192_p4;
    select_ln332_1_fu_421_p3 <= 
        add_ln332_fu_395_p2 when (and_ln326_fu_389_p2(0) = '1') else 
        select_ln326_fu_361_p3;
    select_ln332_2_fu_441_p3 <= 
        ap_const_lv6_1 when (or_ln326_fu_355_p2(0) = '1') else 
        add_ln332_1_fu_435_p2;
    select_ln332_fu_413_p3 <= 
        ap_const_lv3_0 when (or_ln332_1_fu_407_p2(0) = '1') else 
        c_reg_199;
    select_ln350_1_fu_664_p3 <= 
        add_ln350_fu_644_p2 when (icmp_ln356_fu_650_p2(0) = '1') else 
        ap_phi_mux_a_4_phi_fu_225_p4;
    select_ln350_fu_656_p3 <= 
        ap_const_lv3_0 when (icmp_ln356_fu_650_p2(0) = '1') else 
        ap_phi_mux_b_6_phi_fu_247_p4;
    select_ln356_1_fu_710_p3 <= 
        add_ln356_fu_690_p2 when (and_ln350_fu_684_p2(0) = '1') else 
        select_ln350_fu_656_p3;
    select_ln356_2_fu_730_p3 <= 
        ap_const_lv6_1 when (icmp_ln356_fu_650_p2(0) = '1') else 
        add_ln356_1_fu_724_p2;
    select_ln356_fu_702_p3 <= 
        ap_const_lv3_0 when (or_ln356_fu_696_p2(0) = '1') else 
        c_5_reg_254;
    sub_ln343_1_fu_602_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_588_p3) - unsigned(p_shl2_cast_fu_595_p3));
    sub_ln343_fu_582_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_568_p3) - unsigned(p_shl4_cast_fu_575_p3));
    sub_ln367_fu_778_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_758_p3) - unsigned(zext_ln367_1_fu_774_p1));
    tmp_41_fu_486_p3 <= (select_ln320_2_reg_814 & ap_const_lv2_0);
    tmp_42_fu_766_p3 <= (add_ln367_fu_752_p2 & ap_const_lv1_0);
    tmp_82_cast_fu_512_p3 <= (add_ln343_2_fu_506_p2 & ap_const_lv2_0);
    tmp_84_cast_fu_529_p3 <= (add_ln343_3_fu_523_p2 & ap_const_lv2_0);
    tmp_fu_466_p3 <= (select_ln320_1_reg_807 & ap_const_lv2_0);
    tmp_s_fu_738_p3 <= (select_ln350_1_reg_897 & ap_const_lv2_0);
    trunc_ln343_1_fu_550_p1 <= add_ln343_4_fu_540_p2(8 - 1 downto 0);
    trunc_ln343_2_fu_560_p1 <= add_ln343_5_fu_554_p2(6 - 1 downto 0);
    trunc_ln343_3_fu_564_p1 <= add_ln343_5_fu_554_p2(8 - 1 downto 0);
    trunc_ln343_fu_546_p1 <= add_ln343_4_fu_540_p2(6 - 1 downto 0);
    wp_parameters_address0 <= zext_ln367_3_fu_793_p1(7 - 1 downto 0);

    wp_parameters_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            wp_parameters_ce0 <= ap_const_logic_1;
        else 
            wp_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln320_1_fu_319_p2 <= (icmp_ln326_fu_283_p2 xor ap_const_lv1_1);
    xor_ln320_fu_305_p2 <= (ap_phi_mux_i_phi_fu_148_p4 xor ap_const_lv2_2);
    xor_ln326_fu_377_p2 <= (icmp_ln332_fu_337_p2 xor ap_const_lv1_1);
    xor_ln350_fu_672_p2 <= (icmp_ln356_fu_650_p2 xor ap_const_lv1_1);
    zext_ln343_1_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_466_p3),61));
    zext_ln343_2_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln320_2_reg_814),61));
    zext_ln343_3_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_486_p3),61));
    zext_ln343_4_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln326_1_reg_820),61));
    zext_ln343_5_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln326_1_reg_820),61));
    zext_ln343_6_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln332_1_reg_832),63));
    zext_ln343_7_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln332_reg_827_pp0_iter1_reg),9));
    zext_ln343_8_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln343_6_fu_611_p2),64));
    zext_ln343_9_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln343_7_reg_878_pp0_iter3_reg),64));
    zext_ln343_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln320_1_reg_807),61));
    zext_ln356_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_738_p3),6));
    zext_ln367_1_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_766_p3),9));
    zext_ln367_2_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln356_reg_903),9));
    zext_ln367_3_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln367_1_fu_787_p2),64));
    zext_ln367_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln356_1_reg_908),6));
end behav;
