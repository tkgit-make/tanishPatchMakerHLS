-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_solveNextPatchPair is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n_patches_i : IN STD_LOGIC_VECTOR (7 downto 0);
    n_patches_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    n_patches_o_ap_vld : OUT STD_LOGIC;
    GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    GDn_points_ce0 : OUT STD_LOGIC;
    GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tempArray_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tempArray_ce0 : OUT STD_LOGIC;
    tempArray_we0 : OUT STD_LOGIC;
    tempArray_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    tempArray_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tempArray_ce1 : OUT STD_LOGIC;
    tempArray_we1 : OUT STD_LOGIC;
    tempArray_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ppl : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    GDarrayDecoded_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    GDarrayDecoded_ce0 : OUT STD_LOGIC;
    GDarrayDecoded_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_we0 : OUT STD_LOGIC;
    patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patches_superpoints_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_parameters_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_parameters_ce1 : OUT STD_LOGIC;
    patches_parameters_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_97_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_97_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_97_p_din3 : OUT STD_LOGIC_VECTOR (2 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_97_p_din4 : OUT STD_LOGIC_VECTOR (2 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_97_p_din5 : OUT STD_LOGIC_VECTOR (2 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_97_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_straightLineProjectorFromLayerIJtoK_fu_97_p_ce : OUT STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_97_p_start : OUT STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_97_p_ready : IN STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_97_p_done : IN STD_LOGIC;
    grp_straightLineProjectorFromLayerIJtoK_fu_97_p_idle : IN STD_LOGIC );
end;


architecture behav of MPSQ_solveNextPatchPair is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_E4E1C0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000111001001110000111000000";
    constant ap_const_lv64_FFFFFFFFFD050F1C : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111101000001010000111100011100";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv12_3C : STD_LOGIC_VECTOR (11 downto 0) := "000000111100";
    constant ap_const_lv12_3D : STD_LOGIC_VECTOR (11 downto 0) := "000000111101";
    constant ap_const_lv12_30 : STD_LOGIC_VECTOR (11 downto 0) := "000000110000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_37 : STD_LOGIC_VECTOR (11 downto 0) := "000000110111";
    constant ap_const_lv32_FD050F1C : STD_LOGIC_VECTOR (31 downto 0) := "11111101000001010000111100011100";
    constant ap_const_lv12_54 : STD_LOGIC_VECTOR (11 downto 0) := "000001010100";
    constant ap_const_lv12_48 : STD_LOGIC_VECTOR (11 downto 0) := "000001001000";
    constant ap_const_lv32_E4E1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000111001001110000111000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sub_ln787_fu_318_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln787_reg_498 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln886_2_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_2_reg_526 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln886_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_reg_541 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_1_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_1_reg_546 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln841_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln841_reg_551 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln886_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln886_reg_556 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal and_ln841_1_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln841_1_reg_561 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_makePatch_alignedToLine_fu_250_ap_start : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_250_ap_done : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_250_ap_idle : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_250_ap_ready : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_250_n_patches_o : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_makePatch_alignedToLine_fu_250_n_patches_o_ap_vld : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_250_GDn_points_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_makePatch_alignedToLine_fu_250_GDn_points_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_250_GDarrayDecoded_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_makePatch_alignedToLine_fu_250_GDarrayDecoded_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_250_patches_superpoints_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_makePatch_alignedToLine_fu_250_patches_superpoints_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_250_patches_superpoints_we0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_250_patches_superpoints_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_makePatch_alignedToLine_fu_250_patches_parameters_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_makePatch_alignedToLine_fu_250_patches_parameters_ce0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_250_patches_parameters_we0 : STD_LOGIC;
    signal grp_makePatch_alignedToLine_fu_250_patches_parameters_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_272_ap_start : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_272_ap_done : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_272_ap_idle : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_272_ap_ready : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_272_ap_ce : STD_LOGIC;
    signal grp_straightLineProjectorFromLayerIJtoK_fu_272_z_i : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_272_z_j : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_272_i : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_272_j : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_272_k : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_straightLineProjectorFromLayerIJtoK_fu_272_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_makePatch_alignedToLine_fu_250_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_straightLineProjectorFromLayerIJtoK_fu_272_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm_state4 : STD_LOGIC;
    signal zext_ln787_2_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln787_1_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln886_fu_357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln886_1_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln534_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln534_1_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sext_ln534_1_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln534_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln840_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln842_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln841_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln843_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln750_fu_288_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal lastPatchIndex_fu_292_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_306_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_298_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln787_fu_314_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln787_fu_324_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln787_1_fu_335_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln886_fu_346_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln886_fu_351_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln886_1_fu_362_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln534_1_fu_372_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln886_2_fu_377_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln534_fu_383_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln534_1_fu_393_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln534_fu_413_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln841_fu_418_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal squarePatch_alternate2_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln827_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notChoppedPatch_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln841_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln841_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln886_1_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component MPSQ_makePatch_alignedToLine IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        n_patches_i : IN STD_LOGIC_VECTOR (7 downto 0);
        n_patches_o : OUT STD_LOGIC_VECTOR (7 downto 0);
        n_patches_o_ap_vld : OUT STD_LOGIC;
        GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        GDn_points_ce0 : OUT STD_LOGIC;
        GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        z_top : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        GDarrayDecoded_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        GDarrayDecoded_ce0 : OUT STD_LOGIC;
        GDarrayDecoded_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_superpoints_ce0 : OUT STD_LOGIC;
        patches_superpoints_we0 : OUT STD_LOGIC;
        patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        patches_superpoints_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        patches_parameters_ce0 : OUT STD_LOGIC;
        patches_parameters_we0 : OUT STD_LOGIC;
        patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        patches_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_straightLineProjectorFromLayerIJtoK IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        z_i : IN STD_LOGIC_VECTOR (31 downto 0);
        z_j : IN STD_LOGIC_VECTOR (31 downto 0);
        i : IN STD_LOGIC_VECTOR (2 downto 0);
        j : IN STD_LOGIC_VECTOR (2 downto 0);
        k : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_makePatch_alignedToLine_fu_250 : component MPSQ_makePatch_alignedToLine
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_makePatch_alignedToLine_fu_250_ap_start,
        ap_done => grp_makePatch_alignedToLine_fu_250_ap_done,
        ap_idle => grp_makePatch_alignedToLine_fu_250_ap_idle,
        ap_ready => grp_makePatch_alignedToLine_fu_250_ap_ready,
        n_patches_i => n_patches_i,
        n_patches_o => grp_makePatch_alignedToLine_fu_250_n_patches_o,
        n_patches_o_ap_vld => grp_makePatch_alignedToLine_fu_250_n_patches_o_ap_vld,
        GDn_points_address0 => grp_makePatch_alignedToLine_fu_250_GDn_points_address0,
        GDn_points_ce0 => grp_makePatch_alignedToLine_fu_250_GDn_points_ce0,
        GDn_points_q0 => GDn_points_q0,
        z_top => p_read3,
        p_read => ppl,
        GDarrayDecoded_address0 => grp_makePatch_alignedToLine_fu_250_GDarrayDecoded_address0,
        GDarrayDecoded_ce0 => grp_makePatch_alignedToLine_fu_250_GDarrayDecoded_ce0,
        GDarrayDecoded_q0 => GDarrayDecoded_q0,
        patches_superpoints_address0 => grp_makePatch_alignedToLine_fu_250_patches_superpoints_address0,
        patches_superpoints_ce0 => grp_makePatch_alignedToLine_fu_250_patches_superpoints_ce0,
        patches_superpoints_we0 => grp_makePatch_alignedToLine_fu_250_patches_superpoints_we0,
        patches_superpoints_d0 => grp_makePatch_alignedToLine_fu_250_patches_superpoints_d0,
        patches_superpoints_q0 => patches_superpoints_q0,
        patches_parameters_address0 => grp_makePatch_alignedToLine_fu_250_patches_parameters_address0,
        patches_parameters_ce0 => grp_makePatch_alignedToLine_fu_250_patches_parameters_ce0,
        patches_parameters_we0 => grp_makePatch_alignedToLine_fu_250_patches_parameters_we0,
        patches_parameters_d0 => grp_makePatch_alignedToLine_fu_250_patches_parameters_d0,
        patches_parameters_q0 => patches_parameters_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_makePatch_alignedToLine_fu_250_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_makePatch_alignedToLine_fu_250_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_makePatch_alignedToLine_fu_250_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_makePatch_alignedToLine_fu_250_ap_ready = ap_const_logic_1)) then 
                    grp_makePatch_alignedToLine_fu_250_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_straightLineProjectorFromLayerIJtoK_fu_272_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_straightLineProjectorFromLayerIJtoK_fu_272_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_NS_fsm_state4))) then 
                    grp_straightLineProjectorFromLayerIJtoK_fu_272_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_straightLineProjectorFromLayerIJtoK_fu_272_ap_ready = ap_const_logic_1)) then 
                    grp_straightLineProjectorFromLayerIJtoK_fu_272_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                and_ln841_1_reg_561 <= and_ln841_1_fu_468_p2;
                and_ln886_reg_556 <= and_ln886_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                icmp_ln841_reg_551 <= icmp_ln841_fu_418_p2;
                icmp_ln886_1_reg_546 <= icmp_ln886_1_fu_408_p2;
                icmp_ln886_reg_541 <= icmp_ln886_fu_403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_ln886_2_reg_526 <= icmp_ln886_2_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    sub_ln787_reg_498(11 downto 3) <= sub_ln787_fu_318_p2(11 downto 3);
            end if;
        end if;
    end process;
    sub_ln787_reg_498(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_makePatch_alignedToLine_fu_250_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_makePatch_alignedToLine_fu_250_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    GDarrayDecoded_address0 <= grp_makePatch_alignedToLine_fu_250_GDarrayDecoded_address0;
    GDarrayDecoded_ce0 <= grp_makePatch_alignedToLine_fu_250_GDarrayDecoded_ce0;
    GDn_points_address0 <= grp_makePatch_alignedToLine_fu_250_GDn_points_address0;
    GDn_points_ce0 <= grp_makePatch_alignedToLine_fu_250_GDn_points_ce0;
    add_ln534_1_fu_393_p2 <= std_logic_vector(unsigned(sub_ln787_reg_498) + unsigned(ap_const_lv12_48));
    add_ln534_fu_383_p2 <= std_logic_vector(unsigned(sub_ln787_reg_498) + unsigned(ap_const_lv12_54));
    add_ln787_1_fu_335_p2 <= std_logic_vector(unsigned(sub_ln787_fu_318_p2) + unsigned(ap_const_lv12_3D));
    add_ln787_fu_324_p2 <= std_logic_vector(unsigned(sub_ln787_fu_318_p2) + unsigned(ap_const_lv12_3C));
    add_ln886_1_fu_362_p2 <= std_logic_vector(unsigned(sub_ln787_reg_498) + unsigned(ap_const_lv12_37));
    add_ln886_fu_346_p2 <= std_logic_vector(unsigned(sub_ln787_reg_498) + unsigned(ap_const_lv12_30));
    and_ln841_1_fu_468_p2 <= (icmp_ln886_2_reg_526 and and_ln841_fu_463_p2);
    and_ln841_fu_463_p2 <= (xor_ln841_fu_457_p2 and icmp_ln841_reg_551);
    and_ln886_1_fu_435_p2 <= (icmp_ln886_1_reg_546 and and_ln886_fu_430_p2);
    and_ln886_fu_430_p2 <= (squarePatch_alternate2_fu_424_p2 and icmp_ln886_reg_541);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_NS_fsm_state4 <= ap_NS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_makePatch_alignedToLine_fu_250_ap_start <= grp_makePatch_alignedToLine_fu_250_ap_start_reg;
    grp_straightLineProjectorFromLayerIJtoK_fu_272_ap_ce <= ap_const_logic_1;
    grp_straightLineProjectorFromLayerIJtoK_fu_272_ap_done <= grp_straightLineProjectorFromLayerIJtoK_fu_97_p_done;
    grp_straightLineProjectorFromLayerIJtoK_fu_272_ap_idle <= grp_straightLineProjectorFromLayerIJtoK_fu_97_p_idle;
    grp_straightLineProjectorFromLayerIJtoK_fu_272_ap_ready <= grp_straightLineProjectorFromLayerIJtoK_fu_97_p_ready;
    grp_straightLineProjectorFromLayerIJtoK_fu_272_ap_return <= grp_straightLineProjectorFromLayerIJtoK_fu_97_p_dout0;
    grp_straightLineProjectorFromLayerIJtoK_fu_272_ap_start <= grp_straightLineProjectorFromLayerIJtoK_fu_272_ap_start_reg;
    grp_straightLineProjectorFromLayerIJtoK_fu_272_i <= ap_const_lv3_5;
    grp_straightLineProjectorFromLayerIJtoK_fu_272_j <= ap_const_lv3_1;
    grp_straightLineProjectorFromLayerIJtoK_fu_272_k <= ap_const_lv3_0;
    grp_straightLineProjectorFromLayerIJtoK_fu_272_z_i <= patches_parameters_q1;
    grp_straightLineProjectorFromLayerIJtoK_fu_272_z_j <= patches_parameters_q0;
    grp_straightLineProjectorFromLayerIJtoK_fu_97_p_ce <= ap_const_logic_1;
    grp_straightLineProjectorFromLayerIJtoK_fu_97_p_din1 <= patches_parameters_q1;
    grp_straightLineProjectorFromLayerIJtoK_fu_97_p_din2 <= patches_parameters_q0;
    grp_straightLineProjectorFromLayerIJtoK_fu_97_p_din3 <= ap_const_lv3_5;
    grp_straightLineProjectorFromLayerIJtoK_fu_97_p_din4 <= ap_const_lv3_1;
    grp_straightLineProjectorFromLayerIJtoK_fu_97_p_din5 <= ap_const_lv3_0;
    grp_straightLineProjectorFromLayerIJtoK_fu_97_p_start <= grp_straightLineProjectorFromLayerIJtoK_fu_272_ap_start_reg;
    icmp_ln827_fu_440_p2 <= "0" when (patches_parameters_q1 = ap_const_lv32_0) else "1";
    icmp_ln841_fu_418_p0 <= grp_straightLineProjectorFromLayerIJtoK_fu_97_p_dout0;
    icmp_ln841_fu_418_p2 <= "1" when (signed(icmp_ln841_fu_418_p0) < signed(ap_const_lv32_E4E1C0)) else "0";
    icmp_ln886_1_fu_408_p2 <= "1" when (signed(patches_parameters_q0) > signed(p_read3)) else "0";
    icmp_ln886_2_fu_377_p0 <= patches_parameters_q1;
    icmp_ln886_2_fu_377_p2 <= "1" when (signed(icmp_ln886_2_fu_377_p0) > signed(ap_const_lv32_FD050F1C)) else "0";
    icmp_ln886_fu_403_p2 <= "1" when (signed(patches_parameters_q1) > signed(p_read3)) else "0";
    lastPatchIndex_fu_292_p2 <= std_logic_vector(unsigned(trunc_ln750_fu_288_p1) + unsigned(ap_const_lv5_1F));

    n_patches_o_assign_proc : process(n_patches_i, grp_makePatch_alignedToLine_fu_250_n_patches_o, grp_makePatch_alignedToLine_fu_250_n_patches_o_ap_vld, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_makePatch_alignedToLine_fu_250_n_patches_o_ap_vld = ap_const_logic_1))) then 
            n_patches_o <= grp_makePatch_alignedToLine_fu_250_n_patches_o;
        else 
            n_patches_o <= n_patches_i;
        end if; 
    end process;


    n_patches_o_ap_vld_assign_proc : process(grp_makePatch_alignedToLine_fu_250_n_patches_o_ap_vld, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            n_patches_o_ap_vld <= grp_makePatch_alignedToLine_fu_250_n_patches_o_ap_vld;
        else 
            n_patches_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    notChoppedPatch_fu_446_p2 <= (icmp_ln827_fu_440_p2 or and_ln886_fu_430_p2);
    or_ln886_fu_351_p2 <= (ap_const_lv12_1 or add_ln886_fu_346_p2);

    patches_parameters_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_makePatch_alignedToLine_fu_250_patches_parameters_address0, ap_CS_fsm_state2, zext_ln787_1_fu_330_p1, zext_ln886_1_fu_367_p1, zext_ln534_1_fu_398_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            patches_parameters_address0 <= zext_ln534_1_fu_398_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            patches_parameters_address0 <= zext_ln886_1_fu_367_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            patches_parameters_address0 <= zext_ln787_1_fu_330_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patches_parameters_address0 <= grp_makePatch_alignedToLine_fu_250_patches_parameters_address0;
        else 
            patches_parameters_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, zext_ln787_2_fu_341_p1, zext_ln886_fu_357_p1, zext_ln534_fu_388_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            patches_parameters_address1 <= zext_ln534_fu_388_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            patches_parameters_address1 <= zext_ln886_fu_357_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            patches_parameters_address1 <= zext_ln787_2_fu_341_p1(12 - 1 downto 0);
        else 
            patches_parameters_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    patches_parameters_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_makePatch_alignedToLine_fu_250_patches_parameters_ce0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            patches_parameters_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patches_parameters_ce0 <= grp_makePatch_alignedToLine_fu_250_patches_parameters_ce0;
        else 
            patches_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    patches_parameters_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            patches_parameters_ce1 <= ap_const_logic_1;
        else 
            patches_parameters_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    patches_parameters_d0 <= grp_makePatch_alignedToLine_fu_250_patches_parameters_d0;

    patches_parameters_we0_assign_proc : process(grp_makePatch_alignedToLine_fu_250_patches_parameters_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patches_parameters_we0 <= grp_makePatch_alignedToLine_fu_250_patches_parameters_we0;
        else 
            patches_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_superpoints_address0 <= grp_makePatch_alignedToLine_fu_250_patches_superpoints_address0;
    patches_superpoints_ce0 <= grp_makePatch_alignedToLine_fu_250_patches_superpoints_ce0;
    patches_superpoints_d0 <= grp_makePatch_alignedToLine_fu_250_patches_superpoints_d0;
    patches_superpoints_we0 <= grp_makePatch_alignedToLine_fu_250_patches_superpoints_we0;
    sext_ln534_1_fu_372_p0 <= patches_parameters_q1;
        sext_ln534_1_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln534_1_fu_372_p0),64));

    sext_ln534_fu_413_p0 <= grp_straightLineProjectorFromLayerIJtoK_fu_97_p_dout0;
        sext_ln534_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln534_fu_413_p0),64));

    squarePatch_alternate2_fu_424_p2 <= "0" when (patches_parameters_q0 = ap_const_lv32_0) else "1";
    sub_ln787_fu_318_p2 <= std_logic_vector(unsigned(tmp_fu_298_p3) - unsigned(zext_ln787_fu_314_p1));

    tempArray_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            tempArray_address0 <= ap_const_lv64_7(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tempArray_address0 <= ap_const_lv64_6(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tempArray_address0 <= ap_const_lv64_2(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            tempArray_address0 <= ap_const_lv64_3(8 - 1 downto 0);
        else 
            tempArray_address0 <= "XXXXXXXX";
        end if; 
    end process;


    tempArray_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            tempArray_address1 <= ap_const_lv64_5(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tempArray_address1 <= ap_const_lv64_4(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tempArray_address1 <= ap_const_lv64_0(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            tempArray_address1 <= ap_const_lv64_1(8 - 1 downto 0);
        else 
            tempArray_address1 <= "XXXXXXXX";
        end if; 
    end process;


    tempArray_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            tempArray_ce0 <= ap_const_logic_1;
        else 
            tempArray_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tempArray_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            tempArray_ce1 <= ap_const_logic_1;
        else 
            tempArray_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    tempArray_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, sext_ln534_1_fu_372_p1, zext_ln842_fu_473_p1, zext_ln843_fu_482_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            tempArray_d0 <= zext_ln843_fu_482_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tempArray_d0 <= zext_ln842_fu_473_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tempArray_d0 <= sext_ln534_1_fu_372_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            tempArray_d0 <= ap_const_lv64_FFFFFFFFFD050F1C;
        else 
            tempArray_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tempArray_d1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, sext_ln534_fu_413_p1, zext_ln840_fu_452_p1, zext_ln841_fu_478_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            tempArray_d1 <= zext_ln841_fu_478_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tempArray_d1 <= zext_ln840_fu_452_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tempArray_d1 <= sext_ln534_fu_413_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            tempArray_d1 <= ap_const_lv64_E4E1C0;
        else 
            tempArray_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tempArray_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            tempArray_we0 <= ap_const_logic_1;
        else 
            tempArray_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tempArray_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            tempArray_we1 <= ap_const_logic_1;
        else 
            tempArray_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_4_fu_306_p3 <= (lastPatchIndex_fu_292_p2 & ap_const_lv3_0);
    tmp_fu_298_p3 <= (lastPatchIndex_fu_292_p2 & ap_const_lv7_0);
    trunc_ln750_fu_288_p1 <= n_patches_i(5 - 1 downto 0);
    xor_ln841_fu_457_p2 <= (notChoppedPatch_fu_446_p2 xor ap_const_lv1_1);
    zext_ln534_1_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln534_1_fu_393_p2),64));
    zext_ln534_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln534_fu_383_p2),64));
    zext_ln787_1_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln787_fu_324_p2),64));
    zext_ln787_2_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln787_1_fu_335_p2),64));
    zext_ln787_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_306_p3),12));
    zext_ln840_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(notChoppedPatch_fu_446_p2),64));
    zext_ln841_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln841_1_reg_561),64));
    zext_ln842_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln886_1_fu_435_p2),64));
    zext_ln843_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln886_reg_556),64));
    zext_ln886_1_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln886_1_fu_362_p2),64));
    zext_ln886_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln886_fu_351_p2),64));
end behav;
