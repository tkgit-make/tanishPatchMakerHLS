-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_initializeArrays is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_we0 : OUT STD_LOGIC;
    patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_initializeArrays is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_A00 : STD_LOGIC_VECTOR (11 downto 0) := "101000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_50 : STD_LOGIC_VECTOR (7 downto 0) := "01010000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_168 : STD_LOGIC_VECTOR (8 downto 0) := "101101000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten13_reg_126 : STD_LOGIC_VECTOR (11 downto 0);
    signal a_reg_137 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_reg_148 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_reg_159 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_170 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten59_reg_181 : STD_LOGIC_VECTOR (8 downto 0);
    signal a_1_reg_192 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten35_reg_203 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_3_reg_214 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten21_reg_225 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_3_reg_236 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_reg_247 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln601_1_fu_258_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln601_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln601_reg_692 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln601_reg_692_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln601_1_fu_290_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln601_1_reg_696 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln605_fu_328_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln605_reg_703 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln605_1_fu_336_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln605_1_reg_708 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln611_fu_344_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln605_2_fu_356_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln616_2_fu_400_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln616_2_reg_724 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln622_1_fu_410_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln622_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln622_reg_734 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln622_reg_734_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln622_1_fu_442_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln622_1_reg_738 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln626_1_fu_500_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln626_1_reg_745 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln632_fu_544_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln632_reg_751 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln632_1_fu_552_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln632_1_reg_756 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln638_fu_560_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln632_2_fu_572_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln626_2_fu_586_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln643_3_fu_677_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln643_3_reg_777 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_a_phi_fu_141_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_b_phi_fu_163_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_a_1_phi_fu_196_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_b_3_phi_fu_218_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_c_3_phi_fu_240_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln616_3_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln643_5_fu_683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln605_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln601_fu_270_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln611_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln601_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln601_fu_282_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln601_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln605_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln605_fu_316_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln605_1_fu_350_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_367_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln616_fu_364_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln616_fu_374_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln616_1_fu_380_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln616_1_fu_383_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_cast_fu_389_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln616_2_fu_397_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln626_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln622_fu_422_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln638_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln622_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln632_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln622_fu_434_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln622_1_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln626_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln626_fu_480_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln626_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln622_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln626_1_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln626_fu_492_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln626_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln632_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln632_1_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln632_fu_526_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln632_1_fu_566_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln626_1_fu_580_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_597_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln643_1_fu_604_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln643_fu_594_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln643_fu_608_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln643_2_fu_614_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln643_1_fu_617_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_fu_623_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln632_fu_631_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln643_3_fu_635_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln643_2_fu_638_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln643_fu_644_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln643_1_fu_656_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_fu_648_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_cast_fu_660_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln643_fu_668_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln643_4_fu_674_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_1_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                a_1_reg_192 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln622_reg_734 = ap_const_lv1_0))) then 
                a_1_reg_192 <= select_ln622_1_reg_738;
            end if; 
        end if;
    end process;

    a_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln601_reg_692 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                a_reg_137 <= select_ln601_1_reg_696;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                a_reg_137 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    b_3_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                b_3_reg_214 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln622_reg_734 = ap_const_lv1_0))) then 
                b_3_reg_214 <= select_ln626_1_reg_745;
            end if; 
        end if;
    end process;

    b_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln601_reg_692 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                b_reg_159 <= select_ln605_1_reg_708;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                b_reg_159 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_3_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                c_3_reg_236 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln622_reg_734 = ap_const_lv1_0))) then 
                c_3_reg_236 <= select_ln632_1_reg_756;
            end if; 
        end if;
    end process;

    c_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln601_fu_264_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c_reg_170 <= add_ln611_fu_344_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_reg_170 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    d_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                d_reg_247 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln622_fu_416_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                d_reg_247 <= add_ln638_fu_560_p2;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln601_fu_264_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten13_reg_126 <= add_ln601_1_fu_258_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten13_reg_126 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten21_reg_225 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln622_fu_416_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten21_reg_225 <= select_ln632_2_fu_572_p3;
            end if; 
        end if;
    end process;

    indvar_flatten35_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten35_reg_203 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln622_fu_416_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten35_reg_203 <= select_ln626_2_fu_586_p3;
            end if; 
        end if;
    end process;

    indvar_flatten59_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten59_reg_181 <= ap_const_lv9_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln622_fu_416_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten59_reg_181 <= add_ln622_1_fu_410_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln601_fu_264_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_148 <= select_ln605_2_fu_356_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_148 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln601_reg_692 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln616_2_reg_724 <= add_ln616_2_fu_400_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln622_reg_734 = ap_const_lv1_0))) then
                add_ln643_3_reg_777 <= add_ln643_3_fu_677_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln601_reg_692 <= icmp_ln601_fu_264_p2;
                icmp_ln601_reg_692_pp0_iter1_reg <= icmp_ln601_reg_692;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln622_reg_734 <= icmp_ln622_fu_416_p2;
                icmp_ln622_reg_734_pp1_iter1_reg <= icmp_ln622_reg_734;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln601_fu_264_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln601_1_reg_696 <= select_ln601_1_fu_290_p3;
                select_ln605_1_reg_708 <= select_ln605_1_fu_336_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln601_fu_264_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln605_reg_703 <= select_ln605_fu_328_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln622_fu_416_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                select_ln622_1_reg_738 <= select_ln622_1_fu_442_p3;
                select_ln626_1_reg_745 <= select_ln626_1_fu_500_p3;
                select_ln632_1_reg_756 <= select_ln632_1_fu_552_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln622_fu_416_p2 = ap_const_lv1_0))) then
                select_ln632_reg_751 <= select_ln632_fu_544_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln601_fu_264_p2, ap_enable_reg_pp1_iter0, icmp_ln622_fu_416_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln601_fu_264_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln601_fu_264_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln622_fu_416_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln622_fu_416_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln601_1_fu_258_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_126) + unsigned(ap_const_lv12_1));
    add_ln601_fu_270_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_phi_fu_141_p4) + unsigned(ap_const_lv6_1));
    add_ln605_1_fu_350_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_148) + unsigned(ap_const_lv8_1));
    add_ln605_fu_316_p2 <= std_logic_vector(unsigned(select_ln601_fu_282_p3) + unsigned(ap_const_lv3_1));
    add_ln611_fu_344_p2 <= std_logic_vector(unsigned(select_ln605_fu_328_p3) + unsigned(ap_const_lv5_1));
    add_ln616_1_fu_383_p2 <= std_logic_vector(unsigned(add_ln616_fu_374_p2) + unsigned(zext_ln616_1_fu_380_p1));
    add_ln616_2_fu_400_p2 <= std_logic_vector(unsigned(tmp_32_cast_fu_389_p3) + unsigned(zext_ln616_2_fu_397_p1));
    add_ln616_fu_374_p2 <= std_logic_vector(unsigned(tmp_fu_367_p3) + unsigned(zext_ln616_fu_364_p1));
    add_ln622_1_fu_410_p2 <= std_logic_vector(unsigned(indvar_flatten59_reg_181) + unsigned(ap_const_lv9_1));
    add_ln622_fu_422_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_1_phi_fu_196_p4) + unsigned(ap_const_lv2_1));
    add_ln626_1_fu_580_p2 <= std_logic_vector(unsigned(indvar_flatten35_reg_203) + unsigned(ap_const_lv8_1));
    add_ln626_fu_480_p2 <= std_logic_vector(unsigned(select_ln622_fu_434_p3) + unsigned(ap_const_lv3_1));
    add_ln632_1_fu_566_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_225) + unsigned(ap_const_lv6_1));
    add_ln632_fu_526_p2 <= std_logic_vector(unsigned(select_ln626_fu_492_p3) + unsigned(ap_const_lv3_1));
    add_ln638_fu_560_p2 <= std_logic_vector(unsigned(select_ln632_fu_544_p3) + unsigned(ap_const_lv3_1));
    add_ln643_1_fu_617_p2 <= std_logic_vector(unsigned(add_ln643_fu_608_p2) + unsigned(zext_ln643_2_fu_614_p1));
    add_ln643_2_fu_638_p2 <= std_logic_vector(unsigned(zext_ln632_fu_631_p1) + unsigned(zext_ln643_3_fu_635_p1));
    add_ln643_3_fu_677_p2 <= std_logic_vector(unsigned(sub_ln643_fu_668_p2) + unsigned(zext_ln643_4_fu_674_p1));
    add_ln643_fu_608_p2 <= std_logic_vector(unsigned(zext_ln643_1_fu_604_p1) + unsigned(zext_ln643_fu_594_p1));
    and_ln601_fu_310_p2 <= (xor_ln601_fu_298_p2 and icmp_ln611_fu_304_p2);
    and_ln622_1_fu_474_p2 <= (xor_ln622_fu_450_p2 and icmp_ln632_fu_468_p2);
    and_ln622_fu_462_p2 <= (xor_ln622_fu_450_p2 and icmp_ln638_fu_456_p2);
    and_ln626_fu_520_p2 <= (or_ln626_1_fu_514_p2 and and_ln622_fu_462_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln601_fu_264_p2)
    begin
        if ((icmp_ln601_fu_264_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state6_assign_proc : process(icmp_ln622_fu_416_p2)
    begin
        if ((icmp_ln622_fu_416_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_a_1_phi_fu_196_p4_assign_proc : process(a_1_reg_192, ap_CS_fsm_pp1_stage0, icmp_ln622_reg_734, select_ln622_1_reg_738, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln622_reg_734 = ap_const_lv1_0))) then 
            ap_phi_mux_a_1_phi_fu_196_p4 <= select_ln622_1_reg_738;
        else 
            ap_phi_mux_a_1_phi_fu_196_p4 <= a_1_reg_192;
        end if; 
    end process;


    ap_phi_mux_a_phi_fu_141_p4_assign_proc : process(a_reg_137, ap_CS_fsm_pp0_stage0, icmp_ln601_reg_692, select_ln601_1_reg_696, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln601_reg_692 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_a_phi_fu_141_p4 <= select_ln601_1_reg_696;
        else 
            ap_phi_mux_a_phi_fu_141_p4 <= a_reg_137;
        end if; 
    end process;


    ap_phi_mux_b_3_phi_fu_218_p4_assign_proc : process(b_3_reg_214, ap_CS_fsm_pp1_stage0, icmp_ln622_reg_734, select_ln626_1_reg_745, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln622_reg_734 = ap_const_lv1_0))) then 
            ap_phi_mux_b_3_phi_fu_218_p4 <= select_ln626_1_reg_745;
        else 
            ap_phi_mux_b_3_phi_fu_218_p4 <= b_3_reg_214;
        end if; 
    end process;


    ap_phi_mux_b_phi_fu_163_p4_assign_proc : process(b_reg_159, ap_CS_fsm_pp0_stage0, icmp_ln601_reg_692, select_ln605_1_reg_708, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln601_reg_692 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_b_phi_fu_163_p4 <= select_ln605_1_reg_708;
        else 
            ap_phi_mux_b_phi_fu_163_p4 <= b_reg_159;
        end if; 
    end process;


    ap_phi_mux_c_3_phi_fu_240_p4_assign_proc : process(c_3_reg_236, ap_CS_fsm_pp1_stage0, icmp_ln622_reg_734, select_ln632_1_reg_756, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln622_reg_734 = ap_const_lv1_0))) then 
            ap_phi_mux_c_3_phi_fu_240_p4 <= select_ln632_1_reg_756;
        else 
            ap_phi_mux_c_3_phi_fu_240_p4 <= c_3_reg_236;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln601_fu_264_p2 <= "1" when (indvar_flatten13_reg_126 = ap_const_lv12_A00) else "0";
    icmp_ln605_fu_276_p2 <= "1" when (indvar_flatten_reg_148 = ap_const_lv8_50) else "0";
    icmp_ln611_fu_304_p2 <= "1" when (c_reg_170 = ap_const_lv5_10) else "0";
    icmp_ln622_fu_416_p2 <= "1" when (indvar_flatten59_reg_181 = ap_const_lv9_168) else "0";
    icmp_ln626_fu_428_p2 <= "1" when (indvar_flatten35_reg_203 = ap_const_lv8_78) else "0";
    icmp_ln632_fu_468_p2 <= "1" when (indvar_flatten21_reg_225 = ap_const_lv6_18) else "0";
    icmp_ln638_fu_456_p2 <= "1" when (d_reg_247 = ap_const_lv3_6) else "0";
    or_ln605_fu_322_p2 <= (icmp_ln605_fu_276_p2 or and_ln601_fu_310_p2);
    or_ln626_1_fu_514_p2 <= (xor_ln626_fu_508_p2 or icmp_ln626_fu_428_p2);
    or_ln626_fu_486_p2 <= (icmp_ln626_fu_428_p2 or and_ln622_1_fu_474_p2);
    or_ln632_1_fu_538_p2 <= (or_ln632_fu_532_p2 or icmp_ln626_fu_428_p2);
    or_ln632_fu_532_p2 <= (and_ln626_fu_520_p2 or and_ln622_1_fu_474_p2);
    p_shl2_cast_fu_648_p3 <= (trunc_ln643_fu_644_p1 & ap_const_lv3_0);
    p_shl3_cast_fu_660_p3 <= (trunc_ln643_1_fu_656_p1 & ap_const_lv1_0);
    patches_parameters_address0 <= zext_ln643_5_fu_683_p1(9 - 1 downto 0);

    patches_parameters_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            patches_parameters_ce0 <= ap_const_logic_1;
        else 
            patches_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_parameters_d0 <= ap_const_lv32_0;

    patches_parameters_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln622_reg_734_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln622_reg_734_pp1_iter1_reg = ap_const_lv1_0))) then 
            patches_parameters_we0 <= ap_const_logic_1;
        else 
            patches_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_superpoints_address0 <= zext_ln616_3_fu_406_p1(12 - 1 downto 0);

    patches_superpoints_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            patches_superpoints_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_superpoints_d0 <= ap_const_lv64_0;

    patches_superpoints_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln601_reg_692_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln601_reg_692_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            patches_superpoints_we0 <= ap_const_logic_1;
        else 
            patches_superpoints_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln601_1_fu_290_p3 <= 
        add_ln601_fu_270_p2 when (icmp_ln605_fu_276_p2(0) = '1') else 
        ap_phi_mux_a_phi_fu_141_p4;
    select_ln601_fu_282_p3 <= 
        ap_const_lv3_0 when (icmp_ln605_fu_276_p2(0) = '1') else 
        ap_phi_mux_b_phi_fu_163_p4;
    select_ln605_1_fu_336_p3 <= 
        add_ln605_fu_316_p2 when (and_ln601_fu_310_p2(0) = '1') else 
        select_ln601_fu_282_p3;
    select_ln605_2_fu_356_p3 <= 
        ap_const_lv8_1 when (icmp_ln605_fu_276_p2(0) = '1') else 
        add_ln605_1_fu_350_p2;
    select_ln605_fu_328_p3 <= 
        ap_const_lv5_0 when (or_ln605_fu_322_p2(0) = '1') else 
        c_reg_170;
    select_ln622_1_fu_442_p3 <= 
        add_ln622_fu_422_p2 when (icmp_ln626_fu_428_p2(0) = '1') else 
        ap_phi_mux_a_1_phi_fu_196_p4;
    select_ln622_fu_434_p3 <= 
        ap_const_lv3_0 when (icmp_ln626_fu_428_p2(0) = '1') else 
        ap_phi_mux_b_3_phi_fu_218_p4;
    select_ln626_1_fu_500_p3 <= 
        add_ln626_fu_480_p2 when (and_ln622_1_fu_474_p2(0) = '1') else 
        select_ln622_fu_434_p3;
    select_ln626_2_fu_586_p3 <= 
        ap_const_lv8_1 when (icmp_ln626_fu_428_p2(0) = '1') else 
        add_ln626_1_fu_580_p2;
    select_ln626_fu_492_p3 <= 
        ap_const_lv3_0 when (or_ln626_fu_486_p2(0) = '1') else 
        ap_phi_mux_c_3_phi_fu_240_p4;
    select_ln632_1_fu_552_p3 <= 
        add_ln632_fu_526_p2 when (and_ln626_fu_520_p2(0) = '1') else 
        select_ln626_fu_492_p3;
    select_ln632_2_fu_572_p3 <= 
        ap_const_lv6_1 when (or_ln626_fu_486_p2(0) = '1') else 
        add_ln632_1_fu_566_p2;
    select_ln632_fu_544_p3 <= 
        ap_const_lv3_0 when (or_ln632_1_fu_538_p2(0) = '1') else 
        d_reg_247;
    sub_ln643_fu_668_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_648_p3) - unsigned(p_shl3_cast_fu_660_p3));
    tmp_26_fu_623_p3 <= (add_ln643_1_fu_617_p2 & ap_const_lv2_0);
    tmp_32_cast_fu_389_p3 <= (add_ln616_1_fu_383_p2 & ap_const_lv4_0);
    tmp_fu_367_p3 <= (select_ln601_1_reg_696 & ap_const_lv2_0);
    tmp_s_fu_597_p3 <= (select_ln622_1_reg_738 & ap_const_lv2_0);
    trunc_ln643_1_fu_656_p1 <= add_ln643_2_fu_638_p2(8 - 1 downto 0);
    trunc_ln643_fu_644_p1 <= add_ln643_2_fu_638_p2(6 - 1 downto 0);
    xor_ln601_fu_298_p2 <= (icmp_ln605_fu_276_p2 xor ap_const_lv1_1);
    xor_ln622_fu_450_p2 <= (icmp_ln626_fu_428_p2 xor ap_const_lv1_1);
    xor_ln626_fu_508_p2 <= (icmp_ln632_fu_468_p2 xor ap_const_lv1_1);
    zext_ln616_1_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln605_1_reg_708),8));
    zext_ln616_2_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln605_reg_703),12));
    zext_ln616_3_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln616_2_reg_724),64));
    zext_ln616_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln601_1_reg_696),8));
    zext_ln632_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_623_p3),63));
    zext_ln643_1_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_597_p3),5));
    zext_ln643_2_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln626_1_reg_745),5));
    zext_ln643_3_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln632_1_reg_756),63));
    zext_ln643_4_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln632_reg_751),9));
    zext_ln643_5_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln643_3_reg_777),64));
    zext_ln643_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln622_1_reg_738),5));
end behav;
