-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_initializeArrays is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_we0 : OUT STD_LOGIC;
    patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    patches_parameters_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    patches_parameters_ce0 : OUT STD_LOGIC;
    patches_parameters_we0 : OUT STD_LOGIC;
    patches_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_initializeArrays is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_A00 : STD_LOGIC_VECTOR (11 downto 0) := "101000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_50 : STD_LOGIC_VECTOR (7 downto 0) := "01010000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_48 : STD_LOGIC_VECTOR (6 downto 0) := "1001000";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten13_reg_124 : STD_LOGIC_VECTOR (11 downto 0);
    signal a_reg_135 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_reg_146 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_reg_157 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_168 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten59_reg_179 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten35_reg_190 : STD_LOGIC_VECTOR (5 downto 0);
    signal a_1_reg_201 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_3_reg_212 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten21_reg_223 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_3_reg_234 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_reg_245 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln597_1_fu_256_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln597_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln597_reg_663 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln597_reg_663_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln597_1_fu_288_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln597_1_reg_667 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln601_fu_326_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln601_reg_674 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln601_1_fu_334_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln601_1_reg_679 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln607_fu_342_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln601_2_fu_354_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln612_2_fu_398_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln612_2_reg_695 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln618_1_fu_408_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln618_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln618_reg_705 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln618_reg_705_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln622_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln622_reg_709 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln622_2_fu_432_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln618_1_fu_453_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln618_1_reg_724 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal select_ln622_1_fu_534_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln622_1_reg_729 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln639_fu_546_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln639_reg_734 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln628_fu_586_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln628_reg_739 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln628_1_fu_594_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln628_1_reg_744 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln634_fu_602_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln628_2_fu_614_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_flush_enable : STD_LOGIC;
    signal ap_condition_pp1_exit_iter1_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_a_phi_fu_139_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_b_phi_fu_161_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_a_1_phi_fu_205_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_b_3_phi_fu_216_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_c_3_phi_fu_238_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln612_3_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln639_5_fu_653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln601_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln597_fu_268_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln607_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln597_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln597_fu_280_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln597_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln601_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln601_fu_314_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln601_1_fu_348_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_365_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln612_fu_362_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln612_fu_372_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln612_1_fu_378_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln612_1_fu_381_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_cast_fu_387_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln612_2_fu_395_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln622_1_fu_426_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln618_fu_440_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_464_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln639_1_fu_472_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln639_fu_460_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln639_fu_476_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln634_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln618_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln628_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln618_fu_446_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln618_1_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln622_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln622_fu_515_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln622_fu_482_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln639_2_fu_542_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln622_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln618_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln622_1_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln622_fu_526_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln622_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln628_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln628_1_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln628_fu_569_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln628_1_fu_608_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln639_fu_622_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln639_3_fu_627_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln639_1_fu_630_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_30_cast_fu_636_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln639_4_fu_644_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln639_2_fu_647_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp1_flush_enable)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter1_state7) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter1_state7))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_1_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                a_1_reg_201 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln618_reg_705_pp1_iter1_reg = ap_const_lv1_0))) then 
                a_1_reg_201 <= select_ln618_1_reg_724;
            end if; 
        end if;
    end process;

    a_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln597_reg_663 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                a_reg_135 <= select_ln597_1_reg_667;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                a_reg_135 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    b_3_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                b_3_reg_212 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln618_reg_705_pp1_iter1_reg = ap_const_lv1_0))) then 
                b_3_reg_212 <= select_ln622_1_reg_729;
            end if; 
        end if;
    end process;

    b_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln597_reg_663 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                b_reg_157 <= select_ln601_1_reg_679;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                b_reg_157 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_3_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                c_3_reg_234 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln618_reg_705_pp1_iter1_reg = ap_const_lv1_0))) then 
                c_3_reg_234 <= select_ln628_1_reg_744;
            end if; 
        end if;
    end process;

    c_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln597_fu_262_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c_reg_168 <= add_ln607_fu_342_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_reg_168 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    d_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                d_reg_245 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln618_reg_705 = ap_const_lv1_0))) then 
                d_reg_245 <= add_ln634_fu_602_p2;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln597_fu_262_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten13_reg_124 <= add_ln597_1_fu_256_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten13_reg_124 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten21_reg_223 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln618_reg_705 = ap_const_lv1_0))) then 
                indvar_flatten21_reg_223 <= select_ln628_2_fu_614_p3;
            end if; 
        end if;
    end process;

    indvar_flatten35_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten35_reg_190 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln618_fu_414_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten35_reg_190 <= select_ln622_2_fu_432_p3;
            end if; 
        end if;
    end process;

    indvar_flatten59_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten59_reg_179 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln618_fu_414_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten59_reg_179 <= add_ln618_1_fu_408_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln597_fu_262_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_146 <= select_ln601_2_fu_354_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_146 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln597_reg_663 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln612_2_reg_695 <= add_ln612_2_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln618_reg_705 = ap_const_lv1_0))) then
                add_ln639_reg_734 <= add_ln639_fu_546_p2;
                select_ln628_reg_739 <= select_ln628_fu_586_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln597_reg_663 <= icmp_ln597_fu_262_p2;
                icmp_ln597_reg_663_pp0_iter1_reg <= icmp_ln597_reg_663;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln618_reg_705 <= icmp_ln618_fu_414_p2;
                icmp_ln618_reg_705_pp1_iter1_reg <= icmp_ln618_reg_705;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln618_fu_414_p2 = ap_const_lv1_0))) then
                icmp_ln622_reg_709 <= icmp_ln622_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln597_fu_262_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln597_1_reg_667 <= select_ln597_1_fu_288_p3;
                select_ln601_1_reg_679 <= select_ln601_1_fu_334_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln597_fu_262_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln601_reg_674 <= select_ln601_fu_326_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln618_reg_705 = ap_const_lv1_0))) then
                select_ln618_1_reg_724 <= select_ln618_1_fu_453_p3;
                select_ln622_1_reg_729 <= select_ln622_1_fu_534_p3;
                select_ln628_1_reg_744 <= select_ln628_1_fu_594_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln597_fu_262_p2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln597_fu_262_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln597_fu_262_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln597_1_fu_256_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_124) + unsigned(ap_const_lv12_1));
    add_ln597_fu_268_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_phi_fu_139_p4) + unsigned(ap_const_lv6_1));
    add_ln601_1_fu_348_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_146) + unsigned(ap_const_lv8_1));
    add_ln601_fu_314_p2 <= std_logic_vector(unsigned(select_ln597_fu_280_p3) + unsigned(ap_const_lv3_1));
    add_ln607_fu_342_p2 <= std_logic_vector(unsigned(select_ln601_fu_326_p3) + unsigned(ap_const_lv5_1));
    add_ln612_1_fu_381_p2 <= std_logic_vector(unsigned(add_ln612_fu_372_p2) + unsigned(zext_ln612_1_fu_378_p1));
    add_ln612_2_fu_398_p2 <= std_logic_vector(unsigned(tmp_25_cast_fu_387_p3) + unsigned(zext_ln612_2_fu_395_p1));
    add_ln612_fu_372_p2 <= std_logic_vector(unsigned(tmp_fu_365_p3) + unsigned(zext_ln612_fu_362_p1));
    add_ln618_1_fu_408_p2 <= std_logic_vector(unsigned(indvar_flatten59_reg_179) + unsigned(ap_const_lv7_1));
    add_ln618_fu_440_p2 <= std_logic_vector(unsigned(ap_phi_mux_a_1_phi_fu_205_p4) + unsigned(ap_const_lv2_1));
    add_ln622_1_fu_426_p2 <= std_logic_vector(unsigned(indvar_flatten35_reg_190) + unsigned(ap_const_lv6_1));
    add_ln622_fu_515_p2 <= std_logic_vector(unsigned(select_ln618_fu_446_p3) + unsigned(ap_const_lv2_1));
    add_ln628_1_fu_608_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_223) + unsigned(ap_const_lv5_1));
    add_ln628_fu_569_p2 <= std_logic_vector(unsigned(select_ln622_fu_526_p3) + unsigned(ap_const_lv3_1));
    add_ln634_fu_602_p2 <= std_logic_vector(unsigned(select_ln628_fu_586_p3) + unsigned(ap_const_lv2_1));
    add_ln639_1_fu_630_p2 <= std_logic_vector(unsigned(shl_ln639_fu_622_p2) + unsigned(zext_ln639_3_fu_627_p1));
    add_ln639_2_fu_647_p2 <= std_logic_vector(unsigned(tmp_30_cast_fu_636_p3) + unsigned(zext_ln639_4_fu_644_p1));
    add_ln639_fu_546_p2 <= std_logic_vector(signed(sext_ln622_fu_482_p1) + signed(zext_ln639_2_fu_542_p1));
    and_ln597_fu_308_p2 <= (xor_ln597_fu_296_p2 and icmp_ln607_fu_302_p2);
    and_ln618_1_fu_509_p2 <= (xor_ln618_fu_486_p2 and icmp_ln628_fu_503_p2);
    and_ln618_fu_497_p2 <= (xor_ln618_fu_486_p2 and icmp_ln634_fu_491_p2);
    and_ln622_fu_563_p2 <= (or_ln622_1_fu_558_p2 and and_ln618_fu_497_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln597_fu_262_p2)
    begin
        if ((icmp_ln597_fu_262_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter1_state7_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_condition_pp1_exit_iter1_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter1_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_flush_enable_assign_proc : process(ap_CS_fsm_pp1_stage0, icmp_ln618_fu_414_p2, ap_block_pp1_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln618_fu_414_p2 = ap_const_lv1_1))) then 
            ap_condition_pp1_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp1_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_a_1_phi_fu_205_p4_assign_proc : process(a_1_reg_201, icmp_ln618_reg_705_pp1_iter1_reg, select_ln618_1_reg_724, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln618_reg_705_pp1_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_a_1_phi_fu_205_p4 <= select_ln618_1_reg_724;
        else 
            ap_phi_mux_a_1_phi_fu_205_p4 <= a_1_reg_201;
        end if; 
    end process;


    ap_phi_mux_a_phi_fu_139_p4_assign_proc : process(a_reg_135, ap_CS_fsm_pp0_stage0, icmp_ln597_reg_663, select_ln597_1_reg_667, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln597_reg_663 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_a_phi_fu_139_p4 <= select_ln597_1_reg_667;
        else 
            ap_phi_mux_a_phi_fu_139_p4 <= a_reg_135;
        end if; 
    end process;


    ap_phi_mux_b_3_phi_fu_216_p4_assign_proc : process(b_3_reg_212, icmp_ln618_reg_705_pp1_iter1_reg, select_ln622_1_reg_729, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln618_reg_705_pp1_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_b_3_phi_fu_216_p4 <= select_ln622_1_reg_729;
        else 
            ap_phi_mux_b_3_phi_fu_216_p4 <= b_3_reg_212;
        end if; 
    end process;


    ap_phi_mux_b_phi_fu_161_p4_assign_proc : process(b_reg_157, ap_CS_fsm_pp0_stage0, icmp_ln597_reg_663, select_ln601_1_reg_679, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln597_reg_663 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_b_phi_fu_161_p4 <= select_ln601_1_reg_679;
        else 
            ap_phi_mux_b_phi_fu_161_p4 <= b_reg_157;
        end if; 
    end process;


    ap_phi_mux_c_3_phi_fu_238_p4_assign_proc : process(c_3_reg_234, icmp_ln618_reg_705_pp1_iter1_reg, select_ln628_1_reg_744, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln618_reg_705_pp1_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_c_3_phi_fu_238_p4 <= select_ln628_1_reg_744;
        else 
            ap_phi_mux_c_3_phi_fu_238_p4 <= c_3_reg_234;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln597_fu_262_p2 <= "1" when (indvar_flatten13_reg_124 = ap_const_lv12_A00) else "0";
    icmp_ln601_fu_274_p2 <= "1" when (indvar_flatten_reg_146 = ap_const_lv8_50) else "0";
    icmp_ln607_fu_302_p2 <= "1" when (c_reg_168 = ap_const_lv5_10) else "0";
    icmp_ln618_fu_414_p2 <= "1" when (indvar_flatten59_reg_179 = ap_const_lv7_48) else "0";
    icmp_ln622_fu_420_p2 <= "1" when (indvar_flatten35_reg_190 = ap_const_lv6_18) else "0";
    icmp_ln628_fu_503_p2 <= "1" when (indvar_flatten21_reg_223 = ap_const_lv5_8) else "0";
    icmp_ln634_fu_491_p2 <= "1" when (d_reg_245 = ap_const_lv2_2) else "0";
    or_ln601_fu_320_p2 <= (icmp_ln601_fu_274_p2 or and_ln597_fu_308_p2);
    or_ln622_1_fu_558_p2 <= (xor_ln622_fu_552_p2 or icmp_ln622_reg_709);
    or_ln622_fu_521_p2 <= (icmp_ln622_reg_709 or and_ln618_1_fu_509_p2);
    or_ln628_1_fu_581_p2 <= (or_ln628_fu_575_p2 or icmp_ln622_reg_709);
    or_ln628_fu_575_p2 <= (and_ln622_fu_563_p2 or and_ln618_1_fu_509_p2);
    patches_parameters_address0 <= zext_ln639_5_fu_653_p1(7 - 1 downto 0);

    patches_parameters_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            patches_parameters_ce0 <= ap_const_logic_1;
        else 
            patches_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_parameters_d0 <= ap_const_lv32_0;

    patches_parameters_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln618_reg_705_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln618_reg_705_pp1_iter1_reg = ap_const_lv1_0))) then 
            patches_parameters_we0 <= ap_const_logic_1;
        else 
            patches_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_superpoints_address0 <= zext_ln612_3_fu_404_p1(12 - 1 downto 0);

    patches_superpoints_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            patches_superpoints_ce0 <= ap_const_logic_1;
        else 
            patches_superpoints_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patches_superpoints_d0 <= ap_const_lv64_0;

    patches_superpoints_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln597_reg_663_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln597_reg_663_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            patches_superpoints_we0 <= ap_const_logic_1;
        else 
            patches_superpoints_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln597_1_fu_288_p3 <= 
        add_ln597_fu_268_p2 when (icmp_ln601_fu_274_p2(0) = '1') else 
        ap_phi_mux_a_phi_fu_139_p4;
    select_ln597_fu_280_p3 <= 
        ap_const_lv3_0 when (icmp_ln601_fu_274_p2(0) = '1') else 
        ap_phi_mux_b_phi_fu_161_p4;
    select_ln601_1_fu_334_p3 <= 
        add_ln601_fu_314_p2 when (and_ln597_fu_308_p2(0) = '1') else 
        select_ln597_fu_280_p3;
    select_ln601_2_fu_354_p3 <= 
        ap_const_lv8_1 when (icmp_ln601_fu_274_p2(0) = '1') else 
        add_ln601_1_fu_348_p2;
    select_ln601_fu_326_p3 <= 
        ap_const_lv5_0 when (or_ln601_fu_320_p2(0) = '1') else 
        c_reg_168;
    select_ln618_1_fu_453_p3 <= 
        add_ln618_fu_440_p2 when (icmp_ln622_reg_709(0) = '1') else 
        ap_phi_mux_a_1_phi_fu_205_p4;
    select_ln618_fu_446_p3 <= 
        ap_const_lv2_0 when (icmp_ln622_reg_709(0) = '1') else 
        ap_phi_mux_b_3_phi_fu_216_p4;
    select_ln622_1_fu_534_p3 <= 
        add_ln622_fu_515_p2 when (and_ln618_1_fu_509_p2(0) = '1') else 
        select_ln618_fu_446_p3;
    select_ln622_2_fu_432_p3 <= 
        ap_const_lv6_1 when (icmp_ln622_fu_420_p2(0) = '1') else 
        add_ln622_1_fu_426_p2;
    select_ln622_fu_526_p3 <= 
        ap_const_lv3_0 when (or_ln622_fu_521_p2(0) = '1') else 
        ap_phi_mux_c_3_phi_fu_238_p4;
    select_ln628_1_fu_594_p3 <= 
        add_ln628_fu_569_p2 when (and_ln622_fu_563_p2(0) = '1') else 
        select_ln622_fu_526_p3;
    select_ln628_2_fu_614_p3 <= 
        ap_const_lv5_1 when (or_ln622_fu_521_p2(0) = '1') else 
        add_ln628_1_fu_608_p2;
    select_ln628_fu_586_p3 <= 
        ap_const_lv2_0 when (or_ln628_1_fu_581_p2(0) = '1') else 
        d_reg_245;
        sext_ln622_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln639_fu_476_p2),6));

    shl_ln639_fu_622_p2 <= std_logic_vector(shift_left(unsigned(add_ln639_reg_734),to_integer(unsigned('0' & ap_const_lv6_2(6-1 downto 0)))));
    sub_ln639_fu_476_p2 <= std_logic_vector(unsigned(zext_ln639_1_fu_472_p1) - unsigned(zext_ln639_fu_460_p1));
    tmp_25_cast_fu_387_p3 <= (add_ln612_1_fu_381_p2 & ap_const_lv4_0);
    tmp_30_cast_fu_636_p3 <= (add_ln639_1_fu_630_p2 & ap_const_lv1_0);
    tmp_fu_365_p3 <= (select_ln597_1_reg_667 & ap_const_lv2_0);
    tmp_s_fu_464_p3 <= (select_ln618_1_fu_453_p3 & ap_const_lv2_0);
    xor_ln597_fu_296_p2 <= (icmp_ln601_fu_274_p2 xor ap_const_lv1_1);
    xor_ln618_fu_486_p2 <= (icmp_ln622_reg_709 xor ap_const_lv1_1);
    xor_ln622_fu_552_p2 <= (icmp_ln628_fu_503_p2 xor ap_const_lv1_1);
    zext_ln612_1_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln601_1_reg_679),8));
    zext_ln612_2_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln601_reg_674),12));
    zext_ln612_3_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln612_2_reg_695),64));
    zext_ln612_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln597_1_reg_667),8));
    zext_ln639_1_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_464_p3),5));
    zext_ln639_2_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln622_1_fu_534_p3),6));
    zext_ln639_3_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln628_1_reg_744),6));
    zext_ln639_4_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln628_reg_739),7));
    zext_ln639_5_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln639_2_fu_647_p2),64));
    zext_ln639_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln618_1_fu_453_p3),5));
end behav;
