-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_makeSuperPoint_alignedToLine7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    GDn_points_ce0 : OUT STD_LOGIC;
    GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    i : IN STD_LOGIC_VECTOR (2 downto 0);
    z_top : IN STD_LOGIC_VECTOR (31 downto 0);
    original_ppl : IN STD_LOGIC_VECTOR (31 downto 0);
    init_patch_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    init_patch_ce0 : OUT STD_LOGIC;
    init_patch_we0 : OUT STD_LOGIC;
    init_patch_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    GDarrayDecoded_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    GDarrayDecoded_ce0 : OUT STD_LOGIC;
    GDarrayDecoded_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_makeSuperPoint_alignedToLine7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv33_1FEB04E1C : STD_LOGIC_VECTOR (32 downto 0) := "111111110101100000100111000011100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv33_14FB1E4 : STD_LOGIC_VECTOR (32 downto 0) := "000000001010011111011000111100100";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFF6 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111110110";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal radiiDivisionList_ce0 : STD_LOGIC;
    signal radiiDivisionList_q0 : STD_LOGIC_VECTOR (34 downto 0);
    signal row_list_size_reg_211 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_reg_235 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_246 : STD_LOGIC_VECTOR (4 downto 0);
    signal z_reg_257 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal radiiDivisionList_addr_reg_660 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1528_fu_333_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1528_reg_665 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_337_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_reg_670 : STD_LOGIC_VECTOR (10 downto 0);
    signal GDn_points_load_reg_676 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1526_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1526_reg_681 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1526_fu_350_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1526_reg_685 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln1528_fu_354_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln1528_reg_690 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1526_1_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1526_1_reg_695 : STD_LOGIC_VECTOR (0 downto 0);
    signal projectionToRow_fu_435_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal projectionToRow_reg_704 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sub_ln1625_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1625_reg_709 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln1625_fu_493_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1625_reg_714 : STD_LOGIC_VECTOR (10 downto 0);
    signal temp_start_fu_517_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal temp_start_reg_719 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln1671_2_fu_525_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state10_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln1671_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1671_reg_729 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1671_fu_549_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln1671_reg_733 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln1671_1_fu_557_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1671_1_reg_738 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1677_fu_602_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal grp_mSP_findLRBounds_fu_276_ap_ready : STD_LOGIC;
    signal grp_mSP_findLRBounds_fu_276_ap_done : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal row_list_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_list_V_ce0 : STD_LOGIC;
    signal row_list_V_we0 : STD_LOGIC;
    signal row_list_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mSP_findStartIndex_fu_268_ap_start : STD_LOGIC;
    signal grp_mSP_findStartIndex_fu_268_ap_done : STD_LOGIC;
    signal grp_mSP_findStartIndex_fu_268_ap_idle : STD_LOGIC;
    signal grp_mSP_findStartIndex_fu_268_ap_ready : STD_LOGIC;
    signal grp_mSP_findStartIndex_fu_268_row_list_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_mSP_findStartIndex_fu_268_row_list_ce0 : STD_LOGIC;
    signal grp_mSP_findStartIndex_fu_268_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mSP_findStartIndex_fu_268_ap_return_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_mSP_findLRBounds_fu_276_ap_start : STD_LOGIC;
    signal grp_mSP_findLRBounds_fu_276_ap_idle : STD_LOGIC;
    signal grp_mSP_findLRBounds_fu_276_row_list_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_mSP_findLRBounds_fu_276_row_list_ce0 : STD_LOGIC;
    signal grp_mSP_findLRBounds_fu_276_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_row_list_size_phi_fu_215_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal row_list_size_0_lcssa_reg_223 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_phi_mux_j_1_phi_fu_250_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal grp_mSP_findStartIndex_fu_268_ap_start_reg : STD_LOGIC := '0';
    signal grp_mSP_findLRBounds_fu_276_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal idxprom_fu_286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1531_2_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1528_1_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal row_list_size_cast_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1682_4_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1682_3_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_298_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_291_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1531_1_fu_305_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln1531_fu_309_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1531_fu_315_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_326_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln1528_fu_365_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1528_1_fu_369_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_cast_fu_374_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln1528_fu_382_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln215_fu_398_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_fu_401_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln1531_fu_415_p0 : STD_LOGIC_VECTOR (34 downto 0);
    signal mul_ln1531_fu_415_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_op_assign_fu_421_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1465_fu_431_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln1610_fu_450_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1610_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1615_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1610_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal start_index_1_fu_474_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal start_index_2_fu_480_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1625_fu_497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1625_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1646_fu_508_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1646_fu_512_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln1677_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1671_fu_537_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1671_fu_565_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1671_1_fu_569_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1682_1_fu_574_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_cast_fu_579_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1682_1_fu_587_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1682_3_fu_591_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1682_fu_608_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1682_fu_611_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1671_fu_616_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1682_2_fu_622_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1682_2_fu_625_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal mul_ln1531_fu_415_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component MPSQ_mSP_findStartIndex IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        row_list_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        row_list_ce0 : OUT STD_LOGIC;
        row_list_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        row_list_size : IN STD_LOGIC_VECTOR (31 downto 0);
        projectionToRow : IN STD_LOGIC_VECTOR (32 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MPSQ_mSP_findLRBounds IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        i : IN STD_LOGIC_VECTOR (2 downto 0);
        row_list_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        row_list_ce0 : OUT STD_LOGIC;
        row_list_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        row_list_size : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MPSQ_mul_35ns_33s_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (34 downto 0);
        din1 : IN STD_LOGIC_VECTOR (32 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MPSQ_straightLineProjectorFromLayerIJtoK_radiiDivisionList IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;


    component MPSQ_makeSuperPoint_alignedToLine7_row_list_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    radiiDivisionList_U : component MPSQ_straightLineProjectorFromLayerIJtoK_radiiDivisionList
    generic map (
        DataWidth => 35,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => radiiDivisionList_addr_reg_660,
        ce0 => radiiDivisionList_ce0,
        q0 => radiiDivisionList_q0);

    row_list_V_U : component MPSQ_makeSuperPoint_alignedToLine7_row_list_V
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => row_list_V_address0,
        ce0 => row_list_V_ce0,
        we0 => row_list_V_we0,
        d0 => GDarrayDecoded_q0,
        q0 => row_list_V_q0);

    grp_mSP_findStartIndex_fu_268 : component MPSQ_mSP_findStartIndex
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mSP_findStartIndex_fu_268_ap_start,
        ap_done => grp_mSP_findStartIndex_fu_268_ap_done,
        ap_idle => grp_mSP_findStartIndex_fu_268_ap_idle,
        ap_ready => grp_mSP_findStartIndex_fu_268_ap_ready,
        row_list_address0 => grp_mSP_findStartIndex_fu_268_row_list_address0,
        row_list_ce0 => grp_mSP_findStartIndex_fu_268_row_list_ce0,
        row_list_q0 => row_list_V_q0,
        row_list_size => row_list_size_0_lcssa_reg_223,
        projectionToRow => projectionToRow_reg_704,
        ap_return_0 => grp_mSP_findStartIndex_fu_268_ap_return_0,
        ap_return_1 => grp_mSP_findStartIndex_fu_268_ap_return_1);

    grp_mSP_findLRBounds_fu_276 : component MPSQ_mSP_findLRBounds
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mSP_findLRBounds_fu_276_ap_start,
        ap_done => grp_mSP_findLRBounds_fu_276_ap_done,
        ap_idle => grp_mSP_findLRBounds_fu_276_ap_idle,
        ap_ready => grp_mSP_findLRBounds_fu_276_ap_ready,
        i => i,
        row_list_address0 => grp_mSP_findLRBounds_fu_276_row_list_address0,
        row_list_ce0 => grp_mSP_findLRBounds_fu_276_row_list_ce0,
        row_list_q0 => row_list_V_q0,
        row_list_size => row_list_size_0_lcssa_reg_223,
        ap_return => grp_mSP_findLRBounds_fu_276_ap_return);

    mul_35ns_33s_64_1_1_U20 : component MPSQ_mul_35ns_33s_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 35,
        din1_WIDTH => 33,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln1531_fu_415_p0,
        din1 => ret_fu_401_p2,
        dout => mul_ln1531_fu_415_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln1526_fu_344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln1526_fu_344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_mSP_findLRBounds_fu_276_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state10);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_mSP_findLRBounds_fu_276_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mSP_findLRBounds_fu_276_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mSP_findLRBounds_fu_276_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    grp_mSP_findLRBounds_fu_276_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mSP_findLRBounds_fu_276_ap_ready = ap_const_logic_1)) then 
                    grp_mSP_findLRBounds_fu_276_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mSP_findStartIndex_fu_268_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mSP_findStartIndex_fu_268_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_mSP_findStartIndex_fu_268_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mSP_findStartIndex_fu_268_ap_ready = ap_const_logic_1)) then 
                    grp_mSP_findStartIndex_fu_268_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln1671_fu_531_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten_reg_235 <= add_ln1671_2_fu_525_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_mSP_findLRBounds_fu_276_ap_done = ap_const_logic_1))) then 
                indvar_flatten_reg_235 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_1_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln1671_reg_729 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                j_1_reg_246 <= select_ln1671_1_reg_738;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_mSP_findLRBounds_fu_276_ap_done = ap_const_logic_1))) then 
                j_1_reg_246 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    row_list_size_0_lcssa_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1526_reg_681 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                row_list_size_0_lcssa_reg_223 <= GDn_points_load_reg_676;
            elsif (((icmp_ln1526_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                row_list_size_0_lcssa_reg_223 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    row_list_size_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1526_fu_344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                row_list_size_reg_211 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1526_1_reg_695 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                row_list_size_reg_211 <= add_ln1528_reg_690;
            end if; 
        end if;
    end process;

    z_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln1671_fu_531_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                z_reg_257 <= add_ln1677_fu_602_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_mSP_findLRBounds_fu_276_ap_done = ap_const_logic_1))) then 
                z_reg_257 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                GDn_points_load_reg_676 <= GDn_points_q0;
                icmp_ln1526_reg_681 <= icmp_ln1526_fu_344_p2;
                    radiiDivisionList_addr_reg_660(5 downto 1) <= zext_ln1531_2_fu_321_p1(6 - 1 downto 0)(5 downto 1);
                    tmp_7_reg_670(10 downto 8) <= tmp_7_fu_337_p3(10 downto 8);
                    zext_ln1528_reg_665(6 downto 4) <= zext_ln1528_fu_333_p1(6 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln1528_reg_690 <= add_ln1528_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1526_1_reg_695 <= icmp_ln1526_1_fu_360_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln1671_reg_729 <= icmp_ln1671_fu_531_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                projectionToRow_reg_704 <= projectionToRow_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln1671_fu_531_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln1671_1_reg_738 <= select_ln1671_1_fu_557_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln1671_fu_531_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln1671_reg_733 <= select_ln1671_fu_549_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                sub_ln1625_reg_709 <= sub_ln1625_fu_488_p2;
                trunc_ln1625_reg_714 <= trunc_ln1625_fu_493_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                temp_start_reg_719 <= temp_start_fu_517_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1526_fu_344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln1526_reg_685 <= trunc_ln1526_fu_350_p1;
            end if;
        end if;
    end process;
    radiiDivisionList_addr_reg_660(0) <= '0';
    zext_ln1528_reg_665(3 downto 0) <= "0000";
    zext_ln1528_reg_665(7) <= '0';
    tmp_7_reg_670(7 downto 0) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln1526_fu_344_p2, ap_enable_reg_pp0_iter0, icmp_ln1526_1_fu_360_p2, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_enable_reg_pp1_iter0, icmp_ln1671_fu_531_p2, ap_block_pp0_stage0_subdone, grp_mSP_findLRBounds_fu_276_ap_done, ap_block_pp1_stage0_subdone, grp_mSP_findStartIndex_fu_268_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln1526_fu_344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln1526_1_fu_360_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln1526_1_fu_360_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_mSP_findStartIndex_fu_268_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_mSP_findLRBounds_fu_276_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln1671_fu_531_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln1671_fu_531_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    GDarrayDecoded_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln1528_1_fu_388_p1, zext_ln1682_4_fu_597_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            GDarrayDecoded_address0 <= zext_ln1682_4_fu_597_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            GDarrayDecoded_address0 <= zext_ln1528_1_fu_388_p1(12 - 1 downto 0);
        else 
            GDarrayDecoded_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    GDarrayDecoded_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            GDarrayDecoded_ce0 <= ap_const_logic_1;
        else 
            GDarrayDecoded_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    GDn_points_address0 <= idxprom_fu_286_p1(3 - 1 downto 0);

    GDn_points_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            GDn_points_ce0 <= ap_const_logic_1;
        else 
            GDn_points_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1528_1_fu_369_p2 <= std_logic_vector(unsigned(tmp_7_reg_670) + unsigned(trunc_ln1528_fu_365_p1));
    add_ln1528_fu_354_p2 <= std_logic_vector(unsigned(ap_phi_mux_row_list_size_phi_fu_215_p4) + unsigned(ap_const_lv31_1));
    add_ln1531_fu_315_p2 <= std_logic_vector(unsigned(sub_ln1531_fu_309_p2) + unsigned(ap_const_lv6_4));
    add_ln1610_fu_450_p2 <= std_logic_vector(unsigned(row_list_size_0_lcssa_reg_223) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln1625_fu_497_p2 <= std_logic_vector(unsigned(sub_ln1625_reg_709) + unsigned(ap_const_lv32_1));
    add_ln1646_fu_512_p2 <= std_logic_vector(unsigned(trunc_ln1625_reg_714) + unsigned(ap_const_lv11_1));
    add_ln1671_1_fu_569_p2 <= std_logic_vector(unsigned(zext_ln1671_fu_565_p1) + unsigned(temp_start_reg_719));
    add_ln1671_2_fu_525_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_235) + unsigned(ap_const_lv6_1));
    add_ln1671_fu_537_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_1_phi_fu_250_p4) + unsigned(ap_const_lv5_1));
    add_ln1677_fu_602_p2 <= std_logic_vector(unsigned(select_ln1671_fu_549_p3) + unsigned(ap_const_lv2_1));
    add_ln1682_1_fu_574_p2 <= std_logic_vector(unsigned(tmp_7_reg_670) + unsigned(add_ln1671_1_fu_569_p2));
    add_ln1682_2_fu_625_p2 <= std_logic_vector(unsigned(shl_ln1671_fu_616_p2) + unsigned(zext_ln1682_2_fu_622_p1));
    add_ln1682_3_fu_591_p2 <= std_logic_vector(unsigned(tmp_13_cast_fu_579_p3) + unsigned(zext_ln1682_1_fu_587_p1));
    add_ln1682_fu_611_p2 <= std_logic_vector(unsigned(zext_ln1528_reg_665) + unsigned(zext_ln1682_fu_608_p1));
    and_ln1610_fu_468_p2 <= (icmp_ln1615_fu_462_p2 and icmp_ln1610_fu_456_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln1526_1_fu_360_p2)
    begin
        if ((icmp_ln1526_1_fu_360_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state10_assign_proc : process(icmp_ln1671_fu_531_p2)
    begin
        if ((icmp_ln1671_fu_531_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_1_phi_fu_250_p4_assign_proc : process(j_1_reg_246, ap_CS_fsm_pp1_stage0, icmp_ln1671_reg_729, select_ln1671_1_reg_738, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln1671_reg_729 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_j_1_phi_fu_250_p4 <= select_ln1671_1_reg_738;
        else 
            ap_phi_mux_j_1_phi_fu_250_p4 <= j_1_reg_246;
        end if; 
    end process;


    ap_phi_mux_row_list_size_phi_fu_215_p4_assign_proc : process(row_list_size_reg_211, add_ln1528_reg_690, ap_CS_fsm_pp0_stage0, icmp_ln1526_1_reg_695, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1526_1_reg_695 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_row_list_size_phi_fu_215_p4 <= add_ln1528_reg_690;
        else 
            ap_phi_mux_row_list_size_phi_fu_215_p4 <= row_list_size_reg_211;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_mSP_findLRBounds_fu_276_ap_start <= grp_mSP_findLRBounds_fu_276_ap_start_reg;
    grp_mSP_findStartIndex_fu_268_ap_start <= grp_mSP_findStartIndex_fu_268_ap_start_reg;
    i_op_assign_fu_421_p4 <= mul_ln1531_fu_415_p2(63 downto 32);
    icmp_ln1526_1_fu_360_p2 <= "1" when (ap_phi_mux_row_list_size_phi_fu_215_p4 = trunc_ln1526_reg_685) else "0";
    icmp_ln1526_fu_344_p2 <= "1" when (signed(GDn_points_q0) > signed(ap_const_lv32_0)) else "0";
    icmp_ln1610_fu_456_p2 <= "0" when (grp_mSP_findStartIndex_fu_268_ap_return_0 = add_ln1610_fu_450_p2) else "1";
    icmp_ln1615_fu_462_p2 <= "1" when (signed(grp_mSP_findStartIndex_fu_268_ap_return_1) < signed(ap_const_lv64_FFFFFFFFFFFFFFF6)) else "0";
    icmp_ln1625_fu_502_p2 <= "1" when (signed(add_ln1625_fu_497_p2) < signed(grp_mSP_findLRBounds_fu_276_ap_return)) else "0";
    icmp_ln1671_fu_531_p2 <= "1" when (indvar_flatten_reg_235 = ap_const_lv6_20) else "0";
    icmp_ln1677_fu_543_p2 <= "1" when (z_reg_257 = ap_const_lv2_2) else "0";
    idxprom_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i),64));
    init_patch_address0 <= zext_ln1682_3_fu_631_p1(8 - 1 downto 0);

    init_patch_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            init_patch_ce0 <= ap_const_logic_1;
        else 
            init_patch_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    init_patch_d0 <= GDarrayDecoded_q0;

    init_patch_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln1671_reg_729, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln1671_reg_729 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            init_patch_we0 <= ap_const_logic_1;
        else 
            init_patch_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1531_fu_415_p0 <= mul_ln1531_fu_415_p00(35 - 1 downto 0);
    mul_ln1531_fu_415_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(radiiDivisionList_q0),64));
    or_ln1528_fu_382_p2 <= (tmp_9_cast_fu_374_p3 or ap_const_lv12_1);
    projectionToRow_fu_435_p2 <= std_logic_vector(signed(sext_ln1465_fu_431_p1) + signed(ap_const_lv33_14FB1E4));

    radiiDivisionList_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            radiiDivisionList_ce0 <= ap_const_logic_1;
        else 
            radiiDivisionList_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_fu_401_p2 <= std_logic_vector(signed(sext_ln215_fu_398_p1) + signed(ap_const_lv33_1FEB04E1C));

    row_list_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_enable_reg_pp0_iter1, grp_mSP_findStartIndex_fu_268_row_list_address0, grp_mSP_findLRBounds_fu_276_row_list_address0, ap_block_pp0_stage0, row_list_size_cast_fu_393_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            row_list_V_address0 <= row_list_size_cast_fu_393_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            row_list_V_address0 <= grp_mSP_findLRBounds_fu_276_row_list_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            row_list_V_address0 <= grp_mSP_findStartIndex_fu_268_row_list_address0;
        else 
            row_list_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    row_list_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_enable_reg_pp0_iter1, grp_mSP_findStartIndex_fu_268_row_list_ce0, grp_mSP_findLRBounds_fu_276_row_list_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            row_list_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            row_list_V_ce0 <= grp_mSP_findLRBounds_fu_276_row_list_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            row_list_V_ce0 <= grp_mSP_findStartIndex_fu_268_row_list_ce0;
        else 
            row_list_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_list_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln1526_1_reg_695, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1526_1_reg_695 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            row_list_V_we0 <= ap_const_logic_1;
        else 
            row_list_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    row_list_size_cast_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_list_size_reg_211),64));
    select_ln1671_1_fu_557_p3 <= 
        add_ln1671_fu_537_p2 when (icmp_ln1677_fu_543_p2(0) = '1') else 
        ap_phi_mux_j_1_phi_fu_250_p4;
    select_ln1671_fu_549_p3 <= 
        ap_const_lv2_0 when (icmp_ln1677_fu_543_p2(0) = '1') else 
        z_reg_257;
        sext_ln1465_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_op_assign_fu_421_p4),33));

        sext_ln215_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(z_top),33));

    shl_ln1671_fu_616_p2 <= std_logic_vector(shift_left(unsigned(add_ln1682_fu_611_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    start_index_1_fu_474_p2 <= std_logic_vector(unsigned(grp_mSP_findStartIndex_fu_268_ap_return_0) + unsigned(ap_const_lv32_1));
    start_index_2_fu_480_p3 <= 
        start_index_1_fu_474_p2 when (and_ln1610_fu_468_p2(0) = '1') else 
        grp_mSP_findStartIndex_fu_268_ap_return_0;
    sub_ln1531_fu_309_p2 <= std_logic_vector(unsigned(tmp_fu_291_p3) - unsigned(zext_ln1531_1_fu_305_p1));
    sub_ln1625_fu_488_p2 <= std_logic_vector(unsigned(start_index_2_fu_480_p3) - unsigned(original_ppl));
    temp_start_fu_517_p3 <= 
        trunc_ln1646_fu_508_p1 when (icmp_ln1625_fu_502_p2(0) = '1') else 
        add_ln1646_fu_512_p2;
    tmp_13_cast_fu_579_p3 <= (add_ln1682_1_fu_574_p2 & ap_const_lv1_0);
    tmp_5_fu_298_p3 <= (i & ap_const_lv1_0);
    tmp_6_fu_326_p3 <= (i & ap_const_lv4_0);
    tmp_7_fu_337_p3 <= (i & ap_const_lv8_0);
    tmp_9_cast_fu_374_p3 <= (add_ln1528_1_fu_369_p2 & ap_const_lv1_0);
    tmp_fu_291_p3 <= (i & ap_const_lv3_0);
    trunc_ln1526_fu_350_p1 <= GDn_points_q0(31 - 1 downto 0);
    trunc_ln1528_fu_365_p1 <= ap_phi_mux_row_list_size_phi_fu_215_p4(11 - 1 downto 0);
    trunc_ln1625_fu_493_p1 <= sub_ln1625_fu_488_p2(11 - 1 downto 0);
    trunc_ln1646_fu_508_p1 <= grp_mSP_findLRBounds_fu_276_ap_return(11 - 1 downto 0);
    zext_ln1528_1_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1528_fu_382_p2),64));
    zext_ln1528_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_326_p3),8));
    zext_ln1531_1_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_298_p3),6));
    zext_ln1531_2_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1531_fu_315_p2),64));
    zext_ln1671_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1671_1_fu_557_p3),11));
    zext_ln1682_1_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1671_fu_549_p3),12));
    zext_ln1682_2_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1671_reg_733),8));
    zext_ln1682_3_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1682_2_fu_625_p2),64));
    zext_ln1682_4_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1682_3_fu_591_p2),64));
    zext_ln1682_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1671_1_reg_738),8));
end behav;
