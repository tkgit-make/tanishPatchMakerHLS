-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_get_acceptanceCorners is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    wp_parameters_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    wp_parameters_ce0 : OUT STD_LOGIC;
    wp_parameters_we0 : OUT STD_LOGIC;
    wp_parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    wp_parameters_ce1 : OUT STD_LOGIC;
    wp_parameters_we1 : OUT STD_LOGIC;
    wp_parameters_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    wp_parameters_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_get_acceptanceCorners is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_54 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001010100";
    constant ap_const_lv64_4E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001110";
    constant ap_const_lv64_48 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001000";
    constant ap_const_lv64_5A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001011010";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_30 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110000";
    constant ap_const_lv64_31 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110001";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_36 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110110";
    constant ap_const_lv64_37 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110111";
    constant ap_const_lv64_3C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111100";
    constant ap_const_lv64_3D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111101";
    constant ap_const_lv64_42 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000010";
    constant ap_const_lv64_43 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000011";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal reg_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal wp_parameters_addr_reg_576 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal wp_parameters_addr_6_reg_582 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_corner_max_V_reg_587 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_corner_max_V_reg_592 : STD_LOGIC_VECTOR (31 downto 0);
    signal wp_parameters_addr_7_reg_597 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal wp_parameters_addr_8_reg_603 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln246_fu_384_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln246_reg_680 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal wp_parameters_addr_26_reg_695 : STD_LOGIC_VECTOR (6 downto 0);
    signal wp_parameters_addr_27_reg_700 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_corner_min_V_2_fu_470_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_corner_min_V_2_reg_708 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal b_corner_min_V_3_fu_484_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_corner_min_V_3_reg_713 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_corner_max_V_2_fu_498_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal d_corner_max_V_3_fu_512_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln874_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln874_reg_728 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln886_8_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_8_reg_741 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal icmp_ln878_10_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_10_reg_745 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal i_reg_301 : STD_LOGIC_VECTOR (2 downto 0);
    signal d_corner_max_V_1_reg_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_corner_max_V_1_reg_323 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_corner_min_V_1_reg_334 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_corner_min_V_1_reg_346 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayidx1877219_load_0_reg_357 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln878_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln878_1_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln886_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln886_1_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln246_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln874_1_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln874_2_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln874_3_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_fu_390_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_402_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln878_fu_398_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln878_1_fu_410_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln878_fu_414_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln878_fu_425_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln886_fu_436_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln886_1_fu_447_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln878_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_9_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_7_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    a_corner_min_V_1_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                a_corner_min_V_1_reg_346 <= a_corner_min_V_2_reg_708;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                a_corner_min_V_1_reg_346 <= reg_371;
            end if; 
        end if;
    end process;

    arrayidx1877219_load_0_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln886_8_fu_544_p2 = ap_const_lv1_0))) then 
                arrayidx1877219_load_0_reg_357 <= c_corner_max_V_1_reg_323;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln886_8_reg_741 = ap_const_lv1_1))) then 
                arrayidx1877219_load_0_reg_357 <= b_corner_min_V_1_reg_334;
            end if; 
        end if;
    end process;

    b_corner_min_V_1_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                b_corner_min_V_1_reg_334 <= b_corner_min_V_3_reg_713;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                b_corner_min_V_1_reg_334 <= reg_378;
            end if; 
        end if;
    end process;

    c_corner_max_V_1_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                c_corner_max_V_1_reg_323 <= c_corner_max_V_2_fu_498_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                c_corner_max_V_1_reg_323 <= c_corner_max_V_reg_587;
            end if; 
        end if;
    end process;

    d_corner_max_V_1_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                d_corner_max_V_1_reg_312 <= d_corner_max_V_3_fu_512_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                d_corner_max_V_1_reg_312 <= d_corner_max_V_reg_592;
            end if; 
        end if;
    end process;

    i_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_reg_301 <= add_ln246_reg_680;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_301 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                a_corner_min_V_2_reg_708 <= a_corner_min_V_2_fu_470_p3;
                b_corner_min_V_3_reg_713 <= b_corner_min_V_3_fu_484_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln246_reg_680 <= add_ln246_fu_384_p2;
                    wp_parameters_addr_26_reg_695(6 downto 1) <= zext_ln886_fu_442_p1(7 - 1 downto 0)(6 downto 1);
                    wp_parameters_addr_27_reg_700(6 downto 1) <= zext_ln886_1_fu_453_p1(7 - 1 downto 0)(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_corner_max_V_reg_587 <= wp_parameters_q1;
                d_corner_max_V_reg_592 <= wp_parameters_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                icmp_ln874_reg_728 <= icmp_ln874_fu_520_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                icmp_ln878_10_reg_745 <= icmp_ln878_10_fu_550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                icmp_ln886_8_reg_741 <= icmp_ln886_8_fu_544_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_371 <= wp_parameters_q1;
                reg_378 <= wp_parameters_q0;
            end if;
        end if;
    end process;
    wp_parameters_addr_26_reg_695(0) <= '0';
    wp_parameters_addr_27_reg_700(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln886_8_fu_544_p2, ap_CS_fsm_state18, icmp_ln246_fu_458_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln246_fu_458_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln886_8_fu_544_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_corner_min_V_2_fu_470_p3 <= 
        wp_parameters_q1 when (icmp_ln878_fu_464_p2(0) = '1') else 
        a_corner_min_V_1_reg_346;
    add_ln246_fu_384_p2 <= std_logic_vector(unsigned(i_reg_301) + unsigned(ap_const_lv3_1));
    add_ln886_1_fu_447_p2 <= std_logic_vector(signed(sub_ln878_fu_414_p2) + signed(ap_const_lv7_3));
    add_ln886_fu_436_p2 <= std_logic_vector(signed(sub_ln878_fu_414_p2) + signed(ap_const_lv7_2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_corner_min_V_3_fu_484_p3 <= 
        wp_parameters_q0 when (icmp_ln878_9_fu_478_p2(0) = '1') else 
        b_corner_min_V_1_reg_334;
    c_corner_max_V_2_fu_498_p3 <= 
        wp_parameters_q1 when (icmp_ln886_fu_492_p2(0) = '1') else 
        c_corner_max_V_1_reg_323;
    d_corner_max_V_3_fu_512_p3 <= 
        wp_parameters_q0 when (icmp_ln886_7_fu_506_p2(0) = '1') else 
        d_corner_max_V_1_reg_312;
    icmp_ln246_fu_458_p2 <= "1" when (i_reg_301 = ap_const_lv3_4) else "0";
    icmp_ln874_1_fu_526_p2 <= "1" when (b_corner_min_V_1_reg_334 = wp_parameters_q1) else "0";
    icmp_ln874_2_fu_532_p2 <= "1" when (c_corner_max_V_1_reg_323 = wp_parameters_q0) else "0";
    icmp_ln874_3_fu_538_p2 <= "1" when (d_corner_max_V_1_reg_312 = wp_parameters_q1) else "0";
    icmp_ln874_fu_520_p2 <= "1" when (a_corner_min_V_1_reg_346 = wp_parameters_q1) else "0";
    icmp_ln878_10_fu_550_p2 <= "1" when (signed(b_corner_min_V_1_reg_334) < signed(d_corner_max_V_1_reg_312)) else "0";
    icmp_ln878_9_fu_478_p2 <= "1" when (signed(wp_parameters_q0) < signed(b_corner_min_V_1_reg_334)) else "0";
    icmp_ln878_fu_464_p2 <= "1" when (signed(wp_parameters_q1) < signed(a_corner_min_V_1_reg_346)) else "0";
    icmp_ln886_7_fu_506_p2 <= "1" when (signed(wp_parameters_q0) > signed(d_corner_max_V_1_reg_312)) else "0";
    icmp_ln886_8_fu_544_p2 <= "1" when (signed(c_corner_max_V_1_reg_323) > signed(a_corner_min_V_1_reg_346)) else "0";
    icmp_ln886_fu_492_p2 <= "1" when (signed(wp_parameters_q1) > signed(c_corner_max_V_1_reg_323)) else "0";
    or_ln878_fu_425_p2 <= (sub_ln878_fu_414_p2 or ap_const_lv7_1);
        sext_ln878_1_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln878_fu_425_p2),64));

        sext_ln878_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln878_fu_414_p2),64));

    sub_ln878_fu_414_p2 <= std_logic_vector(unsigned(zext_ln878_fu_398_p1) - unsigned(zext_ln878_1_fu_410_p1));
    tmp_fu_390_p3 <= (i_reg_301 & ap_const_lv3_0);
    tmp_s_fu_402_p3 <= (i_reg_301 & ap_const_lv1_0);
    wp_parameters_addr_6_reg_582 <= ap_const_lv64_4E(7 - 1 downto 0);
    wp_parameters_addr_7_reg_597 <= ap_const_lv64_48(7 - 1 downto 0);
    wp_parameters_addr_8_reg_603 <= ap_const_lv64_5A(7 - 1 downto 0);
    wp_parameters_addr_reg_576 <= ap_const_lv64_54(7 - 1 downto 0);

    wp_parameters_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state3, wp_parameters_addr_6_reg_582, ap_CS_fsm_state4, wp_parameters_addr_8_reg_603, ap_CS_fsm_state5, wp_parameters_addr_27_reg_700, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state18, ap_CS_fsm_state20, sext_ln878_1_fu_431_p1, icmp_ln246_fu_458_p2, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            wp_parameters_address0 <= wp_parameters_addr_8_reg_603;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            wp_parameters_address0 <= ap_const_lv64_48(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            wp_parameters_address0 <= ap_const_lv64_14(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            wp_parameters_address0 <= wp_parameters_addr_6_reg_582;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            wp_parameters_address0 <= ap_const_lv64_54(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            wp_parameters_address0 <= ap_const_lv64_3C(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            wp_parameters_address0 <= ap_const_lv64_43(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            wp_parameters_address0 <= ap_const_lv64_3D(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            wp_parameters_address0 <= ap_const_lv64_31(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            wp_parameters_address0 <= wp_parameters_addr_27_reg_700;
        elsif (((icmp_ln246_fu_458_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            wp_parameters_address0 <= ap_const_lv64_5(7 - 1 downto 0);
        elsif (((icmp_ln246_fu_458_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            wp_parameters_address0 <= sext_ln878_1_fu_431_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            wp_parameters_address0 <= ap_const_lv64_5A(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            wp_parameters_address0 <= ap_const_lv64_4E(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_parameters_address0 <= ap_const_lv64_3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            wp_parameters_address0 <= ap_const_lv64_1(7 - 1 downto 0);
        else 
            wp_parameters_address0 <= "XXXXXXX";
        end if; 
    end process;


    wp_parameters_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state8, wp_parameters_addr_reg_576, ap_CS_fsm_state3, wp_parameters_addr_7_reg_597, ap_CS_fsm_state4, ap_CS_fsm_state5, wp_parameters_addr_26_reg_695, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state18, ap_CS_fsm_state20, sext_ln878_fu_420_p1, icmp_ln246_fu_458_p2, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            wp_parameters_address1 <= ap_const_lv64_31(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            wp_parameters_address1 <= ap_const_lv64_5A(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            wp_parameters_address1 <= ap_const_lv64_15(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            wp_parameters_address1 <= wp_parameters_addr_7_reg_597;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            wp_parameters_address1 <= wp_parameters_addr_reg_576;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            wp_parameters_address1 <= ap_const_lv64_13(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            wp_parameters_address1 <= ap_const_lv64_42(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            wp_parameters_address1 <= ap_const_lv64_36(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            wp_parameters_address1 <= ap_const_lv64_30(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            wp_parameters_address1 <= ap_const_lv64_37(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            wp_parameters_address1 <= ap_const_lv64_12(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            wp_parameters_address1 <= wp_parameters_addr_26_reg_695;
        elsif (((icmp_ln246_fu_458_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            wp_parameters_address1 <= ap_const_lv64_4(7 - 1 downto 0);
        elsif (((icmp_ln246_fu_458_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            wp_parameters_address1 <= sext_ln878_fu_420_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            wp_parameters_address1 <= ap_const_lv64_48(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            wp_parameters_address1 <= ap_const_lv64_54(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wp_parameters_address1 <= ap_const_lv64_2(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            wp_parameters_address1 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            wp_parameters_address1 <= "XXXXXXX";
        end if; 
    end process;


    wp_parameters_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state18, ap_CS_fsm_state20, icmp_ln246_fu_458_p2, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln246_fu_458_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln246_fu_458_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            wp_parameters_ce0 <= ap_const_logic_1;
        else 
            wp_parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_parameters_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state18, ap_CS_fsm_state20, icmp_ln246_fu_458_p2, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln246_fu_458_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln246_fu_458_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            wp_parameters_ce1 <= ap_const_logic_1;
        else 
            wp_parameters_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    wp_parameters_d0_assign_proc : process(reg_371, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state18, ap_CS_fsm_state20, d_corner_max_V_1_reg_312, c_corner_max_V_1_reg_323, b_corner_min_V_1_reg_334, a_corner_min_V_1_reg_346, arrayidx1877219_load_0_reg_357, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            wp_parameters_d0 <= arrayidx1877219_load_0_reg_357;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            wp_parameters_d0 <= b_corner_min_V_1_reg_334;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            wp_parameters_d0 <= reg_371;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            wp_parameters_d0 <= d_corner_max_V_1_reg_312;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            wp_parameters_d0 <= c_corner_max_V_1_reg_323;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            wp_parameters_d0 <= a_corner_min_V_1_reg_346;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            wp_parameters_d0 <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            wp_parameters_d0 <= ap_const_lv32_1;
        else 
            wp_parameters_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wp_parameters_d1_assign_proc : process(reg_371, reg_378, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state18, ap_CS_fsm_state20, b_corner_min_V_1_reg_334, arrayidx1877219_load_0_reg_357, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            wp_parameters_d1 <= arrayidx1877219_load_0_reg_357;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            wp_parameters_d1 <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            wp_parameters_d1 <= reg_378;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            wp_parameters_d1 <= reg_371;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            wp_parameters_d1 <= b_corner_min_V_1_reg_334;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            wp_parameters_d1 <= ap_const_lv32_1;
        else 
            wp_parameters_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wp_parameters_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln874_reg_728, ap_CS_fsm_state9, ap_CS_fsm_state18, icmp_ln878_10_fu_550_p2, icmp_ln878_10_reg_745, ap_CS_fsm_state20, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, icmp_ln874_1_fu_526_p2, ap_CS_fsm_state16, icmp_ln874_2_fu_532_p2, icmp_ln874_3_fu_538_p2, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln878_10_reg_745 = ap_const_lv1_1)) or ((icmp_ln874_3_fu_538_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((icmp_ln874_2_fu_532_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((icmp_ln874_1_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln874_reg_728 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln874_reg_728 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln878_10_fu_550_p2 = ap_const_lv1_1)))) then 
            wp_parameters_we0 <= ap_const_logic_1;
        else 
            wp_parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;


    wp_parameters_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state9, icmp_ln886_8_reg_741, ap_CS_fsm_state18, icmp_ln878_10_reg_745, ap_CS_fsm_state20, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14, icmp_ln874_1_fu_526_p2, ap_CS_fsm_state16, icmp_ln874_2_fu_532_p2, icmp_ln874_3_fu_538_p2, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln878_10_reg_745 = ap_const_lv1_1)) or ((icmp_ln874_3_fu_538_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((icmp_ln874_2_fu_532_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((icmp_ln874_1_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln886_8_reg_741 = ap_const_lv1_1)))) then 
            wp_parameters_we1 <= ap_const_logic_1;
        else 
            wp_parameters_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln878_1_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_402_p3),7));
    zext_ln878_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_390_p3),7));
    zext_ln886_1_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln886_1_fu_447_p2),64));
    zext_ln886_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln886_fu_436_p2),64));
end behav;
