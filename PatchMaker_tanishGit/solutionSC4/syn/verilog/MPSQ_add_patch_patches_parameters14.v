// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MPSQ_add_patch_patches_parameters14 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        wp_parameters_address0,
        wp_parameters_ce0,
        wp_parameters_q0,
        patches_parameters_address0,
        patches_parameters_ce0,
        patches_parameters_we0,
        patches_parameters_d0,
        patches_parameters_address1,
        patches_parameters_ce1,
        patches_parameters_q1
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state7 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state11 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] wp_parameters_address0;
output   wp_parameters_ce0;
input  [31:0] wp_parameters_q0;
output  [8:0] patches_parameters_address0;
output   patches_parameters_ce0;
output   patches_parameters_we0;
output  [31:0] patches_parameters_d0;
output  [8:0] patches_parameters_address1;
output   patches_parameters_ce1;
input  [31:0] patches_parameters_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg wp_parameters_ce0;
reg[8:0] patches_parameters_address0;
reg patches_parameters_ce0;
reg patches_parameters_we0;
reg[31:0] patches_parameters_d0;
reg patches_parameters_ce1;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] indvar_flatten37_reg_133;
reg   [1:0] i_reg_144;
reg   [7:0] indvar_flatten13_reg_155;
reg   [2:0] a_reg_166;
reg   [5:0] indvar_flatten_reg_177;
reg   [2:0] b_reg_188;
reg   [2:0] c_reg_199;
reg   [6:0] indvar_flatten59_reg_210;
reg   [2:0] a_4_reg_221;
reg   [5:0] indvar_flatten45_reg_232;
reg   [2:0] b_6_reg_243;
reg   [2:0] c_5_reg_254;
wire   [7:0] add_ln320_1_fu_265_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln320_fu_277_p2;
reg   [0:0] icmp_ln320_reg_803;
reg   [0:0] icmp_ln320_reg_803_pp0_iter1_reg;
reg   [0:0] icmp_ln320_reg_803_pp0_iter2_reg;
reg   [0:0] icmp_ln320_reg_803_pp0_iter3_reg;
wire   [1:0] select_ln320_1_fu_297_p3;
reg   [1:0] select_ln320_1_reg_807;
wire   [1:0] select_ln320_2_fu_311_p3;
reg   [1:0] select_ln320_2_reg_814;
wire   [2:0] select_ln326_1_fu_369_p3;
reg   [2:0] select_ln326_1_reg_820;
wire   [2:0] select_ln332_fu_413_p3;
reg   [2:0] select_ln332_reg_827;
reg   [2:0] select_ln332_reg_827_pp0_iter1_reg;
wire   [2:0] select_ln332_1_fu_421_p3;
reg   [2:0] select_ln332_1_reg_832;
wire   [2:0] add_ln338_fu_429_p2;
wire   [5:0] select_ln332_2_fu_441_p3;
wire   [7:0] select_ln326_2_fu_455_p3;
wire   [5:0] trunc_ln343_fu_546_p1;
reg   [5:0] trunc_ln343_reg_853;
wire   [7:0] trunc_ln343_1_fu_550_p1;
reg   [7:0] trunc_ln343_1_reg_858;
wire   [5:0] trunc_ln343_2_fu_560_p1;
reg   [5:0] trunc_ln343_2_reg_863;
wire   [7:0] trunc_ln343_3_fu_564_p1;
reg   [7:0] trunc_ln343_3_reg_868;
wire   [8:0] add_ln343_7_fu_622_p2;
reg   [8:0] add_ln343_7_reg_878;
reg   [8:0] add_ln343_7_reg_878_pp0_iter3_reg;
reg   [31:0] patches_parameters_load_reg_883;
reg    ap_enable_reg_pp0_iter3;
wire   [6:0] add_ln350_1_fu_632_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_state10_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln350_fu_638_p2;
reg   [0:0] icmp_ln350_reg_893;
reg   [0:0] icmp_ln350_reg_893_pp1_iter1_reg;
wire   [2:0] select_ln350_1_fu_664_p3;
reg   [2:0] select_ln350_1_reg_897;
wire   [2:0] select_ln356_fu_702_p3;
reg   [2:0] select_ln356_reg_903;
wire   [2:0] select_ln356_1_fu_710_p3;
reg   [2:0] select_ln356_1_reg_908;
wire   [2:0] add_ln362_fu_718_p2;
wire   [5:0] select_ln356_2_fu_730_p3;
wire   [63:0] zext_ln367_3_fu_793_p1;
reg   [63:0] zext_ln367_3_reg_924;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
wire    ap_CS_fsm_state7;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state8;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg   [1:0] ap_phi_mux_i_phi_fu_148_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_a_phi_fu_170_p4;
reg   [2:0] ap_phi_mux_b_phi_fu_192_p4;
reg   [2:0] ap_phi_mux_a_4_phi_fu_225_p4;
wire    ap_block_pp1_stage0;
reg   [2:0] ap_phi_mux_b_6_phi_fu_247_p4;
wire   [63:0] zext_ln343_8_fu_617_p1;
wire   [63:0] zext_ln343_9_fu_628_p1;
wire   [0:0] icmp_ln326_fu_283_p2;
wire   [1:0] add_ln320_fu_271_p2;
wire   [1:0] xor_ln320_fu_305_p2;
wire   [0:0] icmp_ln338_fu_325_p2;
wire   [0:0] xor_ln320_1_fu_319_p2;
wire   [0:0] icmp_ln332_fu_337_p2;
wire   [2:0] select_ln320_fu_289_p3;
wire   [0:0] and_ln320_1_fu_343_p2;
wire   [0:0] or_ln326_fu_355_p2;
wire   [2:0] add_ln326_fu_349_p2;
wire   [0:0] xor_ln326_fu_377_p2;
wire   [0:0] and_ln320_fu_331_p2;
wire   [0:0] or_ln326_1_fu_383_p2;
wire   [2:0] select_ln326_fu_361_p3;
wire   [0:0] and_ln326_fu_389_p2;
wire   [0:0] or_ln332_fu_401_p2;
wire   [0:0] or_ln332_1_fu_407_p2;
wire   [2:0] add_ln332_fu_395_p2;
wire   [5:0] add_ln332_1_fu_435_p2;
wire   [7:0] add_ln326_1_fu_449_p2;
wire   [3:0] tmp_fu_466_p3;
wire   [60:0] zext_ln343_1_fu_473_p1;
wire   [60:0] zext_ln343_fu_463_p1;
wire   [3:0] tmp_41_fu_486_p3;
wire   [60:0] zext_ln343_3_fu_493_p1;
wire   [60:0] zext_ln343_2_fu_483_p1;
wire   [60:0] add_ln343_1_fu_497_p2;
wire   [60:0] zext_ln343_4_fu_503_p1;
wire   [60:0] add_ln343_2_fu_506_p2;
wire   [60:0] add_ln343_fu_477_p2;
wire   [60:0] zext_ln343_5_fu_520_p1;
wire   [60:0] add_ln343_3_fu_523_p2;
wire   [62:0] tmp_82_cast_fu_512_p3;
wire   [62:0] zext_ln343_6_fu_537_p1;
wire   [62:0] add_ln343_4_fu_540_p2;
wire   [62:0] tmp_84_cast_fu_529_p3;
wire   [62:0] add_ln343_5_fu_554_p2;
wire   [8:0] p_shl3_cast_fu_568_p3;
wire   [8:0] p_shl4_cast_fu_575_p3;
wire   [8:0] p_shl_cast_fu_588_p3;
wire   [8:0] p_shl2_cast_fu_595_p3;
wire   [8:0] sub_ln343_fu_582_p2;
wire   [8:0] zext_ln343_7_fu_608_p1;
wire   [8:0] add_ln343_6_fu_611_p2;
wire   [8:0] sub_ln343_1_fu_602_p2;
wire   [0:0] icmp_ln356_fu_650_p2;
wire   [2:0] add_ln350_fu_644_p2;
wire   [0:0] icmp_ln362_fu_678_p2;
wire   [0:0] xor_ln350_fu_672_p2;
wire   [2:0] select_ln350_fu_656_p3;
wire   [0:0] and_ln350_fu_684_p2;
wire   [0:0] or_ln356_fu_696_p2;
wire   [2:0] add_ln356_fu_690_p2;
wire   [5:0] add_ln356_1_fu_724_p2;
wire   [4:0] tmp_s_fu_738_p3;
wire   [5:0] zext_ln356_fu_745_p1;
wire   [5:0] zext_ln367_fu_749_p1;
wire   [5:0] add_ln367_fu_752_p2;
wire   [6:0] tmp_42_fu_766_p3;
wire   [8:0] p_shl7_cast_fu_758_p3;
wire   [8:0] zext_ln367_1_fu_774_p1;
wire   [8:0] sub_ln367_fu_778_p2;
wire   [8:0] zext_ln367_2_fu_784_p1;
wire   [8:0] add_ln367_1_fu_787_p2;
wire    ap_CS_fsm_state11;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state8)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        a_4_reg_221 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln350_reg_893 == 1'd0))) begin
        a_4_reg_221 <= select_ln350_1_reg_897;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln320_reg_803 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        a_reg_166 <= select_ln326_1_reg_820;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        a_reg_166 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        b_6_reg_243 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln350_reg_893 == 1'd0))) begin
        b_6_reg_243 <= select_ln356_1_reg_908;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln320_reg_803 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        b_reg_188 <= select_ln332_1_reg_832;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        b_reg_188 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_5_reg_254 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln350_fu_638_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        c_5_reg_254 <= add_ln362_fu_718_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln320_fu_277_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_reg_199 <= add_ln338_fu_429_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_reg_199 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln320_reg_803 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_144 <= select_ln320_1_reg_807;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_144 <= 2'd2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln320_fu_277_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_155 <= select_ln326_2_fu_455_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten13_reg_155 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln320_fu_277_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten37_reg_133 <= add_ln320_1_fu_265_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten37_reg_133 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten45_reg_232 <= 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln350_fu_638_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten45_reg_232 <= select_ln356_2_fu_730_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten59_reg_210 <= 7'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln350_fu_638_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten59_reg_210 <= add_ln350_1_fu_632_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln320_fu_277_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_177 <= select_ln332_2_fu_441_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_177 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln320_reg_803_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln343_7_reg_878 <= add_ln343_7_fu_622_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln343_7_reg_878_pp0_iter3_reg <= add_ln343_7_reg_878;
        icmp_ln320_reg_803_pp0_iter2_reg <= icmp_ln320_reg_803_pp0_iter1_reg;
        icmp_ln320_reg_803_pp0_iter3_reg <= icmp_ln320_reg_803_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln320_reg_803 <= icmp_ln320_fu_277_p2;
        icmp_ln320_reg_803_pp0_iter1_reg <= icmp_ln320_reg_803;
        select_ln332_reg_827_pp0_iter1_reg <= select_ln332_reg_827;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln350_reg_893 <= icmp_ln350_fu_638_p2;
        icmp_ln350_reg_893_pp1_iter1_reg <= icmp_ln350_reg_893;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln320_reg_803_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        patches_parameters_load_reg_883 <= patches_parameters_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln320_fu_277_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln320_1_reg_807 <= select_ln320_1_fu_297_p3;
        select_ln326_1_reg_820 <= select_ln326_1_fu_369_p3;
        select_ln332_1_reg_832 <= select_ln332_1_fu_421_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln320_fu_277_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln320_2_reg_814 <= select_ln320_2_fu_311_p3;
        select_ln332_reg_827 <= select_ln332_fu_413_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln350_fu_638_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        select_ln350_1_reg_897 <= select_ln350_1_fu_664_p3;
        select_ln356_1_reg_908 <= select_ln356_1_fu_710_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln350_fu_638_p2 == 1'd0))) begin
        select_ln356_reg_903 <= select_ln356_fu_702_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln320_reg_803 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln343_1_reg_858 <= trunc_ln343_1_fu_550_p1;
        trunc_ln343_2_reg_863 <= trunc_ln343_2_fu_560_p1;
        trunc_ln343_3_reg_868 <= trunc_ln343_3_fu_564_p1;
        trunc_ln343_reg_853 <= trunc_ln343_fu_546_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln350_reg_893 == 1'd0))) begin
        zext_ln367_3_reg_924[8 : 0] <= zext_ln367_3_fu_793_p1[8 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln320_fu_277_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln350_fu_638_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln350_reg_893 == 1'd0))) begin
        ap_phi_mux_a_4_phi_fu_225_p4 = select_ln350_1_reg_897;
    end else begin
        ap_phi_mux_a_4_phi_fu_225_p4 = a_4_reg_221;
    end
end

always @ (*) begin
    if (((icmp_ln320_reg_803 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_a_phi_fu_170_p4 = select_ln326_1_reg_820;
    end else begin
        ap_phi_mux_a_phi_fu_170_p4 = a_reg_166;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln350_reg_893 == 1'd0))) begin
        ap_phi_mux_b_6_phi_fu_247_p4 = select_ln356_1_reg_908;
    end else begin
        ap_phi_mux_b_6_phi_fu_247_p4 = b_6_reg_243;
    end
end

always @ (*) begin
    if (((icmp_ln320_reg_803 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_b_phi_fu_192_p4 = select_ln332_1_reg_832;
    end else begin
        ap_phi_mux_b_phi_fu_192_p4 = b_reg_188;
    end
end

always @ (*) begin
    if (((icmp_ln320_reg_803 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_148_p4 = select_ln320_1_reg_807;
    end else begin
        ap_phi_mux_i_phi_fu_148_p4 = i_reg_144;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        patches_parameters_address0 = zext_ln367_3_reg_924;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        patches_parameters_address0 = zext_ln343_9_fu_628_p1;
    end else begin
        patches_parameters_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        patches_parameters_ce0 = 1'b1;
    end else begin
        patches_parameters_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        patches_parameters_ce1 = 1'b1;
    end else begin
        patches_parameters_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        patches_parameters_d0 = wp_parameters_q0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        patches_parameters_d0 = patches_parameters_load_reg_883;
    end else begin
        patches_parameters_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln320_reg_803_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln350_reg_893_pp1_iter1_reg == 1'd0)))) begin
        patches_parameters_we0 = 1'b1;
    end else begin
        patches_parameters_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        wp_parameters_ce0 = 1'b1;
    end else begin
        wp_parameters_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln320_fu_277_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln320_fu_277_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln350_fu_638_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln350_fu_638_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln320_1_fu_265_p2 = (indvar_flatten37_reg_133 + 8'd1);

assign add_ln320_fu_271_p2 = ($signed(ap_phi_mux_i_phi_fu_148_p4) + $signed(2'd3));

assign add_ln326_1_fu_449_p2 = (indvar_flatten13_reg_155 + 8'd1);

assign add_ln326_fu_349_p2 = (select_ln320_fu_289_p3 + 3'd1);

assign add_ln332_1_fu_435_p2 = (indvar_flatten_reg_177 + 6'd1);

assign add_ln332_fu_395_p2 = (select_ln326_fu_361_p3 + 3'd1);

assign add_ln338_fu_429_p2 = (select_ln332_fu_413_p3 + 3'd1);

assign add_ln343_1_fu_497_p2 = (zext_ln343_3_fu_493_p1 + zext_ln343_2_fu_483_p1);

assign add_ln343_2_fu_506_p2 = (add_ln343_1_fu_497_p2 + zext_ln343_4_fu_503_p1);

assign add_ln343_3_fu_523_p2 = (add_ln343_fu_477_p2 + zext_ln343_5_fu_520_p1);

assign add_ln343_4_fu_540_p2 = (tmp_82_cast_fu_512_p3 + zext_ln343_6_fu_537_p1);

assign add_ln343_5_fu_554_p2 = (tmp_84_cast_fu_529_p3 + zext_ln343_6_fu_537_p1);

assign add_ln343_6_fu_611_p2 = (sub_ln343_fu_582_p2 + zext_ln343_7_fu_608_p1);

assign add_ln343_7_fu_622_p2 = (sub_ln343_1_fu_602_p2 + zext_ln343_7_fu_608_p1);

assign add_ln343_fu_477_p2 = (zext_ln343_1_fu_473_p1 + zext_ln343_fu_463_p1);

assign add_ln350_1_fu_632_p2 = (indvar_flatten59_reg_210 + 7'd1);

assign add_ln350_fu_644_p2 = (ap_phi_mux_a_4_phi_fu_225_p4 + 3'd1);

assign add_ln356_1_fu_724_p2 = (indvar_flatten45_reg_232 + 6'd1);

assign add_ln356_fu_690_p2 = (select_ln350_fu_656_p3 + 3'd1);

assign add_ln362_fu_718_p2 = (select_ln356_fu_702_p3 + 3'd1);

assign add_ln367_1_fu_787_p2 = (sub_ln367_fu_778_p2 + zext_ln367_2_fu_784_p1);

assign add_ln367_fu_752_p2 = (zext_ln356_fu_745_p1 + zext_ln367_fu_749_p1);

assign and_ln320_1_fu_343_p2 = (xor_ln320_1_fu_319_p2 & icmp_ln332_fu_337_p2);

assign and_ln320_fu_331_p2 = (xor_ln320_1_fu_319_p2 & icmp_ln338_fu_325_p2);

assign and_ln326_fu_389_p2 = (or_ln326_1_fu_383_p2 & and_ln320_fu_331_p2);

assign and_ln350_fu_684_p2 = (xor_ln350_fu_672_p2 & icmp_ln362_fu_678_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign icmp_ln320_fu_277_p2 = ((indvar_flatten37_reg_133 == 8'd240) ? 1'b1 : 1'b0);

assign icmp_ln326_fu_283_p2 = ((indvar_flatten13_reg_155 == 8'd120) ? 1'b1 : 1'b0);

assign icmp_ln332_fu_337_p2 = ((indvar_flatten_reg_177 == 6'd24) ? 1'b1 : 1'b0);

assign icmp_ln338_fu_325_p2 = ((c_reg_199 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln350_fu_638_p2 = ((indvar_flatten59_reg_210 == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln356_fu_650_p2 = ((indvar_flatten45_reg_232 == 6'd24) ? 1'b1 : 1'b0);

assign icmp_ln362_fu_678_p2 = ((c_5_reg_254 == 3'd6) ? 1'b1 : 1'b0);

assign or_ln326_1_fu_383_p2 = (xor_ln326_fu_377_p2 | icmp_ln326_fu_283_p2);

assign or_ln326_fu_355_p2 = (icmp_ln326_fu_283_p2 | and_ln320_1_fu_343_p2);

assign or_ln332_1_fu_407_p2 = (or_ln332_fu_401_p2 | icmp_ln326_fu_283_p2);

assign or_ln332_fu_401_p2 = (and_ln326_fu_389_p2 | and_ln320_1_fu_343_p2);

assign or_ln356_fu_696_p2 = (icmp_ln356_fu_650_p2 | and_ln350_fu_684_p2);

assign p_shl2_cast_fu_595_p3 = {{trunc_ln343_3_reg_868}, {1'd0}};

assign p_shl3_cast_fu_568_p3 = {{trunc_ln343_reg_853}, {3'd0}};

assign p_shl4_cast_fu_575_p3 = {{trunc_ln343_1_reg_858}, {1'd0}};

assign p_shl7_cast_fu_758_p3 = {{add_ln367_fu_752_p2}, {3'd0}};

assign p_shl_cast_fu_588_p3 = {{trunc_ln343_2_reg_863}, {3'd0}};

assign patches_parameters_address1 = zext_ln343_8_fu_617_p1;

assign select_ln320_1_fu_297_p3 = ((icmp_ln326_fu_283_p2[0:0] == 1'b1) ? add_ln320_fu_271_p2 : ap_phi_mux_i_phi_fu_148_p4);

assign select_ln320_2_fu_311_p3 = ((icmp_ln326_fu_283_p2[0:0] == 1'b1) ? xor_ln320_fu_305_p2 : add_ln320_fu_271_p2);

assign select_ln320_fu_289_p3 = ((icmp_ln326_fu_283_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_a_phi_fu_170_p4);

assign select_ln326_1_fu_369_p3 = ((and_ln320_1_fu_343_p2[0:0] == 1'b1) ? add_ln326_fu_349_p2 : select_ln320_fu_289_p3);

assign select_ln326_2_fu_455_p3 = ((icmp_ln326_fu_283_p2[0:0] == 1'b1) ? 8'd1 : add_ln326_1_fu_449_p2);

assign select_ln326_fu_361_p3 = ((or_ln326_fu_355_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_b_phi_fu_192_p4);

assign select_ln332_1_fu_421_p3 = ((and_ln326_fu_389_p2[0:0] == 1'b1) ? add_ln332_fu_395_p2 : select_ln326_fu_361_p3);

assign select_ln332_2_fu_441_p3 = ((or_ln326_fu_355_p2[0:0] == 1'b1) ? 6'd1 : add_ln332_1_fu_435_p2);

assign select_ln332_fu_413_p3 = ((or_ln332_1_fu_407_p2[0:0] == 1'b1) ? 3'd0 : c_reg_199);

assign select_ln350_1_fu_664_p3 = ((icmp_ln356_fu_650_p2[0:0] == 1'b1) ? add_ln350_fu_644_p2 : ap_phi_mux_a_4_phi_fu_225_p4);

assign select_ln350_fu_656_p3 = ((icmp_ln356_fu_650_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_b_6_phi_fu_247_p4);

assign select_ln356_1_fu_710_p3 = ((and_ln350_fu_684_p2[0:0] == 1'b1) ? add_ln356_fu_690_p2 : select_ln350_fu_656_p3);

assign select_ln356_2_fu_730_p3 = ((icmp_ln356_fu_650_p2[0:0] == 1'b1) ? 6'd1 : add_ln356_1_fu_724_p2);

assign select_ln356_fu_702_p3 = ((or_ln356_fu_696_p2[0:0] == 1'b1) ? 3'd0 : c_5_reg_254);

assign sub_ln343_1_fu_602_p2 = (p_shl_cast_fu_588_p3 - p_shl2_cast_fu_595_p3);

assign sub_ln343_fu_582_p2 = (p_shl3_cast_fu_568_p3 - p_shl4_cast_fu_575_p3);

assign sub_ln367_fu_778_p2 = (p_shl7_cast_fu_758_p3 - zext_ln367_1_fu_774_p1);

assign tmp_41_fu_486_p3 = {{select_ln320_2_reg_814}, {2'd0}};

assign tmp_42_fu_766_p3 = {{add_ln367_fu_752_p2}, {1'd0}};

assign tmp_82_cast_fu_512_p3 = {{add_ln343_2_fu_506_p2}, {2'd0}};

assign tmp_84_cast_fu_529_p3 = {{add_ln343_3_fu_523_p2}, {2'd0}};

assign tmp_fu_466_p3 = {{select_ln320_1_reg_807}, {2'd0}};

assign tmp_s_fu_738_p3 = {{select_ln350_1_reg_897}, {2'd0}};

assign trunc_ln343_1_fu_550_p1 = add_ln343_4_fu_540_p2[7:0];

assign trunc_ln343_2_fu_560_p1 = add_ln343_5_fu_554_p2[5:0];

assign trunc_ln343_3_fu_564_p1 = add_ln343_5_fu_554_p2[7:0];

assign trunc_ln343_fu_546_p1 = add_ln343_4_fu_540_p2[5:0];

assign wp_parameters_address0 = zext_ln367_3_fu_793_p1;

assign xor_ln320_1_fu_319_p2 = (icmp_ln326_fu_283_p2 ^ 1'd1);

assign xor_ln320_fu_305_p2 = (ap_phi_mux_i_phi_fu_148_p4 ^ 2'd2);

assign xor_ln326_fu_377_p2 = (icmp_ln332_fu_337_p2 ^ 1'd1);

assign xor_ln350_fu_672_p2 = (icmp_ln356_fu_650_p2 ^ 1'd1);

assign zext_ln343_1_fu_473_p1 = tmp_fu_466_p3;

assign zext_ln343_2_fu_483_p1 = select_ln320_2_reg_814;

assign zext_ln343_3_fu_493_p1 = tmp_41_fu_486_p3;

assign zext_ln343_4_fu_503_p1 = select_ln326_1_reg_820;

assign zext_ln343_5_fu_520_p1 = select_ln326_1_reg_820;

assign zext_ln343_6_fu_537_p1 = select_ln332_1_reg_832;

assign zext_ln343_7_fu_608_p1 = select_ln332_reg_827_pp0_iter1_reg;

assign zext_ln343_8_fu_617_p1 = add_ln343_6_fu_611_p2;

assign zext_ln343_9_fu_628_p1 = add_ln343_7_reg_878_pp0_iter3_reg;

assign zext_ln343_fu_463_p1 = select_ln320_1_reg_807;

assign zext_ln356_fu_745_p1 = tmp_s_fu_738_p3;

assign zext_ln367_1_fu_774_p1 = tmp_42_fu_766_p3;

assign zext_ln367_2_fu_784_p1 = select_ln356_reg_903;

assign zext_ln367_3_fu_793_p1 = add_ln367_1_fu_787_p2;

assign zext_ln367_fu_749_p1 = select_ln356_1_reg_908;

always @ (posedge ap_clk) begin
    zext_ln367_3_reg_924[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //MPSQ_add_patch_patches_parameters14
