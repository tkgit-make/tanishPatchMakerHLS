// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MPSQ_straightLineProjectorFromLayerIJtoK (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        z_i,
        z_j,
        i,
        j,
        k,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [31:0] z_i;
input  [31:0] z_j;
input  [2:0] i;
input  [2:0] j;
input  [2:0] k;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] radiiDivisionList_address0;
reg    radiiDivisionList_ce0;
wire   [34:0] radiiDivisionList_q0;
reg   [31:0] z_j_read_reg_264;
reg   [31:0] z_j_read_reg_264_pp0_iter1_reg;
reg  signed [31:0] z_i_read_reg_269;
reg  signed [31:0] z_i_read_reg_269_pp0_iter1_reg;
reg  signed [31:0] z_i_read_reg_269_pp0_iter2_reg;
reg  signed [31:0] z_i_read_reg_269_pp0_iter3_reg;
reg  signed [31:0] z_i_read_reg_269_pp0_iter4_reg;
reg  signed [31:0] z_i_read_reg_269_pp0_iter5_reg;
wire   [3:0] sub_ln224_fu_93_p2;
reg   [3:0] sub_ln224_reg_276;
reg   [3:0] sub_ln224_reg_276_pp0_iter1_reg;
reg   [3:0] sub_ln224_reg_276_pp0_iter2_reg;
reg   [3:0] sub_ln224_reg_276_pp0_iter3_reg;
reg   [3:0] sub_ln224_reg_276_pp0_iter4_reg;
reg   [3:0] sub_ln224_reg_276_pp0_iter5_reg;
wire   [2:0] trunc_ln224_fu_99_p1;
reg   [2:0] trunc_ln224_reg_281;
wire   [3:0] sub_ln224_1_fu_103_p2;
reg   [3:0] sub_ln224_1_reg_287;
reg   [3:0] sub_ln224_1_reg_287_pp0_iter1_reg;
reg   [3:0] sub_ln224_1_reg_287_pp0_iter2_reg;
reg   [3:0] sub_ln224_1_reg_287_pp0_iter3_reg;
reg   [3:0] sub_ln224_1_reg_287_pp0_iter4_reg;
reg   [3:0] sub_ln224_1_reg_287_pp0_iter5_reg;
wire   [0:0] icmp_ln224_fu_109_p2;
reg   [0:0] icmp_ln224_reg_293;
reg   [0:0] icmp_ln224_reg_293_pp0_iter1_reg;
reg   [0:0] icmp_ln224_reg_293_pp0_iter2_reg;
reg   [0:0] icmp_ln224_reg_293_pp0_iter3_reg;
reg   [0:0] icmp_ln224_reg_293_pp0_iter4_reg;
reg   [0:0] icmp_ln224_reg_293_pp0_iter5_reg;
wire   [0:0] icmp_ln224_1_fu_115_p2;
reg   [0:0] icmp_ln224_1_reg_299;
reg   [0:0] icmp_ln224_1_reg_299_pp0_iter1_reg;
reg   [0:0] icmp_ln224_1_reg_299_pp0_iter2_reg;
reg   [0:0] icmp_ln224_1_reg_299_pp0_iter3_reg;
reg   [0:0] icmp_ln224_1_reg_299_pp0_iter4_reg;
reg   [0:0] icmp_ln224_1_reg_299_pp0_iter5_reg;
wire   [3:0] neg6_fu_121_p2;
reg   [3:0] neg6_reg_305;
wire   [32:0] ret_fu_190_p2;
reg  signed [32:0] ret_reg_315;
reg   [34:0] radiiDivisionList_load_reg_320;
reg   [31:0] trunc_ln1_reg_335;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln226_1_fu_179_p1;
wire   [3:0] k_cast_fu_89_p1;
wire   [3:0] i_cast_fu_85_p1;
wire   [3:0] j_cast_fu_81_p1;
wire   [2:0] neg_fu_127_p2;
wire   [2:0] abs_fu_132_p3;
wire   [3:0] tmp_1_fu_146_p3;
wire   [5:0] tmp_fu_138_p3;
wire   [5:0] zext_ln226_fu_154_p1;
wire   [3:0] abs8_fu_164_p3;
wire   [5:0] sub_ln226_fu_158_p2;
wire  signed [5:0] sext_ln226_fu_169_p1;
wire   [5:0] add_ln226_fu_173_p2;
wire  signed [32:0] sext_ln215_fu_184_p1;
wire  signed [32:0] sext_ln215_1_fu_187_p1;
wire   [34:0] grp_fu_202_p0;
wire   [63:0] grp_fu_202_p2;
wire   [0:0] tmp_2_fu_218_p3;
wire   [0:0] tmp_3_fu_230_p3;
wire   [0:0] and_ln224_fu_225_p2;
wire   [0:0] and_ln224_1_fu_237_p2;
wire   [0:0] or_ln224_fu_250_p2;
wire   [31:0] sub_ln69_fu_242_p2;
wire   [31:0] add_ln69_fu_246_p2;
reg    grp_fu_202_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to5;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] grp_fu_202_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

MPSQ_straightLineProjectorFromLayerIJtoK_radiiDivisionList #(
    .DataWidth( 35 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
radiiDivisionList_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(radiiDivisionList_address0),
    .ce0(radiiDivisionList_ce0),
    .q0(radiiDivisionList_q0)
);

MPSQ_mul_35ns_33s_64_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 35 ),
    .din1_WIDTH( 33 ),
    .dout_WIDTH( 64 ))
mul_35ns_33s_64_3_1_U316(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_202_p0),
    .din1(ret_reg_315),
    .ce(grp_fu_202_ce),
    .dout(grp_fu_202_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln224_1_reg_299 <= icmp_ln224_1_fu_115_p2;
        icmp_ln224_1_reg_299_pp0_iter1_reg <= icmp_ln224_1_reg_299;
        icmp_ln224_reg_293 <= icmp_ln224_fu_109_p2;
        icmp_ln224_reg_293_pp0_iter1_reg <= icmp_ln224_reg_293;
        neg6_reg_305 <= neg6_fu_121_p2;
        sub_ln224_1_reg_287 <= sub_ln224_1_fu_103_p2;
        sub_ln224_1_reg_287_pp0_iter1_reg <= sub_ln224_1_reg_287;
        sub_ln224_reg_276 <= sub_ln224_fu_93_p2;
        sub_ln224_reg_276_pp0_iter1_reg <= sub_ln224_reg_276;
        trunc_ln224_reg_281 <= trunc_ln224_fu_99_p1;
        z_i_read_reg_269 <= z_i;
        z_i_read_reg_269_pp0_iter1_reg <= z_i_read_reg_269;
        z_j_read_reg_264 <= z_j;
        z_j_read_reg_264_pp0_iter1_reg <= z_j_read_reg_264;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        icmp_ln224_1_reg_299_pp0_iter2_reg <= icmp_ln224_1_reg_299_pp0_iter1_reg;
        icmp_ln224_1_reg_299_pp0_iter3_reg <= icmp_ln224_1_reg_299_pp0_iter2_reg;
        icmp_ln224_1_reg_299_pp0_iter4_reg <= icmp_ln224_1_reg_299_pp0_iter3_reg;
        icmp_ln224_1_reg_299_pp0_iter5_reg <= icmp_ln224_1_reg_299_pp0_iter4_reg;
        icmp_ln224_reg_293_pp0_iter2_reg <= icmp_ln224_reg_293_pp0_iter1_reg;
        icmp_ln224_reg_293_pp0_iter3_reg <= icmp_ln224_reg_293_pp0_iter2_reg;
        icmp_ln224_reg_293_pp0_iter4_reg <= icmp_ln224_reg_293_pp0_iter3_reg;
        icmp_ln224_reg_293_pp0_iter5_reg <= icmp_ln224_reg_293_pp0_iter4_reg;
        radiiDivisionList_load_reg_320 <= radiiDivisionList_q0;
        ret_reg_315 <= ret_fu_190_p2;
        sub_ln224_1_reg_287_pp0_iter2_reg <= sub_ln224_1_reg_287_pp0_iter1_reg;
        sub_ln224_1_reg_287_pp0_iter3_reg <= sub_ln224_1_reg_287_pp0_iter2_reg;
        sub_ln224_1_reg_287_pp0_iter4_reg <= sub_ln224_1_reg_287_pp0_iter3_reg;
        sub_ln224_1_reg_287_pp0_iter5_reg <= sub_ln224_1_reg_287_pp0_iter4_reg;
        sub_ln224_reg_276_pp0_iter2_reg <= sub_ln224_reg_276_pp0_iter1_reg;
        sub_ln224_reg_276_pp0_iter3_reg <= sub_ln224_reg_276_pp0_iter2_reg;
        sub_ln224_reg_276_pp0_iter4_reg <= sub_ln224_reg_276_pp0_iter3_reg;
        sub_ln224_reg_276_pp0_iter5_reg <= sub_ln224_reg_276_pp0_iter4_reg;
        trunc_ln1_reg_335 <= {{grp_fu_202_p2[63:32]}};
        z_i_read_reg_269_pp0_iter2_reg <= z_i_read_reg_269_pp0_iter1_reg;
        z_i_read_reg_269_pp0_iter3_reg <= z_i_read_reg_269_pp0_iter2_reg;
        z_i_read_reg_269_pp0_iter4_reg <= z_i_read_reg_269_pp0_iter3_reg;
        z_i_read_reg_269_pp0_iter5_reg <= z_i_read_reg_269_pp0_iter4_reg;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to5 = 1'b1;
    end else begin
        ap_idle_pp0_0to5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to5 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_202_ce = 1'b1;
    end else begin
        grp_fu_202_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        radiiDivisionList_ce0 = 1'b1;
    end else begin
        radiiDivisionList_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs8_fu_164_p3 = ((icmp_ln224_reg_293[0:0] == 1'b1) ? sub_ln224_1_reg_287 : neg6_reg_305);

assign abs_fu_132_p3 = ((icmp_ln224_1_reg_299[0:0] == 1'b1) ? trunc_ln224_reg_281 : neg_fu_127_p2);

assign add_ln226_fu_173_p2 = ($signed(sub_ln226_fu_158_p2) + $signed(sext_ln226_fu_169_p1));

assign add_ln69_fu_246_p2 = ($signed(trunc_ln1_reg_335) + $signed(z_i_read_reg_269_pp0_iter5_reg));

assign and_ln224_1_fu_237_p2 = (tmp_3_fu_230_p3 & icmp_ln224_1_reg_299_pp0_iter5_reg);

assign and_ln224_fu_225_p2 = (tmp_2_fu_218_p3 & icmp_ln224_reg_293_pp0_iter5_reg);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln224_fu_250_p2[0:0] == 1'b1) ? sub_ln69_fu_242_p2 : add_ln69_fu_246_p2);

assign grp_fu_202_p0 = grp_fu_202_p00;

assign grp_fu_202_p00 = radiiDivisionList_load_reg_320;

assign i_cast_fu_85_p1 = i;

assign icmp_ln224_1_fu_115_p2 = (($signed(sub_ln224_fu_93_p2) > $signed(4'd0)) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_109_p2 = (($signed(sub_ln224_1_fu_103_p2) > $signed(4'd0)) ? 1'b1 : 1'b0);

assign j_cast_fu_81_p1 = j;

assign k_cast_fu_89_p1 = k;

assign neg6_fu_121_p2 = (4'd0 - sub_ln224_1_fu_103_p2);

assign neg_fu_127_p2 = (3'd0 - trunc_ln224_reg_281);

assign or_ln224_fu_250_p2 = (and_ln224_fu_225_p2 | and_ln224_1_fu_237_p2);

assign radiiDivisionList_address0 = zext_ln226_1_fu_179_p1;

assign ret_fu_190_p2 = ($signed(sext_ln215_fu_184_p1) - $signed(sext_ln215_1_fu_187_p1));

assign sext_ln215_1_fu_187_p1 = z_i_read_reg_269_pp0_iter1_reg;

assign sext_ln215_fu_184_p1 = $signed(z_j_read_reg_264_pp0_iter1_reg);

assign sext_ln226_fu_169_p1 = $signed(abs8_fu_164_p3);

assign sub_ln224_1_fu_103_p2 = (j_cast_fu_81_p1 - i_cast_fu_85_p1);

assign sub_ln224_fu_93_p2 = (k_cast_fu_89_p1 - i_cast_fu_85_p1);

assign sub_ln226_fu_158_p2 = (tmp_fu_138_p3 - zext_ln226_fu_154_p1);

assign sub_ln69_fu_242_p2 = ($signed(z_i_read_reg_269_pp0_iter5_reg) - $signed(trunc_ln1_reg_335));

assign tmp_1_fu_146_p3 = {{abs_fu_132_p3}, {1'd0}};

assign tmp_2_fu_218_p3 = sub_ln224_reg_276_pp0_iter5_reg[32'd3];

assign tmp_3_fu_230_p3 = sub_ln224_1_reg_287_pp0_iter5_reg[32'd3];

assign tmp_fu_138_p3 = {{abs_fu_132_p3}, {3'd0}};

assign trunc_ln224_fu_99_p1 = sub_ln224_fu_93_p2[2:0];

assign zext_ln226_1_fu_179_p1 = add_ln226_fu_173_p2;

assign zext_ln226_fu_154_p1 = tmp_1_fu_146_p3;

endmodule //MPSQ_straightLineProjectorFromLayerIJtoK
