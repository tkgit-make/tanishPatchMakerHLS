-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity makePatches_ShadowQuilt_fromEdges is
port (
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stop : IN STD_LOGIC_VECTOR (31 downto 0);
    ppl : IN STD_LOGIC_VECTOR (31 downto 0);
    leftRight : IN STD_LOGIC;
    n_patches : OUT STD_LOGIC_VECTOR (31 downto 0);
    n_patches_ap_vld : OUT STD_LOGIC;
    GDarray_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    GDarray_ce0 : OUT STD_LOGIC;
    GDarray_we0 : OUT STD_LOGIC;
    GDarray_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    GDarray_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    GDarray_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    GDarray_ce1 : OUT STD_LOGIC;
    GDarray_we1 : OUT STD_LOGIC;
    GDarray_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    GDarray_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    GDn_points_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    GDn_points_ce0 : OUT STD_LOGIC;
    GDn_points_we0 : OUT STD_LOGIC;
    GDn_points_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    GDn_points_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    GDn_points_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    GDn_points_ce1 : OUT STD_LOGIC;
    GDn_points_we1 : OUT STD_LOGIC;
    GDn_points_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    GDn_points_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    patches_superpoints_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    patches_superpoints_ce0 : OUT STD_LOGIC;
    patches_superpoints_we0 : OUT STD_LOGIC;
    patches_superpoints_d0 : OUT STD_LOGIC_VECTOR (1023 downto 0);
    patches_superpoints_q0 : IN STD_LOGIC_VECTOR (1023 downto 0);
    patches_superpoints_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    patches_superpoints_ce1 : OUT STD_LOGIC;
    patches_superpoints_we1 : OUT STD_LOGIC;
    patches_superpoints_d1 : OUT STD_LOGIC_VECTOR (1023 downto 0);
    patches_superpoints_q1 : IN STD_LOGIC_VECTOR (1023 downto 0) );
end;


architecture behav of makePatches_ShadowQuilt_fromEdges is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "makePatches_ShadowQuilt_fromEdges_makePatches_ShadowQuilt_fromEdges,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu19p-fsvb3824-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1024_lc_1 : STD_LOGIC_VECTOR (1023 downto
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_ce_reg : STD_LOGIC;


begin



    GDarray_address0 <= ap_const_lv10_0;
    GDarray_address1 <= ap_const_lv10_0;
    GDarray_ce0 <= ap_const_logic_0;
    GDarray_ce1 <= ap_const_logic_0;
    GDarray_d0 <= ap_const_lv64_0;
    GDarray_d1 <= ap_const_lv64_0;
    GDarray_we0 <= ap_const_logic_0;
    GDarray_we1 <= ap_const_logic_0;
    GDn_points_address0 <= ap_const_lv3_0;
    GDn_points_address1 <= ap_const_lv3_0;
    GDn_points_ce0 <= ap_const_logic_0;
    GDn_points_ce1 <= ap_const_logic_0;
    GDn_points_d0 <= ap_const_lv32_0;
    GDn_points_d1 <= ap_const_lv32_0;
    GDn_points_we0 <= ap_const_logic_0;
    GDn_points_we1 <= ap_const_logic_0;
    ap_done <= ap_start;
    ap_idle <= ap_const_logic_1;
    ap_ready <= ap_start;
    n_patches <= ap_const_lv32_1;

    n_patches_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            n_patches_ap_vld <= ap_const_logic_1;
        else 
            n_patches_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    patches_superpoints_address0 <= ap_const_lv8_0;
    patches_superpoints_address1 <= ap_const_lv8_0;
    patches_superpoints_ce0 <= ap_const_logic_0;
    patches_superpoints_ce1 <= ap_const_logic_0;
    patches_superpoints_d0 <= ap_const_lv1024_lc_1;
    patches_superpoints_d1 <= ap_const_lv1024_lc_1;
    patches_superpoints_we0 <= ap_const_logic_0;
    patches_superpoints_we1 <= ap_const_logic_0;
end behav;
