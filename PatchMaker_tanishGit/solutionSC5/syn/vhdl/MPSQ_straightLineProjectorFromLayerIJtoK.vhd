-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MPSQ_straightLineProjectorFromLayerIJtoK is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    z_i : IN STD_LOGIC_VECTOR (31 downto 0);
    z_j : IN STD_LOGIC_VECTOR (31 downto 0);
    i : IN STD_LOGIC_VECTOR (2 downto 0);
    j : IN STD_LOGIC_VECTOR (2 downto 0);
    k : IN STD_LOGIC_VECTOR (2 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MPSQ_straightLineProjectorFromLayerIJtoK is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal radiiDivisionList_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal radiiDivisionList_ce0 : STD_LOGIC;
    signal radiiDivisionList_q0 : STD_LOGIC_VECTOR (34 downto 0);
    signal sub_ln224_fu_93_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln224_reg_266 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln224_fu_99_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln224_reg_271 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln224_1_fu_103_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln224_1_reg_277 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln224_fu_109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_reg_283 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_1_fu_115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_1_reg_289 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg6_fu_121_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal neg6_reg_295 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ret_fu_192_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_reg_311 : STD_LOGIC_VECTOR (32 downto 0);
    signal radiiDivisionList_load_reg_316 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln1_reg_331 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln226_1_fu_179_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_cast_fu_89_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_cast_fu_85_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_cast_fu_81_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal neg_fu_127_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal abs_fu_132_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_146_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_138_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln226_fu_154_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal abs8_fu_164_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln226_fu_158_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln226_fu_169_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln226_fu_173_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln215_1_fu_188_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln215_fu_184_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln215_1_fu_188_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_204_p0 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_204_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_2_fu_220_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_232_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln69_fu_244_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_fu_248_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln224_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln224_1_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln224_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln69_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_fu_248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_204_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component MPSQ_mul_35ns_33s_64_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (34 downto 0);
        din1 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MPSQ_straightLineProjectorFromLayerIJtoK_radiiDivisionList IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;



begin
    radiiDivisionList_U : component MPSQ_straightLineProjectorFromLayerIJtoK_radiiDivisionList
    generic map (
        DataWidth => 35,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => radiiDivisionList_address0,
        ce0 => radiiDivisionList_ce0,
        q0 => radiiDivisionList_q0);

    mul_35ns_33s_64_3_1_U316 : component MPSQ_mul_35ns_33s_64_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 35,
        din1_WIDTH => 33,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_204_p0,
        din1 => ret_reg_311,
        ce => ap_const_logic_1,
        dout => grp_fu_204_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln224_1_reg_289 <= icmp_ln224_1_fu_115_p2;
                icmp_ln224_reg_283 <= icmp_ln224_fu_109_p2;
                neg6_reg_295 <= neg6_fu_121_p2;
                sub_ln224_1_reg_277 <= sub_ln224_1_fu_103_p2;
                sub_ln224_reg_266 <= sub_ln224_fu_93_p2;
                trunc_ln224_reg_271 <= trunc_ln224_fu_99_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                radiiDivisionList_load_reg_316 <= radiiDivisionList_q0;
                ret_reg_311 <= ret_fu_192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                trunc_ln1_reg_331 <= grp_fu_204_p2(63 downto 32);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    abs8_fu_164_p3 <= 
        sub_ln224_1_reg_277 when (icmp_ln224_reg_283(0) = '1') else 
        neg6_reg_295;
    abs_fu_132_p3 <= 
        trunc_ln224_reg_271 when (icmp_ln224_1_reg_289(0) = '1') else 
        neg_fu_127_p2;
    add_ln226_fu_173_p2 <= std_logic_vector(unsigned(sub_ln226_fu_158_p2) + unsigned(sext_ln226_fu_169_p1));
    add_ln69_fu_248_p1 <= z_i;
    add_ln69_fu_248_p2 <= std_logic_vector(unsigned(trunc_ln1_reg_331) + unsigned(add_ln69_fu_248_p1));
    and_ln224_1_fu_239_p2 <= (tmp_3_fu_232_p3 and icmp_ln224_1_reg_289);
    and_ln224_fu_227_p2 <= (tmp_2_fu_220_p3 and icmp_ln224_reg_283);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        sub_ln69_fu_244_p2 when (or_ln224_fu_252_p2(0) = '1') else 
        add_ln69_fu_248_p2;
    grp_fu_204_p0 <= grp_fu_204_p00(35 - 1 downto 0);
    grp_fu_204_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(radiiDivisionList_load_reg_316),64));
    i_cast_fu_85_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i),4));
    icmp_ln224_1_fu_115_p2 <= "1" when (signed(sub_ln224_fu_93_p2) > signed(ap_const_lv4_0)) else "0";
    icmp_ln224_fu_109_p2 <= "1" when (signed(sub_ln224_1_fu_103_p2) > signed(ap_const_lv4_0)) else "0";
    j_cast_fu_81_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j),4));
    k_cast_fu_89_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k),4));
    neg6_fu_121_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(sub_ln224_1_fu_103_p2));
    neg_fu_127_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(trunc_ln224_reg_271));
    or_ln224_fu_252_p2 <= (and_ln224_fu_227_p2 or and_ln224_1_fu_239_p2);
    radiiDivisionList_address0 <= zext_ln226_1_fu_179_p1(6 - 1 downto 0);

    radiiDivisionList_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            radiiDivisionList_ce0 <= ap_const_logic_1;
        else 
            radiiDivisionList_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_fu_192_p2 <= std_logic_vector(signed(sext_ln215_fu_184_p1) - signed(sext_ln215_1_fu_188_p1));
    sext_ln215_1_fu_188_p0 <= z_i;
        sext_ln215_1_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln215_1_fu_188_p0),33));

        sext_ln215_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(z_j),33));

        sext_ln226_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(abs8_fu_164_p3),6));

    sub_ln224_1_fu_103_p2 <= std_logic_vector(unsigned(j_cast_fu_81_p1) - unsigned(i_cast_fu_85_p1));
    sub_ln224_fu_93_p2 <= std_logic_vector(unsigned(k_cast_fu_89_p1) - unsigned(i_cast_fu_85_p1));
    sub_ln226_fu_158_p2 <= std_logic_vector(unsigned(tmp_fu_138_p3) - unsigned(zext_ln226_fu_154_p1));
    sub_ln69_fu_244_p0 <= z_i;
    sub_ln69_fu_244_p2 <= std_logic_vector(signed(sub_ln69_fu_244_p0) - signed(trunc_ln1_reg_331));
    tmp_1_fu_146_p3 <= (abs_fu_132_p3 & ap_const_lv1_0);
    tmp_2_fu_220_p3 <= sub_ln224_reg_266(3 downto 3);
    tmp_3_fu_232_p3 <= sub_ln224_1_reg_277(3 downto 3);
    tmp_fu_138_p3 <= (abs_fu_132_p3 & ap_const_lv3_0);
    trunc_ln224_fu_99_p1 <= sub_ln224_fu_93_p2(3 - 1 downto 0);
    zext_ln226_1_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln226_fu_173_p2),64));
    zext_ln226_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_146_p3),6));
end behav;
